{"version":3,"file":"gw-dig.min.js","sources":["../js/site.js","../js/room.js","../js/hall.js","../js/lake.js","../js/stairs.js","../js/dig.js"],"sourcesContent":["import * as GW from 'gw-utils';\nexport const NOTHING = 0;\nexport const FLOOR = 1;\nexport const DOOR = 2;\nexport const WALL = 3;\nexport const LAKE = 4;\nexport const BRIDGE = 5;\nexport const UP_STAIRS = 6;\nexport const DOWN_STAIRS = 7;\nexport const SHALLOW = 8;\nexport function fillCostGrid(source, costGrid) {\n    source.forEach((_v, x, y) => {\n        costGrid[x][y] = isPassable(source, x, y) ? 1 : GW.path.OBSTRUCTION;\n    });\n}\nexport function isPassable(grid, x, y) {\n    const v = grid.get(x, y);\n    return (v === FLOOR ||\n        v === DOOR ||\n        v === BRIDGE ||\n        v === UP_STAIRS ||\n        v === DOWN_STAIRS ||\n        v === SHALLOW);\n}\nexport function isFloor(grid, x, y) {\n    return grid.get(x, y) == FLOOR;\n}\nexport function isDoor(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === DOOR;\n}\nexport function isObstruction(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === NOTHING || v === WALL;\n}\nexport function isStairs(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === UP_STAIRS || v === DOWN_STAIRS;\n}\nexport function isLake(grid, x, y) {\n    return grid.get(x, y) === LAKE;\n}\nexport function isAnyWater(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === LAKE || v === SHALLOW;\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GW.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room {\n    constructor(digger, x, y, width, height) {\n        this.doors = [];\n        this.hall = null;\n        this.digger = digger;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\nexport var rooms = {};\nexport function install(id, fn, config) {\n    // @ts-ignore\n    const data = fn(config || {}); // call to have function setup the config\n    data.fn = fn;\n    data.id = id;\n    rooms[id] = data;\n    return data;\n}\ninstall('DEFAULT', rectangular);\nexport function checkConfig(config, expected) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                return GW.utils.ERROR('Missing required config for digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GW.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport function cavern(config, grid) {\n    config = checkConfig(config, { width: 12, height: 8 });\n    if (!grid)\n        return config;\n    let destX, destY;\n    let blobGrid;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || SITE.FLOOR;\n    blobGrid = GW.grid.alloc(grid.width, grid.height, 0);\n    const minWidth = Math.floor(0.5 * width); // 6\n    const maxWidth = width;\n    const minHeight = Math.floor(0.5 * height); // 4\n    const maxHeight = height;\n    grid.fill(0);\n    const bounds = blobGrid.fillBlob(5, minWidth, minHeight, maxWidth, maxHeight, 55, 'ffffffttt', 'ffffttttt');\n    // Position the new cave in the middle of the grid...\n    destX = Math.floor((grid.width - bounds.width) / 2);\n    destY = Math.floor((grid.height - bounds.height) / 2);\n    // ...and copy it to the master grid.\n    GW.grid.offsetZip(grid, blobGrid, destX - bounds.x, destY - bounds.y, tile);\n    GW.grid.free(blobGrid);\n    return new Room(config.id, destX, destY, bounds.width, bounds.height);\n}\nexport function choiceRoom(config, grid) {\n    config = config || {};\n    let choices;\n    if (Array.isArray(config.choices)) {\n        choices = GW.random.item.bind(GW.random, config.choices);\n    }\n    else if (typeof config.choices == 'object') {\n        choices = GW.random.weighted.bind(GW.random, config.choices);\n    }\n    else {\n        GW.utils.ERROR('Expected choices to be either array of room ids or map - ex: { ROOM_ID: weight }');\n    }\n    if (!grid)\n        return config;\n    let id = choices();\n    const digger = rooms[id];\n    if (!digger) {\n        GW.utils.ERROR('Missing digger choice: ' + id);\n    }\n    let digConfig = digger;\n    if (config.opts) {\n        digConfig = Object.assign({}, digger, config.opts);\n    }\n    // debug('Chose room: ', id);\n    return digger.fn(digConfig, grid);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport function entrance(config, grid) {\n    config = checkConfig(config, { width: 20, height: 10 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || SITE.FLOOR;\n    const roomWidth = Math.floor(0.4 * width); // 8\n    const roomHeight = height;\n    const roomWidth2 = width;\n    const roomHeight2 = Math.floor(0.5 * height); // 5\n    // ALWAYS start at bottom+center of map\n    const roomX = Math.floor(grid.width / 2 - roomWidth / 2 - 1);\n    const roomY = grid.height - roomHeight - 2;\n    const roomX2 = Math.floor(grid.width / 2 - roomWidth2 / 2 - 1);\n    const roomY2 = grid.height - roomHeight2 - 2;\n    grid.fill(0);\n    grid.fillRect(roomX, roomY, roomWidth, roomHeight, tile);\n    grid.fillRect(roomX2, roomY2, roomWidth2, roomHeight2, tile);\n    return new Room(config.id, Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n}\nexport function cross(config, grid) {\n    config = checkConfig(config, { width: 12, height: 20 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || SITE.FLOOR;\n    const roomWidth = width;\n    const roomWidth2 = Math.max(3, Math.floor((width * GW.random.range(25, 75)) / 100)); // [4,20]\n    const roomHeight = Math.max(3, Math.floor((height * GW.random.range(25, 75)) / 100)); // [2,5]\n    const roomHeight2 = height;\n    const roomX = Math.floor((grid.width - roomWidth) / 2);\n    const roomX2 = roomX + GW.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n    const roomY2 = Math.floor((grid.height - roomHeight2) / 2);\n    const roomY = roomY2 + GW.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n    grid.fill(0);\n    grid.fillRect(roomX, roomY, roomWidth, roomHeight, tile);\n    grid.fillRect(roomX2, roomY2, roomWidth2, roomHeight2, tile);\n    return new Room(config.id, roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n}\nexport function symmetricalCross(config, grid) {\n    config = checkConfig(config, { width: 7, height: 7 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || SITE.FLOOR;\n    let minorWidth = Math.max(3, Math.floor((width * GW.random.range(25, 50)) / 100)); // [2,4]\n    // if (height % 2 == 0 && minorWidth > 2) {\n    //     minorWidth -= 1;\n    // }\n    let minorHeight = Math.max(3, Math.floor((height * GW.random.range(25, 50)) / 100)); // [2,3]?\n    // if (width % 2 == 0 && minorHeight > 2) {\n    //     minorHeight -= 1;\n    // }\n    grid.fill(0);\n    const x = Math.floor((grid.width - width) / 2);\n    const y = Math.floor((grid.height - minorHeight) / 2);\n    grid.fillRect(x, y, width, minorHeight, tile);\n    const x2 = Math.floor((grid.width - minorWidth) / 2);\n    const y2 = Math.floor((grid.height - height) / 2);\n    grid.fillRect(x2, y2, minorWidth, height, tile);\n    return new Room(config.id, Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n}\nexport function rectangular(config, grid) {\n    config = checkConfig(config, { width: [3, 6], height: [3, 6] });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || SITE.FLOOR;\n    grid.fill(0);\n    const x = Math.floor((grid.width - width) / 2);\n    const y = Math.floor((grid.height - height) / 2);\n    grid.fillRect(x, y, width, height, tile);\n    return new Room(config.id, x, y, width, height);\n}\nexport function circular(config, grid) {\n    config = checkConfig(config, { radius: [3, 4] });\n    if (!grid)\n        return config;\n    const radius = config.radius.value();\n    const tile = config.tile || SITE.FLOOR;\n    grid.fill(0);\n    const x = Math.floor(grid.width / 2);\n    const y = Math.floor(grid.height / 2);\n    if (radius > 1) {\n        grid.fillCircle(x, y, radius, tile);\n    }\n    return new Room(config.id, x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n}\nexport function brogueDonut(config, grid) {\n    config = checkConfig(config, {\n        radius: [5, 10],\n        ringMinWidth: 3,\n        holeMinSize: 3,\n        holeChance: 50,\n    });\n    if (!grid)\n        return config;\n    const radius = config.radius.value();\n    const ringMinWidth = config.ringMinWidth.value();\n    const holeMinSize = config.holeMinSize.value();\n    const tile = config.tile || SITE.FLOOR;\n    grid.fill(0);\n    const x = Math.floor(grid.width / 2);\n    const y = Math.floor(grid.height / 2);\n    grid.fillCircle(x, y, radius, tile);\n    if (radius > ringMinWidth + holeMinSize &&\n        GW.random.chance(config.holeChance.value())) {\n        grid.fillCircle(x, y, GW.random.range(holeMinSize, radius - holeMinSize), 0);\n    }\n    return new Room(config.id, x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n}\nexport function chunkyRoom(config, grid) {\n    config = checkConfig(config, {\n        count: [2, 12],\n        width: [5, 20],\n        height: [5, 20],\n    });\n    if (!grid)\n        return config;\n    let i, x, y;\n    let minX, maxX, minY, maxY;\n    let chunkCount = config.count.value();\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || SITE.FLOOR;\n    minX = Math.floor(grid.width / 2) - Math.floor(width / 2);\n    maxX = Math.floor(grid.width / 2) + Math.floor(width / 2);\n    minY = Math.floor(grid.height / 2) - Math.floor(height / 2);\n    maxY = Math.floor(grid.height / 2) + Math.floor(height / 2);\n    grid.fill(0);\n    grid.fillCircle(Math.floor(grid.width / 2), Math.floor(grid.height / 2), 2, tile);\n    for (i = 0; i < chunkCount;) {\n        x = GW.random.range(minX, maxX);\n        y = GW.random.range(minY, maxY);\n        if (grid[x][y]) {\n            //            colorOverDungeon(/* Color. */darkGray);\n            //            hiliteGrid(grid, /* Color. */white, 100);\n            if (x - 2 < minX)\n                continue;\n            if (x + 2 > maxX)\n                continue;\n            if (y - 2 < minY)\n                continue;\n            if (y + 2 > maxY)\n                continue;\n            grid.fillCircle(x, y, 2, tile);\n            i++;\n            //            hiliteGrid(grid, /* Color. */green, 50);\n            //            temporaryMessage(\"Added a chunk:\", true);\n        }\n    }\n    const bounds = grid.valueBounds(tile);\n    return new Room(config.id, bounds.x, bounds.y, bounds.width, bounds.height);\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport { Hall } from './room';\nconst DIRS = GW.utils.DIRS;\nexport var halls = {};\nexport function install(id, fn, config = {}) {\n    // @ts-ignore\n    const data = fn(config || {}); // call to have function setup the config\n    data.fn = fn;\n    data.id = id;\n    halls[id] = data;\n    return data;\n}\ninstall('DEFAULT', dig, { chance: 15 });\nexport function pickWidth(opts = {}) {\n    return GW.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GW.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GW.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GW.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLengthRange(dir, opts) {\n    if (!opts.length)\n        opts.length = [];\n    if (Array.isArray(opts.length)) {\n        if (dir == GW.utils.UP || dir == GW.utils.DOWN) {\n            return GW.range.make(opts.length[1] || [2, 9]);\n        }\n        else {\n            return GW.range.make(opts.length[0] || [9, 15]);\n        }\n    }\n    else {\n        return GW.range.make(opts.length);\n    }\n}\nexport function pickHallDirection(grid, room, opts) {\n    const doors = room.doors;\n    // Pick a direction.\n    let dir = opts.dir || GW.utils.NO_DIRECTION;\n    if (dir == GW.utils.NO_DIRECTION) {\n        const dirs = GW.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = pickLengthRange(dir, opts).hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (grid.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GW.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(grid, x, y, dir, opts) {\n    let newX, newY;\n    const obliqueChance = GW.utils.firstOpt('obliqueChance', opts, 15);\n    const allowObliqueHallwayExit = GW.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !grid.hasXY(newX, newY) ||\n            grid[newX][newY]) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport function digWide(opts, grid, room) {\n    opts = opts || {};\n    if (!opts.width) {\n        opts.width = 2;\n    }\n    if (!grid) {\n        return opts;\n    }\n    const dir = pickHallDirection(grid, room, opts);\n    if (dir === GW.utils.NO_DIRECTION)\n        return null;\n    const length = pickLengthRange(dir, opts).value();\n    const width = pickWidth(opts) || 2;\n    const door = room.doors[dir];\n    const tile = opts.tile || SITE.FLOOR;\n    const hallDoors = [];\n    let x0, y0;\n    let hall;\n    if (dir === GW.utils.UP) {\n        x0 = GW.utils.clamp(door[0], room.x, room.x + room.width - width);\n        y0 = door[1] - length + 1;\n        for (let x = x0; x < x0 + width; ++x) {\n            for (let y = y0; y < y0 + length; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0, y0 - 1];\n        hall = new Hall([x0, door[1]], dir, length, 2);\n    }\n    else if (dir === GW.utils.DOWN) {\n        x0 = GW.utils.clamp(door[0], room.x, room.x + room.width - width);\n        y0 = door[1] + length - 1;\n        for (let x = x0; x < x0 + width; ++x) {\n            for (let y = y0; y > y0 - length; --y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0, y0 + 1];\n        hall = new Hall([x0, door[1]], dir, length, 2);\n    }\n    else if (dir === GW.utils.LEFT) {\n        x0 = door[0] - length + 1;\n        y0 = GW.utils.clamp(door[1], room.y, room.y + room.height - width);\n        for (let x = x0; x < x0 + length; ++x) {\n            for (let y = y0; y < y0 + width; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0 - 1, y0];\n        hall = new Hall([door[0], y0], dir, length, 2);\n    }\n    else {\n        //if (dir === GW.utils.RIGHT) {\n        x0 = door[0] + length - 1;\n        y0 = GW.utils.clamp(door[1], room.y, room.y + room.height - width);\n        for (let x = x0; x > x0 - length; --x) {\n            for (let y = y0; y < y0 + width; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0 + 1, y0];\n        hall = new Hall([door[0], y0], dir, length, width);\n    }\n    hall.doors = hallDoors;\n    hall.width = width;\n    return hall;\n}\nexport function dig(opts, grid, room) {\n    opts = opts || {};\n    opts.width = 1;\n    if (!grid) {\n        return opts;\n    }\n    const dir = pickHallDirection(grid, room, opts);\n    if (dir === GW.utils.NO_DIRECTION)\n        return null;\n    const length = pickLengthRange(dir, opts).value();\n    const door = room.doors[dir];\n    const DIR = DIRS[dir];\n    let x = door[0];\n    let y = door[1];\n    const tile = opts.tile || SITE.FLOOR;\n    for (let i = 0; i < length; i++) {\n        grid[x][y] = tile;\n        x += DIR[0];\n        y += DIR[1];\n    }\n    x -= DIR[0];\n    y -= DIR[1];\n    const hall = new Hall(door, dir, length);\n    hall.doors = pickHallExits(grid, x, y, dir, opts);\n    return hall;\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport function digLakes(map, opts = {}) {\n    let i, j, k;\n    let x, y;\n    let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n    let count = 0;\n    lakeMaxHeight = opts.height || 15; // TODO - Make this a range \"5-15\"\n    lakeMaxWidth = opts.width || 30; // TODO - Make this a range \"5-30\"\n    lakeMinSize = opts.minSize || 5;\n    tries = opts.tries || 20;\n    maxCount = opts.count || 1;\n    canDisrupt = opts.canDisrupt || false;\n    const wreath = opts.wreath || 0; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n    const wreathTile = opts.wreathTile || SITE.SHALLOW;\n    const tile = opts.tile || SITE.LAKE;\n    const lakeGrid = GW.grid.alloc(map.width, map.height, 0);\n    let attempts = 0;\n    while (attempts < maxCount && count < maxCount) {\n        // lake generations\n        const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n            maxCount) + lakeMinSize;\n        const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n            maxCount) + lakeMinSize;\n        lakeGrid.fill(SITE.NOTHING);\n        const bounds = lakeGrid.fillBlob(5, 4, 4, width, height, 55, 'ffffftttt', 'ffffttttt');\n        // lakeGrid.dump();\n        let success = false;\n        for (k = 0; k < tries && !success; k++) {\n            // placement attempts\n            // propose a position for the top-left of the lakeGrid in the dungeon\n            x = GW.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n            y = GW.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n            if (canDisrupt || !lakeDisruptsPassability(map, lakeGrid, -x, -y)) {\n                // level with lake is completely connected\n                //   dungeon.debug(\"Placed a lake!\", x, y);\n                success = true;\n                // copy in lake\n                for (i = 0; i < bounds.width; i++) {\n                    // skip boundary\n                    for (j = 0; j < bounds.height; j++) {\n                        // skip boundary\n                        if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                            const sx = i + bounds.x + x;\n                            const sy = j + bounds.y + y;\n                            map[sx][sy] = tile;\n                            if (wreath) {\n                                map.forCircle(sx, sy, wreath, (v, i, j) => {\n                                    if (v === SITE.FLOOR || v === SITE.DOOR) {\n                                        map[i][j] = wreathTile;\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n        }\n        if (success) {\n            ++count;\n        }\n        else {\n            ++attempts;\n        }\n    }\n    GW.grid.free(lakeGrid);\n    return count;\n}\nfunction lakeDisruptsPassability(map, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n    const walkableGrid = GW.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    map.forEach((v, i, j) => {\n        const lakeX = i + lakeToMapX;\n        const lakeY = j + lakeToMapY;\n        if (!v) {\n            return; // not walkable\n        }\n        else if (SITE.isStairs(map, i, j)) {\n            if (lakeGrid.get(lakeX, lakeY)) {\n                disrupts = true;\n            }\n            else {\n                walkableGrid[i][j] = 1;\n            }\n        }\n        else if (SITE.isPassable(map, i, j)) {\n            if (lakeGrid.get(lakeX, lakeY))\n                return;\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GW.grid.free(walkableGrid);\n    return disrupts;\n}\nfunction isBridgeCandidate(map, x, y, bridgeDir) {\n    if (map.get(x, y) === SITE.BRIDGE)\n        return true;\n    if (!SITE.isAnyWater(map, x, y))\n        return false;\n    if (!SITE.isAnyWater(map, x + bridgeDir[1], y + bridgeDir[0]))\n        return false;\n    if (!SITE.isAnyWater(map, x - bridgeDir[1], y - bridgeDir[0]))\n        return false;\n    return true;\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digBridges(map, minimumPathingDistance, maxConnectionLength) {\n    let newX, newY;\n    let i, j, d, x, y;\n    maxConnectionLength = maxConnectionLength || 1; // by default only break walls down\n    const siteGrid = map;\n    const pathGrid = GW.grid.alloc(map.width, map.height);\n    const costGrid = GW.grid.alloc(map.width, map.height);\n    const dirCoords = [\n        [1, 0],\n        [0, 1],\n    ];\n    SITE.fillCostGrid(map, costGrid);\n    const SEQ = GW.random.sequence(map.width * map.height);\n    for (i = 0; i < SEQ.length; i++) {\n        x = Math.floor(SEQ[i] / siteGrid.height);\n        y = SEQ[i] % siteGrid.height;\n        if (map.hasXY(x, y) &&\n            map.get(x, y) &&\n            SITE.isPassable(map, x, y) &&\n            !SITE.isAnyWater(map, x, y)) {\n            for (d = 0; d <= 1; d++) {\n                // Try right, then down\n                const bridgeDir = dirCoords[d];\n                newX = x + bridgeDir[0];\n                newY = y + bridgeDir[1];\n                j = maxConnectionLength;\n                if (!map.hasXY(newX, newY))\n                    continue;\n                // check for line of lake tiles\n                // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                if (SITE.isAnyWater(map, newX, newY)) {\n                    for (j = 0; j < maxConnectionLength; ++j) {\n                        newX += bridgeDir[0];\n                        newY += bridgeDir[1];\n                        // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                        if (!SITE.isAnyWater(map, newX, newY)) {\n                            break;\n                        }\n                    }\n                }\n                if (map.get(newX, newY) &&\n                    SITE.isPassable(map, newX, newY) &&\n                    j < maxConnectionLength) {\n                    GW.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                    // pathGrid.fill(30000);\n                    // pathGrid[newX][newY] = 0;\n                    // dijkstraScan(pathGrid, costGrid, false);\n                    if (pathGrid[x][y] > minimumPathingDistance &&\n                        pathGrid[x][y] < GW.path.NO_PATH) {\n                        // and if the pathing distance between the two flanking floor tiles exceeds minimumPathingDistance,\n                        // dungeon.debug(\n                        //     'Adding Bridge',\n                        //     x,\n                        //     y,\n                        //     ' => ',\n                        //     newX,\n                        //     newY\n                        // );\n                        while (x !== newX || y !== newY) {\n                            if (isBridgeCandidate(map, x, y, bridgeDir)) {\n                                map[x][y] = SITE.BRIDGE;\n                                costGrid[x][y] = 1; // (Cost map also needs updating.)\n                            }\n                            else {\n                                map[x][y] = SITE.FLOOR;\n                                costGrid[x][y] = 1;\n                            }\n                            x += bridgeDir[0];\n                            y += bridgeDir[1];\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    GW.grid.free(pathGrid);\n    GW.grid.free(costGrid);\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport function isValidStairLoc(_v, x, y, map) {\n    let count = 0;\n    if (!SITE.isObstruction(map, x, y))\n        return false;\n    for (let i = 0; i < 4; ++i) {\n        const dir = GW.utils.DIRS[i];\n        if (!map.hasXY(x + dir[0], y + dir[1]))\n            return false;\n        if (!map.hasXY(x - dir[0], y - dir[1]))\n            return false;\n        if (SITE.isFloor(map, x + dir[0], y + dir[1])) {\n            count += 1;\n            if (!SITE.isObstruction(map, x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                return false;\n            if (!SITE.isObstruction(map, x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                return false;\n        }\n        else if (!SITE.isObstruction(map, x + dir[0], y + dir[1])) {\n            return false;\n        }\n    }\n    return count == 1;\n}\nexport function setupStairs(map, x, y, tile) {\n    const indexes = GW.random.sequence(4);\n    let dir = null;\n    for (let i = 0; i < indexes.length; ++i) {\n        dir = GW.utils.DIRS[i];\n        const x0 = x + dir[0];\n        const y0 = y + dir[1];\n        if (SITE.isFloor(map, x0, y0)) {\n            if (SITE.isObstruction(map, x - dir[0], y - dir[1]))\n                break;\n        }\n        dir = null;\n    }\n    if (!dir)\n        GW.utils.ERROR('No stair direction found!');\n    map.set(x, y, tile);\n    const dirIndex = GW.utils.CLOCK_DIRS.findIndex(\n    // @ts-ignore\n    (d) => d[0] == dir[0] && d[1] == dir[1]);\n    for (let i = 0; i < GW.utils.CLOCK_DIRS.length; ++i) {\n        const l = i ? i - 1 : 7;\n        const r = (i + 1) % 8;\n        if (i == dirIndex || l == dirIndex || r == dirIndex)\n            continue;\n        const d = GW.utils.CLOCK_DIRS[i];\n        map.set(x + d[0], y + d[1], SITE.WALL);\n        // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n    }\n    // dungeon.debug('setup stairs', x, y, tile);\n    return true;\n}\nexport function addStairs(map, opts = {}) {\n    let needUp = opts.up !== false;\n    let needDown = opts.down !== false;\n    const minDistance = opts.minDistance || Math.floor(Math.max(map.width, map.height) / 2);\n    const isValidLoc = opts.isValid || isValidStairLoc;\n    const setupFn = opts.setup || setupStairs;\n    let upLoc = Array.isArray(opts.up) ? opts.up : null;\n    let downLoc = Array.isArray(opts.down) ? opts.down : null;\n    const locations = {};\n    if (opts.start && typeof opts.start !== 'string') {\n        let start = opts.start;\n        if (start === true) {\n            start = map.randomMatchingLoc(isValidLoc);\n        }\n        else {\n            start = map.matchingLocNear(GW.utils.x(start), GW.utils.y(start), isValidLoc);\n        }\n        locations.start = start;\n    }\n    if (upLoc && downLoc) {\n        upLoc = map.matchingLocNear(GW.utils.x(upLoc), GW.utils.y(upLoc), isValidLoc);\n        downLoc = map.matchingLocNear(GW.utils.x(downLoc), GW.utils.y(downLoc), isValidLoc);\n    }\n    else if (upLoc && !downLoc) {\n        upLoc = map.matchingLocNear(GW.utils.x(upLoc), GW.utils.y(upLoc), isValidLoc);\n        if (needDown) {\n            downLoc = map.randomMatchingLoc((v, x, y) => {\n                if (GW.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                    minDistance)\n                    return false;\n                return isValidLoc(v, x, y, map);\n            });\n        }\n    }\n    else if (downLoc && !upLoc) {\n        downLoc = map.matchingLocNear(GW.utils.x(downLoc), GW.utils.y(downLoc), isValidLoc);\n        if (needUp) {\n            upLoc = map.randomMatchingLoc((v, x, y) => {\n                if (GW.utils.distanceBetween(x, y, downLoc[0], downLoc[1]) <\n                    minDistance)\n                    return false;\n                return isValidStairLoc(v, x, y, map);\n            });\n        }\n    }\n    else if (needUp) {\n        upLoc = map.randomMatchingLoc(isValidLoc);\n        if (needDown) {\n            downLoc = map.randomMatchingLoc((v, x, y) => {\n                if (GW.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                    minDistance)\n                    return false;\n                return isValidStairLoc(v, x, y, map);\n            });\n        }\n    }\n    else if (needDown) {\n        downLoc = map.randomMatchingLoc(isValidLoc);\n    }\n    if (upLoc) {\n        locations.up = upLoc.slice();\n        setupFn(map, upLoc[0], upLoc[1], opts.upTile || SITE.UP_STAIRS);\n        if (opts.start === 'up')\n            locations.start = locations.up;\n    }\n    if (downLoc) {\n        locations.down = downLoc.slice();\n        setupFn(map, downLoc[0], downLoc[1], opts.downTile || SITE.DOWN_STAIRS);\n        if (opts.start === 'down')\n            locations.start = locations.down;\n    }\n    return upLoc || downLoc ? locations : null;\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as HALL from './hall';\nimport * as ROOM from './room';\nimport * as LAKE from './lake';\nimport * as STAIRS from './stairs';\n// import * as MAP from 'gw-map.js';\nexport * from './site';\nimport * as room_1 from './room';\nexport { room_1 as room };\nimport * as hall_1 from './hall';\nexport { hall_1 as hall };\nimport * as lake_1 from './lake';\nexport { lake_1 as lake };\nimport * as stairs_1 from './stairs';\nexport { stairs_1 as stairs };\nexport { Room, Hall } from './room';\nconst DIRS = GW.utils.DIRS;\nvar SEQ;\nexport function start(map) {\n    SEQ = GW.random.sequence(map.width * map.height);\n    map.fill(0);\n}\nexport function finish(map) {\n    removeDiagonalOpenings(map);\n    finishWalls(map);\n    finishDoors(map);\n}\n// Returns an array of door sites if successful\nexport function addRoom(map, opts) {\n    opts = opts || { room: 'DEFAULT', hall: 'DEFAULT', tries: 10 };\n    if (typeof opts === 'string') {\n        opts = { room: opts };\n    }\n    if (opts.loc) {\n        opts.locs = [opts.loc];\n    }\n    if (!opts.room)\n        opts.room = 'DEFAULT';\n    if (typeof opts.room === 'function')\n        opts.room = { fn: opts.room };\n    if (typeof opts.room === 'string') {\n        const name = opts.room;\n        opts.room = ROOM.rooms[name];\n        if (!opts.room) {\n            GW.utils.ERROR('Failed to find room: ' + name);\n        }\n    }\n    const roomConfig = opts.room;\n    let hallConfig = null;\n    if (opts.hall === true)\n        opts.hall = 'DEFAULT';\n    if (opts.hall !== false && !opts.hall)\n        opts.hall = 'DEFAULT';\n    if (typeof opts.hall === 'function')\n        opts.hall = { fn: opts.hall };\n    if (typeof opts.hall === 'string') {\n        const name = opts.hall;\n        opts.hall = HALL.halls[name];\n        if (!opts.hall) {\n            GW.utils.ERROR('Failed to find hall: ' + name);\n            return null;\n        }\n        hallConfig = opts.hall;\n    }\n    else {\n        if (opts.hall && opts.hall.fn) {\n            hallConfig = opts.hall;\n        }\n    }\n    if (opts.door === false) {\n        opts.door = 0;\n    }\n    else if (opts.door === true) {\n        opts.door = SITE.DOOR;\n    }\n    else if (typeof opts.door === 'number') {\n        opts.door = GW.random.chance(opts.door) ? SITE.DOOR : SITE.FLOOR;\n    }\n    else {\n        opts.door = SITE.FLOOR;\n    }\n    let locs = opts.locs || null;\n    if (!locs || !Array.isArray(locs)) {\n        locs = null;\n        if (map.count(SITE.FLOOR) === 0) {\n            // empty map\n            const x = Math.floor(map.width / 2);\n            const y = map.height - 2;\n            locs = [[x, y]];\n        }\n    }\n    else if (locs &&\n        locs.length &&\n        locs.length == 2 &&\n        typeof locs[0] == 'number') {\n        // @ts-ignore\n        locs = [locs];\n    }\n    else if (locs.length == 0) {\n        locs = null;\n    }\n    const digger = opts.room;\n    const roomGrid = GW.grid.alloc(map.width, map.height);\n    let attachHall = false;\n    if (hallConfig) {\n        let hallChance = hallConfig.chance !== undefined ? hallConfig.chance : 15;\n        attachHall = GW.random.chance(hallChance);\n    }\n    // const force = config.force || false;\n    let result = false;\n    let room;\n    let tries = opts.tries || 10;\n    while (--tries >= 0 && !result) {\n        roomGrid.fill(SITE.NOTHING);\n        // dig the room in the center\n        room = digger.fn(roomConfig, roomGrid);\n        // TODO - Allow choice of floor tile...\n        room.doors = chooseRandomDoorSites(roomGrid, SITE.FLOOR);\n        if (attachHall && hallConfig) {\n            room.hall = hallConfig.fn(hallConfig, roomGrid, room);\n        }\n        if (locs) {\n            // try the doors first\n            result = attachRoomAtMapDoor(map, locs, roomGrid, room, opts);\n        }\n        else {\n            result = attachRoom(map, roomGrid, room, opts);\n        }\n        // console.log(\n        //     'try',\n        //     room.hall ? 'hall: ' + room.hall.dir : 'no hall',\n        //     result\n        // );\n        // if (!result) {\n        //     roomGrid.dump();\n        //     map.dump();\n        //     console.log(\n        //         'room doors',\n        //         (room.hall ? room.hall.doors : room.doors).join(', ')\n        //     );\n        //     console.log('map locs', locs.join(', '));\n        // }\n    }\n    GW.grid.free(roomGrid);\n    return room && result ? room : null;\n}\nexport function attachRoom(map, roomGrid, room, opts) {\n    // console.log('attachRoom');\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SEQ.length; i++) {\n        const x = Math.floor(SEQ[i] / map.height);\n        const y = SEQ[i] % map.height;\n        if (!(map.get(x, y) == SITE.NOTHING))\n            continue;\n        const dir = directionOfDoorSite(map, x, y, SITE.FLOOR);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door)\n                continue;\n            const offsetX = x - door[0];\n            const offsetY = y - door[1];\n            if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n                // Room fits here.\n                GW.grid.offsetZip(map, roomGrid, offsetX, offsetY, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || SITE.FLOOR;\n                });\n                attachDoor(map, room, opts, x, y, oppDir);\n                // door[0] = -1;\n                // door[1] = -1;\n                room.translate(offsetX, offsetY);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function attachDoor(map, room, opts, x, y, dir) {\n    if (opts.door === 0)\n        return; // no door at all\n    const tile = opts.door || SITE.DOOR;\n    map[x][y] = tile; // Door site.\n    // most cases...\n    if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n        return;\n    }\n    if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n        let didSomething = true;\n        let k = 1;\n        while (didSomething) {\n            didSomething = false;\n            if (map.get(x - k, y) === 0) {\n                if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n                    map[x - k][y] = tile;\n                    didSomething = true;\n                }\n            }\n            if (map.get(x + k, y) === 0) {\n                if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n                    map[x + k][y] = tile;\n                    didSomething = true;\n                }\n            }\n            ++k;\n        }\n    }\n    else {\n        let didSomething = true;\n        let k = 1;\n        while (didSomething) {\n            didSomething = false;\n            if (map.get(x, y - k) === 0) {\n                if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n                    map[x][y - k] = opts.door;\n                    didSomething = true;\n                }\n            }\n            if (map.get(x, y + k) === 0) {\n                if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n                    map[x][y + k] = opts.door;\n                    didSomething = true;\n                }\n            }\n            ++k;\n        }\n    }\n}\nexport function roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n    let xRoom, yRoom, xSite, ySite, i, j;\n    // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n    for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n        for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n            if (roomGrid[xRoom][yRoom]) {\n                xSite = xRoom + roomToSiteX;\n                ySite = yRoom + roomToSiteY;\n                for (i = xSite - 1; i <= xSite + 1; i++) {\n                    for (j = ySite - 1; j <= ySite + 1; j++) {\n                        if (!map.hasXY(i, j) ||\n                            map.isBoundaryXY(i, j) ||\n                            !(map.get(i, j) === SITE.NOTHING)) {\n                            // console.log('- NO');\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // console.log('- YES');\n    return true;\n}\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(grid, x, y, isOpen) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    const fnOpen = typeof isOpen === 'function'\n        ? isOpen\n        : (v) => v == isOpen;\n    solutionDir = GW.utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (grid.hasXY(oppX, oppY) &&\n            grid.hasXY(newX, newY) &&\n            fnOpen(grid[oppX][oppY], oppX, oppY, grid)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GW.utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GW.utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function forceRoomAtMapLoc(map, xy, roomGrid, room, opts) {\n    // console.log('forceRoomAtMapLoc', xy);\n    // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SEQ.length; i++) {\n        const x = Math.floor(SEQ[i] / map.height);\n        const y = SEQ[i] % map.height;\n        if (roomGrid[x][y])\n            continue;\n        const dir = directionOfDoorSite(roomGrid, x, y, SITE.FLOOR);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const dx = xy[0] - x;\n            const dy = xy[1] - y;\n            if (roomFitsAt(map, roomGrid, dx, dy)) {\n                GW.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || SITE.FLOOR;\n                });\n                if (opts.room.door !== false) {\n                    const door = opts.room.door === true || !opts.room.door\n                        ? SITE.DOOR\n                        : opts.room.door;\n                    map[xy[0]][xy[1]] = door; // Door site.\n                }\n                // TODO - Update doors - we may have to erase one...\n                room.translate(dx, dy);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction attachRoomAtMapDoor(map, mapDoors, roomGrid, room, opts) {\n    const doorIndexes = GW.random.sequence(mapDoors.length);\n    // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < doorIndexes.length; i++) {\n        const index = doorIndexes[i];\n        const door = mapDoors[index];\n        if (!door)\n            continue;\n        const x = door[0];\n        const y = door[1];\n        if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction attachRoomAtXY(map, x, y, roomGrid, room, opts) {\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    const dirs = GW.random.sequence(4);\n    // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n    for (let dir of dirs) {\n        const oppDir = (dir + 2) % 4;\n        const door = doorSites[oppDir];\n        if (!door)\n            continue;\n        if (door[0] != -1 &&\n            roomFitsAt(map, roomGrid, x - door[0], y - door[1])) {\n            // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n            // Room fits here.\n            const offX = x - door[0];\n            const offY = y - door[1];\n            GW.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n                map[i][j] = opts.room.tile || SITE.FLOOR;\n            });\n            attachDoor(map, room, opts, x, y, oppDir);\n            room.translate(offX, offY);\n            // const newDoors = doorSites.map((site) => {\n            //     const x0 = site[0] + offX;\n            //     const y0 = site[1] + offY;\n            //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n            //     return [x0, y0] as GW.utils.Loc;\n            // });\n            return true;\n        }\n    }\n    return false;\n}\nexport function chooseRandomDoorSites(sourceGrid, floorTile) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    floorTile = floorTile || SITE.FLOOR;\n    const grid = GW.grid.alloc(sourceGrid.width, sourceGrid.height);\n    grid.copy(sourceGrid);\n    for (i = 0; i < grid.width; i++) {\n        for (j = 0; j < grid.height; j++) {\n            if (!grid[i][j]) {\n                dir = directionOfDoorSite(grid, i, j, floorTile);\n                if (dir != GW.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + DIRS[dir][0];\n                    newY = j + DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && grid.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (grid[newX][newY]) {\n                            doorSiteFailed = true;\n                        }\n                        newX += DIRS[dir][0];\n                        newY += DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        grid[i][j] = dir + 200; // So as not to conflict with other tiles.\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = grid.randomMatchingLoc(dir + 200) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    GW.grid.free(grid);\n    return doorSites;\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function addLoops(grid, minimumPathingDistance, maxConnectionLength) {\n    let startX, startY, endX, endY;\n    let i, j, d, x, y;\n    minimumPathingDistance =\n        minimumPathingDistance ||\n            Math.floor(Math.min(grid.width, grid.height) / 2);\n    maxConnectionLength = maxConnectionLength || 1; // by default only break walls down\n    const siteGrid = grid;\n    const pathGrid = GW.grid.alloc(grid.width, grid.height);\n    const costGrid = GW.grid.alloc(grid.width, grid.height);\n    const dirCoords = [\n        [1, 0],\n        [0, 1],\n    ];\n    SITE.fillCostGrid(grid, costGrid);\n    function isValidTunnelStart(x, y, dir) {\n        if (!grid.hasXY(x, y))\n            return false;\n        if (!grid.hasXY(x + dir[1], y + dir[0]))\n            return false;\n        if (!grid.hasXY(x - dir[1], y - dir[0]))\n            return false;\n        if (grid.get(x, y))\n            return false;\n        if (grid.get(x + dir[1], y + dir[0]))\n            return false;\n        if (grid.get(x - dir[1], y - dir[0]))\n            return false;\n        return true;\n    }\n    function isValidTunnelEnd(x, y, dir) {\n        if (!grid.hasXY(x, y))\n            return false;\n        if (!grid.hasXY(x + dir[1], y + dir[0]))\n            return false;\n        if (!grid.hasXY(x - dir[1], y - dir[0]))\n            return false;\n        if (grid.get(x, y))\n            return true;\n        if (grid.get(x + dir[1], y + dir[0]))\n            return true;\n        if (grid.get(x - dir[1], y - dir[0]))\n            return true;\n        return false;\n    }\n    for (i = 0; i < SEQ.length; i++) {\n        x = Math.floor(SEQ[i] / siteGrid.height);\n        y = SEQ[i] % siteGrid.height;\n        const cell = siteGrid[x][y];\n        if (!cell) {\n            for (d = 0; d <= 1; d++) {\n                // Try a horizontal door, and then a vertical door.\n                let dir = dirCoords[d];\n                if (!isValidTunnelStart(x, y, dir))\n                    continue;\n                j = maxConnectionLength;\n                // check up/left\n                if (grid.hasXY(x + dir[0], y + dir[1]) &&\n                    SITE.isPassable(grid, x + dir[0], y + dir[1])) {\n                    // just can't build directly into a door\n                    if (!grid.hasXY(x - dir[0], y - dir[1]) ||\n                        SITE.isDoor(grid, x - dir[0], y - dir[1])) {\n                        continue;\n                    }\n                }\n                else if (grid.hasXY(x - dir[0], y - dir[1]) &&\n                    SITE.isPassable(grid, x - dir[0], y - dir[1])) {\n                    if (!grid.hasXY(x + dir[0], y + dir[1]) ||\n                        SITE.isDoor(grid, x + dir[0], y + dir[1])) {\n                        continue;\n                    }\n                    dir = dir.map((v) => -1 * v);\n                }\n                else {\n                    continue; // not valid start for tunnel\n                }\n                startX = x + dir[0];\n                startY = y + dir[1];\n                endX = x;\n                endY = y;\n                for (j = 0; j < maxConnectionLength; ++j) {\n                    endX -= dir[0];\n                    endY -= dir[1];\n                    // if (grid.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                    if (isValidTunnelEnd(endX, endY, dir)) {\n                        break;\n                    }\n                }\n                if (j < maxConnectionLength) {\n                    GW.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                    // pathGrid.fill(30000);\n                    // pathGrid[startX][startY] = 0;\n                    // dijkstraScan(pathGrid, costGrid, false);\n                    if (pathGrid[endX][endY] > minimumPathingDistance &&\n                        pathGrid[endX][endY] < 30000) {\n                        // and if the pathing distance between the two flanking floor tiles exceeds minimumPathingDistance,\n                        // dungeon.debug(\n                        //     'Adding Loop',\n                        //     startX,\n                        //     startY,\n                        //     ' => ',\n                        //     endX,\n                        //     endY,\n                        //     ' : ',\n                        //     pathGrid[endX][endY]\n                        // );\n                        while (endX !== startX || endY !== startY) {\n                            if (grid.get(endX, endY) == 0) {\n                                grid[endX][endY] = SITE.FLOOR;\n                                costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                            }\n                            endX += dir[0];\n                            endY += dir[1];\n                        }\n                        // TODO - Door is optional\n                        grid[x][y] = SITE.DOOR; // then turn the tile into a doorway.\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    GW.grid.free(pathGrid);\n    GW.grid.free(costGrid);\n}\nexport function addLakes(map, opts = {}) {\n    return LAKE.digLakes(map, opts);\n}\nexport function addBridges(map, minimumPathingDistance, maxConnectionLength) {\n    return LAKE.digBridges(map, minimumPathingDistance, maxConnectionLength);\n}\nexport function addStairs(map, opts = {}) {\n    return STAIRS.addStairs(map, opts);\n}\nexport function removeDiagonalOpenings(grid) {\n    let i, j, k, x1, y1;\n    let diagonalCornerRemoved;\n    do {\n        diagonalCornerRemoved = false;\n        for (i = 0; i < grid.width - 1; i++) {\n            for (j = 0; j < grid.height - 1; j++) {\n                for (k = 0; k <= 1; k++) {\n                    if (SITE.isPassable(grid, i + k, j) &&\n                        !SITE.isPassable(grid, i + (1 - k), j) &&\n                        SITE.isObstruction(grid, i + (1 - k), j) &&\n                        !SITE.isPassable(grid, i + k, j + 1) &&\n                        SITE.isObstruction(grid, i + k, j + 1) &&\n                        SITE.isPassable(grid, i + (1 - k), j + 1)) {\n                        if (GW.random.chance(50)) {\n                            x1 = i + (1 - k);\n                            y1 = j;\n                        }\n                        else {\n                            x1 = i + k;\n                            y1 = j + 1;\n                        }\n                        diagonalCornerRemoved = true;\n                        grid[x1][y1] = SITE.FLOOR; // todo - pick one of the passable tiles around it...\n                    }\n                }\n            }\n        }\n    } while (diagonalCornerRemoved == true);\n}\nexport function finishDoors(grid) {\n    grid.forEach((cell, x, y) => {\n        if (grid.isBoundaryXY(x, y))\n            return;\n        // todo - isDoorway...\n        if (cell == SITE.DOOR) {\n            if (\n            // TODO - isPassable\n            (grid.get(x + 1, y) == SITE.FLOOR ||\n                grid.get(x - 1, y) == SITE.FLOOR) &&\n                (grid.get(x, y + 1) == SITE.FLOOR ||\n                    grid.get(x, y - 1) == SITE.FLOOR)) {\n                // If there's passable terrain to the left or right, and there's passable terrain\n                // above or below, then the door is orphaned and must be removed.\n                grid[x][y] = SITE.FLOOR; // todo - take passable neighbor value\n            }\n            else if (\n            // todo - isPassable\n            (grid.get(x + 1, y) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x - 1, y) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x, y + 1) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x, y - 1) !== SITE.FLOOR ? 1 : 0) >=\n                3) {\n                // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                // then the door is orphaned and must be removed.\n                grid[x][y] = SITE.FLOOR; // todo - take passable neighbor\n            }\n        }\n    });\n}\nexport function finishWalls(grid, tile = SITE.WALL) {\n    grid.forEach((cell, i, j) => {\n        if (cell == SITE.NOTHING) {\n            grid[i][j] = tile;\n        }\n    });\n}\n"],"names":["fillCostGrid","source","costGrid","forEach","_v","x","y","isPassable","GW.path","OBSTRUCTION","grid","v","get","isFloor","isDoor","isObstruction","isStairs","isAnyWater","Hall","[object Object]","loc","dir","length","width","this","doors","d","GW.utils","DIRS","UP","DOWN","x2","y2","dx","dy","Room","digger","height","hall","cx","Math","floor","cy","translate","rooms","install","id","fn","config","data","checkConfig","expected","Object","entries","key","expect","have","undefined","ERROR","Array","isArray","range","GW.range","make","rectangular","value","tile","fill","fillRect","destX","destY","blobGrid","GW.grid","alloc","minWidth","maxWidth","minHeight","maxHeight","bounds","fillBlob","offsetZip","free","choices","GW.random","item","bind","weighted","digConfig","opts","assign","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","min","max","minorWidth","minorHeight","radius","fillCircle","ringMinWidth","holeMinSize","holeChance","chance","count","i","minX","maxX","minY","maxY","chunkCount","valueBounds","halls","pickWidth","clamp","Number","parseInt","_pickWidth","pickLengthRange","pickHallDirection","room","NO_DIRECTION","dirs","sequence","hi","door","hasXY","pickHallExits","newX","newY","obliqueChance","firstOpt","allowObliqueHallwayExit","hallDoors","dir2","dig","DIR","x0","y0","LEFT","digLakes","map","j","k","lakeMaxHeight","lakeMaxWidth","lakeMinSize","tries","maxCount","canDisrupt","minSize","wreath","wreathTile","lakeGrid","attempts","round","success","lakeDisruptsPassability","sx","sy","forCircle","lakeToMapX","lakeToMapY","walkableGrid","disrupts","lakeX","lakeY","SITE.isStairs","SITE.isPassable","first","floodFill","isBridgeCandidate","bridgeDir","SITE.isAnyWater","digBridges","minimumPathingDistance","maxConnectionLength","siteGrid","pathGrid","dirCoords","SITE.fillCostGrid","SEQ","calculateDistances","NO_PATH","isValidStairLoc","SITE.isObstruction","SITE.isFloor","setupStairs","indexes","set","dirIndex","CLOCK_DIRS","findIndex","l","r","addStairs","needUp","up","needDown","down","minDistance","isValidLoc","isValid","setupFn","setup","upLoc","downLoc","locations","start","randomMatchingLoc","matchingLocNear","distanceBetween","slice","upTile","downTile","attachRoom","roomGrid","doorSites","directionOfDoorSite","oppDir","offsetX","offsetY","roomFitsAt","_d","_s","attachDoor","didSomething","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","isBoundaryXY","isOpen","solutionDir","oppX","oppY","fnOpen","attachRoomAtMapDoor","mapDoors","doorIndexes","attachRoomAtXY","offX","offY","chooseRandomDoorSites","sourceGrid","floorTile","doorSiteFailed","copy","removeDiagonalOpenings","x1","y1","diagonalCornerRemoved","finishDoors","cell","finishWalls","locs","name","ROOM.rooms","roomConfig","hallConfig","HALL.halls","attachHall","hallChance","result","xy","startX","startY","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.isDoor","LAKE.digLakes","LAKE.digBridges","STAIRS.addStairs"],"mappings":"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"}