{"version":3,"file":"gw-dig.min.js","sources":["../js/site.js","../js/room.js","../js/hall.js","../js/dig.js"],"sourcesContent":["export const NOTHING = 0;\nexport const FLOOR = 1;\nexport const DOOR = 2;\nexport const WALL = 3;\nexport const LAKE = 4;\nexport const BRIDGE = 5;\nexport const UP_STAIRS = 6;\nexport const DOWN_STAIRS = 7;\nexport const SHALLOW = 8;\nexport function isPassable(grid, x, y) {\n    const v = grid.get(x, y);\n    return (v === FLOOR ||\n        v === DOOR ||\n        v === BRIDGE ||\n        v === UP_STAIRS ||\n        v === DOWN_STAIRS ||\n        v === SHALLOW);\n}\nexport function isDoor(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === DOOR;\n}\nexport function isObstruction(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === NOTHING || v === WALL;\n}\nexport function isStairs(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === UP_STAIRS || v === DOWN_STAIRS;\n}\nexport function isLake(grid, x, y) {\n    return grid.get(x, y) === LAKE;\n}\nexport function isAnyWater(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === LAKE || v === SHALLOW;\n}\n","import * as GW from 'gw-utils';\nimport * as CONST from './site';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GW.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room {\n    constructor(digger, x, y, width, height) {\n        this.doors = [];\n        this.hall = null;\n        this.digger = digger;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\nexport var rooms = {};\nexport function install(id, fn, config) {\n    // @ts-ignore\n    const data = fn(config || {}); // call to have function setup the config\n    data.fn = fn;\n    data.id = id;\n    rooms[id] = data;\n    return data;\n}\ninstall('DEFAULT', rectangular);\nexport function checkConfig(config, expected) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                return GW.utils.ERROR('Missing required config for digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GW.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport function cavern(config, grid) {\n    config = checkConfig(config, { width: 12, height: 8 });\n    if (!grid)\n        return config;\n    let destX, destY;\n    let blobGrid;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    blobGrid = GW.grid.alloc(grid.width, grid.height, 0);\n    const minWidth = Math.floor(0.5 * width); // 6\n    const maxWidth = width;\n    const minHeight = Math.floor(0.5 * height); // 4\n    const maxHeight = height;\n    grid.fill(0);\n    const bounds = blobGrid.fillBlob(5, minWidth, minHeight, maxWidth, maxHeight, 55, 'ffffffttt', 'ffffttttt');\n    // Position the new cave in the middle of the grid...\n    destX = Math.floor((grid.width - bounds.width) / 2);\n    destY = Math.floor((grid.height - bounds.height) / 2);\n    // ...and copy it to the master grid.\n    GW.grid.offsetZip(grid, blobGrid, destX - bounds.x, destY - bounds.y, tile);\n    GW.grid.free(blobGrid);\n    return new Room(config.id, destX, destY, bounds.width, bounds.height);\n}\nexport function choiceRoom(config, grid) {\n    config = config || {};\n    let choices;\n    if (Array.isArray(config.choices)) {\n        choices = GW.random.item.bind(GW.random, config.choices);\n    }\n    else if (typeof config.choices == 'object') {\n        choices = GW.random.weighted.bind(GW.random, config.choices);\n    }\n    else {\n        GW.utils.ERROR('Expected choices to be either array of room ids or map - ex: { ROOM_ID: weight }');\n    }\n    if (!grid)\n        return config;\n    let id = choices();\n    const digger = rooms[id];\n    if (!digger) {\n        GW.utils.ERROR('Missing digger choice: ' + id);\n    }\n    let digConfig = digger;\n    if (config.opts) {\n        digConfig = Object.assign({}, digger, config.opts);\n    }\n    // debug('Chose room: ', id);\n    return digger.fn(digConfig, grid);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport function entrance(config, grid) {\n    config = checkConfig(config, { width: 20, height: 10 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    const roomWidth = Math.floor(0.4 * width); // 8\n    const roomHeight = height;\n    const roomWidth2 = width;\n    const roomHeight2 = Math.floor(0.5 * height); // 5\n    // ALWAYS start at bottom+center of map\n    const roomX = Math.floor(grid.width / 2 - roomWidth / 2 - 1);\n    const roomY = grid.height - roomHeight - 2;\n    const roomX2 = Math.floor(grid.width / 2 - roomWidth2 / 2 - 1);\n    const roomY2 = grid.height - roomHeight2 - 2;\n    grid.fill(0);\n    grid.fillRect(roomX, roomY, roomWidth, roomHeight, tile);\n    grid.fillRect(roomX2, roomY2, roomWidth2, roomHeight2, tile);\n    return new Room(config.id, Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n}\nexport function cross(config, grid) {\n    config = checkConfig(config, { width: 12, height: 20 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    const roomWidth = width;\n    const roomWidth2 = Math.max(3, Math.floor((width * GW.random.range(25, 75)) / 100)); // [4,20]\n    const roomHeight = Math.max(3, Math.floor((height * GW.random.range(25, 75)) / 100)); // [2,5]\n    const roomHeight2 = height;\n    const roomX = Math.floor((grid.width - roomWidth) / 2);\n    const roomX2 = roomX + GW.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n    const roomY2 = Math.floor((grid.height - roomHeight2) / 2);\n    const roomY = roomY2 + GW.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n    grid.fill(0);\n    grid.fillRect(roomX, roomY, roomWidth, roomHeight, tile);\n    grid.fillRect(roomX2, roomY2, roomWidth2, roomHeight2, tile);\n    return new Room(config.id, roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n}\nexport function symmetricalCross(config, grid) {\n    config = checkConfig(config, { width: 7, height: 7 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    let minorWidth = Math.max(3, Math.floor((width * GW.random.range(25, 50)) / 100)); // [2,4]\n    // if (height % 2 == 0 && minorWidth > 2) {\n    //     minorWidth -= 1;\n    // }\n    let minorHeight = Math.max(3, Math.floor((height * GW.random.range(25, 50)) / 100)); // [2,3]?\n    // if (width % 2 == 0 && minorHeight > 2) {\n    //     minorHeight -= 1;\n    // }\n    grid.fill(0);\n    const x = Math.floor((grid.width - width) / 2);\n    const y = Math.floor((grid.height - minorHeight) / 2);\n    grid.fillRect(x, y, width, minorHeight, tile);\n    const x2 = Math.floor((grid.width - minorWidth) / 2);\n    const y2 = Math.floor((grid.height - height) / 2);\n    grid.fillRect(x2, y2, minorWidth, height, tile);\n    return new Room(config.id, Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n}\nexport function rectangular(config, grid) {\n    config = checkConfig(config, { width: [3, 6], height: [3, 6] });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor((grid.width - width) / 2);\n    const y = Math.floor((grid.height - height) / 2);\n    grid.fillRect(x, y, width, height, tile);\n    return new Room(config.id, x, y, width, height);\n}\nexport function circular(config, grid) {\n    config = checkConfig(config, { radius: [3, 4] });\n    if (!grid)\n        return config;\n    const radius = config.radius.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor(grid.width / 2);\n    const y = Math.floor(grid.height / 2);\n    if (radius > 1) {\n        grid.fillCircle(x, y, radius, tile);\n    }\n    return new Room(config.id, x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n}\nexport function brogueDonut(config, grid) {\n    config = checkConfig(config, {\n        radius: [5, 10],\n        ringMinWidth: 3,\n        holeMinSize: 3,\n        holeChance: 50,\n    });\n    if (!grid)\n        return config;\n    const radius = config.radius.value();\n    const ringMinWidth = config.ringMinWidth.value();\n    const holeMinSize = config.holeMinSize.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor(grid.width / 2);\n    const y = Math.floor(grid.height / 2);\n    grid.fillCircle(x, y, radius, tile);\n    if (radius > ringMinWidth + holeMinSize &&\n        GW.random.chance(config.holeChance.value())) {\n        grid.fillCircle(x, y, GW.random.range(holeMinSize, radius - holeMinSize), 0);\n    }\n    return new Room(config.id, x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n}\nexport function chunkyRoom(config, grid) {\n    config = checkConfig(config, {\n        count: [2, 12],\n        width: [5, 20],\n        height: [5, 20],\n    });\n    if (!grid)\n        return config;\n    let i, x, y;\n    let minX, maxX, minY, maxY;\n    let chunkCount = config.count.value();\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    minX = Math.floor(grid.width / 2) - Math.floor(width / 2);\n    maxX = Math.floor(grid.width / 2) + Math.floor(width / 2);\n    minY = Math.floor(grid.height / 2) - Math.floor(height / 2);\n    maxY = Math.floor(grid.height / 2) + Math.floor(height / 2);\n    grid.fill(0);\n    grid.fillCircle(Math.floor(grid.width / 2), Math.floor(grid.height / 2), 2, tile);\n    for (i = 0; i < chunkCount;) {\n        x = GW.random.range(minX, maxX);\n        y = GW.random.range(minY, maxY);\n        if (grid[x][y]) {\n            //            colorOverDungeon(/* Color. */darkGray);\n            //            hiliteGrid(grid, /* Color. */white, 100);\n            if (x - 2 < minX)\n                continue;\n            if (x + 2 > maxX)\n                continue;\n            if (y - 2 < minY)\n                continue;\n            if (y + 2 > maxY)\n                continue;\n            grid.fillCircle(x, y, 2, tile);\n            i++;\n            //            hiliteGrid(grid, /* Color. */green, 50);\n            //            temporaryMessage(\"Added a chunk:\", true);\n        }\n    }\n    const bounds = grid.valueBounds(tile);\n    return new Room(config.id, bounds.x, bounds.y, bounds.width, bounds.height);\n}\n","import * as GW from 'gw-utils';\nimport * as CONST from './site';\nimport { Hall } from './room';\nconst DIRS = GW.utils.DIRS;\nexport var halls = {};\nexport function install(id, fn, config = {}) {\n    // @ts-ignore\n    const data = fn(config || {}); // call to have function setup the config\n    data.fn = fn;\n    data.id = id;\n    halls[id] = data;\n    return data;\n}\ninstall('DEFAULT', dig, { chance: 15 });\nexport function pickWidth(opts = {}) {\n    return GW.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GW.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GW.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GW.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLengthRange(dir, opts) {\n    if (!opts.length)\n        opts.length = [];\n    if (Array.isArray(opts.length)) {\n        if (dir == GW.utils.UP || dir == GW.utils.DOWN) {\n            return GW.range.make(opts.length[1] || [2, 9]);\n        }\n        else {\n            return GW.range.make(opts.length[0] || [9, 15]);\n        }\n    }\n    else {\n        return GW.range.make(opts.length);\n    }\n}\nexport function pickHallDirection(grid, room, opts) {\n    const doors = room.doors;\n    // Pick a direction.\n    let dir = opts.dir || GW.utils.NO_DIRECTION;\n    if (dir == GW.utils.NO_DIRECTION) {\n        const dirs = GW.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = pickLengthRange(dir, opts).hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (grid.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GW.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(grid, x, y, dir, opts) {\n    let newX, newY;\n    const obliqueChance = GW.utils.firstOpt('obliqueChance', opts, 15);\n    const allowObliqueHallwayExit = GW.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !grid.hasXY(newX, newY) ||\n            grid[newX][newY]) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport function digWide(opts, grid, room) {\n    opts = opts || {};\n    if (!opts.width) {\n        opts.width = 2;\n    }\n    if (!grid) {\n        return opts;\n    }\n    const dir = pickHallDirection(grid, room, opts);\n    if (dir === GW.utils.NO_DIRECTION)\n        return null;\n    const length = pickLengthRange(dir, opts).value();\n    const width = pickWidth(opts) || 2;\n    const door = room.doors[dir];\n    const tile = opts.tile || CONST.FLOOR;\n    const hallDoors = [];\n    let x0, y0;\n    let hall;\n    if (dir === GW.utils.UP) {\n        x0 = GW.utils.clamp(door[0], room.x, room.x + room.width - width);\n        y0 = door[1] - length + 1;\n        for (let x = x0; x < x0 + width; ++x) {\n            for (let y = y0; y < y0 + length; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0, y0 - 1];\n        hall = new Hall([x0, door[1]], dir, length, 2);\n    }\n    else if (dir === GW.utils.DOWN) {\n        x0 = GW.utils.clamp(door[0], room.x, room.x + room.width - width);\n        y0 = door[1] + length - 1;\n        for (let x = x0; x < x0 + width; ++x) {\n            for (let y = y0; y > y0 - length; --y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0, y0 + 1];\n        hall = new Hall([x0, door[1]], dir, length, 2);\n    }\n    else if (dir === GW.utils.LEFT) {\n        x0 = door[0] - length + 1;\n        y0 = GW.utils.clamp(door[1], room.y, room.y + room.height - width);\n        for (let x = x0; x < x0 + length; ++x) {\n            for (let y = y0; y < y0 + width; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0 - 1, y0];\n        hall = new Hall([door[0], y0], dir, length, 2);\n    }\n    else {\n        //if (dir === GW.utils.RIGHT) {\n        x0 = door[0] + length - 1;\n        y0 = GW.utils.clamp(door[1], room.y, room.y + room.height - width);\n        for (let x = x0; x > x0 - length; --x) {\n            for (let y = y0; y < y0 + width; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0 + 1, y0];\n        hall = new Hall([door[0], y0], dir, length, width);\n    }\n    hall.doors = hallDoors;\n    hall.width = width;\n    return hall;\n}\nexport function dig(opts, grid, room) {\n    opts = opts || {};\n    opts.width = 1;\n    if (!grid) {\n        return opts;\n    }\n    const dir = pickHallDirection(grid, room, opts);\n    if (dir === GW.utils.NO_DIRECTION)\n        return null;\n    const length = pickLengthRange(dir, opts).value();\n    const door = room.doors[dir];\n    const DIR = DIRS[dir];\n    let x = door[0];\n    let y = door[1];\n    const tile = opts.tile || CONST.FLOOR;\n    for (let i = 0; i < length; i++) {\n        grid[x][y] = tile;\n        x += DIR[0];\n        y += DIR[1];\n    }\n    x -= DIR[0];\n    y -= DIR[1];\n    const hall = new Hall(door, dir, length);\n    hall.doors = pickHallExits(grid, x, y, dir, opts);\n    return hall;\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as HALL from './hall';\nimport * as ROOM from './room';\n// import * as MAP from 'gw-map.js';\nexport * from './site';\nimport * as room_1 from './room';\nexport { room_1 as room };\nimport * as hall_1 from './hall';\nexport { hall_1 as hall };\nexport { Room, Hall } from './room';\nconst DIRS = GW.utils.DIRS;\nvar SEQ;\nexport function start(map) {\n    SEQ = GW.random.sequence(map.width * map.height);\n    map.fill(0);\n}\nexport function finish(map) {\n    removeDiagonalOpenings(map);\n    finishWalls(map);\n    finishDoors(map);\n}\n// Returns an array of door sites if successful\nexport function dig(map, opts) {\n    opts = opts || { room: 'DEFAULT', hall: 'DEFAULT', tries: 10 };\n    if (typeof opts === 'string') {\n        opts = { room: opts };\n    }\n    if (opts.loc) {\n        opts.locs = [opts.loc];\n    }\n    if (!opts.room)\n        opts.room = 'DEFAULT';\n    if (typeof opts.room === 'function')\n        opts.room = { fn: opts.room };\n    if (typeof opts.room === 'string') {\n        const name = opts.room;\n        opts.room = ROOM.rooms[name];\n        if (!opts.room) {\n            GW.utils.ERROR('Failed to find room: ' + name);\n        }\n    }\n    const roomConfig = opts.room;\n    let hallConfig = null;\n    if (opts.hall === true)\n        opts.hall = 'DEFAULT';\n    if (opts.hall !== false && !opts.hall)\n        opts.hall = 'DEFAULT';\n    if (typeof opts.hall === 'function')\n        opts.hall = { fn: opts.hall };\n    if (typeof opts.hall === 'string') {\n        const name = opts.hall;\n        opts.hall = HALL.halls[name];\n        if (!opts.hall) {\n            GW.utils.ERROR('Failed to find hall: ' + name);\n            return null;\n        }\n        hallConfig = opts.hall;\n    }\n    else {\n        if (opts.hall && opts.hall.fn) {\n            hallConfig = opts.hall;\n        }\n    }\n    if (opts.door === false) {\n        opts.door = SITE.FLOOR;\n    }\n    else if (opts.door === true || !opts.door) {\n        opts.door = SITE.DOOR;\n    }\n    let locs = opts.locs || null;\n    if (!locs || !Array.isArray(locs)) {\n        locs = null;\n        if (map.count(SITE.FLOOR) === 0) {\n            // empty map\n            const x = Math.floor(map.width / 2);\n            const y = map.height - 2;\n            locs = [[x, y]];\n        }\n    }\n    else if (locs &&\n        locs.length &&\n        locs.length == 2 &&\n        typeof locs[0] == 'number') {\n        // @ts-ignore\n        locs = [locs];\n    }\n    else if (locs.length == 0) {\n        locs = null;\n    }\n    const digger = opts.room;\n    const roomGrid = GW.grid.alloc(map.width, map.height);\n    let attachHall = false;\n    if (hallConfig) {\n        let hallChance = hallConfig.chance !== undefined ? hallConfig.chance : 15;\n        attachHall = GW.random.chance(hallChance);\n    }\n    // const force = config.force || false;\n    let result = false;\n    let room;\n    let tries = opts.tries || 10;\n    while (--tries >= 0 && !result) {\n        roomGrid.fill(SITE.NOTHING);\n        // dig the room in the center\n        room = digger.fn(roomConfig, roomGrid);\n        // TODO - Allow choice of floor tile...\n        room.doors = chooseRandomDoorSites(roomGrid, SITE.FLOOR);\n        if (attachHall && hallConfig) {\n            room.hall = hallConfig.fn(hallConfig, roomGrid, room);\n        }\n        if (locs) {\n            // try the doors first\n            result = attachRoomAtMapDoor(map, locs, roomGrid, room, opts);\n        }\n        else {\n            result = attachRoom(map, roomGrid, room, opts);\n        }\n        // console.log(\n        //     'try',\n        //     room.hall ? 'hall: ' + room.hall.dir : 'no hall',\n        //     result\n        // );\n        // if (!result) {\n        //     roomGrid.dump();\n        //     map.dump();\n        //     console.log(\n        //         'room doors',\n        //         (room.hall ? room.hall.doors : room.doors).join(', ')\n        //     );\n        //     console.log('map locs', locs.join(', '));\n        // }\n    }\n    GW.grid.free(roomGrid);\n    return room && result ? room : null;\n}\nexport function attachRoom(map, roomGrid, room, opts) {\n    // console.log('attachRoom');\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SEQ.length; i++) {\n        const x = Math.floor(SEQ[i] / map.height);\n        const y = SEQ[i] % map.height;\n        if (!(map.get(x, y) == SITE.NOTHING))\n            continue;\n        const dir = directionOfDoorSite(map, x, y, SITE.FLOOR);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door)\n                continue;\n            const offsetX = x - door[0];\n            const offsetY = y - door[1];\n            if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n                // Room fits here.\n                GW.grid.offsetZip(map, roomGrid, offsetX, offsetY, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || SITE.FLOOR;\n                });\n                attachDoor(map, room, opts, x, y, oppDir);\n                // door[0] = -1;\n                // door[1] = -1;\n                room.translate(offsetX, offsetY);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function attachDoor(map, room, opts, x, y, dir) {\n    const tile = opts.door || SITE.DOOR;\n    map[x][y] = tile; // Door site.\n    // most cases...\n    if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n        return;\n    }\n    if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n        let didSomething = true;\n        let k = 1;\n        while (didSomething) {\n            didSomething = false;\n            if (map.get(x - k, y) === 0) {\n                if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n                    map[x - k][y] = tile;\n                    didSomething = true;\n                }\n            }\n            if (map.get(x + k, y) === 0) {\n                if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n                    map[x + k][y] = tile;\n                    didSomething = true;\n                }\n            }\n            ++k;\n        }\n    }\n    else {\n        let didSomething = true;\n        let k = 1;\n        while (didSomething) {\n            didSomething = false;\n            if (map.get(x, y - k) === 0) {\n                if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n                    map[x][y - k] = opts.door;\n                    didSomething = true;\n                }\n            }\n            if (map.get(x, y + k) === 0) {\n                if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n                    map[x][y + k] = opts.door;\n                    didSomething = true;\n                }\n            }\n            ++k;\n        }\n    }\n}\nexport function roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n    let xRoom, yRoom, xSite, ySite, i, j;\n    // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n    for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n        for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n            if (roomGrid[xRoom][yRoom]) {\n                xSite = xRoom + roomToSiteX;\n                ySite = yRoom + roomToSiteY;\n                for (i = xSite - 1; i <= xSite + 1; i++) {\n                    for (j = ySite - 1; j <= ySite + 1; j++) {\n                        if (!map.hasXY(i, j) ||\n                            map.isBoundaryXY(i, j) ||\n                            !(map.get(i, j) === SITE.NOTHING)) {\n                            // console.log('- NO');\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // console.log('- YES');\n    return true;\n}\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(grid, x, y, isOpen) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    const fnOpen = typeof isOpen === 'function'\n        ? isOpen\n        : (v) => v == isOpen;\n    solutionDir = GW.utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (grid.hasXY(oppX, oppY) &&\n            grid.hasXY(newX, newY) &&\n            fnOpen(grid[oppX][oppY], oppX, oppY, grid)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GW.utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GW.utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function forceRoomAtMapLoc(map, xy, roomGrid, room, opts) {\n    // console.log('forceRoomAtMapLoc', xy);\n    // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SEQ.length; i++) {\n        const x = Math.floor(SEQ[i] / map.height);\n        const y = SEQ[i] % map.height;\n        if (roomGrid[x][y])\n            continue;\n        const dir = directionOfDoorSite(roomGrid, x, y, SITE.FLOOR);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const dx = xy[0] - x;\n            const dy = xy[1] - y;\n            if (roomFitsAt(map, roomGrid, dx, dy)) {\n                GW.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || SITE.FLOOR;\n                });\n                if (opts.room.door !== false) {\n                    const door = opts.room.door === true || !opts.room.door\n                        ? SITE.DOOR\n                        : opts.room.door;\n                    map[xy[0]][xy[1]] = door; // Door site.\n                }\n                // TODO - Update doors - we may have to erase one...\n                room.translate(dx, dy);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction attachRoomAtMapDoor(map, mapDoors, roomGrid, room, opts) {\n    const doorIndexes = GW.random.sequence(mapDoors.length);\n    // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < doorIndexes.length; i++) {\n        const index = doorIndexes[i];\n        const door = mapDoors[index];\n        if (!door)\n            continue;\n        const x = door[0];\n        const y = door[1];\n        if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction attachRoomAtXY(map, x, y, roomGrid, room, opts) {\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    const dirs = GW.random.sequence(4);\n    // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n    for (let dir of dirs) {\n        const oppDir = (dir + 2) % 4;\n        const door = doorSites[oppDir];\n        if (!door)\n            continue;\n        if (door[0] != -1 &&\n            roomFitsAt(map, roomGrid, x - door[0], y - door[1])) {\n            // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n            // Room fits here.\n            const offX = x - door[0];\n            const offY = y - door[1];\n            GW.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n                map[i][j] = opts.room.tile || SITE.FLOOR;\n            });\n            attachDoor(map, room, opts, x, y, oppDir);\n            room.translate(offX, offY);\n            // const newDoors = doorSites.map((site) => {\n            //     const x0 = site[0] + offX;\n            //     const y0 = site[1] + offY;\n            //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n            //     return [x0, y0] as GW.utils.Loc;\n            // });\n            return true;\n        }\n    }\n    return false;\n}\nexport function chooseRandomDoorSites(sourceGrid, floorTile) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    floorTile = floorTile || SITE.FLOOR;\n    const grid = GW.grid.alloc(sourceGrid.width, sourceGrid.height);\n    grid.copy(sourceGrid);\n    for (i = 0; i < grid.width; i++) {\n        for (j = 0; j < grid.height; j++) {\n            if (!grid[i][j]) {\n                dir = directionOfDoorSite(grid, i, j, floorTile);\n                if (dir != GW.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + DIRS[dir][0];\n                    newY = j + DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && grid.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (grid[newX][newY]) {\n                            doorSiteFailed = true;\n                        }\n                        newX += DIRS[dir][0];\n                        newY += DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        grid[i][j] = dir + 200; // So as not to conflict with other tiles.\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = grid.randomMatchingLoc(dir + 200) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    GW.grid.free(grid);\n    return doorSites;\n}\nfunction fillCostGrid(source, costGrid) {\n    source.forEach((_v, x, y) => {\n        costGrid[x][y] = SITE.isPassable(source, x, y)\n            ? 1\n            : GW.path.OBSTRUCTION;\n    });\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function addLoops(grid, minimumPathingDistance, maxConnectionLength) {\n    let startX, startY, endX, endY;\n    let i, j, d, x, y;\n    minimumPathingDistance =\n        minimumPathingDistance ||\n            Math.floor(Math.min(grid.width, grid.height) / 2);\n    maxConnectionLength = maxConnectionLength || 1; // by default only break walls down\n    const siteGrid = grid;\n    const pathGrid = GW.grid.alloc(grid.width, grid.height);\n    const costGrid = GW.grid.alloc(grid.width, grid.height);\n    const dirCoords = [\n        [1, 0],\n        [0, 1],\n    ];\n    fillCostGrid(grid, costGrid);\n    function isValidTunnelStart(x, y, dir) {\n        if (!grid.hasXY(x, y))\n            return false;\n        if (!grid.hasXY(x + dir[1], y + dir[0]))\n            return false;\n        if (!grid.hasXY(x - dir[1], y - dir[0]))\n            return false;\n        if (grid.get(x, y))\n            return false;\n        if (grid.get(x + dir[1], y + dir[0]))\n            return false;\n        if (grid.get(x - dir[1], y - dir[0]))\n            return false;\n        return true;\n    }\n    function isValidTunnelEnd(x, y, dir) {\n        if (!grid.hasXY(x, y))\n            return false;\n        if (!grid.hasXY(x + dir[1], y + dir[0]))\n            return false;\n        if (!grid.hasXY(x - dir[1], y - dir[0]))\n            return false;\n        if (grid.get(x, y))\n            return true;\n        if (grid.get(x + dir[1], y + dir[0]))\n            return true;\n        if (grid.get(x - dir[1], y - dir[0]))\n            return true;\n        return false;\n    }\n    for (i = 0; i < SEQ.length; i++) {\n        x = Math.floor(SEQ[i] / siteGrid.height);\n        y = SEQ[i] % siteGrid.height;\n        const cell = siteGrid[x][y];\n        if (!cell) {\n            for (d = 0; d <= 1; d++) {\n                // Try a horizontal door, and then a vertical door.\n                let dir = dirCoords[d];\n                if (!isValidTunnelStart(x, y, dir))\n                    continue;\n                j = maxConnectionLength;\n                // check up/left\n                if (grid.hasXY(x + dir[0], y + dir[1]) &&\n                    SITE.isPassable(grid, x + dir[0], y + dir[1])) {\n                    // just can't build directly into a door\n                    if (!grid.hasXY(x - dir[0], y - dir[1]) ||\n                        SITE.isDoor(grid, x - dir[0], y - dir[1])) {\n                        continue;\n                    }\n                }\n                else if (grid.hasXY(x - dir[0], y - dir[1]) &&\n                    SITE.isPassable(grid, x - dir[0], y - dir[1])) {\n                    if (!grid.hasXY(x + dir[0], y + dir[1]) ||\n                        SITE.isDoor(grid, x + dir[0], y + dir[1])) {\n                        continue;\n                    }\n                    dir = dir.map((v) => -1 * v);\n                }\n                else {\n                    continue; // not valid start for tunnel\n                }\n                startX = x + dir[0];\n                startY = y + dir[1];\n                endX = x;\n                endY = y;\n                for (j = 0; j < maxConnectionLength; ++j) {\n                    endX -= dir[0];\n                    endY -= dir[1];\n                    // if (grid.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                    if (isValidTunnelEnd(endX, endY, dir)) {\n                        break;\n                    }\n                }\n                if (j < maxConnectionLength) {\n                    GW.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                    // pathGrid.fill(30000);\n                    // pathGrid[startX][startY] = 0;\n                    // dijkstraScan(pathGrid, costGrid, false);\n                    if (pathGrid[endX][endY] > minimumPathingDistance &&\n                        pathGrid[endX][endY] < 30000) {\n                        // and if the pathing distance between the two flanking floor tiles exceeds minimumPathingDistance,\n                        // dungeon.debug(\n                        //     'Adding Loop',\n                        //     startX,\n                        //     startY,\n                        //     ' => ',\n                        //     endX,\n                        //     endY,\n                        //     ' : ',\n                        //     pathGrid[endX][endY]\n                        // );\n                        while (endX !== startX || endY !== startY) {\n                            if (grid.get(endX, endY) == 0) {\n                                grid[endX][endY] = SITE.FLOOR;\n                                costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                            }\n                            endX += dir[0];\n                            endY += dir[1];\n                        }\n                        // TODO - Door is optional\n                        grid[x][y] = SITE.DOOR; // then turn the tile into a doorway.\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    GW.grid.free(pathGrid);\n    GW.grid.free(costGrid);\n}\nexport function addLakes(map, opts = {}) {\n    let i, j, k;\n    let x, y;\n    let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n    let count = 0;\n    lakeMaxHeight = opts.height || 15; // TODO - Make this a range \"5-15\"\n    lakeMaxWidth = opts.width || 30; // TODO - Make this a range \"5-30\"\n    lakeMinSize = opts.minSize || 5;\n    tries = opts.tries || 20;\n    maxCount = opts.count || 1;\n    canDisrupt = opts.canDisrupt || false;\n    const wreath = opts.wreath || 0; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n    const wreathTile = opts.wreathTile || SITE.SHALLOW;\n    const tile = opts.tile || SITE.LAKE;\n    const lakeGrid = GW.grid.alloc(map.width, map.height, 0);\n    let attempts = 0;\n    while (attempts < maxCount && count < maxCount) {\n        // lake generations\n        const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n            maxCount) + lakeMinSize;\n        const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n            maxCount) + lakeMinSize;\n        lakeGrid.fill(SITE.NOTHING);\n        const bounds = lakeGrid.fillBlob(5, 4, 4, width, height, 55, 'ffffftttt', 'ffffttttt');\n        // lakeGrid.dump();\n        let success = false;\n        for (k = 0; k < tries && !success; k++) {\n            // placement attempts\n            // propose a position for the top-left of the lakeGrid in the dungeon\n            x = GW.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n            y = GW.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n            if (canDisrupt || !lakeDisruptsPassability(map, lakeGrid, -x, -y)) {\n                // level with lake is completely connected\n                //   dungeon.debug(\"Placed a lake!\", x, y);\n                success = true;\n                // copy in lake\n                for (i = 0; i < bounds.width; i++) {\n                    // skip boundary\n                    for (j = 0; j < bounds.height; j++) {\n                        // skip boundary\n                        if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                            const sx = i + bounds.x + x;\n                            const sy = j + bounds.y + y;\n                            map[sx][sy] = tile;\n                            if (wreath) {\n                                map.forCircle(sx, sy, wreath, (v, i, j) => {\n                                    if (v === SITE.FLOOR || v === SITE.DOOR) {\n                                        map[i][j] = wreathTile;\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n        }\n        if (success) {\n            ++count;\n        }\n        else {\n            ++attempts;\n        }\n    }\n    GW.grid.free(lakeGrid);\n    return count;\n}\nfunction lakeDisruptsPassability(map, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n    const walkableGrid = GW.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    map.forEach((v, i, j) => {\n        const lakeX = i + lakeToMapX;\n        const lakeY = j + lakeToMapY;\n        if (!v) {\n            return; // not walkable\n        }\n        else if (SITE.isStairs(map, i, j)) {\n            if (lakeGrid.get(lakeX, lakeY)) {\n                disrupts = true;\n            }\n            else {\n                walkableGrid[i][j] = 1;\n            }\n        }\n        else if (SITE.isPassable(map, i, j)) {\n            if (lakeGrid.get(lakeX, lakeY))\n                return;\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GW.grid.free(walkableGrid);\n    return disrupts;\n}\nfunction isBridgeCandidate(map, x, y, bridgeDir) {\n    if (map.get(x, y) === SITE.BRIDGE)\n        return true;\n    if (!SITE.isAnyWater(map, x, y))\n        return false;\n    if (!SITE.isAnyWater(map, x + bridgeDir[1], y + bridgeDir[0]))\n        return false;\n    if (!SITE.isAnyWater(map, x - bridgeDir[1], y - bridgeDir[0]))\n        return false;\n    return true;\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function addBridges(map, minimumPathingDistance, maxConnectionLength) {\n    let newX, newY;\n    let i, j, d, x, y;\n    maxConnectionLength = maxConnectionLength || 1; // by default only break walls down\n    const siteGrid = map;\n    const pathGrid = GW.grid.alloc(map.width, map.height);\n    const costGrid = GW.grid.alloc(map.width, map.height);\n    const dirCoords = [\n        [1, 0],\n        [0, 1],\n    ];\n    fillCostGrid(map, costGrid);\n    for (i = 0; i < SEQ.length; i++) {\n        x = Math.floor(SEQ[i] / siteGrid.height);\n        y = SEQ[i] % siteGrid.height;\n        if (map.hasXY(x, y) &&\n            map.get(x, y) &&\n            SITE.isPassable(map, x, y) &&\n            !SITE.isAnyWater(map, x, y)) {\n            for (d = 0; d <= 1; d++) {\n                // Try right, then down\n                const bridgeDir = dirCoords[d];\n                newX = x + bridgeDir[0];\n                newY = y + bridgeDir[1];\n                j = maxConnectionLength;\n                if (!map.hasXY(newX, newY))\n                    continue;\n                // check for line of lake tiles\n                // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                if (SITE.isAnyWater(map, newX, newY)) {\n                    for (j = 0; j < maxConnectionLength; ++j) {\n                        newX += bridgeDir[0];\n                        newY += bridgeDir[1];\n                        // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                        if (!SITE.isAnyWater(map, newX, newY)) {\n                            break;\n                        }\n                    }\n                }\n                if (map.get(newX, newY) &&\n                    SITE.isPassable(map, newX, newY) &&\n                    j < maxConnectionLength) {\n                    GW.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                    // pathGrid.fill(30000);\n                    // pathGrid[newX][newY] = 0;\n                    // dijkstraScan(pathGrid, costGrid, false);\n                    if (pathGrid[x][y] > minimumPathingDistance &&\n                        pathGrid[x][y] < GW.path.NO_PATH) {\n                        // and if the pathing distance between the two flanking floor tiles exceeds minimumPathingDistance,\n                        // dungeon.debug(\n                        //     'Adding Bridge',\n                        //     x,\n                        //     y,\n                        //     ' => ',\n                        //     newX,\n                        //     newY\n                        // );\n                        while (x !== newX || y !== newY) {\n                            if (isBridgeCandidate(map, x, y, bridgeDir)) {\n                                map[x][y] = SITE.BRIDGE;\n                                costGrid[x][y] = 1; // (Cost map also needs updating.)\n                            }\n                            else {\n                                map[x][y] = SITE.FLOOR;\n                                costGrid[x][y] = 1;\n                            }\n                            x += bridgeDir[0];\n                            y += bridgeDir[1];\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    GW.grid.free(pathGrid);\n    GW.grid.free(costGrid);\n}\nexport function removeDiagonalOpenings(grid) {\n    let i, j, k, x1, y1;\n    let diagonalCornerRemoved;\n    do {\n        diagonalCornerRemoved = false;\n        for (i = 0; i < grid.width - 1; i++) {\n            for (j = 0; j < grid.height - 1; j++) {\n                for (k = 0; k <= 1; k++) {\n                    if (SITE.isPassable(grid, i + k, j) &&\n                        !SITE.isPassable(grid, i + (1 - k), j) &&\n                        SITE.isObstruction(grid, i + (1 - k), j) &&\n                        !SITE.isPassable(grid, i + k, j + 1) &&\n                        SITE.isObstruction(grid, i + k, j + 1) &&\n                        SITE.isPassable(grid, i + (1 - k), j + 1)) {\n                        if (GW.random.chance(50)) {\n                            x1 = i + (1 - k);\n                            y1 = j;\n                        }\n                        else {\n                            x1 = i + k;\n                            y1 = j + 1;\n                        }\n                        diagonalCornerRemoved = true;\n                        grid[x1][y1] = SITE.FLOOR; // todo - pick one of the passable tiles around it...\n                    }\n                }\n            }\n        }\n    } while (diagonalCornerRemoved == true);\n}\nexport function finishDoors(grid) {\n    grid.forEach((cell, x, y) => {\n        if (grid.isBoundaryXY(x, y))\n            return;\n        // todo - isDoorway...\n        if (cell == SITE.DOOR) {\n            if (\n            // TODO - isPassable\n            (grid.get(x + 1, y) == SITE.FLOOR ||\n                grid.get(x - 1, y) == SITE.FLOOR) &&\n                (grid.get(x, y + 1) == SITE.FLOOR ||\n                    grid.get(x, y - 1) == SITE.FLOOR)) {\n                // If there's passable terrain to the left or right, and there's passable terrain\n                // above or below, then the door is orphaned and must be removed.\n                grid[x][y] = SITE.FLOOR; // todo - take passable neighbor value\n            }\n            else if (\n            // todo - isPassable\n            (grid.get(x + 1, y) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x - 1, y) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x, y + 1) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x, y - 1) !== SITE.FLOOR ? 1 : 0) >=\n                3) {\n                // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                // then the door is orphaned and must be removed.\n                grid[x][y] = SITE.FLOOR; // todo - take passable neighbor\n            }\n        }\n    });\n}\nexport function finishWalls(grid, tile = SITE.WALL) {\n    grid.forEach((cell, i, j) => {\n        if (cell == SITE.NOTHING) {\n            grid[i][j] = tile;\n        }\n    });\n}\n"],"names":["isPassable","grid","x","y","v","get","isDoor","isObstruction","isStairs","isAnyWater","Hall","[object Object]","loc","dir","length","width","this","doors","d","GW.utils","DIRS","UP","DOWN","x2","y2","dx","dy","forEach","Room","digger","height","hall","cx","Math","floor","cy","translate","rooms","install","id","fn","config","data","checkConfig","expected","Object","entries","key","expect","have","undefined","ERROR","Array","isArray","range","GW.range","make","rectangular","value","tile","fill","fillRect","destX","destY","blobGrid","GW.grid","alloc","minWidth","maxWidth","minHeight","maxHeight","bounds","fillBlob","offsetZip","free","choices","GW.random","item","bind","weighted","digConfig","opts","assign","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","min","max","minorWidth","minorHeight","radius","fillCircle","ringMinWidth","holeMinSize","holeChance","chance","count","i","minX","maxX","minY","maxY","chunkCount","valueBounds","halls","pickWidth","clamp","Number","parseInt","_pickWidth","pickLengthRange","pickHallDirection","room","NO_DIRECTION","dirs","sequence","hi","door","hasXY","pickHallExits","newX","newY","obliqueChance","firstOpt","allowObliqueHallwayExit","hallDoors","dir2","dig","DIR","x0","y0","LEFT","SEQ","attachRoom","map","roomGrid","doorSites","directionOfDoorSite","oppDir","offsetX","offsetY","roomFitsAt","_d","_s","j","attachDoor","didSomething","k","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","isBoundaryXY","isOpen","solutionDir","oppX","oppY","fnOpen","attachRoomAtMapDoor","mapDoors","doorIndexes","attachRoomAtXY","offX","offY","chooseRandomDoorSites","sourceGrid","floorTile","doorSiteFailed","copy","randomMatchingLoc","fillCostGrid","source","costGrid","_v","SITE.isPassable","GW.path","OBSTRUCTION","lakeDisruptsPassability","lakeGrid","lakeToMapX","lakeToMapY","walkableGrid","disrupts","lakeX","lakeY","SITE.isStairs","first","floodFill","isBridgeCandidate","bridgeDir","SITE.isAnyWater","removeDiagonalOpenings","x1","y1","diagonalCornerRemoved","SITE.isObstruction","finishDoors","cell","finishWalls","tries","locs","name","ROOM.rooms","roomConfig","hallConfig","HALL.halls","attachHall","hallChance","result","xy","minimumPathingDistance","maxConnectionLength","startX","startY","endX","endY","siteGrid","pathGrid","dirCoords","isValidTunnelStart","isValidTunnelEnd","SITE.isDoor","calculateDistances","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","canDisrupt","minSize","wreath","wreathTile","attempts","round","success","sx","sy","forCircle","NO_PATH"],"mappings":"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"}