{"version":3,"file":"gw-dig.min.js","sources":["../js/room.js","../js/gw.js","../js/hall.js","../js/dig.js"],"sourcesContent":["import * as GW from 'gw-utils';\nimport * as CONST from './gw';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GW.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room {\n    constructor(digger, x, y, width, height) {\n        this.doors = [];\n        this.hall = null;\n        this.digger = digger;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\nexport var rooms = {};\nexport function install(id, fn, config) {\n    // @ts-ignore\n    const data = fn(config || {}); // call to have function setup the config\n    data.fn = fn;\n    data.id = id;\n    rooms[id] = data;\n    return data;\n}\ninstall('DEFAULT', rectangular);\nexport function checkConfig(config, expected) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                return GW.utils.ERROR('Missing required config for digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GW.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport function cavern(config, grid) {\n    config = checkConfig(config, { width: 12, height: 8 });\n    if (!grid)\n        return config;\n    let destX, destY;\n    let blobGrid;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    blobGrid = GW.grid.alloc(grid.width, grid.height, 0);\n    const minWidth = Math.floor(0.5 * width); // 6\n    const maxWidth = width;\n    const minHeight = Math.floor(0.5 * height); // 4\n    const maxHeight = height;\n    grid.fill(0);\n    const bounds = blobGrid.fillBlob(5, minWidth, minHeight, maxWidth, maxHeight, 55, 'ffffffttt', 'ffffttttt');\n    // Position the new cave in the middle of the grid...\n    destX = Math.floor((grid.width - bounds.width) / 2);\n    destY = Math.floor((grid.height - bounds.height) / 2);\n    // ...and copy it to the master grid.\n    GW.grid.offsetZip(grid, blobGrid, destX - bounds.x, destY - bounds.y, tile);\n    GW.grid.free(blobGrid);\n    return new Room(config.id, destX, destY, bounds.width, bounds.height);\n}\nexport function choiceRoom(config, grid) {\n    config = config || {};\n    let choices;\n    if (Array.isArray(config.choices)) {\n        choices = GW.random.item.bind(GW.random, config.choices);\n    }\n    else if (typeof config.choices == 'object') {\n        choices = GW.random.weighted.bind(GW.random, config.choices);\n    }\n    else {\n        GW.utils.ERROR('Expected choices to be either array of room ids or map - ex: { ROOM_ID: weight }');\n    }\n    if (!grid)\n        return config;\n    let id = choices();\n    const digger = rooms[id];\n    if (!digger) {\n        GW.utils.ERROR('Missing digger choice: ' + id);\n    }\n    let digConfig = digger;\n    if (config.opts) {\n        digConfig = Object.assign({}, digger, config.opts);\n    }\n    // debug('Chose room: ', id);\n    return digger.fn(digConfig, grid);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport function entrance(config, grid) {\n    config = checkConfig(config, { width: 20, height: 10 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    const roomWidth = Math.floor(0.4 * width); // 8\n    const roomHeight = height;\n    const roomWidth2 = width;\n    const roomHeight2 = Math.floor(0.5 * height); // 5\n    // ALWAYS start at bottom+center of map\n    const roomX = Math.floor(grid.width / 2 - roomWidth / 2 - 1);\n    const roomY = grid.height - roomHeight - 2;\n    const roomX2 = Math.floor(grid.width / 2 - roomWidth2 / 2 - 1);\n    const roomY2 = grid.height - roomHeight2 - 2;\n    grid.fill(0);\n    grid.fillRect(roomX, roomY, roomWidth, roomHeight, tile);\n    grid.fillRect(roomX2, roomY2, roomWidth2, roomHeight2, tile);\n    return new Room(config.id, Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n}\nexport function cross(config, grid) {\n    config = checkConfig(config, { width: 12, height: 20 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    const roomWidth = width;\n    const roomWidth2 = Math.max(3, Math.floor((width * GW.random.range(25, 75)) / 100)); // [4,20]\n    const roomHeight = Math.max(3, Math.floor((height * GW.random.range(25, 75)) / 100)); // [2,5]\n    const roomHeight2 = height;\n    const roomX = Math.floor((grid.width - roomWidth) / 2);\n    const roomX2 = roomX + GW.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n    const roomY2 = Math.floor((grid.height - roomHeight2) / 2);\n    const roomY = roomY2 + GW.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n    grid.fill(0);\n    grid.fillRect(roomX, roomY, roomWidth, roomHeight, tile);\n    grid.fillRect(roomX2, roomY2, roomWidth2, roomHeight2, tile);\n    return new Room(config.id, roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n}\nexport function symmetricalCross(config, grid) {\n    config = checkConfig(config, { width: 7, height: 7 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    let minorWidth = Math.max(3, Math.floor((width * GW.random.range(25, 50)) / 100)); // [2,4]\n    // if (height % 2 == 0 && minorWidth > 2) {\n    //     minorWidth -= 1;\n    // }\n    let minorHeight = Math.max(3, Math.floor((height * GW.random.range(25, 50)) / 100)); // [2,3]?\n    // if (width % 2 == 0 && minorHeight > 2) {\n    //     minorHeight -= 1;\n    // }\n    grid.fill(0);\n    const x = Math.floor((grid.width - width) / 2);\n    const y = Math.floor((grid.height - minorHeight) / 2);\n    grid.fillRect(x, y, width, minorHeight, tile);\n    const x2 = Math.floor((grid.width - minorWidth) / 2);\n    const y2 = Math.floor((grid.height - height) / 2);\n    grid.fillRect(x2, y2, minorWidth, height, tile);\n    return new Room(config.id, Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n}\nexport function rectangular(config, grid) {\n    config = checkConfig(config, { width: [3, 6], height: [3, 6] });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor((grid.width - width) / 2);\n    const y = Math.floor((grid.height - height) / 2);\n    grid.fillRect(x, y, width, height, tile);\n    return new Room(config.id, x, y, width, height);\n}\nexport function circular(config, grid) {\n    config = checkConfig(config, { radius: [3, 4] });\n    if (!grid)\n        return config;\n    const radius = config.radius.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor(grid.width / 2);\n    const y = Math.floor(grid.height / 2);\n    if (radius > 1) {\n        grid.fillCircle(x, y, radius, tile);\n    }\n    return new Room(config.id, x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n}\nexport function brogueDonut(config, grid) {\n    config = checkConfig(config, {\n        radius: [5, 10],\n        ringMinWidth: 3,\n        holeMinSize: 3,\n        holeChance: 50,\n    });\n    if (!grid)\n        return config;\n    const radius = config.radius.value();\n    const ringMinWidth = config.ringMinWidth.value();\n    const holeMinSize = config.holeMinSize.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor(grid.width / 2);\n    const y = Math.floor(grid.height / 2);\n    grid.fillCircle(x, y, radius, tile);\n    if (radius > ringMinWidth + holeMinSize &&\n        GW.random.chance(config.holeChance.value())) {\n        grid.fillCircle(x, y, GW.random.range(holeMinSize, radius - holeMinSize), 0);\n    }\n    return new Room(config.id, x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n}\nexport function chunkyRoom(config, grid) {\n    config = checkConfig(config, {\n        count: [2, 12],\n        width: [5, 20],\n        height: [5, 20],\n    });\n    if (!grid)\n        return config;\n    let i, x, y;\n    let minX, maxX, minY, maxY;\n    let chunkCount = config.count.value();\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    minX = Math.floor(grid.width / 2) - Math.floor(width / 2);\n    maxX = Math.floor(grid.width / 2) + Math.floor(width / 2);\n    minY = Math.floor(grid.height / 2) - Math.floor(height / 2);\n    maxY = Math.floor(grid.height / 2) + Math.floor(height / 2);\n    grid.fill(0);\n    grid.fillCircle(Math.floor(grid.width / 2), Math.floor(grid.height / 2), 2, tile);\n    for (i = 0; i < chunkCount;) {\n        x = GW.random.range(minX, maxX);\n        y = GW.random.range(minY, maxY);\n        if (grid[x][y]) {\n            //            colorOverDungeon(/* Color. */darkGray);\n            //            hiliteGrid(grid, /* Color. */white, 100);\n            if (x - 2 < minX)\n                continue;\n            if (x + 2 > maxX)\n                continue;\n            if (y - 2 < minY)\n                continue;\n            if (y + 2 > maxY)\n                continue;\n            grid.fillCircle(x, y, 2, tile);\n            i++;\n            //            hiliteGrid(grid, /* Color. */green, 50);\n            //            temporaryMessage(\"Added a chunk:\", true);\n        }\n    }\n    const bounds = grid.valueBounds(tile);\n    return new Room(config.id, bounds.x, bounds.y, bounds.width, bounds.height);\n}\n","export const NOTHING = 0;\nexport const FLOOR = 1;\nexport const DOOR = 2;\nexport const WALL = 3;\nexport const LAKE = 4;\nexport const BRIDGE = 5;\n","import * as HALL from 'gw-utils';\nimport * as CONST from './gw';\nimport { Hall } from './room';\nconst DIRS = HALL.utils.DIRS;\nexport var halls = {};\nexport function install(id, fn, config = {}) {\n    // @ts-ignore\n    const data = fn(config || {}); // call to have function setup the config\n    data.fn = fn;\n    data.id = id;\n    halls[id] = data;\n    return data;\n}\ninstall('DEFAULT', dig, { chance: 15 });\nexport function pickWidth(opts = {}) {\n    return HALL.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (typeof opts === 'number')\n        return opts;\n    if (!opts)\n        return 1;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = HALL.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = HALL.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(HALL.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLengthRange(dir, opts) {\n    if (!opts.length)\n        opts.length = [];\n    if (Array.isArray(opts.length)) {\n        if (dir == HALL.utils.UP || dir == HALL.utils.DOWN) {\n            return HALL.range.make(opts.length[1] || [2, 9]);\n        }\n        else {\n            return HALL.range.make(opts.length[0] || [9, 15]);\n        }\n    }\n    else {\n        return HALL.range.make(opts.length);\n    }\n}\nexport function pickHallDirection(grid, room, opts) {\n    const doors = room.doors;\n    // Pick a direction.\n    let dir = opts.dir || HALL.utils.NO_DIRECTION;\n    if (dir == HALL.utils.NO_DIRECTION) {\n        const dirs = HALL.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = pickLengthRange(dir, opts).hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (grid.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = HALL.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(grid, x, y, dir, opts) {\n    let newX, newY;\n    const obliqueChance = HALL.utils.firstOpt('obliqueChance', opts, 15);\n    const allowObliqueHallwayExit = HALL.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !grid.hasXY(newX, newY) ||\n            grid[newX][newY]) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport function digWide(opts, grid, room) {\n    opts = opts || {};\n    if (!opts.width) {\n        opts.width = 2;\n    }\n    if (!grid) {\n        return opts;\n    }\n    const dir = pickHallDirection(grid, room, opts);\n    if (dir === HALL.utils.NO_DIRECTION)\n        return null;\n    const length = pickLengthRange(dir, opts).value();\n    const width = pickWidth(opts) || 2;\n    const door = room.doors[dir];\n    const tile = opts.tile || CONST.FLOOR;\n    const hallDoors = [];\n    let x0, y0;\n    let hall;\n    if (dir === HALL.utils.UP) {\n        x0 = Math.max(door[0] - 1, room.x);\n        y0 = door[1] - length + 1;\n        for (let x = x0; x < x0 + width; ++x) {\n            for (let y = y0; y < y0 + length; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0, y0 - 1];\n        hall = new Hall([x0, door[1]], dir, length, 2);\n    }\n    else if (dir === HALL.utils.DOWN) {\n        x0 = Math.max(door[0] - 1, room.x);\n        y0 = door[1] + length - 1;\n        for (let x = x0; x < x0 + width; ++x) {\n            for (let y = y0; y > y0 - length; --y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0, y0 + 1];\n        hall = new Hall([x0, door[1]], dir, length, 2);\n    }\n    else if (dir === HALL.utils.LEFT) {\n        x0 = door[0] - length + 1;\n        y0 = Math.max(door[1] - 1, room.y);\n        for (let x = x0; x < x0 + length; ++x) {\n            for (let y = y0; y < y0 + width; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0 - 1, y0];\n        hall = new Hall([door[0], y0], dir, length, 2);\n    }\n    else {\n        //if (dir === GW.utils.RIGHT) {\n        x0 = door[0] + length - 1;\n        y0 = Math.max(door[1] - 1, room.y);\n        for (let x = x0; x > x0 - length; --x) {\n            for (let y = y0; y < y0 + width; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0 + 1, y0];\n        hall = new Hall([door[0], y0], dir, length, width);\n    }\n    hall.doors = hallDoors;\n    hall.width = width;\n    return hall;\n}\nexport function dig(opts, grid, room) {\n    opts = opts || {};\n    opts.width = 1;\n    if (!grid) {\n        return opts;\n    }\n    const dir = pickHallDirection(grid, room, opts);\n    if (dir === HALL.utils.NO_DIRECTION)\n        return null;\n    const length = pickLengthRange(dir, opts).value();\n    const door = room.doors[dir];\n    const DIR = DIRS[dir];\n    let x = door[0];\n    let y = door[1];\n    const tile = opts.tile || CONST.FLOOR;\n    for (let i = 0; i < length; i++) {\n        grid[x][y] = tile;\n        x += DIR[0];\n        y += DIR[1];\n    }\n    x -= DIR[0];\n    y -= DIR[1];\n    const hall = new Hall(door, dir, length);\n    hall.doors = pickHallExits(grid, x, y, dir, opts);\n    return hall;\n}\n","import * as GW from 'gw-utils';\nimport * as CONST from './gw';\nimport * as HALL from './hall';\nimport * as ROOM from './room';\n// import * as MAP from 'gw-map.js';\nexport * from './gw';\nimport * as room_1 from './room';\nexport { room_1 as room };\nexport { Room, Hall } from './room';\nconst DIRS = GW.utils.DIRS;\nvar SEQ;\nexport function start(map) {\n    SEQ = GW.random.sequence(map.width * map.height);\n    map.fill(0);\n}\nexport function finish(map) {\n    removeDiagonalOpenings(map);\n    finishWalls(map);\n    finishDoors(map);\n}\n// Returns an array of door sites if successful\nexport function dig(map, opts) {\n    opts = opts || { room: 'DEFAULT', hall: 'DEFAULT', tries: 10 };\n    if (typeof opts === 'string') {\n        opts = { room: opts };\n    }\n    if (opts.loc) {\n        opts.locs = [opts.loc];\n    }\n    if (!opts.room)\n        opts.room = 'DEFAULT';\n    if (typeof opts.room === 'string') {\n        const name = opts.room;\n        opts.room = ROOM.rooms[name];\n        if (!opts.room) {\n            GW.utils.ERROR('Failed to find room: ' + name);\n        }\n    }\n    const roomConfig = opts.room;\n    if (opts.hall === true)\n        opts.hall = 'DEFAULT';\n    if (opts.hall !== false && !opts.hall)\n        opts.hall = 'DEFAULT';\n    if (typeof opts.hall === 'string') {\n        const name = opts.hall;\n        opts.hall = HALL.halls[name];\n        if (!opts.hall) {\n            GW.utils.ERROR('Failed to find hall: ' + name);\n            return null;\n        }\n    }\n    const hallConfig = opts.hall ? opts.hall : null;\n    let locs = opts.locs || null;\n    if (!locs || !Array.isArray(locs)) {\n        locs = null;\n        if (map.count(CONST.FLOOR) === 0) {\n            // empty map\n            const x = Math.floor(map.width / 2);\n            const y = map.height - 2;\n            locs = [[x, y]];\n        }\n    }\n    else if (locs &&\n        locs.length &&\n        locs.length == 2 &&\n        typeof locs[0] == 'number') {\n        // @ts-ignore\n        locs = [locs];\n    }\n    else if (locs.length == 0) {\n        locs = null;\n    }\n    const digger = opts.room;\n    const roomGrid = GW.grid.alloc(map.width, map.height);\n    let attachHall = false;\n    if (hallConfig) {\n        let hallChance = hallConfig.chance !== undefined ? hallConfig.chance : 15;\n        attachHall = GW.random.chance(hallChance);\n    }\n    // const force = config.force || false;\n    let result = false;\n    let room;\n    let tries = opts.tries || 10;\n    while (--tries >= 0 && !result) {\n        roomGrid.fill(CONST.NOTHING);\n        // dig the room in the center\n        room = digger.fn(roomConfig, roomGrid);\n        room.doors = chooseRandomDoorSites(roomGrid);\n        if (attachHall) {\n            room.hall = HALL.dig(hallConfig, roomGrid, room);\n        }\n        if (locs) {\n            // try the doors first\n            result = attachRoomAtMapDoor(map, locs, roomGrid, room, opts);\n        }\n        else {\n            result = attachRoom(map, roomGrid, room, opts);\n        }\n        // console.log(\n        //     'try',\n        //     room.hall ? 'hall: ' + room.hall.dir : 'no hall',\n        //     result\n        // );\n        // if (!result) {\n        //     roomGrid.dump();\n        //     map.dump();\n        //     console.log(\n        //         'room doors',\n        //         (room.hall ? room.hall.doors : room.doors).join(', ')\n        //     );\n        //     console.log('map locs', locs.join(', '));\n        // }\n    }\n    GW.grid.free(roomGrid);\n    return room && result ? room : null;\n}\nexport function attachRoom(map, roomGrid, room, opts) {\n    // console.log('attachRoom');\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SEQ.length; i++) {\n        const x = Math.floor(SEQ[i] / map.height);\n        const y = SEQ[i] % map.height;\n        if (!(map.get(x, y) == CONST.NOTHING))\n            continue;\n        const dir = GW.grid.directionOfDoorSite(map, x, y, CONST.FLOOR);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door)\n                continue;\n            const offsetX = x - door[0];\n            const offsetY = y - door[1];\n            if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n                // Room fits here.\n                GW.grid.offsetZip(map, roomGrid, offsetX, offsetY, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || CONST.FLOOR;\n                });\n                if (opts.room.door !== false) {\n                    const door = opts.room.door === true || !opts.room.door\n                        ? CONST.DOOR\n                        : opts.room.door;\n                    map[x][y] = door; // Door site.\n                }\n                // door[0] = -1;\n                // door[1] = -1;\n                room.translate(offsetX, offsetY);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n    let xRoom, yRoom, xSite, ySite, i, j;\n    // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n    for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n        for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n            if (roomGrid[xRoom][yRoom]) {\n                xSite = xRoom + roomToSiteX;\n                ySite = yRoom + roomToSiteY;\n                for (i = xSite - 1; i <= xSite + 1; i++) {\n                    for (j = ySite - 1; j <= ySite + 1; j++) {\n                        if (!map.hasXY(i, j) ||\n                            map.isBoundaryXY(i, j) ||\n                            !(map.get(i, j) === CONST.NOTHING)) {\n                            // console.log('- NO');\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // console.log('- YES');\n    return true;\n}\nexport function forceRoomAtMapLoc(map, xy, roomGrid, room, opts) {\n    // console.log('forceRoomAtMapLoc', xy);\n    // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SEQ.length; i++) {\n        const x = Math.floor(SEQ[i] / map.height);\n        const y = SEQ[i] % map.height;\n        if (roomGrid[x][y])\n            continue;\n        const dir = GW.grid.directionOfDoorSite(roomGrid, x, y, CONST.FLOOR);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const dx = xy[0] - x;\n            const dy = xy[1] - y;\n            if (roomFitsAt(map, roomGrid, dx, dy)) {\n                GW.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || CONST.FLOOR;\n                });\n                if (opts.room.door !== false) {\n                    const door = opts.room.door === true || !opts.room.door\n                        ? CONST.DOOR\n                        : opts.room.door;\n                    map[xy[0]][xy[1]] = door; // Door site.\n                }\n                // TODO - Update doors - we may have to erase one...\n                room.translate(dx, dy);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction attachRoomAtMapDoor(map, mapDoors, roomGrid, room, opts) {\n    const doorIndexes = GW.random.sequence(mapDoors.length);\n    // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < doorIndexes.length; i++) {\n        const index = doorIndexes[i];\n        const door = mapDoors[index];\n        if (!door)\n            continue;\n        const x = door[0];\n        const y = door[1];\n        if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction attachRoomAtXY(map, x, y, roomGrid, room, opts) {\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    const dirs = GW.random.sequence(4);\n    // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n    for (let dir of dirs) {\n        const oppDir = (dir + 2) % 4;\n        const door = doorSites[oppDir];\n        if (!door)\n            continue;\n        if (door[0] != -1 &&\n            roomFitsAt(map, roomGrid, x - door[0], y - door[1])) {\n            // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n            // Room fits here.\n            const offX = x - door[0];\n            const offY = y - door[1];\n            GW.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n                map[i][j] = opts.room.tile || CONST.FLOOR;\n            });\n            if (opts.room.door !== false) {\n                const door = opts.room.door === true || !opts.room.door\n                    ? CONST.DOOR\n                    : opts.room.door;\n                map[x][y] = door; // Door site.\n            }\n            room.translate(offX, offY);\n            // const newDoors = doorSites.map((site) => {\n            //     const x0 = site[0] + offX;\n            //     const y0 = site[1] + offY;\n            //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n            //     return [x0, y0] as GW.utils.Loc;\n            // });\n            return true;\n        }\n    }\n    return false;\n}\nexport function chooseRandomDoorSites(sourceGrid) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const grid = GW.grid.alloc(sourceGrid.width, sourceGrid.height);\n    grid.copy(sourceGrid);\n    for (i = 0; i < grid.width; i++) {\n        for (j = 0; j < grid.height; j++) {\n            if (!grid[i][j]) {\n                dir = GW.grid.directionOfDoorSite(grid, i, j, 1);\n                if (dir != GW.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + DIRS[dir][0];\n                    newY = j + DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && grid.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (grid[newX][newY]) {\n                            doorSiteFailed = true;\n                        }\n                        newX += DIRS[dir][0];\n                        newY += DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        grid[i][j] = dir + 200; // So as not to conflict with other tiles.\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = grid.randomMatchingLoc(dir + 200) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    GW.grid.free(grid);\n    return doorSites;\n}\nexport function isPassable(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === CONST.FLOOR || v === CONST.DOOR || v === CONST.BRIDGE;\n}\nexport function isObstruction(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === CONST.NOTHING || v === CONST.WALL;\n}\nexport function removeDiagonalOpenings(grid) {\n    let i, j, k, x1, y1;\n    let diagonalCornerRemoved;\n    do {\n        diagonalCornerRemoved = false;\n        for (i = 0; i < grid.width - 1; i++) {\n            for (j = 0; j < grid.height - 1; j++) {\n                for (k = 0; k <= 1; k++) {\n                    if (isPassable(grid, i + k, j) &&\n                        !isPassable(grid, i + (1 - k), j) &&\n                        isObstruction(grid, i + (1 - k), j) &&\n                        !isPassable(grid, i + k, j + 1) &&\n                        isObstruction(grid, i + k, j + 1) &&\n                        isPassable(grid, i + (1 - k), j + 1)) {\n                        if (GW.random.chance(50)) {\n                            x1 = i + (1 - k);\n                            y1 = j;\n                        }\n                        else {\n                            x1 = i + k;\n                            y1 = j + 1;\n                        }\n                        diagonalCornerRemoved = true;\n                        grid[x1][y1] = CONST.FLOOR;\n                    }\n                }\n            }\n        }\n    } while (diagonalCornerRemoved == true);\n}\nexport function finishDoors(grid) {\n    grid.forEach((cell, x, y) => {\n        if (grid.isBoundaryXY(x, y))\n            return;\n        if (cell == CONST.DOOR) {\n            if ((grid.get(x + 1, y) == CONST.FLOOR ||\n                grid.get(x - 1, y) == CONST.FLOOR) &&\n                (grid.get(x, y + 1) == CONST.FLOOR ||\n                    grid.get(x, y - 1) == CONST.FLOOR)) {\n                // If there's passable terrain to the left or right, and there's passable terrain\n                // above or below, then the door is orphaned and must be removed.\n                grid[x][y] = CONST.FLOOR;\n            }\n            else if ((grid.get(x + 1, y) !== CONST.FLOOR ? 1 : 0) +\n                (grid.get(x - 1, y) !== CONST.FLOOR ? 1 : 0) +\n                (grid.get(x, y + 1) !== CONST.FLOOR ? 1 : 0) +\n                (grid.get(x, y - 1) !== CONST.FLOOR ? 1 : 0) >=\n                3) {\n                // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                // then the door is orphaned and must be removed.\n                grid[x][y] = CONST.FLOOR;\n            }\n        }\n    });\n}\nexport function finishWalls(grid) {\n    grid.forEach((cell, i, j) => {\n        if (cell == CONST.NOTHING) {\n            grid[i][j] = CONST.WALL;\n        }\n    });\n}\n"],"names":["Hall","[object Object]","loc","dir","length","width","this","doors","x","y","d","GW.utils","DIRS","UP","DOWN","x2","y2","dx","dy","forEach","Room","digger","height","hall","cx","Math","floor","cy","translate","rooms","install","id","fn","config","data","checkConfig","expected","Object","entries","key","expect","have","undefined","ERROR","Array","isArray","range","GW.range","make","rectangular","grid","value","tile","fill","fillRect","destX","destY","blobGrid","GW.grid","alloc","minWidth","maxWidth","minHeight","maxHeight","bounds","fillBlob","offsetZip","free","choices","GW.random","item","bind","weighted","digConfig","opts","assign","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","min","max","minorWidth","minorHeight","radius","fillCircle","ringMinWidth","holeMinSize","holeChance","chance","count","i","minX","maxX","minY","maxY","chunkCount","valueBounds","HALL.utils","halls","pickLengthRange","HALL.range","dig","room","NO_DIRECTION","dirs","HALL.random","sequence","hi","door","hasXY","pickHallDirection","DIR","newX","newY","obliqueChance","firstOpt","allowObliqueHallwayExit","hallDoors","dir2","pickHallExits","SEQ","attachRoom","map","roomGrid","doorSites","get","directionOfDoorSite","offsetX","offsetY","roomFitsAt","_d","_s","j","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","isBoundaryXY","attachRoomAtMapDoor","mapDoors","doorIndexes","attachRoomAtXY","offX","offY","chooseRandomDoorSites","sourceGrid","k","doorSiteFailed","copy","randomMatchingLoc","isPassable","v","isObstruction","removeDiagonalOpenings","x1","y1","diagonalCornerRemoved","finishDoors","cell","finishWalls","tries","locs","name","ROOM.rooms","roomConfig","HALL.halls","hallConfig","attachHall","hallChance","result","HALL.dig","xy"],"mappings":"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"}