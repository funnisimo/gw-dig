{"version":3,"file":"gw-dig.min.js","sources":["../js/room.js","../js/tiles.js","../js/hall.js","../js/dig.js"],"sourcesContent":["import * as GW from 'gw-utils';\nimport * as CONST from './tiles';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GW.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room {\n    constructor(digger, x, y, width, height) {\n        this.doors = [];\n        this.hall = null;\n        this.digger = digger;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\nexport var rooms = {};\nexport function install(id, fn, config) {\n    // @ts-ignore\n    const data = fn(config || {}); // call to have function setup the config\n    data.fn = fn;\n    data.id = id;\n    rooms[id] = data;\n    return data;\n}\ninstall('DEFAULT', rectangular);\nexport function checkConfig(config, expected) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                return GW.utils.ERROR('Missing required config for digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GW.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport function cavern(config, grid) {\n    config = checkConfig(config, { width: 12, height: 8 });\n    if (!grid)\n        return config;\n    let destX, destY;\n    let blobGrid;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    blobGrid = GW.grid.alloc(grid.width, grid.height, 0);\n    const minWidth = Math.floor(0.5 * width); // 6\n    const maxWidth = width;\n    const minHeight = Math.floor(0.5 * height); // 4\n    const maxHeight = height;\n    grid.fill(0);\n    const bounds = blobGrid.fillBlob(5, minWidth, minHeight, maxWidth, maxHeight, 55, 'ffffffttt', 'ffffttttt');\n    // Position the new cave in the middle of the grid...\n    destX = Math.floor((grid.width - bounds.width) / 2);\n    destY = Math.floor((grid.height - bounds.height) / 2);\n    // ...and copy it to the master grid.\n    GW.grid.offsetZip(grid, blobGrid, destX - bounds.x, destY - bounds.y, tile);\n    GW.grid.free(blobGrid);\n    return new Room(config.id, destX, destY, bounds.width, bounds.height);\n}\nexport function choiceRoom(config, grid) {\n    config = config || {};\n    let choices;\n    if (Array.isArray(config.choices)) {\n        choices = GW.random.item.bind(GW.random, config.choices);\n    }\n    else if (typeof config.choices == 'object') {\n        choices = GW.random.weighted.bind(GW.random, config.choices);\n    }\n    else {\n        GW.utils.ERROR('Expected choices to be either array of room ids or map - ex: { ROOM_ID: weight }');\n    }\n    if (!grid)\n        return config;\n    let id = choices();\n    const digger = rooms[id];\n    if (!digger) {\n        GW.utils.ERROR('Missing digger choice: ' + id);\n    }\n    let digConfig = digger;\n    if (config.opts) {\n        digConfig = Object.assign({}, digger, config.opts);\n    }\n    // debug('Chose room: ', id);\n    return digger.fn(digConfig, grid);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport function entrance(config, grid) {\n    config = checkConfig(config, { width: 20, height: 10 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    const roomWidth = Math.floor(0.4 * width); // 8\n    const roomHeight = height;\n    const roomWidth2 = width;\n    const roomHeight2 = Math.floor(0.5 * height); // 5\n    // ALWAYS start at bottom+center of map\n    const roomX = Math.floor(grid.width / 2 - roomWidth / 2 - 1);\n    const roomY = grid.height - roomHeight - 2;\n    const roomX2 = Math.floor(grid.width / 2 - roomWidth2 / 2 - 1);\n    const roomY2 = grid.height - roomHeight2 - 2;\n    grid.fill(0);\n    grid.fillRect(roomX, roomY, roomWidth, roomHeight, tile);\n    grid.fillRect(roomX2, roomY2, roomWidth2, roomHeight2, tile);\n    return new Room(config.id, Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n}\nexport function cross(config, grid) {\n    config = checkConfig(config, { width: 12, height: 20 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    const roomWidth = width;\n    const roomWidth2 = Math.max(3, Math.floor((width * GW.random.range(25, 75)) / 100)); // [4,20]\n    const roomHeight = Math.max(3, Math.floor((height * GW.random.range(25, 75)) / 100)); // [2,5]\n    const roomHeight2 = height;\n    const roomX = Math.floor((grid.width - roomWidth) / 2);\n    const roomX2 = roomX + GW.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n    const roomY2 = Math.floor((grid.height - roomHeight2) / 2);\n    const roomY = roomY2 + GW.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n    grid.fill(0);\n    grid.fillRect(roomX, roomY, roomWidth, roomHeight, tile);\n    grid.fillRect(roomX2, roomY2, roomWidth2, roomHeight2, tile);\n    return new Room(config.id, roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n}\nexport function symmetricalCross(config, grid) {\n    config = checkConfig(config, { width: 7, height: 7 });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    let minorWidth = Math.max(3, Math.floor((width * GW.random.range(25, 50)) / 100)); // [2,4]\n    // if (height % 2 == 0 && minorWidth > 2) {\n    //     minorWidth -= 1;\n    // }\n    let minorHeight = Math.max(3, Math.floor((height * GW.random.range(25, 50)) / 100)); // [2,3]?\n    // if (width % 2 == 0 && minorHeight > 2) {\n    //     minorHeight -= 1;\n    // }\n    grid.fill(0);\n    const x = Math.floor((grid.width - width) / 2);\n    const y = Math.floor((grid.height - minorHeight) / 2);\n    grid.fillRect(x, y, width, minorHeight, tile);\n    const x2 = Math.floor((grid.width - minorWidth) / 2);\n    const y2 = Math.floor((grid.height - height) / 2);\n    grid.fillRect(x2, y2, minorWidth, height, tile);\n    return new Room(config.id, Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n}\nexport function rectangular(config, grid) {\n    config = checkConfig(config, { width: [3, 6], height: [3, 6] });\n    if (!grid)\n        return config;\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor((grid.width - width) / 2);\n    const y = Math.floor((grid.height - height) / 2);\n    grid.fillRect(x, y, width, height, tile);\n    return new Room(config.id, x, y, width, height);\n}\nexport function circular(config, grid) {\n    config = checkConfig(config, { radius: [3, 4] });\n    if (!grid)\n        return config;\n    const radius = config.radius.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor(grid.width / 2);\n    const y = Math.floor(grid.height / 2);\n    if (radius > 1) {\n        grid.fillCircle(x, y, radius, tile);\n    }\n    return new Room(config.id, x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n}\nexport function brogueDonut(config, grid) {\n    config = checkConfig(config, {\n        radius: [5, 10],\n        ringMinWidth: 3,\n        holeMinSize: 3,\n        holeChance: 50,\n    });\n    if (!grid)\n        return config;\n    const radius = config.radius.value();\n    const ringMinWidth = config.ringMinWidth.value();\n    const holeMinSize = config.holeMinSize.value();\n    const tile = config.tile || CONST.FLOOR;\n    grid.fill(0);\n    const x = Math.floor(grid.width / 2);\n    const y = Math.floor(grid.height / 2);\n    grid.fillCircle(x, y, radius, tile);\n    if (radius > ringMinWidth + holeMinSize &&\n        GW.random.chance(config.holeChance.value())) {\n        grid.fillCircle(x, y, GW.random.range(holeMinSize, radius - holeMinSize), 0);\n    }\n    return new Room(config.id, x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n}\nexport function chunkyRoom(config, grid) {\n    config = checkConfig(config, {\n        count: [2, 12],\n        width: [5, 20],\n        height: [5, 20],\n    });\n    if (!grid)\n        return config;\n    let i, x, y;\n    let minX, maxX, minY, maxY;\n    let chunkCount = config.count.value();\n    const width = config.width.value();\n    const height = config.height.value();\n    const tile = config.tile || CONST.FLOOR;\n    minX = Math.floor(grid.width / 2) - Math.floor(width / 2);\n    maxX = Math.floor(grid.width / 2) + Math.floor(width / 2);\n    minY = Math.floor(grid.height / 2) - Math.floor(height / 2);\n    maxY = Math.floor(grid.height / 2) + Math.floor(height / 2);\n    grid.fill(0);\n    grid.fillCircle(Math.floor(grid.width / 2), Math.floor(grid.height / 2), 2, tile);\n    for (i = 0; i < chunkCount;) {\n        x = GW.random.range(minX, maxX);\n        y = GW.random.range(minY, maxY);\n        if (grid[x][y]) {\n            //            colorOverDungeon(/* Color. */darkGray);\n            //            hiliteGrid(grid, /* Color. */white, 100);\n            if (x - 2 < minX)\n                continue;\n            if (x + 2 > maxX)\n                continue;\n            if (y - 2 < minY)\n                continue;\n            if (y + 2 > maxY)\n                continue;\n            grid.fillCircle(x, y, 2, tile);\n            i++;\n            //            hiliteGrid(grid, /* Color. */green, 50);\n            //            temporaryMessage(\"Added a chunk:\", true);\n        }\n    }\n    const bounds = grid.valueBounds(tile);\n    return new Room(config.id, bounds.x, bounds.y, bounds.width, bounds.height);\n}\n","export const NOTHING = 0;\nexport const FLOOR = 1;\nexport const DOOR = 2;\nexport const WALL = 3;\nexport const LAKE = 4;\nexport const BRIDGE = 5;\nexport const UP_STAIRS = 6;\nexport const DOWN_STAIRS = 7;\nexport const SHALLOW = 8;\n","import * as GW from 'gw-utils';\nimport * as CONST from './tiles';\nimport { Hall } from './room';\nconst DIRS = GW.utils.DIRS;\nexport var halls = {};\nexport function install(id, fn, config = {}) {\n    // @ts-ignore\n    const data = fn(config || {}); // call to have function setup the config\n    data.fn = fn;\n    data.id = id;\n    halls[id] = data;\n    return data;\n}\ninstall('DEFAULT', dig, { chance: 15 });\nexport function pickWidth(opts = {}) {\n    return GW.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GW.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GW.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GW.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLengthRange(dir, opts) {\n    if (!opts.length)\n        opts.length = [];\n    if (Array.isArray(opts.length)) {\n        if (dir == GW.utils.UP || dir == GW.utils.DOWN) {\n            return GW.range.make(opts.length[1] || [2, 9]);\n        }\n        else {\n            return GW.range.make(opts.length[0] || [9, 15]);\n        }\n    }\n    else {\n        return GW.range.make(opts.length);\n    }\n}\nexport function pickHallDirection(grid, room, opts) {\n    const doors = room.doors;\n    // Pick a direction.\n    let dir = opts.dir || GW.utils.NO_DIRECTION;\n    if (dir == GW.utils.NO_DIRECTION) {\n        const dirs = GW.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = pickLengthRange(dir, opts).hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (grid.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GW.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(grid, x, y, dir, opts) {\n    let newX, newY;\n    const obliqueChance = GW.utils.firstOpt('obliqueChance', opts, 15);\n    const allowObliqueHallwayExit = GW.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !grid.hasXY(newX, newY) ||\n            grid[newX][newY]) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport function digWide(opts, grid, room) {\n    opts = opts || {};\n    if (!opts.width) {\n        opts.width = 2;\n    }\n    if (!grid) {\n        return opts;\n    }\n    const dir = pickHallDirection(grid, room, opts);\n    if (dir === GW.utils.NO_DIRECTION)\n        return null;\n    const length = pickLengthRange(dir, opts).value();\n    const width = pickWidth(opts) || 2;\n    const door = room.doors[dir];\n    const tile = opts.tile || CONST.FLOOR;\n    const hallDoors = [];\n    let x0, y0;\n    let hall;\n    if (dir === GW.utils.UP) {\n        x0 = GW.utils.clamp(door[0], room.x, room.x + room.width - width);\n        y0 = door[1] - length + 1;\n        for (let x = x0; x < x0 + width; ++x) {\n            for (let y = y0; y < y0 + length; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0, y0 - 1];\n        hall = new Hall([x0, door[1]], dir, length, 2);\n    }\n    else if (dir === GW.utils.DOWN) {\n        x0 = GW.utils.clamp(door[0], room.x, room.x + room.width - width);\n        y0 = door[1] + length - 1;\n        for (let x = x0; x < x0 + width; ++x) {\n            for (let y = y0; y > y0 - length; --y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0, y0 + 1];\n        hall = new Hall([x0, door[1]], dir, length, 2);\n    }\n    else if (dir === GW.utils.LEFT) {\n        x0 = door[0] - length + 1;\n        y0 = GW.utils.clamp(door[1], room.y, room.y + room.height - width);\n        for (let x = x0; x < x0 + length; ++x) {\n            for (let y = y0; y < y0 + width; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0 - 1, y0];\n        hall = new Hall([door[0], y0], dir, length, 2);\n    }\n    else {\n        //if (dir === GW.utils.RIGHT) {\n        x0 = door[0] + length - 1;\n        y0 = GW.utils.clamp(door[1], room.y, room.y + room.height - width);\n        for (let x = x0; x > x0 - length; --x) {\n            for (let y = y0; y < y0 + width; ++y) {\n                grid[x][y] = tile;\n            }\n        }\n        hallDoors[dir] = [x0 + 1, y0];\n        hall = new Hall([door[0], y0], dir, length, width);\n    }\n    hall.doors = hallDoors;\n    hall.width = width;\n    return hall;\n}\nexport function dig(opts, grid, room) {\n    opts = opts || {};\n    opts.width = 1;\n    if (!grid) {\n        return opts;\n    }\n    const dir = pickHallDirection(grid, room, opts);\n    if (dir === GW.utils.NO_DIRECTION)\n        return null;\n    const length = pickLengthRange(dir, opts).value();\n    const door = room.doors[dir];\n    const DIR = DIRS[dir];\n    let x = door[0];\n    let y = door[1];\n    const tile = opts.tile || CONST.FLOOR;\n    for (let i = 0; i < length; i++) {\n        grid[x][y] = tile;\n        x += DIR[0];\n        y += DIR[1];\n    }\n    x -= DIR[0];\n    y -= DIR[1];\n    const hall = new Hall(door, dir, length);\n    hall.doors = pickHallExits(grid, x, y, dir, opts);\n    return hall;\n}\n","import * as GW from 'gw-utils';\nimport * as CONST from './tiles';\nimport * as HALL from './hall';\nimport * as ROOM from './room';\n// import * as MAP from 'gw-map.js';\nexport * from './tiles';\nimport * as room_1 from './room';\nexport { room_1 as room };\nimport * as hall_1 from './hall';\nexport { hall_1 as hall };\nexport { Room, Hall } from './room';\nconst DIRS = GW.utils.DIRS;\nvar SEQ;\nexport function start(map) {\n    SEQ = GW.random.sequence(map.width * map.height);\n    map.fill(0);\n}\nexport function finish(map) {\n    removeDiagonalOpenings(map);\n    finishWalls(map);\n    finishDoors(map);\n}\n// Returns an array of door sites if successful\nexport function dig(map, opts) {\n    opts = opts || { room: 'DEFAULT', hall: 'DEFAULT', tries: 10 };\n    if (typeof opts === 'string') {\n        opts = { room: opts };\n    }\n    if (opts.loc) {\n        opts.locs = [opts.loc];\n    }\n    if (!opts.room)\n        opts.room = 'DEFAULT';\n    if (typeof opts.room === 'function')\n        opts.room = { fn: opts.room };\n    if (typeof opts.room === 'string') {\n        const name = opts.room;\n        opts.room = ROOM.rooms[name];\n        if (!opts.room) {\n            GW.utils.ERROR('Failed to find room: ' + name);\n        }\n    }\n    const roomConfig = opts.room;\n    let hallConfig = null;\n    if (opts.hall === true)\n        opts.hall = 'DEFAULT';\n    if (opts.hall !== false && !opts.hall)\n        opts.hall = 'DEFAULT';\n    if (typeof opts.hall === 'function')\n        opts.hall = { fn: opts.hall };\n    if (typeof opts.hall === 'string') {\n        const name = opts.hall;\n        opts.hall = HALL.halls[name];\n        if (!opts.hall) {\n            GW.utils.ERROR('Failed to find hall: ' + name);\n            return null;\n        }\n        hallConfig = opts.hall;\n    }\n    else {\n        if (opts.hall && opts.hall.fn) {\n            hallConfig = opts.hall;\n        }\n    }\n    if (opts.door === false) {\n        opts.door = CONST.FLOOR;\n    }\n    else if (opts.door === true || !opts.door) {\n        opts.door = CONST.DOOR;\n    }\n    let locs = opts.locs || null;\n    if (!locs || !Array.isArray(locs)) {\n        locs = null;\n        if (map.count(CONST.FLOOR) === 0) {\n            // empty map\n            const x = Math.floor(map.width / 2);\n            const y = map.height - 2;\n            locs = [[x, y]];\n        }\n    }\n    else if (locs &&\n        locs.length &&\n        locs.length == 2 &&\n        typeof locs[0] == 'number') {\n        // @ts-ignore\n        locs = [locs];\n    }\n    else if (locs.length == 0) {\n        locs = null;\n    }\n    const digger = opts.room;\n    const roomGrid = GW.grid.alloc(map.width, map.height);\n    let attachHall = false;\n    if (hallConfig) {\n        let hallChance = hallConfig.chance !== undefined ? hallConfig.chance : 15;\n        attachHall = GW.random.chance(hallChance);\n    }\n    // const force = config.force || false;\n    let result = false;\n    let room;\n    let tries = opts.tries || 10;\n    while (--tries >= 0 && !result) {\n        roomGrid.fill(CONST.NOTHING);\n        // dig the room in the center\n        room = digger.fn(roomConfig, roomGrid);\n        // TODO - Allow choice of floor tile...\n        room.doors = chooseRandomDoorSites(roomGrid, CONST.FLOOR);\n        if (attachHall && hallConfig) {\n            room.hall = hallConfig.fn(hallConfig, roomGrid, room);\n        }\n        if (locs) {\n            // try the doors first\n            result = attachRoomAtMapDoor(map, locs, roomGrid, room, opts);\n        }\n        else {\n            result = attachRoom(map, roomGrid, room, opts);\n        }\n        // console.log(\n        //     'try',\n        //     room.hall ? 'hall: ' + room.hall.dir : 'no hall',\n        //     result\n        // );\n        // if (!result) {\n        //     roomGrid.dump();\n        //     map.dump();\n        //     console.log(\n        //         'room doors',\n        //         (room.hall ? room.hall.doors : room.doors).join(', ')\n        //     );\n        //     console.log('map locs', locs.join(', '));\n        // }\n    }\n    GW.grid.free(roomGrid);\n    return room && result ? room : null;\n}\nexport function attachRoom(map, roomGrid, room, opts) {\n    // console.log('attachRoom');\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SEQ.length; i++) {\n        const x = Math.floor(SEQ[i] / map.height);\n        const y = SEQ[i] % map.height;\n        if (!(map.get(x, y) == CONST.NOTHING))\n            continue;\n        const dir = directionOfDoorSite(map, x, y, CONST.FLOOR);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door)\n                continue;\n            const offsetX = x - door[0];\n            const offsetY = y - door[1];\n            if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n                // Room fits here.\n                GW.grid.offsetZip(map, roomGrid, offsetX, offsetY, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || CONST.FLOOR;\n                });\n                attachDoor(map, room, opts, x, y, oppDir);\n                // door[0] = -1;\n                // door[1] = -1;\n                room.translate(offsetX, offsetY);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function attachDoor(map, room, opts, x, y, dir) {\n    const tile = opts.door || CONST.DOOR;\n    map[x][y] = tile; // Door site.\n    // most cases...\n    if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n        return;\n    }\n    if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n        let didSomething = true;\n        let k = 1;\n        while (didSomething) {\n            didSomething = false;\n            if (map.get(x - k, y) === 0) {\n                if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n                    map[x - k][y] = tile;\n                    didSomething = true;\n                }\n            }\n            if (map.get(x + k, y) === 0) {\n                if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n                    map[x + k][y] = tile;\n                    didSomething = true;\n                }\n            }\n            ++k;\n        }\n    }\n    else {\n        let didSomething = true;\n        let k = 1;\n        while (didSomething) {\n            didSomething = false;\n            if (map.get(x, y - k) === 0) {\n                if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n                    map[x][y - k] = opts.door;\n                    didSomething = true;\n                }\n            }\n            if (map.get(x, y + k) === 0) {\n                if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n                    map[x][y + k] = opts.door;\n                    didSomething = true;\n                }\n            }\n            ++k;\n        }\n    }\n}\nexport function roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n    let xRoom, yRoom, xSite, ySite, i, j;\n    // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n    for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n        for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n            if (roomGrid[xRoom][yRoom]) {\n                xSite = xRoom + roomToSiteX;\n                ySite = yRoom + roomToSiteY;\n                for (i = xSite - 1; i <= xSite + 1; i++) {\n                    for (j = ySite - 1; j <= ySite + 1; j++) {\n                        if (!map.hasXY(i, j) ||\n                            map.isBoundaryXY(i, j) ||\n                            !(map.get(i, j) === CONST.NOTHING)) {\n                            // console.log('- NO');\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // console.log('- YES');\n    return true;\n}\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(grid, x, y, isOpen) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    const fnOpen = typeof isOpen === 'function'\n        ? isOpen\n        : (v) => v == isOpen;\n    solutionDir = GW.utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (grid.hasXY(oppX, oppY) &&\n            grid.hasXY(newX, newY) &&\n            fnOpen(grid[oppX][oppY], oppX, oppY, grid)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GW.utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GW.utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function forceRoomAtMapLoc(map, xy, roomGrid, room, opts) {\n    // console.log('forceRoomAtMapLoc', xy);\n    // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SEQ.length; i++) {\n        const x = Math.floor(SEQ[i] / map.height);\n        const y = SEQ[i] % map.height;\n        if (roomGrid[x][y])\n            continue;\n        const dir = directionOfDoorSite(roomGrid, x, y, CONST.FLOOR);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const dx = xy[0] - x;\n            const dy = xy[1] - y;\n            if (roomFitsAt(map, roomGrid, dx, dy)) {\n                GW.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || CONST.FLOOR;\n                });\n                if (opts.room.door !== false) {\n                    const door = opts.room.door === true || !opts.room.door\n                        ? CONST.DOOR\n                        : opts.room.door;\n                    map[xy[0]][xy[1]] = door; // Door site.\n                }\n                // TODO - Update doors - we may have to erase one...\n                room.translate(dx, dy);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction attachRoomAtMapDoor(map, mapDoors, roomGrid, room, opts) {\n    const doorIndexes = GW.random.sequence(mapDoors.length);\n    // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < doorIndexes.length; i++) {\n        const index = doorIndexes[i];\n        const door = mapDoors[index];\n        if (!door)\n            continue;\n        const x = door[0];\n        const y = door[1];\n        if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction attachRoomAtXY(map, x, y, roomGrid, room, opts) {\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    const dirs = GW.random.sequence(4);\n    // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n    for (let dir of dirs) {\n        const oppDir = (dir + 2) % 4;\n        const door = doorSites[oppDir];\n        if (!door)\n            continue;\n        if (door[0] != -1 &&\n            roomFitsAt(map, roomGrid, x - door[0], y - door[1])) {\n            // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n            // Room fits here.\n            const offX = x - door[0];\n            const offY = y - door[1];\n            GW.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n                map[i][j] = opts.room.tile || CONST.FLOOR;\n            });\n            attachDoor(map, room, opts, x, y, oppDir);\n            room.translate(offX, offY);\n            // const newDoors = doorSites.map((site) => {\n            //     const x0 = site[0] + offX;\n            //     const y0 = site[1] + offY;\n            //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n            //     return [x0, y0] as GW.utils.Loc;\n            // });\n            return true;\n        }\n    }\n    return false;\n}\nexport function chooseRandomDoorSites(sourceGrid, floorTile) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    floorTile = floorTile || CONST.FLOOR;\n    const grid = GW.grid.alloc(sourceGrid.width, sourceGrid.height);\n    grid.copy(sourceGrid);\n    for (i = 0; i < grid.width; i++) {\n        for (j = 0; j < grid.height; j++) {\n            if (!grid[i][j]) {\n                dir = directionOfDoorSite(grid, i, j, floorTile);\n                if (dir != GW.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + DIRS[dir][0];\n                    newY = j + DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && grid.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (grid[newX][newY]) {\n                            doorSiteFailed = true;\n                        }\n                        newX += DIRS[dir][0];\n                        newY += DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        grid[i][j] = dir + 200; // So as not to conflict with other tiles.\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = grid.randomMatchingLoc(dir + 200) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    GW.grid.free(grid);\n    return doorSites;\n}\nexport function isPassable(grid, x, y) {\n    const v = grid.get(x, y);\n    return (v === CONST.FLOOR ||\n        v === CONST.DOOR ||\n        v === CONST.BRIDGE ||\n        v === CONST.UP_STAIRS ||\n        v === CONST.DOWN_STAIRS ||\n        v === CONST.SHALLOW);\n}\nexport function isDoor(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === CONST.DOOR;\n}\nexport function isObstruction(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === CONST.NOTHING || v === CONST.WALL;\n}\nexport function isStairs(grid, x, y) {\n    const v = grid.get(x, y);\n    return v === CONST.UP_STAIRS || v === CONST.DOWN_STAIRS;\n}\nexport function isLake(grid, x, y) {\n    return grid.get(x, y) === CONST.LAKE;\n}\nfunction fillCostGrid(source, costGrid) {\n    source.forEach((_v, x, y) => {\n        costGrid[x][y] = isPassable(source, x, y) ? 1 : GW.path.OBSTRUCTION;\n    });\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function addLoops(grid, minimumPathingDistance, maxConnectionLength) {\n    let startX, startY, endX, endY;\n    let i, j, d, x, y;\n    minimumPathingDistance =\n        minimumPathingDistance ||\n            Math.floor(Math.min(grid.width, grid.height) / 2);\n    maxConnectionLength = maxConnectionLength || 1; // by default only break walls down\n    const siteGrid = grid;\n    const pathGrid = GW.grid.alloc(grid.width, grid.height);\n    const costGrid = GW.grid.alloc(grid.width, grid.height);\n    const dirCoords = [\n        [1, 0],\n        [0, 1],\n    ];\n    fillCostGrid(grid, costGrid);\n    function isValidTunnelStart(x, y, dir) {\n        if (!grid.hasXY(x, y))\n            return false;\n        if (!grid.hasXY(x + dir[1], y + dir[0]))\n            return false;\n        if (!grid.hasXY(x - dir[1], y - dir[0]))\n            return false;\n        if (grid.get(x, y))\n            return false;\n        if (grid.get(x + dir[1], y + dir[0]))\n            return false;\n        if (grid.get(x - dir[1], y - dir[0]))\n            return false;\n        return true;\n    }\n    function isValidTunnelEnd(x, y, dir) {\n        if (!grid.hasXY(x, y))\n            return false;\n        if (!grid.hasXY(x + dir[1], y + dir[0]))\n            return false;\n        if (!grid.hasXY(x - dir[1], y - dir[0]))\n            return false;\n        if (grid.get(x, y))\n            return true;\n        if (grid.get(x + dir[1], y + dir[0]))\n            return true;\n        if (grid.get(x - dir[1], y - dir[0]))\n            return true;\n        return false;\n    }\n    for (i = 0; i < SEQ.length; i++) {\n        x = Math.floor(SEQ[i] / siteGrid.height);\n        y = SEQ[i] % siteGrid.height;\n        const cell = siteGrid[x][y];\n        if (!cell) {\n            for (d = 0; d <= 1; d++) {\n                // Try a horizontal door, and then a vertical door.\n                let dir = dirCoords[d];\n                if (!isValidTunnelStart(x, y, dir))\n                    continue;\n                j = maxConnectionLength;\n                // check up/left\n                if (grid.hasXY(x + dir[0], y + dir[1]) &&\n                    isPassable(grid, x + dir[0], y + dir[1])) {\n                    // just can't build directly into a door\n                    if (!grid.hasXY(x - dir[0], y - dir[1]) ||\n                        isDoor(grid, x - dir[0], y - dir[1])) {\n                        continue;\n                    }\n                }\n                else if (grid.hasXY(x - dir[0], y - dir[1]) &&\n                    isPassable(grid, x - dir[0], y - dir[1])) {\n                    if (!grid.hasXY(x + dir[0], y + dir[1]) ||\n                        isDoor(grid, x + dir[0], y + dir[1])) {\n                        continue;\n                    }\n                    dir = dir.map((v) => -1 * v);\n                }\n                else {\n                    continue; // not valid start for tunnel\n                }\n                startX = x + dir[0];\n                startY = y + dir[1];\n                endX = x;\n                endY = y;\n                for (j = 0; j < maxConnectionLength; ++j) {\n                    endX -= dir[0];\n                    endY -= dir[1];\n                    // if (grid.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                    if (isValidTunnelEnd(endX, endY, dir)) {\n                        break;\n                    }\n                }\n                if (j < maxConnectionLength) {\n                    GW.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                    // pathGrid.fill(30000);\n                    // pathGrid[startX][startY] = 0;\n                    // dijkstraScan(pathGrid, costGrid, false);\n                    if (pathGrid[endX][endY] > minimumPathingDistance &&\n                        pathGrid[endX][endY] < 30000) {\n                        // and if the pathing distance between the two flanking floor tiles exceeds minimumPathingDistance,\n                        // dungeon.debug(\n                        //     'Adding Loop',\n                        //     startX,\n                        //     startY,\n                        //     ' => ',\n                        //     endX,\n                        //     endY,\n                        //     ' : ',\n                        //     pathGrid[endX][endY]\n                        // );\n                        while (endX !== startX || endY !== startY) {\n                            if (grid.get(endX, endY) == 0) {\n                                grid[endX][endY] = CONST.FLOOR;\n                                costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                            }\n                            endX += dir[0];\n                            endY += dir[1];\n                        }\n                        // TODO - Door is optional\n                        grid[x][y] = CONST.DOOR; // then turn the tile into a doorway.\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    GW.grid.free(pathGrid);\n    GW.grid.free(costGrid);\n}\nexport function addLakes(map, opts = {}) {\n    let i, j, k;\n    let x, y;\n    let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n    let count = 0;\n    lakeMaxHeight = opts.height || 15; // TODO - Make this a range \"5-15\"\n    lakeMaxWidth = opts.width || 30; // TODO - Make this a range \"5-30\"\n    lakeMinSize = opts.minSize || 5;\n    tries = opts.tries || 20;\n    maxCount = opts.count || 1;\n    canDisrupt = opts.canDisrupt || false;\n    const wreath = opts.wreath || 0; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n    const wreathTile = opts.wreathTile || CONST.SHALLOW;\n    const tile = opts.tile || CONST.LAKE;\n    const lakeGrid = GW.grid.alloc(map.width, map.height, 0);\n    let attempts = 0;\n    while (attempts < maxCount && count < maxCount) {\n        // lake generations\n        const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n            maxCount) + lakeMinSize;\n        const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n            maxCount) + lakeMinSize;\n        lakeGrid.fill(CONST.NOTHING);\n        const bounds = lakeGrid.fillBlob(5, 4, 4, width, height, 55, 'ffffftttt', 'ffffttttt');\n        // lakeGrid.dump();\n        let success = false;\n        for (k = 0; k < tries && !success; k++) {\n            // placement attempts\n            // propose a position for the top-left of the lakeGrid in the dungeon\n            x = GW.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n            y = GW.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n            if (canDisrupt || !lakeDisruptsPassability(map, lakeGrid, -x, -y)) {\n                // level with lake is completely connected\n                //   dungeon.debug(\"Placed a lake!\", x, y);\n                success = true;\n                // copy in lake\n                for (i = 0; i < bounds.width; i++) {\n                    // skip boundary\n                    for (j = 0; j < bounds.height; j++) {\n                        // skip boundary\n                        if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                            const sx = i + bounds.x + x;\n                            const sy = j + bounds.y + y;\n                            map[sx][sy] = tile;\n                            if (wreath) {\n                                map.forCircle(sx, sy, wreath, (v, i, j) => {\n                                    if (v === CONST.FLOOR || v === CONST.DOOR) {\n                                        map[i][j] = wreathTile;\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n        }\n        if (success) {\n            ++count;\n        }\n        else {\n            ++attempts;\n        }\n    }\n    GW.grid.free(lakeGrid);\n    return count;\n}\nfunction lakeDisruptsPassability(map, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n    const walkableGrid = GW.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    map.forEach((v, i, j) => {\n        const lakeX = i + lakeToMapX;\n        const lakeY = j + lakeToMapY;\n        if (!v) {\n            return; // not walkable\n        }\n        else if (isStairs(map, i, j)) {\n            if (lakeGrid.get(lakeX, lakeY)) {\n                disrupts = true;\n            }\n            else {\n                walkableGrid[i][j] = 1;\n            }\n        }\n        else if (isPassable(map, i, j)) {\n            if (lakeGrid.get(lakeX, lakeY))\n                return;\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GW.grid.free(walkableGrid);\n    return disrupts;\n}\nfunction isBridgeCandidate(map, x, y, bridgeDir) {\n    if (map.get(x, y) === CONST.BRIDGE)\n        return true;\n    if (!isLake(map, x, y))\n        return false;\n    if (!isLake(map, x + bridgeDir[1], y + bridgeDir[0]))\n        return false;\n    if (!isLake(map, x - bridgeDir[1], y - bridgeDir[0]))\n        return false;\n    return true;\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function addBridges(map, minimumPathingDistance, maxConnectionLength) {\n    let newX, newY;\n    let i, j, d, x, y;\n    maxConnectionLength = maxConnectionLength || 1; // by default only break walls down\n    const siteGrid = map;\n    const pathGrid = GW.grid.alloc(map.width, map.height);\n    const costGrid = GW.grid.alloc(map.width, map.height);\n    const dirCoords = [\n        [1, 0],\n        [0, 1],\n    ];\n    fillCostGrid(map, costGrid);\n    for (i = 0; i < SEQ.length; i++) {\n        x = Math.floor(SEQ[i] / siteGrid.height);\n        y = SEQ[i] % siteGrid.height;\n        if (map.hasXY(x, y) && map.get(x, y) && isPassable(map, x, y)) {\n            for (d = 0; d <= 1; d++) {\n                // Try right, then down\n                const bridgeDir = dirCoords[d];\n                newX = x + bridgeDir[0];\n                newY = y + bridgeDir[1];\n                j = maxConnectionLength;\n                if (!map.hasXY(newX, newY))\n                    continue;\n                // check for line of lake tiles\n                // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                if (isLake(map, newX, newY)) {\n                    for (j = 0; j < maxConnectionLength; ++j) {\n                        newX += bridgeDir[0];\n                        newY += bridgeDir[1];\n                        // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                        if (!isLake(map, newX, newY)) {\n                            break;\n                        }\n                    }\n                }\n                if (map.get(newX, newY) &&\n                    isPassable(map, newX, newY) &&\n                    j < maxConnectionLength) {\n                    GW.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                    // pathGrid.fill(30000);\n                    // pathGrid[newX][newY] = 0;\n                    // dijkstraScan(pathGrid, costGrid, false);\n                    if (pathGrid[x][y] > minimumPathingDistance &&\n                        pathGrid[x][y] < GW.path.NO_PATH) {\n                        // and if the pathing distance between the two flanking floor tiles exceeds minimumPathingDistance,\n                        // dungeon.debug(\n                        //     'Adding Bridge',\n                        //     x,\n                        //     y,\n                        //     ' => ',\n                        //     newX,\n                        //     newY\n                        // );\n                        while (x !== newX || y !== newY) {\n                            if (isBridgeCandidate(map, x, y, bridgeDir)) {\n                                map[x][y] = CONST.BRIDGE;\n                                costGrid[x][y] = 1; // (Cost map also needs updating.)\n                            }\n                            else {\n                                map[x][y] = CONST.FLOOR;\n                                costGrid[x][y] = 1;\n                            }\n                            x += bridgeDir[0];\n                            y += bridgeDir[1];\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    GW.grid.free(pathGrid);\n    GW.grid.free(costGrid);\n}\nexport function removeDiagonalOpenings(grid) {\n    let i, j, k, x1, y1;\n    let diagonalCornerRemoved;\n    do {\n        diagonalCornerRemoved = false;\n        for (i = 0; i < grid.width - 1; i++) {\n            for (j = 0; j < grid.height - 1; j++) {\n                for (k = 0; k <= 1; k++) {\n                    if (isPassable(grid, i + k, j) &&\n                        !isPassable(grid, i + (1 - k), j) &&\n                        isObstruction(grid, i + (1 - k), j) &&\n                        !isPassable(grid, i + k, j + 1) &&\n                        isObstruction(grid, i + k, j + 1) &&\n                        isPassable(grid, i + (1 - k), j + 1)) {\n                        if (GW.random.chance(50)) {\n                            x1 = i + (1 - k);\n                            y1 = j;\n                        }\n                        else {\n                            x1 = i + k;\n                            y1 = j + 1;\n                        }\n                        diagonalCornerRemoved = true;\n                        grid[x1][y1] = CONST.FLOOR; // todo - pick one of the passable tiles around it...\n                    }\n                }\n            }\n        }\n    } while (diagonalCornerRemoved == true);\n}\nexport function finishDoors(grid) {\n    grid.forEach((cell, x, y) => {\n        if (grid.isBoundaryXY(x, y))\n            return;\n        // todo - isDoorway...\n        if (cell == CONST.DOOR) {\n            if (\n            // TODO - isPassable\n            (grid.get(x + 1, y) == CONST.FLOOR ||\n                grid.get(x - 1, y) == CONST.FLOOR) &&\n                (grid.get(x, y + 1) == CONST.FLOOR ||\n                    grid.get(x, y - 1) == CONST.FLOOR)) {\n                // If there's passable terrain to the left or right, and there's passable terrain\n                // above or below, then the door is orphaned and must be removed.\n                grid[x][y] = CONST.FLOOR; // todo - take passable neighbor value\n            }\n            else if (\n            // todo - isPassable\n            (grid.get(x + 1, y) !== CONST.FLOOR ? 1 : 0) +\n                (grid.get(x - 1, y) !== CONST.FLOOR ? 1 : 0) +\n                (grid.get(x, y + 1) !== CONST.FLOOR ? 1 : 0) +\n                (grid.get(x, y - 1) !== CONST.FLOOR ? 1 : 0) >=\n                3) {\n                // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                // then the door is orphaned and must be removed.\n                grid[x][y] = CONST.FLOOR; // todo - take passable neighbor\n            }\n        }\n    });\n}\nexport function finishWalls(grid, tile = CONST.WALL) {\n    grid.forEach((cell, i, j) => {\n        if (cell == CONST.NOTHING) {\n            grid[i][j] = tile;\n        }\n    });\n}\n"],"names":["Hall","[object Object]","loc","dir","length","width","this","doors","x","y","d","GW.utils","DIRS","UP","DOWN","x2","y2","dx","dy","forEach","Room","digger","height","hall","cx","Math","floor","cy","translate","rooms","install","id","fn","config","data","checkConfig","expected","Object","entries","key","expect","have","undefined","ERROR","Array","isArray","range","GW.range","make","rectangular","grid","value","tile","fill","fillRect","destX","destY","blobGrid","GW.grid","alloc","minWidth","maxWidth","minHeight","maxHeight","bounds","fillBlob","offsetZip","free","choices","GW.random","item","bind","weighted","digConfig","opts","assign","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","min","max","minorWidth","minorHeight","radius","fillCircle","ringMinWidth","holeMinSize","holeChance","chance","count","i","minX","maxX","minY","maxY","chunkCount","valueBounds","halls","pickWidth","clamp","Number","parseInt","_pickWidth","pickLengthRange","pickHallDirection","room","NO_DIRECTION","dirs","sequence","hi","door","hasXY","pickHallExits","newX","newY","obliqueChance","firstOpt","allowObliqueHallwayExit","hallDoors","dir2","dig","DIR","x0","y0","LEFT","SEQ","attachRoom","map","roomGrid","doorSites","get","directionOfDoorSite","oppDir","offsetX","offsetY","roomFitsAt","_d","_s","j","attachDoor","didSomething","k","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","isBoundaryXY","isOpen","solutionDir","oppX","oppY","fnOpen","v","attachRoomAtMapDoor","mapDoors","doorIndexes","attachRoomAtXY","offX","offY","chooseRandomDoorSites","sourceGrid","floorTile","doorSiteFailed","copy","randomMatchingLoc","isPassable","isDoor","isObstruction","isStairs","isLake","fillCostGrid","source","costGrid","_v","GW.path","OBSTRUCTION","lakeDisruptsPassability","lakeGrid","lakeToMapX","lakeToMapY","walkableGrid","disrupts","lakeX","lakeY","first","floodFill","isBridgeCandidate","bridgeDir","removeDiagonalOpenings","x1","y1","diagonalCornerRemoved","finishDoors","cell","finishWalls","tries","locs","name","ROOM.rooms","roomConfig","hallConfig","HALL.halls","attachHall","hallChance","result","xy","minimumPathingDistance","maxConnectionLength","startX","startY","endX","endY","siteGrid","pathGrid","dirCoords","isValidTunnelStart","isValidTunnelEnd","calculateDistances","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","canDisrupt","minSize","wreath","wreathTile","attempts","round","success","sx","sy","forCircle","NO_PATH"],"mappings":"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"}