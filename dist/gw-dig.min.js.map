{"version":3,"file":"gw-dig.min.js","sources":["../ts/site/tile.ts","../ts/feature/feature.ts","../ts/feature/tile.ts","../ts/feature/chance.ts","../ts/feature/spread.ts","../ts/site/horde.ts","../ts/site/item.ts","../ts/site/utils.ts","../ts/site/analyze.ts","../ts/site/site.ts","../ts/site/log/logger.ts","../ts/build/buildStep.ts","../ts/site/log/consoleLogger.ts","../ts/types.ts","../ts/room.ts","../ts/hall.ts","../ts/lake.ts","../ts/bridge.ts","../ts/stairs.ts","../ts/loop.ts","../ts/digger.ts","../ts/build/data.ts","../ts/build/blueprint.ts","../ts/build/builder.ts","../ts/dungeon.ts"],"sourcesContent":["import * as GWU from 'gw-utils';\n\nexport { TileId } from '../types';\n// export type ToTileId = (name: TileId) => number;\n\nexport interface TileConfig {\n    blocksMove?: boolean;\n    blocksVision?: boolean;\n    blocksPathing?: boolean;\n\n    connectsLevel?: boolean;\n    secretDoor?: boolean;\n    door?: boolean;\n\n    stairs?: boolean;\n    liquid?: boolean;\n    impregnable?: boolean;\n\n    tags?: string | string[];\n    priority?: number | string;\n    ch?: string;\n\n    extends?: string;\n}\n\nexport interface TileOptions extends TileConfig {\n    id: string;\n}\n\nexport interface TileInfo extends TileOptions {\n    id: string;\n    index: number;\n    priority: number;\n    tags: string[];\n}\n\nexport const tileIds: Record<string, number> = {};\nexport const allTiles: TileInfo[] = [];\n\nexport function installTile(cfg: TileOptions): TileInfo;\nexport function installTile(id: string, opts?: TileConfig): TileInfo;\nexport function installTile(\n    id: string | TileOptions,\n    opts: TileConfig = {}\n): TileInfo {\n    if (typeof id !== 'string') {\n        opts = id;\n        id = id.id;\n    }\n    const base = { id, index: allTiles.length, priority: 0, tags: [] };\n\n    opts.extends = opts.extends || id;\n\n    if (opts.extends) {\n        const root = getTile(opts.extends);\n        if (root) {\n            Object.assign(base, root);\n        } else if (opts.extends !== id) {\n            throw new Error('Cannot extend tile: ' + opts.extends);\n        }\n    }\n\n    const info: TileInfo = GWU.object.assignOmitting(\n        'priority, extends',\n        base,\n        opts\n    ) as TileInfo;\n\n    info.id = id;\n    info.index = allTiles.length;\n\n    if (opts.tags) {\n        info.tags = GWU.tags.make(opts.tags);\n    }\n\n    if (typeof opts.priority === 'string') {\n        let text = opts.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            info.priority = info.priority + Number.parseInt(text);\n        } else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = getTile(text);\n                if (!tile)\n                    throw new Error(\n                        'Failed to find tile for priority - ' + text + '.'\n                    );\n                info.priority = tile.priority;\n            } else {\n                info.priority = Number.parseInt(text);\n            }\n        } else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = getTile(id);\n            if (!tile)\n                throw new Error(\n                    'Failed to find tile for priority - ' + id + '.'\n                );\n\n            info.priority = tile.priority + delta;\n        }\n    } else if (opts.priority !== undefined) {\n        info.priority = opts.priority;\n    }\n\n    if (info.blocksPathing === undefined) {\n        if (info.blocksMove) {\n            info.blocksPathing = true;\n        }\n    }\n\n    if (tileIds[id]) {\n        info.index = tileIds[id];\n        allTiles[info.index] = info;\n    } else {\n        allTiles.push(info);\n        tileIds[id] = info.index;\n    }\n\n    return info;\n}\n\nexport function getTile(name: string | number): TileInfo {\n    if (typeof name === 'string') {\n        name = tileIds[name];\n    }\n    return allTiles[name];\n}\n\nexport function tileId(name: string | number): number {\n    if (typeof name === 'number') return name;\n    return tileIds[name] ?? -1;\n}\n\nexport function blocksMove(name: string | number): boolean {\n    const info = getTile(name);\n    return info.blocksMove || false;\n}\n\ntileIds['NOTHING'] = tileIds['NULL'] = installTile('NONE', {\n    priority: 0,\n    ch: '',\n}).index;\n\ninstallTile('FLOOR', { priority: 10, ch: '.' });\ninstallTile('WALL', {\n    blocksMove: true,\n    blocksVision: true,\n    priority: 50,\n    ch: '#',\n});\ninstallTile('DOOR', {\n    blocksVision: true,\n    door: true,\n    priority: 60,\n    ch: '+',\n});\ninstallTile('SECRET_DOOR', {\n    blocksMove: true,\n    secretDoor: true,\n    priority: 70,\n    ch: '%',\n});\ninstallTile('UP_STAIRS', {\n    stairs: true,\n    priority: 80,\n    ch: '>',\n});\ninstallTile('DOWN_STAIRS', {\n    stairs: true,\n    priority: 80,\n    ch: '<',\n});\ntileIds['DEEP'] = installTile('LAKE', {\n    priority: 40,\n    liquid: true,\n    ch: '~',\n}).index;\ninstallTile('SHALLOW', { priority: 30, ch: '`' });\ninstallTile('BRIDGE', { priority: 45, ch: '=' }); // layers help here\ninstallTile('IMPREGNABLE', {\n    priority: 200,\n    ch: '%',\n    impregnable: true,\n    blocksMove: true,\n    blocksVision: true,\n});\n","import * as GWU from 'gw-utils';\nimport { Site } from '../site';\n\nexport interface FeatureObj {\n    [key: string]: any;\n}\nexport type FeatureConfig = string | FeatureObj;\n\nexport type FeatureFn = (site: Site, x: number, y: number) => boolean;\nexport type MakeFn = (cfg: any) => FeatureFn;\n\nexport const features: Record<string, FeatureFn> = {};\n\nexport function install(name: string, fn: FeatureFn | FeatureConfig) {\n    if (typeof fn !== 'function') {\n        fn = make(fn);\n    }\n    features[name] = fn as FeatureFn;\n}\n\nexport const types: Record<string, MakeFn> = {};\n\nexport function installType(name: string, fn: MakeFn) {\n    types[name] = fn;\n}\n\n// FEATURE TYPE\n\nexport function feature(id: string | string[] | { id: string }): FeatureFn {\n    if (Array.isArray(id)) id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length) throw new Error('Feature effect needs ID');\n\n    return featureFeature.bind(undefined, id);\n}\n\nexport function featureFeature(\n    id: string,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    const feat = features[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n\n    return feat(site, x, y);\n}\n\ninstallType('feature', feature);\ninstallType('effect', feature);\ninstallType('id', feature);\n\nexport function make(obj: FeatureConfig): FeatureFn;\nexport function make(id: string, config: FeatureConfig): FeatureFn;\nexport function make(\n    id: string | FeatureConfig,\n    config?: FeatureConfig\n): FeatureFn {\n    if (!id) return GWU.FALSE;\n    if (typeof id === 'string') {\n        if (!id.length)\n            throw new Error('Cannot create effect from empty string.');\n\n        if (!config) {\n            const parts = id.split(':');\n            id = parts.shift()!.toLowerCase();\n            config = parts;\n        }\n        // string with no parameters is interpreted as id of registered feature\n        if (config.length === 0) {\n            config = id;\n            id = 'feature';\n        }\n        const handler = types[id];\n        if (!handler) throw new Error('Failed to find effect - ' + id);\n        return handler(config || {});\n    }\n    let steps: FeatureFn[];\n\n    if (Array.isArray(id)) {\n        steps = id\n            .map((config) => make(config))\n            .filter((a) => a !== null) as FeatureFn[];\n    } else if (typeof id === 'function') {\n        return id as FeatureFn;\n    } else {\n        steps = Object.entries(id)\n            .map(([key, config]) => make(key, config))\n            .filter((a) => a !== null) as FeatureFn[];\n    }\n    if (steps.length === 1) {\n        return steps[0];\n    }\n\n    return (site, x, y) => {\n        return steps.every((step) => step(site, x, y));\n    };\n}\n\nexport function makeArray(cfg: string): FeatureFn[];\nexport function makeArray(obj: FeatureObj): FeatureFn[];\nexport function makeArray(arr: FeatureFn[]): FeatureFn[];\nexport function makeArray(\n    cfg: string | FeatureFn | FeatureObj | FeatureFn[]\n): FeatureFn[] {\n    if (!cfg) return [];\n    if (Array.isArray(cfg)) {\n        return cfg\n            .map((c) => make(c))\n            .filter((fn) => fn !== null) as FeatureFn[];\n    }\n    if (typeof cfg === 'string') {\n        if (!cfg.length)\n            throw new Error('Cannot create effect from empty string.');\n\n        const parts = cfg.split(':');\n        cfg = parts.shift()!.toLowerCase();\n\n        const handler = types[cfg];\n        if (!handler) return [];\n        return [handler(parts)];\n    } else if (typeof cfg === 'function') {\n        return [cfg] as FeatureFn[];\n    }\n\n    const steps = Object.entries(cfg).map(([key, config]) => make(key, config));\n    return steps.filter((s) => s !== null) as FeatureFn[];\n}\n","import { SetTileOptions, Site } from '../site';\nimport { FeatureFn, installType } from './feature';\n\n//////////////////////////////////////////////\n// TILE\n\nexport interface TileOptions extends SetTileOptions {\n    id: string;\n    protected?: boolean;\n}\n\nexport function tile(src: string | TileOptions): FeatureFn {\n    if (!src) throw new Error('Tile effect needs configuration.');\n\n    if (typeof src === 'string') {\n        src = { id: src };\n    } else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    } else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n\n    const opts: TileOptions = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    // if (opts.id.includes('+')) {\n    //     opts.protected = true;\n    // }\n    opts.id = opts.id.replace(/[!~+]*/g, '');\n\n    return tileAction.bind(undefined, opts);\n}\n\nexport function tileAction(\n    cfg: TileOptions,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    cfg.machine = 0; // >???<\n    if (site.setTile(x, y, cfg.id, cfg)) {\n        return true;\n    }\n    return false;\n}\n\ninstallType('tile', tile);\n","import { Site } from '../site';\nimport { installType, FeatureFn } from './feature';\n\n//////////////////////////////////////////////\n// chance\n\nexport function chance(opts: any): FeatureFn {\n    if (Array.isArray(opts)) {\n        opts = opts[0];\n    }\n    if (typeof opts === 'object') {\n        opts = opts.chance;\n    }\n    if (typeof opts === 'string') {\n        if (opts.endsWith('%')) {\n            opts = Number.parseFloat(opts) * 100;\n        } else {\n            opts = Number.parseInt(opts || '10000');\n        }\n    }\n    if (typeof opts !== 'number') {\n        throw new Error(\n            'Chance effect config must be number or string that can be a number.'\n        );\n    }\n    return chanceAction.bind(undefined, opts);\n}\n\nexport function chanceAction(cfg: number, site: Site): boolean {\n    return site.rng.chance(cfg, 10000);\n}\n\ninstallType('chance', chance);\n","import * as GWU from 'gw-utils';\nimport { Site, tileId } from '../site';\nimport { FeatureFn, FeatureConfig, installType, makeArray } from './feature';\n\nconst Fl = GWU.flag.fl;\n\n///////////////////////////////////////////////////////\n// TILE EVENT\n\nexport enum Flags {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    // E_NEXT_ALWAYS = Fl(0), // Always fire the next effect, even if no tiles changed.\n    // E_NEXT_EVERYWHERE = Fl(1), // next effect spawns in every cell that this effect spawns in, instead of only the origin\n\n    // E_FIRED = Fl(2), // has already been fired once\n\n    // E_NO_MARK_FIRED = Fl(3), // Do not mark this cell as having fired an effect (so can log messages multiple times)\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    // E_PROTECTED = Fl(4),\n\n    // E_NO_REDRAW_CELL = Fl(),\n    E_TREAT_AS_BLOCKING = Fl(5), // If filling the footprint of this effect with walls would disrupt level connectivity, then abort.\n    E_PERMIT_BLOCKING = Fl(6), // Generate this effect without regard to level connectivity.\n    E_ABORT_IF_BLOCKS_MAP = Fl(7),\n    E_BLOCKED_BY_ITEMS = Fl(8), // Do not fire this effect in a cell that has an item.\n    E_BLOCKED_BY_ACTORS = Fl(9), // Do not fire this effect in a cell that has an item.\n    E_BLOCKED_BY_OTHER_LAYERS = Fl(10), // Will not propagate into a cell if any layer in that cell has a superior priority.\n    E_SUPERPRIORITY = Fl(11), // Will overwrite terrain of a superior priority.\n\n    E_IGNORE_FOV = Fl(12),\n\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n\n    E_EVACUATE_CREATURES = Fl(15), // Creatures in the effect area get moved outside of it\n    E_EVACUATE_ITEMS = Fl(16), // Creatures in the effect area get moved outside of it\n\n    E_BUILD_IN_WALLS = Fl(17),\n    E_MUST_TOUCH_WALLS = Fl(18),\n    E_NO_TOUCH_WALLS = Fl(19),\n\n    E_CLEAR_GROUND = Fl(21), // clear all existing tiles\n    E_CLEAR_SURFACE = Fl(22),\n    E_CLEAR_LIQUID = Fl(23),\n    E_CLEAR_GAS = Fl(24),\n\n    E_CLEAR_TILE = Fl(25), // Clear this tile\n\n    E_CLEAR_CELL = E_CLEAR_GROUND |\n        E_CLEAR_SURFACE |\n        E_CLEAR_LIQUID |\n        E_CLEAR_GAS,\n\n    E_ONLY_IF_EMPTY = E_BLOCKED_BY_ITEMS | E_BLOCKED_BY_ACTORS,\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n\n    // These should be effect types\n    // E_ACTIVATE_DORMANT_MONSTER = Fl(27), // Dormant monsters on this tile will appear -- e.g. when a statue bursts to reveal a monster.\n    // E_AGGRAVATES_MONSTERS = Fl(28), // Will act as though an aggravate monster scroll of effectRadius radius had been read at that point.\n    // E_RESURRECT_ALLY = Fl(29), // Will bring back to life your most recently deceased ally.\n}\n\nexport interface SpreadInfo {\n    grow: number;\n    decrement: number;\n    matchTile: string;\n    features: FeatureFn[];\n    flags: number;\n}\n\nexport interface SpreadConfig\n    extends Partial<Omit<SpreadInfo, 'flags' | 'features'>> {\n    features?: FeatureConfig;\n    flags?: GWU.flag.FlagBase;\n}\n\nexport interface SpreadFn extends FeatureFn {\n    config: SpreadInfo;\n}\n\nexport type SpreadArgs = [number, number, FeatureConfig, SpreadConfig?];\n\nexport function spread(config: SpreadArgs | SpreadConfig): SpreadFn;\nexport function spread(\n    grow: number,\n    decrement: number,\n    action: FeatureConfig,\n    opts?: SpreadConfig\n): SpreadFn;\nexport function spread(...args: any[]): SpreadFn {\n    let config = {} as SpreadInfo;\n    if (!args.length) {\n        throw new Error('Must have config to create spread.');\n    }\n    if (args.length === 1) {\n        if (typeof args[0] === 'string') {\n            args = args[0].split(':').map((t) => t.trim());\n        } else if (Array.isArray(args[0])) {\n            args = args[0];\n        } else {\n            Object.assign(config, args[0]);\n            args = [config];\n        }\n    }\n    if (args.length >= 3) {\n        Object.assign(config, args[3] || {});\n        config.grow = Number.parseInt(args[0]);\n        config.decrement = Number.parseInt(args[1]);\n        config.features = args[2];\n    } else if (args.length === 2) {\n        throw new Error('Must have actions to run for spread.');\n    }\n\n    if (typeof config.grow !== 'number')\n        config.grow = Number.parseInt(config.grow || 0);\n    if (typeof config.decrement !== 'number')\n        config.decrement = Number.parseInt(config.decrement || 100);\n    config.flags = GWU.flag.from(Flags, config.flags || 0);\n    config.matchTile = config.matchTile || '';\n\n    if (\n        typeof config.features === 'string' &&\n        // @ts-ignore\n        config.features.indexOf(':') < 0\n    ) {\n        if (tileId(config.features) >= 0) {\n            // @ts-ignore\n            config.features = 'TILE:' + config.features;\n        }\n    }\n\n    const action = makeArray(config.features);\n    if (!action) throw new Error('Failed to make action for spread.');\n    config.features = action;\n\n    const fn = spreadFeature.bind(undefined, config) as SpreadFn;\n    fn.config = config;\n    return fn;\n}\n\ninstallType('spread', spread);\n\nexport function spreadFeature(\n    cfg: SpreadInfo,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    const abortIfBlocking = !!(cfg.flags & Flags.E_ABORT_IF_BLOCKS_MAP);\n\n    const map = site;\n    let didSomething = false;\n\n    const spawnMap = GWU.grid.alloc(map.width, map.height);\n\n    if (!computeSpawnMap(cfg, spawnMap, site, x, y)) {\n        GWU.grid.free(spawnMap);\n        return false;\n    }\n\n    if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n        GWU.grid.free(spawnMap);\n        return false;\n    }\n\n    if (cfg.flags & Flags.E_EVACUATE_CREATURES) {\n        // first, evacuate creatures, so that they do not re-trigger the tile.\n        if (evacuateCreatures(map, spawnMap)) {\n            didSomething = true;\n        }\n    }\n\n    if (cfg.flags & Flags.E_EVACUATE_ITEMS) {\n        // first, evacuate items, so that they do not re-trigger the tile.\n        if (evacuateItems(map, spawnMap)) {\n            didSomething = true;\n        }\n    }\n\n    if (cfg.flags & Flags.E_CLEAR_CELL) {\n        // first, clear other tiles (not base/ground)\n        if (clearCells(map, spawnMap, cfg.flags)) {\n            didSomething = true;\n        }\n    }\n\n    spawnMap.update((v) => {\n        if (!v) return 0;\n        return 1;\n    });\n\n    cfg.features.forEach((fn, i) => {\n        spawnMap.forEach((v, x, y) => {\n            if (v !== i + 1) return;\n\n            if (fn(site, x, y)) {\n                didSomething = true;\n                spawnMap[x][y] += 1;\n            }\n        });\n    });\n\n    if (didSomething) {\n        didSomething = true;\n    }\n    GWU.grid.free(spawnMap);\n    return didSomething;\n}\n\nexport function mapDisruptedBy(\n    map: Site,\n    blockingGrid: GWU.grid.NumGrid,\n    blockingToMapX = 0,\n    blockingToMapY = 0\n) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.isStairs(i, j)) {\n                disrupts = true;\n            }\n        } else if (!map.blocksMove(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                } else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\n// Spread\n\nfunction cellIsOk(\n    effect: SpreadInfo,\n    map: Site,\n    x: number,\n    y: number,\n    isStart: boolean\n) {\n    if (!map.hasXY(x, y)) return false;\n    if (map.isProtected(x, y)) return false;\n\n    if (map.blocksEffects(x, y) && !effect.matchTile && !isStart) {\n        return false;\n    }\n\n    if (effect.flags & Flags.E_BUILD_IN_WALLS) {\n        if (!map.isWall(x, y)) return false;\n    } else if (effect.flags & Flags.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (map.isWall(i, j)) {\n                    ok = true;\n                }\n            },\n            true\n        );\n        if (!ok) return false;\n    } else if (effect.flags & Flags.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.isWall(x, y)) return false; // or on wall\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (map.isWall(i, j)) {\n                    ok = false;\n                }\n            },\n            true\n        );\n        if (!ok) return false;\n    }\n\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !map.hasTile(x, y, effect.matchTile)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function computeSpawnMap(\n    effect: SpreadInfo,\n    spawnMap: GWU.grid.NumGrid,\n    site: Site,\n    x: number,\n    y: number\n) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n\n    const map = site;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n\n    spawnMap.fill(0);\n\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (\n                                spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)\n                            ) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n\n    return count > 0;\n}\n\nexport function clearCells(map: Site, spawnMap: GWU.grid.NumGrid, _flags = 0) {\n    let didSomething = false;\n    // const clearAll = (flags & Flags.E_CLEAR_CELL) === Flags.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v) return;\n\n        // if (clearAll) {\n        map.clearTile(i, j);\n        // } else {\n        //     if (flags & Flags.E_CLEAR_GAS) {\n        //         cell.clearDepth(Flags.Depth.GAS);\n        //     }\n        //     if (flags & Flags.E_CLEAR_LIQUID) {\n        //         cell.clearDepth(Flags.Depth.LIQUID);\n        //     }\n        //     if (flags & Flags.E_CLEAR_SURFACE) {\n        //         cell.clearDepth(Flags.Depth.SURFACE);\n        //     }\n        //     if (flags & Flags.E_CLEAR_GROUND) {\n        //         cell.clearDepth(Flags.Depth.GROUND);\n        //     }\n        // }\n        didSomething = true;\n    });\n    return didSomething;\n}\n\nexport function evacuateCreatures(map: Site, blockingMap: GWU.grid.NumGrid) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y]) return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y)) return false;\n            if (blockingMap[x][y]) return false;\n            return !map.forbidsActor(x, y, a);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            a.y = loc[0];\n            a.y = loc[1];\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n\nexport function evacuateItems(map: Site, blockingMap: GWU.grid.NumGrid) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y]) return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y)) return false;\n            if (blockingMap[x][y]) return false;\n            return !map.forbidsItem(x, y, i);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            i.x = loc[0];\n            i.y = loc[1];\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { ItemInstance } from './item';\nimport * as FEATURE from '../feature';\nimport { Site } from '../site';\n\nexport type HordeId = string;\n\nexport interface ActorInstance {\n    id: string;\n    make: Record<string, any>;\n    x: number;\n    y: number;\n    machine: number;\n    leader?: ActorInstance; // number??\n    item?: ItemInstance;\n}\n\nexport interface MemberConfig {\n    count?: GWU.range.RangeBase;\n    make?: Record<string, any>;\n}\n\nexport interface HordeConfig {\n    id?: string;\n    leader: HordeId;\n    make?: Record<string, any>;\n    members?: Record<HordeId, GWU.range.RangeBase | MemberConfig>;\n\n    tags?: GWU.tags.TagBase;\n    frequency?: GWU.frequency.FrequencyConfig;\n\n    // flags?: GWU.flag.FlagBase;\n    requiredTile?: string; // ID\n    feature?: string; // ID\n    blueprint?: string; // ID\n}\n\nexport interface MemberInfo {\n    count: GWU.range.Range;\n    make: Record<string, any>;\n}\n\nexport interface HordeInfo {\n    id?: string;\n    leader: HordeId;\n    make: Record<string, any>;\n    members: Record<HordeId, MemberInfo>;\n\n    tags: string[];\n    frequency: GWU.frequency.FrequencyFn;\n\n    flags: number;\n    requiredTile: string | null;\n    feature: FEATURE.FeatureFn | null;\n    blueprint: string | null;\n}\n\nexport const hordes: HordeInfo[] = [];\n\nexport function installHorde(config: HordeConfig): HordeInfo {\n    const info = {} as HordeInfo;\n    info.id = config.id || config.leader;\n    info.leader = config.leader;\n    info.make = config.make || {};\n    info.members = {};\n    if (config.members) {\n        Object.entries(config.members).forEach(([key, value]) => {\n            let member = {} as MemberInfo;\n            if (\n                typeof value === 'object' &&\n                ('count' in value || 'make' in value)\n            ) {\n                member.count = GWU.range.make(value.count || 1);\n                member.make = value.make || {};\n            } else {\n                // @ts-ignore\n                member.count = GWU.range.make(value);\n            }\n            info.members[key] = member;\n        });\n    }\n\n    info.tags = [];\n    if (config.tags) {\n        if (typeof config.tags === 'string') {\n            config.tags = config.tags.split(/[:|,]/g).map((t) => t.trim());\n        }\n        info.tags = config.tags;\n    }\n\n    info.frequency = GWU.frequency.make(config.frequency);\n    info.flags = 0;\n\n    info.requiredTile = config.requiredTile || null;\n    info.feature = config.feature ? FEATURE.make(config.feature) : null;\n    info.blueprint = config.blueprint || null;\n\n    hordes.push(info);\n\n    return info;\n}\n\nexport function pickHorde(\n    depth: number,\n    rules: string | { id: string } | { tags: string | string[] },\n    rng?: GWU.rng.Random\n): HordeInfo | null {\n    rng = rng || GWU.random;\n    let tagMatch: GWU.tags.TagMatchFn;\n    if (typeof rules === 'string') {\n        tagMatch = GWU.tags.makeMatch(rules);\n    } else if ('id' in rules) {\n        return hordes.find((h) => h.id === rules.id) || null;\n    } else {\n        tagMatch = GWU.tags.makeMatch(rules);\n    }\n\n    const choices = hordes.filter((horde) => tagMatch(horde.tags));\n    if (choices.length == 0) return null;\n\n    const freq = choices.map((info) => info.frequency(depth));\n    const choice = rng.weighted(freq);\n    return choices[choice] || null;\n}\n\nexport interface HordeFlagsType {\n    horde: number;\n}\n\nexport interface SpawnOptions {\n    canSpawn: GWU.xy.XYMatchFunc;\n    rng: GWU.rng.Random;\n    machine: number;\n}\n\nexport function spawnHorde(\n    info: HordeInfo,\n    map: Site,\n    x = -1,\n    y = -1,\n    opts: Partial<SpawnOptions> = {}\n): ActorInstance | null {\n    // Leader info\n    opts.canSpawn = opts.canSpawn || GWU.TRUE;\n    opts.rng = opts.rng || map.rng;\n    opts.machine = opts.machine || 0;\n\n    const leader = _spawnLeader(info, map, x, y, opts as SpawnOptions);\n    if (!leader) return null;\n\n    _spawnMembers(info, leader, map, opts as SpawnOptions);\n    return leader;\n}\n\nfunction _spawnLeader(\n    info: HordeInfo,\n    map: Site,\n    x: number,\n    y: number,\n    opts: SpawnOptions\n): ActorInstance | null {\n    const leader: ActorInstance = {\n        id: info.leader,\n        make: info.make,\n        x,\n        y,\n        machine: opts.machine || 0,\n    };\n\n    if (x >= 0 && y >= 0) {\n        if (!map.canSpawnActor(x, y, leader)) return null;\n    } else {\n        [x, y] = _pickLeaderLoc(leader, map, opts) || [-1, -1];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n    }\n\n    // pre-placement stuff?  machine? effect?\n\n    if (!_addLeader(leader, map, x, y, opts)) {\n        return null;\n    }\n\n    return leader;\n}\n\nfunction _addLeader(\n    leader: ActorInstance,\n    map: Site,\n    x: number,\n    y: number,\n    _opts: SpawnOptions\n): number {\n    return map.addActor(x, y, leader);\n}\n\nfunction _addMember(\n    member: ActorInstance,\n    map: Site,\n    x: number,\n    y: number,\n    leader: ActorInstance,\n    _opts: SpawnOptions\n): number {\n    member.leader = leader;\n    return map.addActor(x, y, member);\n}\n\nfunction _spawnMembers(\n    horde: HordeInfo,\n    leader: ActorInstance,\n    map: Site,\n    opts: SpawnOptions\n): number {\n    const entries = Object.entries(horde.members);\n\n    if (entries.length == 0) return 0;\n\n    let count = 0;\n    entries.forEach(([kindId, config]) => {\n        const count = config.count.value(opts.rng);\n        for (let i = 0; i < count; ++i) {\n            _spawnMember(kindId, config, map, leader, opts);\n        }\n    });\n\n    return count;\n}\n\nfunction _spawnMember(\n    id: string,\n    member: MemberInfo,\n    map: Site,\n    leader: ActorInstance,\n    opts: SpawnOptions\n): ActorInstance | null {\n    const instance = {\n        id,\n        make: member.make,\n        x: -1,\n        y: -1,\n        machine: leader.machine,\n    };\n\n    const [x, y] = _pickMemberLoc(instance, map, leader, opts) || [-1, -1];\n    if (x < 0 || y < 0) {\n        return null;\n    }\n\n    // pre-placement stuff?  machine? effect?\n\n    if (!_addMember(instance, map, x, y, leader, opts)) {\n        return null;\n    }\n\n    return instance;\n}\n\nfunction _pickLeaderLoc(\n    leader: ActorInstance,\n    map: Site,\n    opts: SpawnOptions\n): GWU.xy.Loc | null {\n    let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n        if (!map.hasXY(x, y)) return false;\n\n        if (map.hasActor(x, y)) return false; // Brogue kills existing actors, but lets do this instead\n\n        if (!opts.canSpawn(x, y)) return false;\n        if (!map.canSpawnActor(x, y, leader)) return false;\n        // const cell = map.cell(x, y);\n\n        // if (leader.avoidsCell(cell)) return false;\n\n        // if (Map.isHallway(map, x, y)) {\n        //     return false;\n        // }\n        return true;\n    });\n    return loc;\n}\n\nfunction _pickMemberLoc(\n    actor: ActorInstance,\n    map: Site,\n    leader: ActorInstance,\n    opts: SpawnOptions\n): GWU.xy.Loc | null {\n    let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n        if (!map.hasXY(x, y)) return false;\n        if (map.hasActor(x, y)) return false;\n        // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n\n        if (!map.canSpawnActor(x, y, actor)) return false;\n        if (!opts.canSpawn(x, y)) return false;\n        return true;\n    });\n    return loc;\n}\n","import * as GWU from 'gw-utils';\n\nexport type ItemId = string;\n\nexport interface ItemInstance {\n    id: string;\n    make?: Record<string, any>;\n    key?: { x: number; y: number; disposable?: boolean };\n    x: number; // -1 means not on map (carried)\n    y: number; // -1 means not on map\n}\n\nexport interface ItemConfig {\n    id: ItemId;\n    make?: Record<string, any>;\n\n    tags?: GWU.tags.TagBase;\n    frequency?: GWU.frequency.FrequencyConfig;\n\n    // flags?: GWU.flag.FlagBase;\n    requiredTile?: string;\n    feature?: string;\n    blueprint?: string;\n}\n\nexport interface ItemMatchOptions {\n    tags: string | string[];\n    forbidTags: string | string[];\n    rng?: GWU.rng.Random;\n}\n\nexport interface ItemInfo {\n    id: ItemId;\n    make: Record<string, any>;\n\n    tags: string[];\n    frequency: GWU.frequency.FrequencyFn;\n\n    flags: number;\n    requiredTile: string | null;\n    feature: string | null;\n    blueprint: string | null;\n}\n\nexport const items: ItemInfo[] = [];\n\nexport function installItem(config: ItemConfig): ItemInfo;\nexport function installItem(id: string, cfg: Omit<ItemConfig, 'id'>): ItemInfo;\nexport function installItem(\n    config: ItemConfig | string,\n    cfg?: Omit<ItemConfig, 'id'>\n): ItemInfo {\n    const info = {} as ItemInfo;\n    if (typeof config === 'string') {\n        info.id = config;\n        if (!cfg) throw new Error('Need a configuration.');\n        config = cfg as ItemConfig;\n    } else {\n        info.id = config.id;\n    }\n\n    info.make = config.make || {};\n\n    info.tags = [];\n    if (config.tags) {\n        if (typeof config.tags === 'string') {\n            config.tags = config.tags.split(/[:|,]/g).map((t) => t.trim());\n        }\n        info.tags = config.tags;\n    }\n\n    info.frequency = GWU.frequency.make(config.frequency || 100);\n    info.flags = 0;\n\n    info.requiredTile = config.requiredTile || null;\n    info.feature = config.feature || null;\n    info.blueprint = config.blueprint || null;\n\n    items.push(info);\n\n    return info;\n}\n\nexport function pickItem(\n    depth: number,\n    tagRules: string | { tags: string } | { id: string },\n    rng?: GWU.rng.Random\n): ItemInfo | null {\n    rng = rng || GWU.random;\n    if (typeof tagRules !== 'string' && 'id' in tagRules) {\n        // @ts-ignore\n        return items.find((i) => i.id === tagRules.id) || null;\n    }\n    tagRules = typeof tagRules === 'string' ? tagRules : tagRules.tags;\n    const tagMatch = GWU.tags.makeMatch(tagRules);\n    const choices = items.filter((item) => tagMatch(item.tags));\n    if (choices.length == 0) return null;\n\n    const freq = choices.map((info) => info.frequency(depth));\n    const choice = rng.weighted(freq);\n    return choices[choice] || null;\n}\n\nexport function makeItem(info: ItemInfo): ItemInstance {\n    return {\n        id: info.id,\n        make: info.make,\n        x: -1,\n        y: -1,\n    };\n}\n\nexport function getItemInfo(id: string): ItemInfo | undefined {\n    return items.find((i) => i.id === id);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\nimport * as DIG from './site';\n\nconst DIRS = GWU.xy.DIRS;\n\nexport function loadSite(\n    site: DIG.Site,\n    cells: string[],\n    tiles: Record<string, string>\n) {\n    const w = site.width;\n    const h = site.height;\n\n    cells.forEach((line, j) => {\n        if (j >= h) return;\n        for (let i = 0; i < w && i < line.length; ++i) {\n            const ch = line[i];\n            const tile = tiles[ch] || 'FLOOR';\n\n            site.setTile(i, j, tile);\n        }\n    });\n}\n\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n\n//                 attachDoor(map, room, opts, x, y, oppDir);\n\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n\n//     return false;\n// }\n\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(\n    site: DIG.Site,\n    x: number,\n    y: number\n): number {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (\n            site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)\n        ) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\n\nexport function chooseRandomDoorSites(site: DIG.Site): GWU.xy.Loc[] {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n\n    const DOORS: GWU.xy.Loc[][] = [[], [], [], []];\n\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n\n    const h = site.height;\n    const w = site.width;\n\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (\n                        k = 0;\n                        k < 10 && site.hasXY(newX, newY) && !doorSiteFailed;\n                        k++\n                    ) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n\n    let doorSites: GWU.xy.Loc[] = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = site.rng.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n\n//     const site = new SITE.GridSite(map);\n\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n\n//         if (roomGrid[x][y]) continue;\n\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n\n//     return false;\n// }\n\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = site.rng.sequence(mapDoors.length);\n\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n\n//     return false;\n// }\n\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = site.rng.sequence(4);\n\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n\nexport function fillCostGrid(source: DIG.Site, costGrid: GWU.grid.NumGrid) {\n    costGrid.update((_v, x, y) =>\n        source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION\n    );\n}\n\nexport interface DisruptOptions {\n    offsetX: number; // blockingGridOffsetX\n    offsetY: number; // blockingGridOffsetY\n    machine: number;\n    updateWalkable: (grid: GWU.grid.NumGrid) => boolean; // true = ok to proceed, false = disrupts\n}\n\nexport function siteDisruptedByXY(\n    site: DIG.Site,\n    x: number,\n    y: number,\n    options: Partial<DisruptOptions> = {}\n) {\n    options.offsetX ??= 0;\n    options.offsetY ??= 0;\n    options.machine ??= 0;\n\n    if (\n        GWU.xy.arcCount(x, y, (i, j) => {\n            return site.isPassable(i, j);\n        }) <= 1\n    )\n        return false;\n\n    const blockingGrid = GWU.grid.alloc(site.width, site.height);\n    blockingGrid[x][y] = 1;\n    const result = siteDisruptedBy(site, blockingGrid, options);\n    GWU.grid.free(blockingGrid);\n    return result;\n}\n\nexport function siteDisruptedBy(\n    site: DIG.Site,\n    blockingGrid: GWU.grid.NumGrid,\n    options: Partial<DisruptOptions> = {}\n) {\n    options.offsetX ??= 0;\n    options.offsetY ??= 0;\n    options.machine ??= 0;\n\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const blockingX = i + options.offsetX!;\n        const blockingY = j + options.offsetY!;\n        if (blockingGrid.get(blockingX, blockingY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        } else if (\n            site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)\n        ) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    if (options.updateWalkable) {\n        if (!options.updateWalkable(walkableGrid)) {\n            return true;\n        }\n    }\n\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                } else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\nexport function siteDisruptedSize(\n    site: DIG.Site,\n    blockingGrid: GWU.grid.NumGrid,\n    blockingToMapX = 0,\n    blockingToMapY = 0\n) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        } else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    if (disrupts) return disrupts;\n\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                } else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\nexport function computeDistanceMap(\n    site: DIG.Site,\n    distanceMap: GWU.path.DijkstraMap,\n    originX: number,\n    originY: number,\n    _maxDistance: number\n) {\n    distanceMap.reset(site.width, site.height);\n    distanceMap.setGoal(originX, originY);\n    distanceMap.calculate((x, y) => {\n        if (!site.hasXY(x, y)) return GWU.path.OBSTRUCTION;\n        if (site.isPassable(x, y)) return GWU.path.OK;\n        if (site.blocksDiagonal(x, y)) return GWU.path.OBSTRUCTION;\n        return GWU.path.BLOCKED;\n    }, false);\n}\n\nexport function clearInteriorFlag(site: DIG.Site, machine: number) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine && !site.needsMachine(i, j)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\n\nexport interface AnalysisBase {\n    readonly height: number;\n    readonly width: number;\n\n    hasXY: GWU.xy.XYMatchFunc;\n\n    blocksPathing: GWU.xy.XYMatchFunc;\n    blocksMove: GWU.xy.XYMatchFunc;\n    isSecretDoor: GWU.xy.XYMatchFunc;\n}\n\nexport interface LoopSite extends AnalysisBase {\n    setInLoop: GWU.xy.XYFunc;\n    clearInLoop: GWU.xy.XYFunc;\n    isInLoop: GWU.xy.XYMatchFunc;\n}\n\nexport interface ChokeSite extends AnalysisBase {\n    clearChokepoint: GWU.xy.XYFunc;\n    setChokepoint: GWU.xy.XYFunc;\n    isChokepoint: GWU.xy.XYMatchFunc;\n    setChokeCount(x: number, y: number, count: number): void;\n    getChokeCount(x: number, y: number): number;\n\n    setGateSite: GWU.xy.XYFunc;\n    clearGateSite: GWU.xy.XYFunc;\n    isGateSite: GWU.xy.XYMatchFunc;\n\n    isAreaMachine: GWU.xy.XYMatchFunc;\n    isInLoop: GWU.xy.XYMatchFunc;\n}\n\nexport type AnalysisSite = LoopSite & ChokeSite;\n\nexport function analyze(map: AnalysisSite, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\n\nexport function updateChokepoints(map: ChokeSite, updateCounts: boolean) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            if (\n                (map.blocksPathing(i, j) || map.blocksMove(i, j)) &&\n                !map.isSecretDoor(i, j)\n            ) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            } else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n\n    let passableArcCount;\n\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.clearChokepoint(i, j);\n            if (passMap[i][j] && !map.isInLoop(i, j)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (\n                        (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])\n                    ) {\n                        if (++passableArcCount > 2) {\n                            if (\n                                (!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])\n                            ) {\n                                map.setChokepoint(i, j);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.setChokeCount(i, j, 30000);\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n\n        // Scan through and find a chokepoint next to an open point.\n\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                if (passMap[i][j] && map.isChokepoint(i, j)) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (\n                            map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !map.isChokepoint(newX, newY)\n                        ) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(\n                                map,\n                                grid,\n                                passMap,\n                                newX,\n                                newY\n                            );\n                            passMap[i][j] = 1;\n\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (\n                                            grid[i2][j2] &&\n                                            cellCount <\n                                                map.getChokeCount(i2, j2)\n                                        ) {\n                                            map.setChokeCount(\n                                                i2,\n                                                j2,\n                                                cellCount\n                                            );\n                                            map.clearGateSite(i2, j2);\n                                        }\n                                    }\n                                }\n\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < map.getChokeCount(i, j)) {\n                                    map.setChokeCount(i, j, cellCount);\n                                    map.setGateSite(i, j);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(\n    map: ChokeSite,\n    results: GWU.grid.NumGrid,\n    passMap: GWU.grid.NumGrid,\n    startX: number,\n    startY: number\n) {\n    function getCount(x: number, y: number): number {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n\n        if (map.isAreaMachine(x, y)) {\n            count = 10000;\n        }\n        return count;\n    }\n\n    let count = 0;\n    const todo: GWU.xy.Loc[] = [[startX, startY]];\n    const free: GWU.xy.Loc[] = [];\n\n    while (todo.length) {\n        const item = todo.pop()!;\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y]) continue;\n\n        results[x][y] = 1;\n        count += getCount(x, y);\n\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n\n            if (\n                map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]\n            ) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n\n    return Math.min(count, 10000);\n}\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n\nexport function updateLoopiness(map: LoopSite) {\n    resetLoopiness(map);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\n\nexport function resetLoopiness(map: LoopSite) {\n    GWU.xy.forRect(map.width, map.height, (x, y) => {\n        if (\n            (map.blocksPathing(x, y) || map.blocksMove(x, y)) &&\n            !map.isSecretDoor(x, y)\n        ) {\n            map.clearInLoop(x, y);\n            // cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n            // passMap[i][j] = false;\n        } else {\n            map.setInLoop(x, y);\n            // cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n            // passMap[i][j] = true;\n        }\n    });\n}\n\nexport function checkLoopiness(map: LoopSite) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v) return;\n            // const cell = map.cell(x, y);\n\n            todo[x][y] = 0;\n\n            if (!map.isInLoop(x, y)) {\n                return;\n            }\n\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n\n                if (!map.hasXY(newX, newY)) continue;\n\n                // const cell = map.cell(newX, newY);\n                if (!map.isInLoop(newX, newY)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY)) continue;\n\n                // const newCell = map.cell(newX, newY);\n                if (map.isInLoop(newX, newY)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                } else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                map.clearInLoop(x, y);\n                // cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && map.isInLoop(newX, newY)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\n\nexport function fillInnerLoopGrid(map: LoopSite, grid: GWU.grid.NumGrid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            // const cell = map.cell(x, y);\n            if (map.isInLoop(x, y)) {\n                grid[x][y] = 1;\n            } else if (x > 0 && y > 0) {\n                // const up = map.cell(x, y - 1);\n                // const left = map.cell(x - 1, y);\n                if (\n                    map.isInLoop(x, y - 1) &&\n                    map.isInLoop(x - 1, y)\n                    // up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    // left.flags.cell & Flags.Cell.IS_IN_LOOP\n                ) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\n\nexport function cleanLoopiness(map: LoopSite) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            // const cell = map.cell(i, j);\n            if (map.isInLoop(i, j)) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n\n                    if (\n                        map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !map.isInLoop(newX, newY)\n                    ) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.clearInLoop(i, j);\n                    // map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport * as Utils from './utils';\n\nimport * as TILE from './tile';\nimport * as ITEM from './item';\nimport * as HORDE from './horde';\nimport * as ANALYZE from './analyze';\n\nexport interface SetTileOptions {\n    superpriority?: boolean;\n    blockedByOtherLayers?: boolean;\n    blockedByActors?: boolean;\n    blockedByItems?: boolean;\n    volume?: number;\n    machine?: number;\n}\n\nexport const Flags = GWU.flag.make([\n    'CHOKEPOINT',\n    'GATE_SITE',\n    'IN_LOOP',\n    'IN_MACHINE',\n    'IN_AREA_MACHINE',\n    'IMPREGNABLE',\n]);\n\nexport interface SiteOptions {\n    rng?: GWU.rng.Random;\n}\n\nexport class Site implements ANALYZE.AnalysisSite {\n    _tiles: GWU.grid.NumGrid;\n    _doors: GWU.grid.NumGrid;\n    _flags: GWU.grid.NumGrid;\n    _machine: GWU.grid.NumGrid;\n    _chokeCounts: GWU.grid.NumGrid;\n\n    rng: GWU.rng.Random = GWU.rng.random;\n\n    items: ITEM.ItemInstance[] = [];\n    actors: HORDE.ActorInstance[] = [];\n\n    depth: number;\n    machineCount: number;\n\n    constructor(width: number, height: number, opts: SiteOptions = {}) {\n        this.depth = 0;\n        this.machineCount = 0;\n\n        this._tiles = GWU.grid.alloc(width, height);\n        this._doors = GWU.grid.alloc(width, height);\n        this._flags = GWU.grid.alloc(width, height);\n        this._machine = GWU.grid.alloc(width, height);\n        this._chokeCounts = GWU.grid.alloc(width, height);\n\n        if (opts.rng) {\n            this.rng = opts.rng;\n        }\n    }\n\n    free() {\n        GWU.grid.free(this._tiles);\n        GWU.grid.free(this._doors);\n        GWU.grid.free(this._flags);\n        GWU.grid.free(this._machine);\n        GWU.grid.free(this._chokeCounts);\n    }\n    clear() {\n        this._tiles.fill(0);\n        this._doors.fill(0);\n        this._flags.fill(0);\n        this._machine.fill(0);\n        this._chokeCounts.fill(0);\n        // this.depth = 0;\n        this.machineCount = 0;\n    }\n    dump(fmt?: GWU.grid.GridFormat<number>) {\n        if (fmt) {\n            return this._tiles.dump(fmt);\n        }\n\n        this._tiles.dump((c) => TILE.getTile(c).ch || '?');\n    }\n    // drawInto(buffer: GWU.canvas.Buffer): void {\n    //     buffer.blackOut();\n    //     this.tiles.forEach((t, x, y) => {\n    //         const tile = GWM.tile.get(t);\n    //         buffer.drawSprite(x, y, tile.sprite);\n    //     });\n    // }\n\n    copy(other: Site) {\n        this.depth = other.depth;\n        this.machineCount = other.machineCount;\n\n        this._tiles.copy(other._tiles);\n        this._doors.copy(other._doors);\n        this._machine.copy(other._machine);\n        this._flags.copy(other._flags);\n        this._chokeCounts.copy(other._chokeCounts);\n\n        this.rng = other.rng;\n\n        this.items = other.items.slice();\n        this.actors = other.actors.slice();\n    }\n\n    copyTiles(other: Site, offsetX = 0, offsetY = 0) {\n        GWU.xy.forRect(this.width, this.height, (x, y) => {\n            const otherX = x - offsetX;\n            const otherY = y - offsetY;\n\n            const v = other._tiles.get(otherX, otherY);\n            if (!v) return;\n            this._tiles[x][y] = v;\n        });\n    }\n\n    setSeed(seed: number) {\n        this.rng.seed(seed);\n    }\n\n    get width() {\n        return this._tiles.width;\n    }\n    get height() {\n        return this._tiles.height;\n    }\n\n    hasXY(x: number, y: number) {\n        return this._tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x: number, y: number) {\n        return this._tiles.isBoundaryXY(x, y);\n    }\n\n    isPassable(x: number, y: number) {\n        return (\n            this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y)\n        );\n    }\n\n    isNothing(x: number, y: number) {\n        return this.hasTile(x, y, 'NOTHING');\n    }\n\n    isDiggable(x: number, y: number) {\n        return this.hasTile(x, y, 'NOTHING') || this.hasTile(x, y, 'WALL');\n    }\n\n    isProtected(_x: number, _y: number): boolean {\n        return false;\n    }\n\n    isFloor(x: number, y: number) {\n        return this.hasTile(x, y, 'FLOOR');\n    }\n\n    isDoor(x: number, y: number) {\n        return this.hasTile(x, y, 'DOOR');\n    }\n\n    isSecretDoor(x: number, y: number) {\n        return this.hasTile(x, y, 'SECRET_DOOR');\n    }\n\n    isBridge(x: number, y: number) {\n        return this.hasTile(x, y, 'BRIDGE');\n    }\n\n    isWall(x: number, y: number): boolean {\n        return this.blocksMove(x, y) && this.blocksVision(x, y);\n    }\n\n    blocksMove(x: number, y: number): boolean {\n        return TILE.getTile(this._tiles[x][y]).blocksMove || false;\n    }\n\n    blocksDiagonal(x: number, y: number) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n\n    blocksPathing(x: number, y: number) {\n        return (\n            this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y)\n        );\n    }\n\n    blocksVision(x: number, y: number) {\n        return TILE.getTile(this._tiles[x][y]).blocksVision || false;\n    }\n\n    blocksItems(x: number, y: number) {\n        return (\n            this.blocksPathing(x, y) ||\n            this.isChokepoint(x, y) ||\n            this.isInLoop(x, y) ||\n            this.isInMachine(x, y)\n        );\n        // site.hasCellFlag(\n        //     x,\n        //     y,\n        //     GWM.flags.Cell.IS_CHOKEPOINT |\n        //         GWM.flags.Cell.IS_IN_LOOP |\n        //         GWM.flags.Cell.IS_IN_MACHINE\n        // );\n    }\n\n    blocksEffects(x: number, y: number) {\n        return this.isWall(x, y);\n    }\n\n    isStairs(x: number, y: number) {\n        return (\n            this.hasTile(x, y, 'UP_STAIRS') || this.hasTile(x, y, 'DOWN_STAIRS')\n        );\n    }\n\n    isDeep(x: number, y: number) {\n        return this.hasTile(x, y, 'DEEP');\n    }\n\n    isShallow(x: number, y: number) {\n        return this.hasTile(x, y, 'SHALLOW');\n    }\n\n    isAnyLiquid(x: number, y: number) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n\n    isSet(x: number, y: number) {\n        return (this._tiles.get(x, y) || 0) > 0;\n    }\n\n    tileBlocksMove(tile: string): boolean {\n        return TILE.getTile(tile).blocksMove || false;\n    }\n\n    setTile(\n        x: number,\n        y: number,\n        tile: string | number,\n        _opts: SetTileOptions = {}\n    ) {\n        // if (tile instanceof GWM.tile.Tile) {\n        //     tile = tile.index;\n        // }\n        if (!this._tiles.hasXY(x, y)) return false;\n\n        if (typeof tile === 'string') {\n            tile = TILE.tileId(tile);\n        }\n\n        // priority checks...\n\n        this._tiles[x][y] = tile;\n        return true;\n    }\n    clearTile(x: number, y: number) {\n        if (this.hasXY(x, y)) {\n            this._tiles[x][y] = 0;\n        }\n    }\n    getTile(x: number, y: number): TILE.TileInfo {\n        const id = this._tiles[x][y];\n        return TILE.getTile(id);\n    }\n\n    makeImpregnable(x: number, y: number): void {\n        this._flags[x][y] |= Flags.IMPREGNABLE;\n        // site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n    }\n\n    isImpregnable(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.IMPREGNABLE);\n    }\n\n    hasTile(x: number, y: number, tile: string | number): boolean {\n        if (typeof tile === 'string') {\n            tile = TILE.tileId(tile);\n        }\n        return this.hasXY(x, y) && this._tiles[x][y] == tile;\n    }\n\n    getChokeCount(x: number, y: number): number {\n        return this._chokeCounts[x][y];\n    }\n    setChokeCount(x: number, y: number, count: number): void {\n        this._chokeCounts[x][y] = count;\n    }\n\n    getFlags(x: number, y: number): number {\n        return this._flags[x][y];\n    }\n\n    setChokepoint(x: number, y: number): void {\n        this._flags[x][y] |= Flags.CHOKEPOINT;\n    }\n    isChokepoint(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.CHOKEPOINT);\n    }\n    clearChokepoint(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.CHOKEPOINT;\n    }\n\n    setGateSite(x: number, y: number): void {\n        this._flags[x][y] |= Flags.GATE_SITE;\n    }\n    isGateSite(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.GATE_SITE);\n    }\n\n    clearGateSite(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.GATE_SITE;\n    }\n\n    setInLoop(x: number, y: number): void {\n        this._flags[x][y] |= Flags.IN_LOOP;\n    }\n    isInLoop(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.IN_LOOP);\n    }\n    clearInLoop(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.IN_LOOP;\n    }\n\n    analyze(updateChokeCounts = true): void {\n        ANALYZE.analyze(this, updateChokeCounts);\n    }\n\n    snapshot(): Site {\n        const other = new Site(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    restore(snapshot: Site) {\n        this.copy(snapshot);\n    }\n\n    nextMachineId(): number {\n        this.machineCount += 1;\n        return this.machineCount;\n    }\n    setMachine(x: number, y: number, id: number, isRoom?: boolean): void {\n        this._machine[x][y] = id;\n        const flag = isRoom ? Flags.IN_MACHINE : Flags.IN_AREA_MACHINE;\n        this._flags[x][y] |= flag;\n    }\n    isAreaMachine(x: number, y: number): boolean {\n        return !!(this._machine[x][y] & Flags.IN_AREA_MACHINE);\n    }\n    isInMachine(x: number, y: number): boolean {\n        return this._machine[x][y] > 0;\n    }\n    getMachine(x: number, y: number): number {\n        return this._machine[x][y];\n    }\n\n    needsMachine(_x: number, _y: number): boolean {\n        // site.hasCellFlag(\n        //     i,\n        //     j,\n        //     GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER\n        // );\n        return false;\n    }\n\n    updateDoorDirs(): void {\n        this._doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x: number, y: number): number {\n        return this._doors[x][y];\n    }\n\n    // tileBlocksMove(tile: number): boolean {\n    //     return (\n    //         tile === WALL ||\n    //         tile === DEEP ||\n    //         tile === IMPREGNABLE ||\n    //         tile === DIG.NOTHING\n    //     );\n    // }\n\n    isOccupied(x: number, y: number): boolean {\n        return this.hasActor(x, y) || this.hasItem(x, y);\n    }\n\n    canSpawnActor(x: number, y: number, _actor: HORDE.ActorInstance): boolean {\n        // const cell = map.cell(x, y);\n        // if (actor.avoidsCell(cell)) return false;\n\n        // if (Map.isHallway(map, x, y)) {\n        //     return false;\n        // }\n        return this.isFloor(x, y);\n    }\n\n    eachActor(cb: (a: HORDE.ActorInstance) => void): void {\n        this.actors.forEach(cb);\n    }\n    addActor(x: number, y: number, a: HORDE.ActorInstance): number {\n        a.x = x;\n        a.y = y;\n        this.actors.push(a);\n        return this.actors.length;\n    }\n    getActor(i: number): HORDE.ActorInstance {\n        return this.actors[i];\n    }\n    // removeActor(a: HORDE.ActorInstance): void {\n    //     GWU.arrayDelete(this.actors, a);\n    // }\n    forbidsActor(x: number, y: number, _a: HORDE.ActorInstance): boolean {\n        return !this.isFloor(x, y);\n    }\n    hasActor(x: number, y: number): boolean {\n        return this.actors.some((a) => a.x === x && a.y === y);\n    }\n\n    eachItem(cb: (i: ITEM.ItemInstance) => void): void {\n        this.items.forEach(cb);\n    }\n    addItem(x: number, y: number, i: ITEM.ItemInstance): number {\n        i.x = x;\n        i.y = y;\n        this.items.push(i);\n        return this.items.length;\n    }\n    getItem(i: number): ITEM.ItemInstance {\n        return this.items[i];\n    }\n    // removeItem(i: ITEM.ItemInstance): void {\n    //     GWU.arrayDelete(this.items, i);\n    // }\n    forbidsItem(x: number, y: number, _i: ITEM.ItemInstance): boolean {\n        return !this.isFloor(x, y);\n    }\n    hasItem(x: number, y: number): boolean {\n        return this.items.some((i) => i.x === x && i.y === y);\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport { Site } from '../site';\nimport { Room } from '../../types';\nimport { BuildData } from '../../build/data';\nimport { BuildStep } from '../../build/buildStep';\nimport * as ITEM from '../item';\n\nexport interface Logger {\n    onDigFirstRoom(site: Site): void;\n    onRoomCandidate(room: Room, roomSite: Site): void;\n    onRoomFailed(site: Site, room: Room, roomSite: Site, error: string): void;\n    onRoomSuccess(site: Site, room: Room): void;\n\n    onLoopsAdded(site: Site): void;\n    onLakesAdded(site: Site): void;\n    onBridgesAdded(site: Site): void;\n    onStairsAdded(site: Site): void;\n\n    //\n\n    onBuildError(error: string): void;\n\n    onBlueprintPick(data: BuildData, flags: number, depth: number): void;\n\n    onBlueprintCandidates(data: BuildData): void;\n\n    onBlueprintStart(\n        data: BuildData,\n        adoptedItem: ITEM.ItemInstance | null\n    ): void;\n\n    onBlueprintInterior(data: BuildData): void;\n\n    onBlueprintFail(data: BuildData, error: string): void;\n\n    onBlueprintSuccess(data: BuildData): void;\n\n    onStepStart(\n        data: BuildData,\n        step: BuildStep,\n        item: ITEM.ItemInstance | null\n    ): void;\n\n    onStepCandidates(\n        data: BuildData,\n        step: BuildStep,\n        candidates: GWU.grid.NumGrid,\n        wantCount: number\n    ): void;\n\n    onStepInstanceSuccess(\n        data: BuildData,\n        step: BuildStep,\n        x: number,\n        y: number\n    ): void;\n\n    onStepInstanceFail(\n        data: BuildData,\n        step: BuildStep,\n        x: number,\n        y: number,\n        error: string\n    ): void;\n\n    onStepSuccess(data: BuildData, step: BuildStep): void;\n\n    onStepFail(data: BuildData, step: BuildStep, error: string): void;\n}\n\nexport class NullLogger implements Logger {\n    onDigFirstRoom(): void {}\n    onRoomCandidate(): void {}\n    onRoomFailed(): void {}\n    onRoomSuccess(): void {}\n    onLoopsAdded(): void {}\n    onLakesAdded(): void {}\n    onBridgesAdded(): void {}\n    onStairsAdded(): void {}\n\n    onBuildError(): void {}\n    onBlueprintPick(): void {}\n    onBlueprintCandidates(): void {}\n    onBlueprintStart(): void {}\n    onBlueprintInterior(): void {}\n    onBlueprintFail(): void {}\n    onBlueprintSuccess(): void {}\n    onStepStart(): void {}\n    onStepCandidates(): void {}\n    onStepInstanceSuccess(): void {}\n    onStepInstanceFail(): void {}\n    onStepSuccess(): void {}\n    onStepFail(): void {}\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport { BuildData } from './data';\nimport { Blueprint } from './blueprint';\nimport * as FEATURE from '../feature';\n// import * as ITEM from '../item';\n\nexport interface HordeStepOptions {\n    id?: string;\n    tags?: string;\n    feature?: FEATURE.FeatureConfig;\n    make?: Record<string, any>;\n}\n\nexport interface ItemStepOptions {\n    id?: string;\n    tags?: string;\n    make?: Record<string, any>;\n    feature?: FEATURE.FeatureConfig;\n}\n\nexport interface StepOptions {\n    tile: string;\n    flags: GWU.flag.FlagBase;\n    pad: number;\n    count: GWU.range.RangeBase;\n    item: string | ItemStepOptions;\n    horde: string | boolean | HordeStepOptions;\n    feature: FEATURE.FeatureConfig;\n}\n\nexport interface HordeStepInfo extends HordeStepOptions {\n    tags: string;\n    feature?: FEATURE.FeatureFn;\n}\n\nexport interface ItemStepInfo extends ItemStepOptions {\n    tags: string;\n    feature?: FEATURE.FeatureFn;\n}\n\nconst Fl = GWU.flag.fl;\n\nexport enum StepFlags {\n    BS_OUTSOURCE_ITEM_TO_MACHINE = Fl(1), // item must be adopted by another machine\n    BS_BUILD_VESTIBULE = Fl(2), // call this at the origin of a door room to create a new door guard machine there\n    BS_ADOPT_ITEM = Fl(3), // this feature will take the adopted item (be it from another machine or a previous feature)\n    BS_BUILD_AT_ORIGIN = Fl(4), // generate this feature at the room entrance\n\n    BS_PERMIT_BLOCKING = Fl(5), // permit the feature to block the map's passability (e.g. to add a locked door)\n    BS_TREAT_AS_BLOCKING = Fl(6), // treat this terrain as though it blocks, for purposes of deciding whether it can be placed there\n\n    BS_NEAR_ORIGIN = Fl(7), // feature must spawn in the rough quarter of tiles closest to the origin\n    BS_FAR_FROM_ORIGIN = Fl(8), // feature must spawn in the rough quarter of tiles farthest from the origin\n    BS_IN_VIEW_OF_ORIGIN = Fl(9), // this feature must be in view of the origin\n    BS_IN_PASSABLE_VIEW_OF_ORIGIN = Fl(10), // this feature must be in view of the origin, where \"view\" is blocked by pathing blockers\n\n    BS_HORDE_TAKES_ITEM = Fl(11), // the item associated with this feature (including if adopted) will be in possession of the horde leader that's generated\n    BS_HORDE_SLEEPING = Fl(12), // the monsters should be asleep when generated\n    BS_HORDE_FLEEING = Fl(13), // the monsters should be permanently fleeing when generated\n    BS_HORDES_DORMANT = Fl(14), // monsters are dormant, and appear when a dungeon feature with DFF_ACTIVATE_DORMANT_MONSTER spawns on their tile\n\n    BS_ITEM_IS_KEY = Fl(15),\n    BS_ITEM_IDENTIFIED = Fl(16),\n    BS_ITEM_PLAYER_AVOIDS = Fl(17),\n\n    BS_EVERYWHERE = Fl(18), // generate the feature on every tile of the machine (e.g. carpeting)\n    BS_ALTERNATIVE = Fl(19), // build only one feature that has this flag per machine; the rest are skipped\n    BS_ALTERNATIVE_2 = Fl(20), // same as BS_ALTERNATIVE, but provides for a second set of alternatives of which only one will be chosen\n\n    BS_BUILD_IN_WALLS = Fl(21), // build in an impassable tile that is adjacent to the interior\n    BS_BUILD_ANYWHERE_ON_LEVEL = Fl(22), // build anywhere on the level that is not inside the machine\n    BS_REPEAT_UNTIL_NO_PROGRESS = Fl(23), // keep trying to build this feature set until no changes are made\n    BS_IMPREGNABLE = Fl(24), // this feature's location will be immune to tunneling\n\n    BS_NO_BLOCK_ORIGIN = Fl(25), // Treat as blocking, but do not block the path to the origin\n\n    // TODO - BS_ALLOW_IN_HALLWAY instead?\n    BS_NOT_IN_HALLWAY = Fl(27), // the feature location must have a passableArcCount of <= 1\n\n    BS_ALLOW_BOUNDARY = Fl(28), // allow build it in the outermost walls of the level\n\n    BS_SKELETON_KEY = Fl(29), // if a key is generated or adopted by this feature, it will open all locks in this machine.\n    BS_KEY_DISPOSABLE = Fl(30), // if a key is generated or adopted, it will self-destruct after being used at this current location.\n}\n\nexport class BuildStep {\n    tile: string | null = null;\n    flags: number = 0;\n    pad: number = 0;\n    count: GWU.range.Range;\n    item: ItemStepInfo | null = null;\n    horde: HordeStepInfo | null = null;\n    feature: FEATURE.FeatureFn | null = null;\n    chance = 0;\n    index = -1;\n    // next: null = null;\n    // id = 'n/a';\n\n    constructor(cfg: Partial<StepOptions> = {}) {\n        this.tile = cfg.tile || null;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        if (typeof cfg.item === 'string') {\n            this.item = { tags: cfg.item };\n        } else if (cfg.item) {\n            // @ts-ignore\n            this.item = Object.assign({ tags: '' }, cfg.item);\n            if (this.item!.feature) {\n                this.item!.feature = FEATURE.make(this.item!.feature);\n            }\n        } else {\n            this.item = null;\n        }\n        if (cfg.horde) {\n            if (cfg.horde === true) {\n                this.horde = { tags: '' };\n            } else if (typeof cfg.horde === 'string') {\n                this.horde = { tags: cfg.horde };\n            } else {\n                // @ts-ignore\n                this.horde = Object.assign({ tags: '' }, cfg.horde);\n                if (this.horde!.feature) {\n                    this.horde!.feature = FEATURE.make(this.horde!.feature);\n                }\n            }\n        } else {\n            this.horde = null;\n        }\n\n        if (cfg.feature) {\n            this.feature = FEATURE.make(cfg.feature);\n        } else {\n            this.feature = null;\n        }\n\n        if (this.item && this.flags & StepFlags.BS_ADOPT_ITEM) {\n            throw new Error(\n                'Cannot have blueprint step with item and BS_ADOPT_ITEM.'\n            );\n        }\n\n        if (this.buildAtOrigin && this.count.hi > 1) {\n            throw new Error(\n                'Cannot have count > 1 for step with BS_BUILD_AT_ORIGIN.'\n            );\n        }\n        if (this.buildAtOrigin && this.repeatUntilNoProgress) {\n            throw new Error(\n                'Cannot have BS_BUILD_AT_ORIGIN and BS_REPEAT_UNTIL_NO_PROGRESS together in a build step.'\n            );\n        }\n        if (this.hordeTakesItem && !this.horde) {\n            throw new Error(\n                'Cannot have BS_HORDE_TAKES_ITEM without a horde configured.'\n            );\n        }\n    }\n\n    get allowBoundary(): boolean {\n        return !!(this.flags & StepFlags.BS_ALLOW_BOUNDARY);\n    }\n\n    get notInHallway(): boolean {\n        return !!(this.flags & StepFlags.BS_NOT_IN_HALLWAY);\n    }\n\n    get buildInWalls(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_IN_WALLS);\n    }\n\n    get buildAnywhere(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_ANYWHERE_ON_LEVEL);\n    }\n\n    get repeatUntilNoProgress(): boolean {\n        return !!(this.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS);\n    }\n\n    get permitBlocking(): boolean {\n        return !!(this.flags & StepFlags.BS_PERMIT_BLOCKING);\n    }\n\n    get treatAsBlocking(): boolean {\n        return !!(\n            this.flags &\n            (StepFlags.BS_TREAT_AS_BLOCKING | StepFlags.BS_NO_BLOCK_ORIGIN)\n        );\n    }\n\n    get noBlockOrigin(): boolean {\n        return !!(this.flags & StepFlags.BS_NO_BLOCK_ORIGIN);\n    }\n\n    get adoptItem(): boolean {\n        return !!(this.flags & StepFlags.BS_ADOPT_ITEM);\n    }\n\n    get itemIsKey(): boolean {\n        return !!(this.flags & StepFlags.BS_ITEM_IS_KEY);\n    }\n\n    get keyIsDisposable(): boolean {\n        return !!(this.flags & StepFlags.BS_KEY_DISPOSABLE);\n    }\n\n    get outsourceItem(): boolean {\n        return !!(this.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE);\n    }\n\n    get impregnable(): boolean {\n        return !!(this.flags & StepFlags.BS_IMPREGNABLE);\n    }\n\n    get buildVestibule(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_VESTIBULE);\n    }\n\n    get hordeTakesItem(): boolean {\n        return !!(this.flags & StepFlags.BS_HORDE_TAKES_ITEM);\n    }\n\n    get generateEverywhere(): boolean {\n        return !!(\n            this.flags &\n            StepFlags.BS_EVERYWHERE &\n            ~StepFlags.BS_BUILD_AT_ORIGIN\n        );\n    }\n\n    get buildAtOrigin(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_AT_ORIGIN);\n    }\n\n    get buildsInstances(): boolean {\n        return !!(\n            this.feature ||\n            this.tile ||\n            this.item ||\n            this.horde ||\n            this.adoptItem\n        );\n    }\n\n    // makeItem(data: BuildData): ITEM.ItemInfo | null {\n    //     if (!this.item) return null;\n    //     return ITEM.pick(data.depth, this.item);\n    // }\n\n    // cellIsCandidate(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     x: number,\n    //     y: number,\n    //     distanceBound: [number, number]\n    // ) {\n    //     return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    // }\n\n    // distanceBound(builder: BuildData): [number, number] {\n    //     return calcDistanceBound(builder, this);\n    // }\n\n    // updateViewMap(builder: BuildData): void {\n    //     updateViewMap(builder, this);\n    // }\n\n    // build(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     adoptedItem: GWM.item.Item | null\n    // ): boolean {\n    //     return buildStep(builder, blueprint, this, adoptedItem);\n    // }\n\n    markCandidates(\n        data: BuildData,\n        candidates: GWU.grid.NumGrid,\n        distanceBound: [number, number] = [0, 10000]\n    ): number {\n        updateViewMap(data, this);\n        const blueprint = data.blueprint;\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            const candidateType = cellIsCandidate(\n                data,\n                blueprint,\n                this,\n                i,\n                j,\n                distanceBound\n            );\n            if (candidateType === CandidateType.OK) {\n                count++;\n            }\n            return candidateType;\n        });\n        return count;\n    }\n\n    makePersonalSpace(\n        _data: BuildData,\n        x: number,\n        y: number,\n        candidates: GWU.grid.NumGrid\n    ) {\n        let count = 0;\n\n        if (this.pad < 1) return 0; // do not mark occupied\n        // or...\n        // if (this.buildEverywhere) return 0;  // do not mark occupied\n\n        for (let i = x - this.pad; i <= x + this.pad; i++) {\n            for (let j = y - this.pad; j <= y + this.pad; j++) {\n                if (candidates.hasXY(i, j)) {\n                    if (candidates[i][j] == 1) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    // builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n\n    toString() {\n        let parts = [];\n        if (this.tile) {\n            parts.push('tile: ' + this.tile);\n        }\n        if (this.feature) {\n            parts.push('effect: ' + JSON.stringify(this.feature));\n        }\n        if (this.item) {\n            parts.push('item: ' + JSON.stringify(this.item));\n        }\n        if (this.horde) {\n            parts.push('horde: ' + JSON.stringify(this.horde));\n        }\n        if (this.pad > 1) {\n            parts.push('pad: ' + this.pad);\n        }\n        if (this.count.lo > 1 || this.count.hi > 1) {\n            parts.push('count: ' + this.count.toString());\n        }\n        if (this.chance) {\n            parts.push('chance: ' + this.chance);\n        }\n        if (this.flags) {\n            parts.push('flags: ' + GWU.flag.toString(StepFlags, this.flags));\n        }\n        return '{ ' + parts.join(', ') + ' }';\n    }\n}\n\nexport function updateViewMap(builder: BuildData, buildStep: BuildStep): void {\n    if (\n        buildStep.flags &\n        (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n            StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN)\n    ) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        } else {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\n\nexport function calcDistanceBound(\n    builder: BuildData,\n    buildStep: BuildStep\n): [number, number] {\n    const distanceBound: [number, number] = [0, 10000];\n    if (buildStep.flags & StepFlags.BS_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BS_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\n\nexport enum CandidateType {\n    NOT_CANDIDATE = 0,\n    OK = 1,\n    IN_HALLWAY,\n    ON_BOUNDARY,\n    MUST_BE_ORIGIN,\n    NOT_ORIGIN,\n    OCCUPIED,\n    NOT_IN_VIEW,\n    TOO_FAR,\n    TOO_CLOSE,\n    INVALID_WALL,\n    BLOCKED,\n    FAILED,\n}\n\nexport function cellIsCandidate(\n    builder: BuildData,\n    blueprint: Blueprint,\n    buildStep: BuildStep,\n    x: number,\n    y: number,\n    distanceBound: [number, number]\n): CandidateType {\n    const site = builder.site;\n\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (\n        buildStep.notInHallway &&\n        GWU.xy.arcCount(\n            x,\n            y,\n            (i, j) => site.hasXY(i, j) && site.isPassable(i, j)\n        ) > 1\n    ) {\n        return CandidateType.IN_HALLWAY;\n    }\n\n    // if (buildStep.noBlockOrigin) {\n    //     let ok = true;\n    //     GWU.xy.eachNeighbor(\n    //         x,\n    //         y,\n    //         (nx, ny) => {\n    //             if (nx === builder.originX && ny === builder.originY) {\n    //                 ok = false;\n    //             }\n    //         },\n    //         true\n    //     );\n    //     if (!ok) return false;\n    // }\n\n    // No building along the perimeter of the level if it's prohibited.\n    if (\n        (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1) &&\n        !buildStep.allowBoundary\n    ) {\n        return CandidateType.ON_BOUNDARY;\n    }\n\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.buildAtOrigin) {\n        if (x == builder.originX && y == builder.originY)\n            return CandidateType.OK;\n        return CandidateType.MUST_BE_ORIGIN;\n    } else if (\n        blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY\n    ) {\n        return CandidateType.NOT_ORIGIN;\n    }\n\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return CandidateType.OCCUPIED;\n    }\n\n    // Must be in the viewmap if the appropriate flag is set.\n    if (\n        buildStep.flags &\n            (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n                StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]\n    ) {\n        return CandidateType.NOT_IN_VIEW;\n    }\n\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (!builder.distanceMap.hasXY(i, j)) return;\n                if (\n                    !site.blocksPathing(i, j) &&\n                    distance > builder.distanceMap.getDistance(i, j) + 1\n                ) {\n                    distance = builder.distanceMap.getDistance(i, j) + 1;\n                }\n            },\n            true\n        );\n    } else {\n        distance = builder.distanceMap.getDistance(x, y);\n    }\n\n    if (distance > distanceBound[1]) return CandidateType.TOO_FAR; // distance exceeds max\n    if (distance < distanceBound[0]) return CandidateType.TOO_CLOSE;\n\n    if (buildStep.buildInWalls) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (\n            !builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)\n        ) {\n            let ok = false;\n            let failed = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (newX, newY) => {\n                    if (failed) return;\n                    if (!site.hasXY(newX, newY)) return;\n                    if (\n                        !builder.interior[newX][newY] &&\n                        !buildStep.buildAnywhere\n                    ) {\n                        return;\n                    }\n                    // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                    const neighborMachine = site.getMachine(newX, newY);\n                    if (\n                        !site.blocksPathing(newX, newY) &&\n                        (!neighborMachine ||\n                            neighborMachine == builder.machineNumber) &&\n                        !(newX == builder.originX && newY == builder.originY)\n                    ) {\n                        if (\n                            buildStep.notInHallway &&\n                            GWU.xy.arcCount(\n                                newX,\n                                newY,\n                                (i, j) =>\n                                    site.hasXY(i, j) && site.isPassable(i, j)\n                            ) > 1\n                        ) {\n                            // return CandidateType.IN_HALLWAY;\n                            failed = true;\n                            ok = false;\n                        } else {\n                            ok = true;\n                        }\n                    }\n                },\n                true\n            );\n            return ok ? CandidateType.OK : CandidateType.INVALID_WALL;\n        }\n        return CandidateType.NOT_CANDIDATE;\n    } else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return CandidateType.INVALID_WALL;\n    } else if (buildStep.buildAnywhere) {\n        if (buildStep.item && site.blocksItems(x, y)) {\n            return CandidateType.BLOCKED;\n        } else {\n            return CandidateType.OK;\n        }\n    } else if (builder.interior[x][y]) {\n        return CandidateType.OK;\n    }\n    return CandidateType.FAILED;\n}\n\n// export function buildStep(\n//     builder: BuildData,\n//     blueprint: Blueprint,\n//     buildStep: BuildStep,\n//     adoptedItem: GWM.item.Item | null\n// ): boolean {\n//     let wantCount = 0;\n//     let builtCount = 0;\n\n//     const site = builder.site;\n\n//     const candidates = GWU.grid.alloc(site.width, site.height);\n\n//     // Figure out the distance bounds.\n//     const distanceBound = calcDistanceBound(builder, buildStep);\n//     buildStep.updateViewMap(builder);\n\n//     // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n\n//     // Make a master map of candidate locations for this feature.\n//     let qualifyingTileCount = markCandidates(\n//         candidates,\n//         builder,\n//         blueprint,\n//         buildStep,\n//         distanceBound\n//     );\n\n//     if (!buildStep.generateEverywhere) {\n//         wantCount = buildStep.count.value();\n//     }\n\n//     if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n//         console.log(\n//             ' - Only %s qualifying tiles - want at least %s.',\n//             qualifyingTileCount,\n//             buildStep.count.lo\n//         );\n//         GWU.grid.free(candidates);\n//         return false;\n//     }\n\n//     let x = 0,\n//         y = 0;\n\n//     let success = true;\n//     let didSomething = false;\n\n//     do {\n//         success = true;\n//         // Find a location for the feature.\n//         if (buildStep.buildAtOrigin) {\n//             // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n//             x = builder.originX;\n//             y = builder.originY;\n//         } else {\n//             // Pick our candidate location randomly, and also strike it from\n//             // the candidates map so that subsequent instances of this same feature can't choose it.\n//             [x, y] = site.rng.matchingLoc(\n//                 candidates.width,\n//                 candidates.height,\n//                 (x, y) => candidates[x][y] > 0\n//             );\n//         }\n//         // Don't waste time trying the same place again whether or not this attempt succeeds.\n//         candidates[x][y] = 0;\n//         qualifyingTileCount--;\n\n//         // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n//         if (buildStep.effect) {\n//             success = site.fireEffect(buildStep.effect, x, y);\n//             didSomething = success;\n//         }\n\n//         // Now try to place the terrain tile, if any.\n//         if (success && buildStep.tile !== -1) {\n//             const tile = GWM.tile.get(buildStep.tile);\n//             if (\n//                 !(buildStep.flags & StepFlags.BS_PERMIT_BLOCKING) &&\n//                 (tile.blocksMove() ||\n//                     buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING)\n//             ) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y, {\n//                     machine: site.machineCount,\n//                 });\n//             }\n//             if (success) {\n//                 success = site.setTile(x, y, tile);\n//                 didSomething = didSomething || success;\n//             }\n//         }\n\n//         // Generate an actor, if necessary\n\n//         // Generate an item, if necessary\n//         if (success && buildStep.item) {\n//             const item = site.makeRandomItem(buildStep.item);\n//             if (!item) {\n//                 success = false;\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_ITEM_IS_KEY) {\n//                 item.key = GWM.entity.makeKeyInfo(\n//                     x,\n//                     y,\n//                     !!(buildStep.flags & StepFlags.BS_KEY_DISPOSABLE)\n//                 );\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE) {\n//                 success = builder.buildRandom(\n//                     Flags.BP_ADOPT_ITEM,\n//                     -1,\n//                     -1,\n//                     item\n//                 );\n//                 if (success) {\n//                     didSomething = true;\n//                 }\n//             } else {\n//                 success = site.addItem(x, y, item);\n//                 didSomething = didSomething || success;\n//             }\n//         } else if (success && buildStep.flags & StepFlags.BS_ADOPT_ITEM) {\n//             // adopt item if necessary\n//             if (!adoptedItem) {\n//                 GWU.grid.free(candidates);\n//                 throw new Error(\n//                     'Failed to build blueprint because there is no adopted item.'\n//                 );\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y);\n//             }\n\n//             if (success) {\n//                 success = site.addItem(x, y, adoptedItem);\n//                 if (success) {\n//                     didSomething = true;\n//                 } else {\n//                     console.log('- failed to add item', x, y);\n//                 }\n//             } else {\n//                 // console.log('- blocks map', x, y);\n//             }\n//         }\n\n//         if (success && didSomething) {\n//             // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n//             qualifyingTileCount -= makePersonalSpace(\n//                 builder,\n//                 x,\n//                 y,\n//                 candidates,\n//                 buildStep.pad\n//             );\n//             builtCount++; // we've placed an instance\n\n//             // Mark the feature location as part of the machine, in case it is not already inside of it.\n//             if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n//                 site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n//             }\n\n//             // Mark the feature location as impregnable if requested.\n//             if (buildStep.flags & StepFlags.BS_IMPREGNABLE) {\n//                 site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n//             }\n//         }\n\n//         // Finished with this instance!\n//     } while (\n//         qualifyingTileCount > 0 &&\n//         (buildStep.generateEverywhere ||\n//             builtCount < wantCount ||\n//             buildStep.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS)\n//     );\n\n//     if (success && buildStep.flags & StepFlags.BS_BUILD_VESTIBULE) {\n//         // Generate a door guard machine.\n//         // Try to create a sub-machine that qualifies.\n\n//         success = builder.buildRandom(\n//             Flags.BP_VESTIBULE,\n//             builder.originX,\n//             builder.originY\n//         );\n\n//         if (!success) {\n//             // console.log(\n//             //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n//             // );\n//             // failure! abort!\n//             GWU.grid.free(candidates);\n//             return false;\n//         }\n//         ++builtCount;\n//     }\n\n//     //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n//     //DEBUG logBuffer(candidates);\n\n//     success = builtCount > 0;\n\n//     GWU.grid.free(candidates);\n//     return success;\n// }\n","import * as GWU from 'gw-utils';\nimport { Room } from '../../types';\nimport { Site } from '../site';\nimport { Logger } from './logger';\nimport { BuildData } from '../../build/data';\nimport { BuildStep, StepFlags } from '../../build/buildStep';\n\nexport class ConsoleLogger implements Logger {\n    onDigFirstRoom(site: Site) {\n        console.group('dig first room');\n        site.dump();\n        console.groupEnd();\n    }\n\n    onRoomCandidate(room: Room, roomSite: Site): void {\n        console.group('room candidate: ' + room.toString());\n        roomSite.dump();\n        console.groupEnd();\n    }\n\n    onRoomFailed(\n        _site: Site,\n        _room: Room,\n        _roomSite: Site,\n        error: string\n    ): void {\n        console.log('Room Failed - ', error);\n    }\n\n    onRoomSuccess(site: Site, room: Room): void {\n        console.group('Added Room - ' + room.toString());\n        site.dump();\n        console.groupEnd();\n    }\n\n    onLoopsAdded(_site: Site): void {\n        console.log('loops added');\n    }\n    onLakesAdded(_site: Site): void {\n        console.log('lakes added');\n    }\n    onBridgesAdded(_site: Site): void {\n        console.log('bridges added');\n    }\n    onStairsAdded(_site: Site): void {\n        console.log('stairs added');\n    }\n\n    //\n\n    onBuildError(error: string) {\n        console.log(`onBuildError - error: ${error}`);\n    }\n\n    onBlueprintPick(data: BuildData, flags: number, depth: number) {\n        console.log(\n            `onBlueprintPick - ${\n                data.blueprint.id\n            }, depth = ${depth}, matchingFlags = ${GWU.flag.toString(\n                StepFlags,\n                flags\n            )}`\n        );\n    }\n\n    onBlueprintCandidates(data: BuildData) {\n        const label = `onBlueprintCandidates - ${data.blueprint.id}`;\n        console.group(label);\n        data.candidates.dump();\n        console.groupEnd();\n    }\n\n    onBlueprintStart(data: BuildData) {\n        console.group(\n            `onBlueprintStart - ${data.blueprint.id} @ ${data.originX},${\n                data.originY\n            } : stepCount: ${\n                data.blueprint.steps.length\n            }, size: [${data.blueprint.size.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                data.blueprint.flags\n            )}`\n        );\n    }\n\n    onBlueprintInterior(data: BuildData) {\n        console.group(`onBlueprintInterior - ${data.blueprint.id}`);\n        data.interior.dump();\n        console.groupEnd();\n    }\n\n    onBlueprintFail(data: BuildData, error: string) {\n        console.log(\n            `onBlueprintFail - ${data.blueprint.id} @ ${data.originX},${data.originY} : error: ${error}`\n        );\n        console.groupEnd();\n    }\n\n    onBlueprintSuccess(data: BuildData) {\n        console.log(\n            `onBlueprintSuccess - ${data.blueprint.id} @ ${data.originX},${data.originY}`\n        );\n        console.groupEnd();\n    }\n\n    onStepStart(data: BuildData, step: BuildStep) {\n        console.group(\n            `onStepStart - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : count: [${step.count.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                step.flags\n            )}`\n        );\n        console.log(step.toString());\n    }\n\n    onStepCandidates(\n        data: BuildData,\n        step: BuildStep,\n        candidates: GWU.grid.NumGrid,\n        wantCount: number\n    ) {\n        const haveCount = candidates.count((v) => v == 1);\n        console.log(\n            `onStepCandidates - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : wantCount: ${wantCount}, have: ${haveCount}`\n        );\n        candidates.dump();\n        if (haveCount == 0) {\n            console.log('No candidates - check interior');\n            data.interior.dump();\n        }\n    }\n\n    onStepInstanceSuccess(\n        _data: BuildData,\n        _step: BuildStep,\n        x: number,\n        y: number\n    ) {\n        console.log(`onStepInstance @ ${x},${y}`);\n    }\n\n    onStepInstanceFail(\n        _data: BuildData,\n        _step: BuildStep,\n        x: number,\n        y: number,\n        error: string\n    ) {\n        console.log(`onStepInstanceFail @ ${x},${y} - error: ${error}`);\n    }\n\n    onStepSuccess(data: BuildData, step: BuildStep) {\n        console.log(\n            `onStepSuccess - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : count: [${step.count.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                step.flags\n            )}`\n        );\n        console.groupEnd();\n    }\n\n    onStepFail(data: BuildData, step: BuildStep, error: string) {\n        console.log(\n            `onStepFail - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : error : ${error}`\n        );\n        console.groupEnd();\n    }\n}\n","import * as GWU from 'gw-utils';\n\nexport type TileId = string;\n\nexport interface RoomConfig {\n    // fn?: RoomFn;\n    // door?: boolean | number;\n    // doorChance?: number;\n    tile?: TileId;\n    [x: string]: any;\n}\n\n// export type RoomFn = (\n//     config: RoomConfig,\n//     grid: GWU.grid.NumGrid\n// ) => Room | RoomConfig | null;\n\n// export interface RoomData extends RoomConfig {\n//     fn: RoomFn;\n//     id: string;\n// }\n\n// export type HallFn = (\n//     opts: HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: Room\n// ) => Hall | any | null;\n// export interface HallConfig {\n//     fn?: HallFn;\n//     chance?: number;\n//     length?: GWU.range.RangeBase | [GWU.range.RangeBase, GWU.range.RangeBase];\n//     width?: GWU.range.RangeBase;\n//     tile?: number;\n//     [x: string]: any;\n// }\n\n// export interface HallData extends HallConfig {\n//     fn: HallFn;\n//     id: string;\n// }\n\n// export interface DigConfig {\n//     room: string | any;\n//     hall?: string | HallConfig | boolean;\n//     tries?: number;\n//     locs?: GWU.xy.Loc[];\n//     loc?: GWU.xy.Loc;\n//     door?: number | boolean;\n// }\n\nexport type DigFn = (x: number, y: number, tile: number) => any;\n\nexport class Hall extends GWU.xy.Bounds {\n    public doors: GWU.xy.Loc[] = [];\n\n    constructor(x: number, y: number, width: number, height: number) {\n        super(x, y, width, height);\n    }\n\n    translate(dx: number, dy: number) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d) return;\n                if (d[0] < 0 || d[1] < 0) return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\n\nexport function makeHall(\n    loc: GWU.xy.Loc,\n    dirIndex: number,\n    hallLength: number,\n    hallWidth = 1\n) {\n    const dir = GWU.xy.DIRS[dirIndex];\n    const x = Math.min(loc[0], loc[0] + dir[0] * (hallLength - 1));\n    const y = Math.min(loc[1], loc[1] + dir[1] * (hallLength - 1));\n    const width = Math.abs(dir[0] * hallLength) || hallWidth;\n    const height = Math.abs(dir[1] * hallLength) || hallWidth;\n    return new Hall(x, y, width, height);\n}\n\nexport class Room extends GWU.xy.Bounds {\n    public doors: GWU.xy.Loc[] = [];\n    public hall: Hall | null = null;\n\n    constructor(x: number, y: number, width: number, height: number) {\n        super(x, y, width, height);\n    }\n\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n\n    translate(dx: number, dy: number) {\n        this.x += dx;\n        this.y += dy;\n\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d) return;\n                if (d[0] < 0 || d[1] < 0) return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\n\nexport function checkConfig(\n    config: TYPES.RoomConfig,\n    expected: TYPES.RoomConfig = {}\n) {\n    config = config || {};\n    expected = expected || {};\n\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect as TYPES.TileId;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error(\n                    'Missing required config for room digger: ' + key\n                );\n            }\n        } else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        } else if (Array.isArray(expect)) {\n            have = have || expect;\n        } else {\n            // just set the value\n            have = have || expect;\n        }\n\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n\n    return config;\n}\n\nexport abstract class RoomDigger {\n    public options: TYPES.RoomConfig = {};\n    public doors: GWU.xy.Loc[] = [];\n\n    constructor(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        this._setOptions(config, expected);\n    }\n\n    _setOptions(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        this.options = checkConfig(config, expected);\n    }\n\n    create(site: SITE.Site): TYPES.Room {\n        const result = this.carve(site);\n        if (result) {\n            if (\n                !result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)\n            ) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n\n    abstract carve(site: SITE.Site): TYPES.Room;\n}\n\nexport var rooms: Record<string, RoomDigger> = {};\n\nexport class ChoiceRoom extends RoomDigger {\n    // @ts-ignore\n    public randomRoom: (rng: GWU.rng.Random) => string;\n\n    constructor(config: TYPES.RoomConfig = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n\n    _setOptions(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = (rng) => rng.item(choices);\n        } else if (typeof choices == 'object') {\n            this.randomRoom = (rng) =>\n                rng.weighted(choices as GWU.rng.WeightedObject);\n        } else {\n            throw new Error(\n                'Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }'\n            );\n        }\n    }\n\n    carve(site: SITE.Site) {\n        let id = this.randomRoom(site.rng);\n        const room = rooms[id];\n        if (!room) {\n            GWU.ERROR('Missing room digger choice: ' + id);\n        }\n\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\n\nexport function choiceRoom(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\n\nexport class Cavern extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n\n        const blob = new GWU.blob.Blob({\n            rng: site.rng,\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n\n        const bounds = blob.carve(\n            blobGrid.width,\n            blobGrid.height,\n            (x, y) => (blobGrid[x][y] = 1)\n        );\n\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v) site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\n\nexport function cavern(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        const room = new TYPES.Room(\n            Math.min(roomX, roomX2),\n            Math.min(roomY, roomY2),\n            Math.max(roomWidth, roomWidth2),\n            Math.max(roomHeight, roomHeight2)\n        );\n\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\n\nexport function brogueEntrance(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\n\nexport class Cross extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const roomWidth = width;\n        const roomWidth2 = Math.max(\n            3,\n            Math.floor((width * site.rng.range(25, 75)) / 100)\n        ); // [4,20]\n        const roomHeight = Math.max(\n            3,\n            Math.floor((height * site.rng.range(25, 75)) / 100)\n        ); // [2,5]\n        const roomHeight2 = height;\n\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 =\n            roomX + site.rng.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY =\n            roomY2 +\n            site.rng.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        return new TYPES.Room(\n            roomX,\n            roomY2,\n            Math.max(roomWidth, roomWidth2),\n            Math.max(roomHeight, roomHeight2)\n        );\n    }\n}\n\nexport function cross(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\n\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        let minorWidth = Math.max(\n            3,\n            Math.floor((width * site.rng.range(25, 50)) / 100)\n        ); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(\n            3,\n            Math.floor((height * site.rng.range(25, 50)) / 100)\n        ); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        return new TYPES.Room(\n            Math.min(x, x2),\n            Math.min(y, y2),\n            Math.max(width, minorWidth),\n            Math.max(height, minorHeight)\n        );\n    }\n}\n\nexport function symmetricalCross(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\n\nexport class Rectangular extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\n\nexport function rectangular(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\n\nexport class Circular extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const radius = this.options.radius.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n\n        return new TYPES.Room(\n            x - radius,\n            y - radius,\n            radius * 2 + 1,\n            radius * 2 + 1\n        );\n    }\n}\n\nexport function circular(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\n\nexport class BrogueDonut extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const radius = this.options.radius.value(site.rng);\n        const ringMinWidth = this.options.ringMinWidth.value(site.rng);\n        const holeMinSize = this.options.holeMinSize.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n\n        if (\n            radius > ringMinWidth + holeMinSize &&\n            site.rng.chance(this.options.holeChance.value(site.rng))\n        ) {\n            GWU.xy.forCircle(\n                x,\n                y,\n                site.rng.range(holeMinSize, radius - holeMinSize),\n                (x, y) => site.clearTile(x, y)\n            );\n        }\n\n        return new TYPES.Room(\n            x - radius,\n            y - radius,\n            radius * 2 + 1,\n            radius * 2 + 1\n        );\n    }\n}\n\nexport function brogueDonut(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\n\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value(site.rng);\n\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n\n        for (i = 0; i < chunkCount; ) {\n            x = site.rng.range(minX, maxX);\n            y = site.rng.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX) continue;\n                if (x + 2 > maxX) continue;\n                if (y - 2 < minY) continue;\n                if (y + 2 > maxY) continue;\n\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\n\nexport function chunkyRoom(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\n\nexport function install(id: string, room: RoomDigger) {\n    rooms[id] = room;\n    return room;\n}\n\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\n\nconst DIRS = GWU.xy.DIRS;\n\nexport function isDoorLoc(site: SITE.Site, loc: GWU.xy.Loc, dir: GWU.xy.Loc) {\n    if (!site.hasXY(loc[0], loc[1])) return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1])) return false; // must be a wall/diggable space\n\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1])) return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1])) return false; // must have floor in opposite direction\n\n    return true;\n}\n\nexport type WidthBase = number | string | number[] | { [key: number]: number };\n\nexport function pickWidth(width: WidthBase, rng?: GWU.rng.Random): number {\n    return GWU.clamp(_pickWidth(width, rng), 1, 3);\n}\n\nfunction _pickWidth(width: WidthBase, rng?: GWU.rng.Random): number {\n    if (!width) return 1;\n    if (typeof width === 'number') return width;\n\n    rng = rng ?? GWU.rng.random;\n\n    if (Array.isArray(width)) {\n        width = rng.weighted(width) + 1;\n    } else if (typeof width === 'string') {\n        width = GWU.range.make(width).value(rng);\n    } else if (width instanceof GWU.range.Range) {\n        width = width.value(rng);\n    } else {\n        const weights = width as GWU.types.WeightedObject;\n        width = Number.parseInt(rng.weighted(weights) as string);\n    }\n    return width;\n}\n\nexport function pickLength(\n    dir: number,\n    lengths: [GWU.range.Range, GWU.range.Range],\n    rng?: GWU.rng.Random\n): number {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value(rng);\n    } else {\n        return lengths[0].value(rng);\n    }\n}\n\nexport function pickHallDirection(\n    site: SITE.Site,\n    doors: GWU.xy.Loc[],\n    lengths: [GWU.range.Range, GWU.range.Range]\n): number {\n    // Pick a direction.\n    let dir: number = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = site.rng.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\n\nexport function pickHallExits(\n    site: SITE.Site,\n    x: number,\n    y: number,\n    dir: number,\n    obliqueChance: number\n) {\n    let newX: number, newY: number;\n    const allowObliqueHallwayExit = site.rng.chance(obliqueChance);\n    const hallDoors: GWU.xy.Loc[] = [\n        // [-1, -1],\n        // [-1, -1],\n        // [-1, -1],\n        // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n\n        if (\n            (dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)\n        ) {\n            // do nothing\n        } else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\n\n// export function digWide(\n//     opts: TYPES.HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: TYPES.Room\n// ): TYPES.Hall | TYPES.HallConfig | null {\n//     opts = opts || {};\n//     if (!opts.width) {\n//         opts.width = 2;\n//     }\n//     if (!grid) {\n//         return opts;\n//     }\n\n//     const dir = pickHallDirection(grid, room, opts);\n//     if (dir === GWU.xy.NO_DIRECTION) return null;\n\n//     const length = pickLength(dir, opts.lengths);\n//     const width = pickWidth(opts) || 2;\n\n//     const door = room.doors[dir];\n//     const tile = opts.tile || SITE.FLOOR;\n//     const hallDoors: GWU.xy.Loc[] = [];\n\n//     let x0: number, y0: number;\n//     let hall;\n//     if (dir === GWU.utils.UP) {\n//         x0 = GWU.clamp(door[0], room.x, room.x + room.width - width);\n//         y0 = door[1] - length + 1;\n\n//         for (let x = x0; x < x0 + width; ++x) {\n//             for (let y = y0; y < y0 + length; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0, y0 - 1];\n//         hall = new TYPES.Hall([x0, door[1]], dir, length, 2);\n//     } else if (dir === GWU.utils.DOWN) {\n//         x0 = GWU.clamp(door[0], room.x, room.x + room.width - width);\n//         y0 = door[1] + length - 1;\n\n//         for (let x = x0; x < x0 + width; ++x) {\n//             for (let y = y0; y > y0 - length; --y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0, y0 + 1];\n//         hall = new TYPES.Hall([x0, door[1]], dir, length, 2);\n//     } else if (dir === GWU.utils.LEFT) {\n//         x0 = door[0] - length + 1;\n//         y0 = GWU.clamp(door[1], room.y, room.y + room.height - width);\n\n//         for (let x = x0; x < x0 + length; ++x) {\n//             for (let y = y0; y < y0 + width; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0 - 1, y0];\n//         hall = new TYPES.Hall([door[0], y0], dir, length, 2);\n//     } else {\n//         //if (dir === GWU.utils.RIGHT) {\n//         x0 = door[0] + length - 1;\n//         y0 = GWU.clamp(door[1], room.y, room.y + room.height - width);\n\n//         for (let x = x0; x > x0 - length; --x) {\n//             for (let y = y0; y < y0 + width; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0 + 1, y0];\n//         hall = new TYPES.Hall([door[0], y0], dir, length, width);\n//     }\n\n//     hall.doors = hallDoors;\n//     hall.width = width;\n//     return hall;\n// }\n\n// export function dig(\n//     opts: TYPES.HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: TYPES.Room\n// ): TYPES.Hall | TYPES.HallConfig | null {\n//     opts = opts || {};\n//     opts.width = 1;\n//     if (!grid) {\n//         return opts;\n//     }\n\n//     const dir = pickHallDirection(grid, room, opts);\n//     if (dir === GWU.xy.NO_DIRECTION) return null;\n\n//     const length = pickLength(dir, opts.length);\n\n//     const door = room.doors[dir];\n//     const DIR = DIRS[dir];\n\n//     let x = door[0];\n//     let y = door[1];\n\n//     const tile = opts.tile || SITE.FLOOR;\n//     for (let i = 0; i < length; i++) {\n//         grid[x][y] = tile;\n//         x += DIR[0];\n//         y += DIR[1];\n//     }\n\n//     x -= DIR[0];\n//     y -= DIR[1];\n\n//     const hall = new TYPES.Hall(door, dir, length);\n//     hall.doors = pickHallExits(grid, x, y, dir, opts);\n//     return hall;\n// }\n\nexport interface HallOptions {\n    width: number | string;\n    length: number | string | number[] | string[];\n    tile: TYPES.TileId;\n    obliqueChance: number;\n    chance: number;\n}\n\nexport interface HallConfig {\n    width: WidthBase;\n    length: [GWU.range.Range, GWU.range.Range];\n    tile: string;\n    obliqueChance: number;\n    chance: number;\n}\n\nexport class HallDigger {\n    public config: HallConfig = {\n        width: 1,\n        length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n        tile: 'FLOOR',\n        obliqueChance: 15,\n        chance: 100,\n    };\n\n    constructor(options: Partial<HallOptions> = {}) {\n        this._setOptions(options);\n    }\n\n    _setOptions(options: Partial<HallOptions> = {}) {\n        if (options.width) {\n            this.config.width = options.width;\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n\n    create(site: SITE.Site, doors: GWU.xy.Loc[] = []): TYPES.Hall | null {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n\n        if (!site.rng.chance(this.config.chance)) return null;\n\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION) return null;\n        if (!doors[dir]) return null;\n\n        const width = pickWidth(this.config.width, site.rng);\n        const length = pickLength(dir, this.config.length, site.rng);\n        const doorLoc = doors[dir];\n\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        } else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n\n    _digLine(\n        site: SITE.Site,\n        door: GWU.xy.Loc,\n        dir: GWU.xy.Loc,\n        length: number\n    ) {\n        let x = door[0];\n        let y = door[1];\n\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n\n        x -= dir[0];\n        y -= dir[1];\n\n        return [x, y];\n    }\n\n    dig(site: SITE.Site, dir: number, door: GWU.xy.Loc, length: number) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = TYPES.makeHall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n\n    digWide(\n        site: SITE.Site,\n        dir: number,\n        door: GWU.xy.Loc,\n        length: number,\n        width: number\n    ) {\n        const DIR = GWU.xy.DIRS[dir];\n\n        const lower: GWU.xy.Loc = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher: GWU.xy.Loc = [door[0] + DIR[1], door[1] + DIR[0]];\n\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n\n        const hall = TYPES.makeHall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        // hall.width = width;\n        return hall;\n    }\n}\n\nexport function dig(\n    config: Partial<HallOptions>,\n    site: SITE.Site,\n    doors: GWU.xy.Loc[]\n) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\n\nexport var halls: Record<string, HallDigger> = {};\n\nexport function install(id: string, hall: HallDigger) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\n\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nimport * as TYPES from './types';\n\nexport interface LakeOpts {\n    height: number;\n    width: number;\n    minSize: number;\n    tries: number;\n    count: number;\n    canDisrupt: boolean;\n    wreathTile: TYPES.TileId;\n    wreathChance: number;\n    wreathSize: number;\n    tile: TYPES.TileId;\n}\n\nexport class Lakes {\n    options: LakeOpts = {\n        height: 15,\n        width: 30,\n        minSize: 5,\n        tries: 20,\n        count: 1,\n        canDisrupt: false,\n        wreathTile: 'SHALLOW',\n        wreathChance: 50,\n        wreathSize: 1,\n        tile: 'DEEP',\n    };\n\n    constructor(options: Partial<LakeOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site): number {\n        let i, j, k;\n        let x: number, y: number;\n        let lakeMaxHeight,\n            lakeMaxWidth,\n            lakeMinSize,\n            tries,\n            maxCount,\n            canDisrupt;\n        let count = 0;\n\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = site.rng.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || 'SHALLOW';\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || 'DEEP';\n\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n\n            const width =\n                Math.round(\n                    ((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                        maxCount\n                ) + lakeMinSize;\n            const height =\n                Math.round(\n                    ((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                        maxCount\n                ) + lakeMinSize;\n\n            const blob = new GWU.blob.Blob({\n                rng: site.rng,\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                // birthParameters: 'ffffftttt',\n                // survivalParameters: 'ffffttttt',\n            });\n\n            lakeGrid.fill(0);\n            const bounds = blob.carve(\n                lakeGrid.width,\n                lakeGrid.height,\n                (x, y) => (lakeGrid[x][y] = 1)\n            );\n\n            // console.log('LAKE ATTEMPT');\n            // lakeGrid.dump();\n\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = site.rng.range(\n                    1 - bounds.x,\n                    lakeGrid.width - bounds.width - bounds.x - 2\n                );\n                y = site.rng.range(\n                    1 - bounds.y,\n                    lakeGrid.height - bounds.height - bounds.y - 2\n                );\n\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n\n                                if (hasWreath) {\n                                    // if (site.hasTile(sx, sy, wreathTile)) {\n                                    //     site.clearTile(sx, sy, wreathTile);\n                                    // }\n                                    GWU.xy.forCircle(\n                                        sx,\n                                        sy,\n                                        wreathSize,\n                                        (i2, j2) => {\n                                            if (\n                                                site.isPassable(i2, j2) &&\n                                                !lakeGrid[i2 - x][j2 - y]\n                                                // SITE.isFloor(map, i, j) ||\n                                                // SITE.isDoor(map, i, j)\n                                            ) {\n                                                site.setTile(\n                                                    i2,\n                                                    j2,\n                                                    wreathTile\n                                                );\n                                            }\n                                        }\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n\n            if (success) {\n                ++count;\n                attempts = 0;\n            } else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n\n    isDisruptedBy(\n        site: SITE.Site,\n        lakeGrid: GWU.grid.NumGrid,\n        lakeToMapX = 0,\n        lakeToMapY = 0\n    ) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            } else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    } else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nexport interface BridgeOpts {\n    minDistance: number;\n    maxLength: number;\n}\n\nexport class Bridges {\n    public options: BridgeOpts = {\n        minDistance: 20,\n        maxLength: 5,\n    };\n\n    constructor(options: Partial<BridgeOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site): number {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n\n        const pathGrid = new GWU.path.DijkstraMap();\n        // const costGrid = GWU.grid.alloc(site.width, site.height);\n\n        const dirCoords: [number, number][] = [\n            [1, 0],\n            [0, 1],\n        ];\n\n        const seq = site.rng.sequence(site.width * site.height);\n\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n\n            if (\n                // map.hasXY(x, y) &&\n                // map.get(x, y) &&\n                site.isPassable(x, y) &&\n                (site.isBridge(x, y) || !site.isAnyLiquid(x, y))\n            ) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n\n                    // if (!map.hasXY(newX, newY)) continue;\n\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (\n                        site.isAnyLiquid(newX, newY) &&\n                        !site.isBridge(newX, newY)\n                    ) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (\n                                site.isBridge(newX, newY) ||\n                                !site.isAnyLiquid(newX, newY)\n                            ) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (\n                        // map.get(newX, newY) &&\n                        site.isPassable(newX, newY) &&\n                        j < maxLength\n                    ) {\n                        SITE.computeDistanceMap(\n                            site,\n                            pathGrid,\n                            newX,\n                            newY,\n                            999\n                        );\n\n                        if (\n                            pathGrid.getDistance(x, y) > minDistance &&\n                            pathGrid.getDistance(x, y) < GWU.path.BLOCKED\n                        ) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n\n                            while (x !== newX || y !== newY) {\n                                if (\n                                    this.isBridgeCandidate(\n                                        site,\n                                        x,\n                                        y,\n                                        bridgeDir\n                                    )\n                                ) {\n                                    site.setTile(x, y, 'BRIDGE'); // map[x][y] = SITE.BRIDGE;\n                                    // costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                } else {\n                                    site.setTile(x, y, 'FLOOR'); // map[x][y] = SITE.FLOOR;\n                                    // costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // GWU.grid.free(costGrid);\n        return count;\n    }\n\n    isBridgeCandidate(\n        site: SITE.Site,\n        x: number,\n        y: number,\n        _bridgeDir: [number, number]\n    ) {\n        if (site.isBridge(x, y)) return true;\n        if (!site.isAnyLiquid(x, y)) return false;\n        // if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0])) return false;\n        // if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0])) return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as TYPES from './types';\nimport * as SITE from './site';\n\nexport interface StairOpts {\n    up: boolean | GWU.xy.Loc;\n    down: boolean | GWU.xy.Loc;\n    minDistance: number;\n\n    start: boolean | string | GWU.xy.Loc;\n\n    upTile: TYPES.TileId;\n    downTile: TYPES.TileId;\n    wall: TYPES.TileId;\n}\n\nexport class Stairs {\n    public options: StairOpts = {\n        up: true,\n        down: true,\n        minDistance: 10,\n        start: false,\n        upTile: 'UP_STAIRS',\n        downTile: 'DOWN_STAIRS',\n        wall: 'IMPREGNABLE',\n    };\n\n    constructor(options: Partial<StairOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance =\n            this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n\n        const locations: Record<string, GWU.xy.Loc> = {};\n        let upLoc: GWU.xy.Loc | null = null;\n        let downLoc: GWU.xy.Loc | null = null;\n\n        const isValidLoc = this.isStairXY.bind(this, site);\n\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    isValidLoc\n                );\n            } else {\n                start = site.rng.matchingLocNear(\n                    GWU.xy.x(start),\n                    GWU.xy.y(start),\n                    isValidLoc\n                );\n            }\n            locations.start = start;\n        }\n\n        if (\n            Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)\n        ) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(\n                GWU.xy.x(up),\n                GWU.xy.y(up),\n                isValidLoc\n            );\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(\n                GWU.xy.x(down),\n                GWU.xy.y(down),\n                isValidLoc\n            );\n        } else if (\n            Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)\n        ) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(\n                GWU.xy.x(up),\n                GWU.xy.y(up),\n                isValidLoc\n            );\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            // @ts-ignore\n                            GWU.xy.distanceBetween(x, y, upLoc![0], upLoc![1]) <\n                            minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (\n            Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)\n        ) {\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(\n                GWU.xy.x(down),\n                GWU.xy.y(down),\n                isValidLoc\n            );\n            if (needUp) {\n                upLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            GWU.xy.distanceBetween(\n                                x,\n                                y,\n                                downLoc![0],\n                                downLoc![1]\n                            ) < minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (needUp) {\n            upLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            // @ts-ignore\n                            GWU.xy.distanceBetween(x, y, upLoc![0], upLoc![1]) <\n                            minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (needDown) {\n            downLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n        }\n\n        if (upLoc) {\n            locations.up = upLoc.slice() as GWU.xy.Loc;\n            this.setupStairs(\n                site,\n                upLoc[0],\n                upLoc[1],\n                this.options.upTile,\n                this.options.wall\n            );\n            if (this.options.start === 'up') {\n                locations.start = locations.up;\n            } else {\n                locations.end = locations.up;\n            }\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice() as GWU.xy.Loc;\n            this.setupStairs(\n                site,\n                downLoc[0],\n                downLoc[1],\n                this.options.downTile,\n                this.options.wall\n            );\n            if (this.options.start === 'down') {\n                locations.start = locations.down;\n            } else {\n                locations.end = locations.down;\n            }\n        }\n\n        return upLoc || downLoc ? locations : null;\n    }\n\n    hasXY(site: SITE.Site, x: number, y: number) {\n        if (x < 0 || y < 0) return false;\n        if (x >= site.width || y >= site.height) return false;\n        return true;\n    }\n\n    isStairXY(site: SITE.Site, x: number, y: number) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y)) return false;\n\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1])) return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1])) return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            } else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n\n    setupStairs(\n        site: SITE.Site,\n        x: number,\n        y: number,\n        tile: TYPES.TileId,\n        wallTile: TYPES.TileId\n    ) {\n        const indexes = site.rng.sequence(4);\n\n        let dir: GWU.xy.Loc | null = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1])) break;\n            }\n\n            dir = null;\n        }\n\n        if (!dir) GWU.ERROR('No stair direction found!');\n\n        site.setTile(x, y, tile);\n\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n            // @ts-ignore\n            (d) => d[0] == dir[0] && d[1] == dir[1]\n        );\n\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex) continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wallTile);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nexport interface LoopOptions {\n    minDistance: number;\n    maxLength: number;\n    doorChance: number;\n}\n\nexport interface LoopConfig {\n    minDistance: number;\n    maxLength: number;\n    doorChance: number;\n}\n\nexport class LoopDigger {\n    public options: LoopConfig = {\n        minDistance: 100,\n        maxLength: 1,\n        doorChance: 50,\n    };\n\n    constructor(options: Partial<LoopOptions> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n\n        const minDistance = Math.min(\n            this.options.minDistance,\n            Math.floor(Math.max(site.width, site.height) / 2)\n        );\n        const maxLength = this.options.maxLength;\n\n        const pathGrid = new GWU.path.DijkstraMap();\n        // const costGrid = GWU.grid.alloc(site.width, site.height);\n\n        const dirCoords: [number, number][] = [\n            [1, 0],\n            [0, 1],\n        ];\n\n        // SITE.fillCostGrid(site, costGrid);\n\n        function isValidTunnelStart(\n            x: number,\n            y: number,\n            dir: [number, number]\n        ) {\n            if (!site.hasXY(x, y)) return false;\n            if (!site.hasXY(x + dir[1], y + dir[0])) return false;\n            if (!site.hasXY(x - dir[1], y - dir[0])) return false;\n            if (site.isSet(x, y)) return false;\n            if (site.isSet(x + dir[1], y + dir[0])) return false;\n            if (site.isSet(x - dir[1], y - dir[0])) return false;\n            return true;\n        }\n\n        function isValidTunnelEnd(x: number, y: number, dir: [number, number]) {\n            if (!site.hasXY(x, y)) return false;\n            if (!site.hasXY(x + dir[1], y + dir[0])) return false;\n            if (!site.hasXY(x - dir[1], y - dir[0])) return false;\n            if (site.isSet(x, y)) return true;\n            if (site.isSet(x + dir[1], y + dir[0])) return true;\n            if (site.isSet(x - dir[1], y - dir[0])) return true;\n            return false;\n        }\n\n        let count = 0;\n        const seq = site.rng.sequence(site.width * site.height);\n\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir)) continue;\n                    j = maxLength;\n\n                    // check up/left\n                    if (\n                        site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])\n                    ) {\n                        // just can't build directly into a door\n                        if (\n                            !site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])\n                        ) {\n                            continue;\n                        }\n                    } else if (\n                        site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])\n                    ) {\n                        if (\n                            !site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])\n                        ) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v) as [number, number];\n                    } else {\n                        continue; // not valid start for tunnel\n                    }\n\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n\n                    if (j < maxLength) {\n                        SITE.computeDistanceMap(\n                            site,\n                            pathGrid,\n                            startX,\n                            startY,\n                            888\n                        );\n\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (\n                            pathGrid.getDistance(endX, endY) > minDistance &&\n                            pathGrid.getDistance(endX, endY) < GWU.path.BLOCKED\n                        ) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, 'FLOOR');\n                                    // costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = site.rng.chance(\n                                this.options.doorChance\n                            )\n                                ? 'DOOR'\n                                : 'FLOOR';\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // pathGrid.free();\n        // GWU.grid.free(costGrid);\n\n        return count;\n    }\n}\n\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site: SITE.Site, opts: Partial<LoopOptions> = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as TYPES from './types';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\n\nimport * as LOGGER from './site/log/logger';\nimport { ConsoleLogger } from './site/log/consoleLogger';\n\nexport interface DoorOpts {\n    chance: number;\n    tile: string;\n}\n\nexport interface RoomOptions {\n    count: number;\n    fails: number;\n    first: string | string[] | Record<string, number> | ROOM.RoomDigger;\n    digger: string | string[] | Record<string, number> | ROOM.RoomDigger;\n}\n\nexport interface DiggerOptions {\n    halls?: Partial<HALL.HallOptions> | boolean;\n    loops?: Partial<LOOP.LoopOptions> | boolean;\n    lakes?: Partial<LAKE.LakeOpts> | boolean | number;\n    bridges?: Partial<BRIDGE.BridgeOpts> | boolean | number;\n    stairs?: Partial<STAIRS.StairOpts> | boolean;\n    doors?: Partial<DoorOpts> | boolean;\n\n    rooms?: number | Partial<RoomOptions>;\n\n    startLoc?: GWU.xy.Loc;\n    endLoc?: GWU.xy.Loc;\n    goesUp?: boolean;\n\n    seed?: number;\n    boundary?: boolean;\n\n    log?: LOGGER.Logger | boolean;\n}\n\nexport class Digger {\n    site!: SITE.Site;\n\n    seed = 0;\n    rooms: Partial<RoomOptions> = { fails: 20 };\n    doors: Partial<DoorOpts> = { chance: 15 };\n    halls: Partial<HALL.HallOptions> = { chance: 15 };\n    loops: Partial<LOOP.LoopOptions> | null = {};\n    lakes: Partial<LAKE.LakeOpts> | null = {};\n    bridges: Partial<BRIDGE.BridgeOpts> | null = {};\n    stairs: Partial<STAIRS.StairOpts> | null = {};\n    boundary: boolean = true;\n\n    // startLoc: GWU.xy.Loc = [-1, -1];\n    // endLoc: GWU.xy.Loc = [-1, -1];\n\n    locations: Record<string, GWU.xy.Loc> = {};\n    _locs: Record<string, GWU.xy.Loc> = {};\n    goesUp = false;\n\n    seq!: number[];\n    log: LOGGER.Logger;\n\n    constructor(options: DiggerOptions = {}) {\n        this.seed = options.seed || 0;\n\n        if (typeof options.rooms === 'number') {\n            options.rooms = { count: options.rooms };\n        }\n        GWU.object.setOptions(this.rooms, options.rooms);\n\n        this.goesUp = options.goesUp || false;\n        if (options.startLoc) {\n            this._locs.start = options.startLoc;\n        }\n        if (options.endLoc) {\n            this._locs.end = options.endLoc;\n        }\n\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        } else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        } else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        } else {\n            if (options.loops === true) options.loops = {};\n            else if (typeof options.loops === 'number') {\n                options.loops = { maxLength: options.loops };\n            }\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                options.loops.doorChance ?? options.doors?.chance;\n            // @ts-ignore\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        } else {\n            if (options.lakes === true) options.lakes = {};\n            else if (typeof options.lakes === 'number') {\n                options.lakes = { count: options.lakes };\n            }\n            options.lakes = options.lakes || {};\n            // @ts-ignore\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        } else {\n            if (typeof options.bridges === 'number') {\n                options.bridges = { maxLength: options.bridges };\n            }\n            if (options.bridges === true) options.bridges = {};\n            // @ts-ignore\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        } else {\n            if (typeof options.stairs !== 'object') options.stairs = {};\n            // @ts-ignore\n            GWU.object.setOptions(this.stairs, options.stairs);\n            this.stairs!.start = this.goesUp ? 'down' : 'up';\n        }\n\n        // this.startLoc = options.startLoc || [-1, -1];\n        // this.endLoc = options.endLoc || [-1, -1];\n\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        } else if (options.log) {\n            this.log = options.log;\n        } else {\n            this.log = new LOGGER.NullLogger();\n        }\n    }\n\n    _makeRoomSite(width: number, height: number) {\n        const site = new SITE.Site(width, height);\n        site.rng = this.site.rng;\n        return site;\n    }\n\n    _createSite(width: number, height: number): void {\n        this.site = new SITE.Site(width, height);\n    }\n\n    create(width: number, height: number, cb: TYPES.DigFn): boolean;\n    create(map: GWU.grid.NumGrid): boolean;\n    create(map: SITE.Site): boolean;\n    create(...args: any[]): boolean {\n        let needsFree = true;\n        if (args.length == 1) {\n            const dest = args[0];\n            if (dest instanceof SITE.Site) {\n                this.site = dest;\n                needsFree = false;\n            } else {\n                this._createSite(dest.width, dest.height);\n            }\n        } else {\n            this._createSite(args[0], args[1]);\n        }\n\n        const result = this._create(this.site);\n\n        const cb = args[2] || null;\n        if (cb) {\n            GWU.xy.forRect(this.site.width, this.site.height, (x, y) => {\n                const t = this.site._tiles[x][y];\n                if (t) cb(x, y, t);\n            });\n        } else if (args.length == 1 && needsFree) {\n            const dest = args[0];\n            dest.copy(this.site._tiles);\n        }\n\n        needsFree && this.site.free();\n        return result;\n    }\n\n    _create(site: SITE.Site): boolean {\n        this.start(site);\n\n        this.addRooms(site);\n\n        if (this.loops) {\n            this.addLoops(site, this.loops);\n            this.log.onLoopsAdded(site);\n        }\n        if (this.lakes) {\n            this.addLakes(site, this.lakes);\n            this.log.onLakesAdded(site);\n        }\n        if (this.bridges) {\n            this.addBridges(site, this.bridges);\n            this.log.onBridgesAdded(site);\n        }\n        if (this.stairs) {\n            this.addStairs(site, this.stairs);\n            this.log.onStairsAdded(site);\n        }\n\n        this.finish(site);\n\n        return true;\n    }\n\n    start(site: SITE.Site) {\n        this.site = site;\n\n        const seed = this.seed || GWU.rng.random.number();\n        site.setSeed(seed);\n\n        site.clear();\n        this.seq = site.rng.sequence(site.width * site.height);\n\n        this.locations = Object.assign({}, this._locs);\n\n        if (!this.locations.start || this.locations.start[0] < 0) {\n            const stair = this.goesUp ? 'down' : 'up';\n            if (this.stairs && Array.isArray(this.stairs[stair])) {\n                this.locations.start = this.stairs[stair] as GWU.xy.Loc;\n            } else {\n                this.locations.start = [\n                    Math.floor(site.width / 2),\n                    site.height - 2,\n                ];\n                if (this.stairs && this.stairs[stair]) {\n                    this.stairs[stair] = this.locations.start;\n                }\n            }\n        }\n\n        if (!this.locations.end || this.locations.end[0] < 0) {\n            const stair = this.goesUp ? 'up' : 'down';\n            if (this.stairs && Array.isArray(this.stairs[stair])) {\n                this.locations.end = this.stairs[stair] as GWU.xy.Loc;\n            }\n        }\n\n        // if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n        //     this.startLoc[0] = Math.floor(site.width / 2);\n        //     this.startLoc[1] = site.height - 2;\n        // }\n    }\n\n    getDigger(\n        id: string | string[] | Record<string, number> | ROOM.RoomDigger\n    ) {\n        if (!id) throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger) return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n\n    addRooms(site: SITE.Site) {\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site)) break;\n        }\n        if (!tries) throw new Error('Failed to place first room!');\n        site.updateDoorDirs();\n\n        this.log.onDigFirstRoom(site);\n\n        // site.dump();\n        // console.log('- rng.number', site.rng.number());\n\n        let fails = 0;\n        let count = 1;\n        const maxFails = this.rooms.fails || 20;\n        while (fails < maxFails) {\n            if (this.addRoom(site)) {\n                fails = 0;\n                site.updateDoorDirs();\n                site.rng.shuffle(this.seq);\n\n                // site.dump();\n                // console.log('- rng.number', site.rng.number());\n\n                if (this.rooms.count && ++count >= this.rooms.count) {\n                    break; // we are done\n                }\n            } else {\n                ++fails;\n            }\n        }\n    }\n\n    addFirstRoom(site: SITE.Site): TYPES.Room | null {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n\n        let digger: ROOM.RoomDigger = this.getDigger(\n            this.rooms.first || this.rooms.digger || 'DEFAULT'\n        );\n        let room: TYPES.Room | null = digger.create(roomSite);\n\n        if (\n            room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.locations.start)\n        ) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n\n    addRoom(site: SITE.Site): TYPES.Room | null {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger: ROOM.RoomDigger = this.getDigger(\n            this.rooms.digger || 'DEFAULT'\n        );\n\n        let room: TYPES.Room | null = digger.create(roomSite);\n\n        // attach hall?\n        if (room && this.halls.chance) {\n            let hall: TYPES.Hall | null = HALL.dig(\n                this.halls,\n                roomSite,\n                room.doors\n            );\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n\n        // console.log('potential room');\n        // roomSite.dump();\n\n        if (room) {\n            this.log.onRoomCandidate(room, roomSite);\n\n            if (this._attachRoom(site, roomSite, room)) {\n                this.log.onRoomSuccess(site, room);\n            } else {\n                this.log.onRoomFailed(site, room, roomSite, 'Did not fit.');\n                room = null;\n            }\n        }\n\n        roomSite.free();\n        return room;\n    }\n\n    _attachRoom(\n        site: SITE.Site,\n        roomSite: SITE.Site,\n        room: TYPES.Room\n    ): boolean {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        let i = 0;\n        const len = this.seq.length;\n\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (i = 0; i < len; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n\n            const dir = site.getDoorDir(x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door) continue;\n\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n\n                if (\n                    door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, room, offsetX, offsetY)\n                ) {\n                    // TYPES.Room fits here.\n                    site.copyTiles(roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _attachRoomAtLoc(\n        site: SITE.Site,\n        roomSite: SITE.Site,\n        room: TYPES.Room,\n        attachLoc: GWU.xy.Loc\n    ): boolean {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = site.rng.sequence(4);\n\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1) continue;\n\n            const offX = x - door[0];\n            const offY = y - door[1];\n\n            if (this._roomFitsAt(site, roomSite, room, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n\n                // TYPES.Room fits here.\n                site.copyTiles(roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _roomFitsAt(\n        map: SITE.Site,\n        roomGrid: SITE.Site,\n        room: TYPES.Room,\n        roomToSiteX: number,\n        roomToSiteY: number\n    ) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n\n        const hall = room.hall || room;\n        const left = Math.min(room.left, hall.left);\n        const top = Math.min(room.top, hall.top);\n        const right = Math.max(room.right, hall.right);\n        const bottom = Math.max(room.bottom, hall.bottom);\n\n        for (xRoom = left; xRoom <= right; xRoom++) {\n            for (yRoom = top; yRoom <= bottom; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    if (\n                        !map.hasXY(xSite, ySite) ||\n                        map.isBoundaryXY(xSite, ySite)\n                    ) {\n                        return false;\n                    }\n\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n\n    _attachDoor(\n        site: SITE.Site,\n        room: TYPES.Room,\n        x: number,\n        y: number,\n        dir: number\n    ) {\n        const opts = this.doors;\n        let isDoor = false;\n\n        if (opts.chance && site.rng.chance(opts.chance)) {\n            isDoor = true;\n        }\n\n        const tile = isDoor ? opts.tile || 'DOOR' : 'FLOOR';\n        site.setTile(x, y, tile); // Door site.\n\n        // most cases...\n        if (!room.hall || room.hall.width == 1 || room.hall.height == 1) {\n            return;\n        }\n\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n\n                if (site.isNothing(x - k, y)) {\n                    if (site.isSet(x - k, y - 1) && site.isSet(x - k, y + 1)) {\n                        site.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x + k, y)) {\n                    if (site.isSet(x + k, y - 1) && site.isSet(x + k, y + 1)) {\n                        site.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        } else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n\n                if (site.isNothing(x, y - k)) {\n                    if (site.isSet(x - 1, y - k) && site.isSet(x + 1, y - k)) {\n                        site.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x, y + k)) {\n                    if (site.isSet(x - 1, y + k) && site.isSet(x + 1, y + k)) {\n                        site.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n\n    addLoops(site: SITE.Site, opts: Partial<LOOP.LoopOptions>) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n\n    addLakes(site: SITE.Site, opts: Partial<LAKE.LakeOpts>) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n\n    addBridges(site: SITE.Site, opts: Partial<BRIDGE.BridgeOpts>) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n\n    addStairs(site: SITE.Site, opts: Partial<STAIRS.StairOpts>) {\n        const digger = new STAIRS.Stairs(opts);\n        const locs = digger.create(site);\n        if (locs) Object.assign(this.locations, locs);\n        return !!locs;\n    }\n\n    finish(site: SITE.Site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n\n    _removeDiagonalOpenings(site: SITE.Site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (\n                            !site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)\n                        ) {\n                            if (site.rng.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            } else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, 'FLOOR'); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n\n    _finishDoors(site: SITE.Site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y)) return;\n\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                // if (\n                //     // TODO - isPassable\n                //     (site.isPassable(x + 1, y) || site.isPassable(x - 1, y)) &&\n                //     (site.isPassable(x, y + 1) || site.isPassable(x, y - 1))\n                // ) {\n                //     // If there's passable terrain to the left or right, and there's passable terrain\n                //     // above or below, then the door is orphaned and must be removed.\n                //     site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                // } else\n                if (\n                    (site.isWall(x + 1, y) ? 1 : 0) +\n                        (site.isWall(x - 1, y) ? 1 : 0) +\n                        (site.isWall(x, y + 1) ? 1 : 0) +\n                        (site.isWall(x, y - 1) ? 1 : 0) !=\n                    2\n                ) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, 'FLOOR', { superpriority: true }); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n\n    _finishWalls(site: SITE.Site) {\n        const boundaryTile = this.boundary ? 'IMPREGNABLE' : 'WALL';\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                } else {\n                    site.setTile(x, y, 'WALL');\n                }\n            }\n        });\n    }\n}\n\n// export function digMap(map: GWM.map.Map, options: Partial<DiggerOptions> = {}) {\n//     const digger = new Digger(options);\n//     return digger.create(map);\n// }\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nimport { Blueprint } from './blueprint';\n\nexport class BuildData {\n    site: SITE.Site;\n    blueprint: Blueprint;\n    interior: GWU.grid.NumGrid;\n    occupied: GWU.grid.NumGrid;\n    candidates: GWU.grid.NumGrid;\n    viewMap: GWU.grid.NumGrid;\n    distanceMap: GWU.path.DijkstraMap;\n    originX: number = -1;\n    originY: number = -1;\n    distance25: number = -1;\n    distance75: number = -1;\n    machineNumber: number;\n    // depth = 0;\n    // seed = 0;\n\n    constructor(site: SITE.Site, blueprint: Blueprint, machine = 0) {\n        this.site = site;\n        this.blueprint = blueprint;\n        this.interior = GWU.grid.alloc(site.width, site.height);\n        this.occupied = GWU.grid.alloc(site.width, site.height);\n        this.viewMap = GWU.grid.alloc(site.width, site.height);\n        this.distanceMap = new GWU.path.DijkstraMap(site.width, site.height);\n        this.candidates = GWU.grid.alloc(site.width, site.height);\n        this.machineNumber = machine;\n    }\n\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.candidates);\n    }\n\n    get rng(): GWU.rng.Random {\n        return this.site.rng;\n    }\n\n    reset(originX: number, originY: number) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.reset(this.site.width, this.site.height);\n        // this.candidates.fill(0);\n\n        this.originX = originX;\n        this.originY = originY;\n        this.distance25 = 0;\n        this.distance75 = 0;\n\n        // if (this.seed) {\n        //     this.site.setSeed(this.seed);\n        // }\n    }\n\n    calcDistances(maxDistance: number) {\n        SITE.computeDistanceMap(\n            this.site,\n            this.distanceMap,\n            this.originX,\n            this.originY,\n            maxDistance\n        );\n\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n\n        this.interior.forEach((v, x, y) => {\n            if (!v) return;\n            const dist = Math.round(this.distanceMap.getDistance(x, y));\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            } else {\n                distance25 -= distances[i];\n            }\n        }\n\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            } else {\n                distance75 -= distances[i];\n            }\n        }\n\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nimport { BuildData } from './data';\n\nconst Fl = GWU.flag.fl;\n\nexport enum Flags {\n    BP_ROOM = Fl(0), // spawns in a dead-end room that is dominated by a chokepoint of the given size (as opposed to a random place of the given size)\n    BP_VESTIBULE = Fl(1), // spawns in a doorway (location must be given) and expands outward, to guard the room\n    BP_REWARD = Fl(2), // metered reward machines\n    BP_ADOPT_ITEM = Fl(3), // the machine must adopt an item (e.g. a door key)\n\n    BP_PURGE_PATHING_BLOCKERS = Fl(4), // clean out traps and other T_PATHING_BLOCKERs\n    BP_PURGE_INTERIOR = Fl(5), // clean out all of the terrain in the interior before generating the machine\n    BP_PURGE_LIQUIDS = Fl(6), // clean out all of the liquids in the interior before generating the machine\n\n    BP_SURROUND_WITH_WALLS = Fl(7), // fill in any impassable gaps in the perimeter (e.g. water, lava, brimstone, traps) with wall\n    BP_IMPREGNABLE = Fl(8), // impassable perimeter and interior tiles are locked; tunneling bolts will bounce off harmlessly\n\n    BP_OPEN_INTERIOR = Fl(9), // clear out walls in the interior, widen the interior until convex or bumps into surrounding areas\n    BP_MAXIMIZE_INTERIOR = Fl(10), // same as BP_OPEN_INTERIOR but expands the room as far as it can go, potentially surrounding the whole level.\n    BP_REDESIGN_INTERIOR = Fl(11), // nuke and pave -- delete all terrain in the interior and build entirely new rooms within the bounds\n\n    BP_TREAT_AS_BLOCKING = Fl(12), // abort the machine if, were it filled with wall tiles, it would disrupt the level connectivity\n    BP_REQUIRE_BLOCKING = Fl(13), // abort the machine unless, were it filled with wall tiles, it would disrupt the level connectivity\n\n    BP_NO_INTERIOR_FLAG = Fl(14), // don't flag the area as being part of a machine\n    BP_NOT_IN_HALLWAY = Fl(15), // Do not allow building in hallways (for !ROOM, !VESTIBULE)\n}\n\nexport interface BlueprintOptions {\n    id: string;\n    tags: string | string[];\n    frequency: GWU.frequency.FrequencyConfig;\n    size: string | number[] | number;\n    flags: GWU.flag.FlagBase;\n    steps: Partial<STEP.StepOptions>[];\n}\n\nexport class Blueprint {\n    public tags: string[] = [];\n    public frequency: GWU.frequency.FrequencyFn;\n    public size: GWU.range.Range;\n    public flags: number = 0;\n    public steps: STEP.BuildStep[] = [];\n    public id: string = 'n/a';\n\n    constructor(opts: Partial<BlueprintOptions> = {}) {\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo <= 0) this.size.lo = 1;\n            if (this.size.hi < this.size.lo) this.size.hi = this.size.lo;\n        } else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n            this.steps.forEach((s, i) => (s.index = i));\n        }\n        if (opts.id) {\n            this.id = opts.id;\n        }\n\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (\n                !this.steps.some((step) => {\n                    if (step.adoptItem) return true;\n                    if (step.hordeTakesItem && !step.item) return true;\n                    return false;\n                })\n            ) {\n                throw new Error(\n                    'Blueprint calls for BP_ADOPT_ITEM, but has no adoptive step.'\n                );\n            }\n        }\n    }\n\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n\n    get notInHallway() {\n        return !!(this.flags & Flags.BP_NOT_IN_HALLWAY);\n    }\n\n    qualifies(requiredFlags: number, tags?: string | string[]) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want))) return false;\n        }\n\n        if (\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    pickComponents(rng: GWU.rng.Random) {\n        const alternativeFlags = [\n            STEP.StepFlags.BS_ALTERNATIVE,\n            STEP.StepFlags.BS_ALTERNATIVE_2,\n        ];\n\n        const keepFeature = new Array(this.steps.length).fill(true);\n\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = rng.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        } else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n\n    fillInterior(builder: BuildData): number {\n        const interior = builder.interior;\n        const site = builder.site;\n\n        interior.fill(0);\n\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            return addTileToInteriorAndIterate(\n                builder,\n                builder.originX,\n                builder.originY\n            );\n        } else if (this.isVestiblue) {\n            return computeVestibuleInterior(builder, this);\n            // success\n        } else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n\n            let distanceMap = builder.distanceMap;\n\n            SITE.computeDistanceMap(\n                site,\n                distanceMap,\n                builder.originX,\n                builder.originY,\n                this.size.hi\n            );\n\n            const seq = site.rng.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = this.size.value(); // Keeps track of the goal size.\n\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (\n                    let n = 0;\n                    n < seq.length && qualifyingTileCount < goalSize;\n                    n++\n                ) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n\n                    if (Math.round(distanceMap.getDistance(i, j)) == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n\n                        const machine = site.getMachine(i, j);\n                        if (\n                            site.isOccupied(i, j) ||\n                            (machine > 0 && machine !== builder.machineNumber) // in different machine\n                        ) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            return 0;\n                        }\n                    }\n                }\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            return qualifyingTileCount;\n        }\n    }\n\n    //  function redesignInterior( interior, originX, originY, theDungeonProfileIndex) {\n    //     let i, j, n, newX, newY;\n    //     let dir;\n    //     let orphanList = [];\n    //     let orphanCount = 0;\n\n    //     let grid, pathingGrid, costGrid;\n    //     grid = allocGrid();\n\n    //     for (i=0; i<DCOLS; i++) {\n    //         for (j=0; j<DROWS; j++) {\n    //             if (interior[i][j]) {\n    //                 if (i == originX && j == originY) {\n    //                     grid[i][j] = 1; // All rooms must grow from this space.\n    //                 } else {\n    //                     grid[i][j] = 0; // Other interior squares are fair game for placing rooms.\n    //                 }\n    //             } else if (cellIsPassableOrDoor(i, j)) {\n    //                 grid[i][j] = 1; // Treat existing level as already built (though shielded by a film of -1s).\n    //                 for (dir = 0; dir < 4; dir++) {\n    //                     newX = i + nbDirs[dir][0];\n    //                     newY = j + nbDirs[dir][1];\n    //                     if (coordinatesAreInMap(newX, newY)\n    //                         && interior[newX][newY]\n    //                         && (newX != originX || newY != originY)) {\n\n    //                         orphanList[orphanCount] = [newX, newY];\n    //                         orphanCount++;\n    //                         grid[i][j] = -1; // Treat the orphaned door as off limits.\n\n    //                         break;\n    //                     }\n    //                 }\n    //             } else {\n    //                 grid[i][j] = -1; // Exterior spaces are off limits.\n    //             }\n    //         }\n    //     }\n    //     await attachRooms(grid, dungeonProfileCatalog[theDungeonProfileIndex], 40, 40);\n\n    //     // Connect to preexisting rooms that were orphaned (mostly preexisting machine rooms).\n    //     if (orphanCount > 0) {\n    //         pathingGrid = allocGrid();\n    //         costGrid = allocGrid();\n    //         for (n = 0; n < orphanCount; n++) {\n\n    //             if (D_INSPECT_MACHINES) {\n    //                 dumpLevelToScreen();\n    //                 copyGrid(pathingGrid, grid);\n    //                 findReplaceGrid(pathingGrid, -1, -1, 0);\n    //                 hiliteGrid(pathingGrid, /* Color. */green, 50);\n    //                 plotCharWithColor('X', mapToWindowX(orphanList[n][0]), mapToWindowY(orphanList[n][1]), /* Color. */black, /* Color. */orange);\n    //                 await temporaryMessage(\"Orphan detected:\", true);\n    //             }\n\n    //             for (i=0; i<DCOLS; i++) {\n    //                 for (j=0; j<DROWS; j++) {\n    //                     if (interior[i][j]) {\n    //                         if (grid[i][j] > 0) {\n    //                             pathingGrid[i][j] = 0;\n    //                             costGrid[i][j] = 1;\n    //                         } else {\n    //                             pathingGrid[i][j] = 30000;\n    //                             costGrid[i][j] = 1;\n    //                         }\n    //                     } else {\n    //                         pathingGrid[i][j] = 30000;\n    //                         costGrid[i][j] = PDS_OBSTRUCTION;\n    //                     }\n    //                 }\n    //             }\n    //             dijkstraScan(pathingGrid, costGrid, false);\n\n    //             i = orphanList[n][0];\n    //             j = orphanList[n][1];\n    //             while (pathingGrid[i][j] > 0) {\n    //                 for (dir = 0; dir < 4; dir++) {\n    //                     newX = i + nbDirs[dir][0];\n    //                     newY = j + nbDirs[dir][1];\n\n    //                     if (coordinatesAreInMap(newX, newY)\n    //                         && pathingGrid[newX][newY] < pathingGrid[i][j]) {\n\n    //                         grid[i][j] = 1;\n    //                         i = newX;\n    //                         j = newY;\n    //                         break;\n    //                     }\n    //                 }\n    //                 brogueAssert(dir < 4);\n    //                 if (D_INSPECT_MACHINES) {\n    //                     dumpLevelToScreen();\n    //                     displayGrid(pathingGrid);\n    //                     plotCharWithColor('X', mapToWindowX(i), mapToWindowY(j), /* Color. */black, /* Color. */orange);\n    //                     await temporaryMessage(\"Orphan connecting:\", true);\n    //                 }\n    //             }\n    //         }\n    //         freeGrid(pathingGrid);\n    //         freeGrid(costGrid);\n    //     }\n\n    //     await addLoops(grid, 10);\n    //     for(i=0; i<DCOLS; i++) {\n    //         for(j=0; j<DROWS; j++) {\n    //             if (interior[i][j]) {\n    //                 if (grid[i][j] >= 0) {\n    //                     pmap[i][j].layers[SURFACE] = pmap[i][j].layers[GAS] = NOTHING;\n    //                 }\n    //                 if (grid[i][j] == 0) {\n    //                     pmap[i][j].layers[DUNGEON] = GRANITE;\n    //                     interior[i][j] = false;\n    //                 }\n    //                 if (grid[i][j] >= 1) {\n    //                     pmap[i][j].layers[DUNGEON] = FLOOR;\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     freeGrid(grid);\n    // }\n}\n\nexport function markCandidates(buildData: BuildData): number {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const blueprint = buildData.blueprint;\n    candidates.fill(0);\n\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n\n        candidates.update((_v, x, y) => {\n            return site.isGateSite(x, y) &&\n                blueprint.size.contains(site.getChokeCount(x, y))\n                ? 1\n                : 0;\n        });\n    } else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        throw new Error(\n            'ERROR: Attempted to build a vestiblue without a location being provided.'\n        );\n    } else {\n        candidates.update((_v, x, y) => {\n            if (!site.isPassable(x, y)) return 0;\n            if (blueprint.notInHallway) {\n                const count = GWU.xy.arcCount(x, y, (i, j) =>\n                    site.isPassable(i, j)\n                );\n                return count <= 1 ? 1 : 0;\n            }\n            return 1;\n        });\n    }\n    return candidates.count((v) => v == 1);\n}\n\nexport function pickCandidateLoc(buildData: BuildData): GWU.xy.Loc | null {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n\n    const randSite = site.rng.matchingLoc(\n        site.width,\n        site.height,\n        (x, y) => candidates[x][y] == 1\n    );\n\n    if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n        // If no suitable sites, abort.\n        return null;\n    }\n    return randSite;\n}\n\n// // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n// export function computeInterior(\n//     builder: BuildData,\n//     blueprint: Blueprint\n// ): boolean {\n//     let failsafe = blueprint.isRoom ? 10 : 20;\n//     let tryAgain;\n//     const interior = builder.interior;\n//     const site = builder.site;\n\n//     do {\n//         tryAgain = false;\n//         if (--failsafe <= 0) {\n//             // console.log(\n//             //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n//             // );\n//             return false;\n//         }\n\n//         let count = fillInterior(builder, blueprint);\n\n//         // Now make sure the interior map satisfies the machine's qualifications.\n//         if (!count) {\n//             console.debug('- no interior');\n//             tryAgain = true;\n//         } else if (!blueprint.size.contains(count)) {\n//             console.debug('- too small');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.treatAsBlocking &&\n//             SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })\n//         ) {\n//             console.debug('- blocks');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.requireBlocking &&\n//             SITE.siteDisruptedSize(site, interior) < 100\n//         ) {\n//             console.debug('- does not block');\n//             tryAgain = true;\n//         }\n\n//         // Now loop if necessary.\n//     } while (tryAgain);\n\n//     // console.log(tryAgain, failsafe);\n\n//     return true;\n// }\n\nexport function computeVestibuleInterior(\n    builder: BuildData,\n    blueprint: Blueprint\n): number {\n    let success = true;\n\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n\n    if (blueprint.size.hi == 1) {\n        interior[builder.originX][builder.originY] = 1;\n        return 1;\n    }\n\n    // If this is a wall - it is really an error (maybe manually trying a build location?)\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    if (doorChokeCount > 10000) {\n        return 0;\n    }\n\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(\n        builder.originX,\n        builder.originY,\n        (x, y) => {\n            const count = site.getChokeCount(x, y);\n            if (count == doorChokeCount) return;\n            if (count > 10000) return;\n            if (count < 0) return;\n            vestibuleLoc[0] = x;\n            vestibuleLoc[1] = y;\n            vestibuleChokeCount = count;\n        },\n        true\n    );\n\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(\n            vestibuleLoc[0],\n            vestibuleLoc[1],\n            (_v, i, j) => {\n                if (site.isOccupied(i, j)) {\n                    success = false;\n                }\n                return site.getChokeCount(i, j) === vestibuleChokeCount;\n            },\n            1\n        );\n        if (success && blueprint.size.contains(count)) return roomSize;\n    }\n\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(site.rng); // Keeps track of the goal size.\n\n    const distMap = builder.distanceMap;\n    SITE.computeDistanceMap(\n        site,\n        distMap,\n        builder.originX,\n        builder.originY,\n        blueprint.size.hi\n    );\n\n    const cells = site.rng.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (\n            let i = 0;\n            i < cells.length && qualifyingTileCount < wantSize;\n            ++i\n        ) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n\n            const dist = Math.round(distMap.getDistance(x, y));\n\n            if (dist != k) continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount) continue;\n\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n\n    return qualifyingTileCount;\n}\n\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(\n    builder: BuildData,\n    startX: number,\n    startY: number\n): number {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n\n    let count = 1;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY)) continue;\n        if (interior[newX][newY]) continue; // already done\n\n        if (\n            site.isOccupied(newX, newY) ||\n            (site.getMachine(newX, newY) && !site.isGateSite(newX, newY))\n        ) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return 0;\n        }\n        if (\n            site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.getMachine(newX, newY)\n        ) {\n            let additional = addTileToInteriorAndIterate(builder, newX, newY);\n            if (additional <= 0) return 0;\n            count += additional;\n        }\n    }\n    return count;\n}\n\nexport function maximizeInterior(\n    data: BuildData,\n    minimumInteriorNeighbors = 1\n) {\n    const interior = data.interior;\n    const site = data.site;\n    let interiorNeighborCount = 0;\n    // let openNeighborCount = 0;\n\n    let madeChange = true;\n    let interiorCount = 0;\n    let maxInteriorCount = data.blueprint.size.hi;\n    let gen = 0;\n\n    while (madeChange && interiorCount < maxInteriorCount) {\n        madeChange = false;\n        interiorCount = 0;\n        ++gen;\n        interior.forEach((i, x, y) => {\n            if (!i) return;\n            ++interiorCount;\n\n            if (i != gen) return;\n\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j) || interior[i][j]) return;\n                    if (interior.isBoundaryXY(i, j)) return;\n\n                    interiorNeighborCount = 0;\n                    let ok = true;\n                    GWU.xy.eachNeighbor(\n                        i,\n                        j,\n                        (x2, y2) => {\n                            if (interior[x2][y2]) {\n                                ++interiorNeighborCount;\n                            } else if (!site.isWall(x2, y2)) {\n                                ok = false; // non-interior and not wall\n                            } else if (site.getMachine(x2, y2)) {\n                                ok = false; // in another machine\n                            }\n                        },\n                        false // 8 dirs\n                    );\n\n                    if (!ok || interiorNeighborCount < minimumInteriorNeighbors)\n                        return;\n\n                    interior[i][j] = gen + 1;\n                    ++interiorCount;\n                    if (site.blocksPathing(i, j)) {\n                        site.setTile(i, j, 'FLOOR');\n                    }\n                    madeChange = true;\n                },\n                true // 4 dirs\n            );\n        });\n    }\n    interior.update((v) => (v > 0 ? 1 : 0));\n}\n\nexport function prepareInterior(builder: BuildData) {\n    const interior = builder.interior;\n    const site = builder.site;\n    const blueprint = builder.blueprint;\n\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        maximizeInterior(builder, 1);\n    } else if (blueprint.openInterior) {\n        maximizeInterior(builder, 4);\n    }\n\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v) site.setTile(x, y, 'FLOOR');\n        });\n    } else {\n        if (blueprint.purgeBlockers) {\n            // If requested, purge pathing blockers -- no traps allowed.\n            interior.forEach((v, x, y) => {\n                if (!v) return;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, 'FLOOR');\n                }\n            });\n        }\n\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (blueprint.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.setTile(x, y, 'FLOOR');\n                }\n            });\n        }\n    }\n\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.isGateSite(x, y)) return;\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j)) return; // Not valid x,y\n                    if (interior[i][j]) return; // is part of machine\n                    if (site.isWall(i, j)) return; // is already a wall (of some sort)\n\n                    if (site.isGateSite(i, j)) return; // is a door site\n                    if (site.getMachine(i, j)) return; // is part of a machine\n\n                    if (site.blocksPathing(i, j)) return; // is a blocker for the player (water?)\n                    site.setTile(i, j, 'WALL');\n                },\n                false // all 8 directions\n            );\n        });\n    }\n\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.isGateSite(x, y)) return;\n            site.makeImpregnable(x, y);\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j)) return;\n                    if (interior[i][j]) return;\n                    if (site.isGateSite(i, j)) return;\n                    site.makeImpregnable(i, j);\n                },\n                false\n            );\n        });\n    }\n\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v) return;\n\n        if (!blueprint.noInteriorFlag) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, 'DOOR');\n        }\n    });\n}\n\n// export function expandMachineInterior(\n//     builder: BuildData,\n//     minimumInteriorNeighbors = 1\n// ) {\n//     let madeChange;\n//     const interior = builder.interior;\n//     const site = builder.site;\n\n//     do {\n//         madeChange = false;\n//         interior.forEach((_v, x, y) => {\n//             // if (v && site.isDoor(x, y)) {\n//             //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n//             //     return;\n//             // }\n//             if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE)) return;\n//             if (!site.blocksPathing(x, y)) return;\n\n//             let nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // Not in map\n//                     if (interior.isBoundaryXY(i, j)) return; // Not on boundary\n\n//                     if (interior[i][j] && !site.blocksPathing(i, j)) {\n//                         ++nbcount; // in machine and open tile\n//                     }\n//                 },\n//                 false\n//             );\n\n//             if (nbcount < minimumInteriorNeighbors) return;\n\n//             nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // not on map\n//                     if (interior[i][j]) return; // already part of machine\n//                     if (\n//                         !site.isWall(i, j) ||\n//                         site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)\n//                     ) {\n//                         ++nbcount; // tile is not a wall or is in a machine\n//                     }\n//                 },\n//                 false\n//             );\n\n//             if (nbcount) return;\n\n//             // Eliminate this obstruction; welcome its location into the machine.\n//             madeChange = true;\n//             interior[x][y] = 1;\n//             if (site.blocksPathing(x, y)) {\n//                 site.setTile(x, y, SITE.FLOOR);\n//             }\n//             GWU.xy.eachNeighbor(x, y, (i, j) => {\n//                 if (!interior.hasXY(i, j)) return;\n//                 if (site.isSet(i, j)) return;\n//                 site.setTile(i, j, SITE.WALL);\n//             });\n//         });\n//     } while (madeChange);\n// }\n\n///////////////////////////\n// INSTALL\n\nexport const blueprints: Record<string, Blueprint> = {};\n\nexport function install(\n    id: string,\n    blueprint: Blueprint | Partial<BlueprintOptions>\n) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\n\nexport function random(\n    requiredFlags: number,\n    depth: number,\n    rng?: GWU.rng.Random\n): Blueprint {\n    const matches = Object.values(blueprints).filter(\n        (b) => b.qualifies(requiredFlags) && b.frequency(depth)\n    );\n    rng = rng || GWU.rng.random;\n    return rng.item(matches);\n}\n\nexport function get(id: string | Blueprint): Blueprint {\n    if (id instanceof Blueprint) return id;\n    return blueprints[id];\n}\n\nexport function make(config: Partial<BlueprintOptions>): Blueprint {\n    // if (!config.id) throw new Error('id is required to make Blueprint.');\n    return new Blueprint(config);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\nimport * as STEP from './buildStep';\nimport * as ITEM from '../site/item';\nimport * as HORDE from '../site/horde';\n\nimport { BuildData } from './data';\nimport { NullLogger, Logger } from '../site/log/logger';\nimport { ConsoleLogger } from '../site/log/consoleLogger';\nimport { DisruptOptions, Site } from '../site';\n\nexport type BlueType = BLUE.Blueprint | string;\n\nexport interface BuilderOptions {\n    blueprints: BlueType[] | { [key: string]: BlueType };\n    log: Logger | boolean;\n    seed: number;\n}\n\nexport interface BuildInfo {\n    x: number;\n    y: number;\n}\n\nexport type BuildResult = BuildInfo | null;\n\nexport class Builder {\n    blueprints: BLUE.Blueprint[] | null = null;\n    log: Logger;\n    seed: number;\n\n    constructor(options: Partial<BuilderOptions> = {}) {\n        if (options.blueprints) {\n            if (!Array.isArray(options.blueprints)) {\n                options.blueprints = Object.values(options.blueprints);\n            }\n            this.blueprints = options.blueprints.map((v) => BLUE.get(v));\n        }\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        } else {\n            this.log = options.log || new NullLogger();\n        }\n        if (options.seed) {\n            this.seed = options.seed;\n        } else {\n            this.seed = 0;\n        }\n    }\n\n    _pickRandom(\n        requiredFlags: number,\n        depth: number,\n        rng?: GWU.rng.Random\n    ): BLUE.Blueprint | null {\n        rng = rng || GWU.rng.random;\n        const blueprints = this.blueprints || Object.values(BLUE.blueprints);\n        const weights = blueprints.map((b) => {\n            if (!b.qualifies(requiredFlags)) return 0;\n            return b.frequency(depth);\n        });\n\n        const index = rng.weighted(weights) as number;\n        return blueprints[index] || null;\n    }\n\n    buildRandom(\n        site: Site,\n        requiredMachineFlags = BLUE.Flags.BP_ROOM,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        const depth = site.depth;\n\n        let tries = 0;\n        while (tries < 10) {\n            const blueprint = this._pickRandom(\n                requiredMachineFlags,\n                depth,\n                site.rng\n            );\n            if (!blueprint) {\n                this.log.onBuildError(\n                    `Failed to find matching blueprint: requiredMachineFlags : ${GWU.flag.toString(\n                        BLUE.Flags,\n                        requiredMachineFlags\n                    )}, depth: ${depth}`\n                );\n                return null;\n            }\n\n            const data = new BuildData(site, blueprint);\n            site.analyze();\n\n            this.log.onBlueprintPick(data, requiredMachineFlags, depth);\n\n            if (this._buildAt(data, x, y, adoptedItem)) {\n                return { x, y };\n            }\n            ++tries;\n        }\n\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return null;\n    }\n\n    build(\n        site: Site,\n        blueprint: BLUE.Blueprint | string,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        if (typeof blueprint === 'string') {\n            const id = blueprint;\n            blueprint = BLUE.blueprints[id];\n            if (!blueprint) throw new Error('Failed to find blueprint - ' + id);\n        }\n\n        if (this.seed) {\n            site.rng.seed(this.seed);\n        }\n\n        const data = new BuildData(site, blueprint);\n        site.analyze();\n\n        return this._buildAt(data, x, y, adoptedItem);\n    }\n\n    _buildAt(\n        data: BuildData,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        if (x >= 0 && y >= 0) {\n            return this._build(data, x, y, adoptedItem);\n        }\n\n        let count = this._markCandidates(data);\n        if (!count) {\n            return null;\n        }\n\n        let tries = 20; // TODO - Make property of Blueprint\n        while (count-- && tries--) {\n            const loc = BLUE.pickCandidateLoc(data) || false;\n            if (loc) {\n                if (this._build(data, loc[0], loc[1], adoptedItem)) {\n                    return { x: loc[0], y: loc[1] };\n                }\n            }\n        }\n\n        this.log.onBlueprintFail(\n            data,\n            'No suitable locations found to build blueprint.'\n        );\n        return null;\n    }\n\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    _build(\n        data: BuildData,\n        originX: number,\n        originY: number,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        data.reset(originX, originY);\n        this.log.onBlueprintStart(data, adoptedItem);\n\n        if (!this._computeInterior(data)) {\n            return null;\n        }\n\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const snapshot = data.site.snapshot();\n        data.machineNumber = data.site.nextMachineId(); // Reserve this machine number, starting with 1.\n\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        BLUE.prepareInterior(data);\n\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        data.calcDistances(data.blueprint.size.hi);\n\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n\n        const components = data.blueprint.pickComponents(data.site.rng);\n\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n\n            if (!this._buildStep(data, component, adoptedItem)) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                this.log.onBlueprintFail(\n                    data,\n                    `Failed to build step ${component.index + 1}/${\n                        data.blueprint.steps.length\n                    }.`\n                );\n                data.site.restore(snapshot);\n                snapshot.free();\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return null;\n            }\n        }\n\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (data.blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(data.site, data.machineNumber);\n        }\n\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n\n        this.log.onBlueprintSuccess(data);\n\n        snapshot.free();\n\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return { x: originX, y: originY };\n    }\n\n    _markCandidates(data: BuildData): number {\n        const count = BLUE.markCandidates(data);\n\n        if (count <= 0) {\n            this.log.onBlueprintFail(\n                data,\n                'No suitable candidate locations found.'\n            );\n            return 0;\n        }\n\n        this.log.onBlueprintCandidates(data);\n\n        return count;\n    }\n\n    _computeInterior(data: BuildData): boolean {\n        let fail = null;\n        let count = data.blueprint.fillInterior(data);\n\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (!count) {\n            fail = 'Interior error.';\n        } else if (!data.blueprint.size.contains(count)) {\n            fail = `Interior wrong size - have: ${count}, want: ${data.blueprint.size.toString()}`;\n        } else if (\n            data.blueprint.treatAsBlocking &&\n            SITE.siteDisruptedBy(data.site, data.interior, {\n                machine: data.site.machineCount,\n            })\n        ) {\n            fail = 'Interior blocks map.';\n        } else if (\n            data.blueprint.requireBlocking &&\n            SITE.siteDisruptedSize(data.site, data.interior) < 100\n        ) {\n            fail = 'Interior does not block enough cells.';\n        }\n\n        if (!fail) {\n            this.log.onBlueprintInterior(data);\n\n            return true;\n        }\n\n        this.log.onBlueprintFail(data, fail);\n        return false;\n    }\n\n    _buildStep(\n        data: BuildData,\n        buildStep: STEP.BuildStep,\n        adoptedItem: ITEM.ItemInstance | null\n    ) {\n        let wantCount = 0;\n        let builtCount = 0;\n\n        const site = data.site;\n\n        this.log.onStepStart(data, buildStep, adoptedItem);\n\n        // console.log(\n        //     'buildComponent',\n        //     blueprint.id,\n        //     blueprint.steps.indexOf(buildStep)\n        // );\n\n        // Figure out the distance bounds.\n        const distanceBound = STEP.calcDistanceBound(data, buildStep);\n\n        // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n\n        // Make a master map of candidate locations for this feature.\n        let qualifyingTileCount = 0;\n\n        if (buildStep.buildVestibule) {\n            // Generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n\n            let success = this.buildRandom(\n                data.site,\n                BLUE.Flags.BP_VESTIBULE,\n                data.originX,\n                data.originY\n            );\n\n            if (!success) {\n                this.log.onStepFail(\n                    data,\n                    buildStep,\n                    'Failed to build vestibule'\n                );\n                return false;\n            }\n        }\n\n        // If we are just building a vestibule, then we can exit here...\n        if (!buildStep.buildsInstances) {\n            this.log.onStepSuccess(data, buildStep);\n            return true;\n        }\n\n        const candidates = GWU.grid.alloc(site.width, site.height);\n\n        let didSomething = false;\n\n        do {\n            didSomething = false;\n\n            if (buildStep.buildAtOrigin) {\n                candidates[data.originX][data.originY] = 1;\n                qualifyingTileCount = 1;\n                wantCount = 1;\n            } else {\n                qualifyingTileCount = buildStep.markCandidates(\n                    data,\n                    candidates,\n                    distanceBound\n                );\n\n                if (\n                    buildStep.generateEverywhere ||\n                    buildStep.repeatUntilNoProgress\n                ) {\n                    wantCount = qualifyingTileCount;\n                } else {\n                    wantCount = buildStep.count.value(site.rng);\n                }\n\n                this.log.onStepCandidates(\n                    data,\n                    buildStep,\n                    candidates,\n                    wantCount\n                );\n\n                // get rid of all error/invalid codes\n                candidates.update((v) => (v == 1 ? 1 : 0));\n\n                if (\n                    !qualifyingTileCount ||\n                    qualifyingTileCount < buildStep.count.lo\n                ) {\n                    this.log.onStepFail(\n                        data,\n                        buildStep,\n                        `Only ${qualifyingTileCount} qualifying tiles - want ${buildStep.count.toString()}.`\n                    );\n                    return false;\n                }\n            }\n\n            let x = 0,\n                y = 0;\n\n            while (qualifyingTileCount > 0 && builtCount < wantCount) {\n                // Find a location for the feature.\n                if (buildStep.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = data.originX;\n                    y = data.originY;\n                } else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = data.rng.matchingLoc(\n                        candidates.width,\n                        candidates.height,\n                        (x, y) => candidates[x][y] == 1\n                    );\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n\n                const snapshot = data.site.snapshot();\n\n                if (\n                    this._buildStepInstance(data, buildStep, x, y, adoptedItem)\n                ) {\n                    // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                    qualifyingTileCount -= buildStep.makePersonalSpace(\n                        data,\n                        x,\n                        y,\n                        candidates\n                    );\n                    builtCount++; // we've placed an instance\n                    didSomething = true;\n                    snapshot.free(); // This snapshot is useless b/c we made changes...\n                } else {\n                    data.site.restore(snapshot); // need to undo any changes...\n                    snapshot.free();\n                }\n\n                // Finished with this instance!\n            }\n        } while (didSomething && buildStep.repeatUntilNoProgress);\n\n        GWU.grid.free(candidates);\n\n        if (\n            !buildStep.count.contains(builtCount) &&\n            !buildStep.generateEverywhere &&\n            !buildStep.repeatUntilNoProgress\n        ) {\n            this.log.onStepFail(\n                data,\n                buildStep,\n                `Failed to build enough instances - want: ${buildStep.count.toString()}, built: ${builtCount}`\n            );\n            return false;\n        }\n\n        this.log.onStepSuccess(data, buildStep);\n\n        return true;\n    }\n\n    _buildStepInstance(\n        data: BuildData,\n        buildStep: STEP.BuildStep,\n        x: number,\n        y: number,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): boolean {\n        let success = true;\n        let didSomething = true;\n\n        const site = data.site;\n\n        if (success && buildStep.treatAsBlocking) {\n            // Yes, check for blocking.\n            const options: Partial<DisruptOptions> = {\n                machine: site.machineCount,\n            };\n            if (buildStep.noBlockOrigin) {\n                options.updateWalkable = (g) => {\n                    g[data.originX][data.originY] = 1;\n                    return true;\n                };\n            }\n            if (SITE.siteDisruptedByXY(site, x, y, options)) {\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'instance blocks map'\n                );\n                success = false;\n            }\n        }\n\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (success && buildStep.feature) {\n            success = buildStep.feature(site, x, y);\n            didSomething = success;\n            if (!success) {\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to build effect - ' +\n                        JSON.stringify(buildStep.feature)\n                );\n            }\n        }\n\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile) {\n            if (\n                !buildStep.permitBlocking &&\n                site.tileBlocksMove(buildStep.tile) &&\n                !buildStep.treatAsBlocking // already did treatAsBlocking\n            ) {\n                if (\n                    SITE.siteDisruptedByXY(site, x, y, {\n                        machine: site.machineCount,\n                    })\n                ) {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'tile blocks site'\n                    );\n                    success = false;\n                }\n            }\n\n            if (success) {\n                success = site.setTile(x, y, buildStep.tile);\n                didSomething = didSomething || success;\n                if (!success) {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'failed to set tile - ' + buildStep.tile\n                    );\n                }\n            }\n        }\n\n        let torch: ITEM.ItemInstance | null = adoptedItem;\n\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const itemInfo = ITEM.pickItem(data.site.depth, buildStep.item);\n\n            if (!itemInfo) {\n                success = false;\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to make random item - ' +\n                        JSON.stringify(buildStep.item)\n                );\n            } else {\n                const item = ITEM.makeItem(itemInfo);\n                if (buildStep.itemIsKey) {\n                    item.key = {\n                        x,\n                        y,\n                        disposable: !!buildStep.keyIsDisposable,\n                    };\n                }\n\n                if (buildStep.outsourceItem) {\n                    const result = this.buildRandom(\n                        data.site,\n                        BLUE.Flags.BP_ADOPT_ITEM,\n                        -1,\n                        -1,\n                        item\n                    );\n                    if (result) {\n                        didSomething = true;\n                    } else {\n                        this.log.onStepInstanceFail(\n                            data,\n                            buildStep,\n                            x,\n                            y,\n                            'Failed to build machine to adopt item - ' + item.id\n                        );\n                        success = false;\n                    }\n                } else if (buildStep.hordeTakesItem) {\n                    torch = item;\n                } else {\n                    success = site.addItem(x, y, item) > 0;\n                    didSomething = didSomething || success;\n                    if (!success) {\n                        this.log.onStepInstanceFail(\n                            data,\n                            buildStep,\n                            x,\n                            y,\n                            'Failed to add item to site - ' + item.id\n                        );\n                    }\n                }\n            }\n        } else if (success && buildStep.adoptItem) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error(\n                    'Failed to build blueprint because there is no adopted item.'\n                );\n            }\n\n            if (success) {\n                success = site.addItem(x, y, adoptedItem) > 0;\n                if (success) {\n                    didSomething = true;\n                } else {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'Failed to add adopted item to site - ' + adoptedItem.id\n                    );\n                }\n            }\n        }\n\n        let torchBearer: HORDE.ActorInstance | null = null;\n\n        if (success && buildStep.horde) {\n            let horde = HORDE.pickHorde(\n                data.site.depth,\n                buildStep.horde,\n                site.rng\n            );\n            // if (buildStep.horde.random) {\n            //     horde = GWM.horde.random({ rng: site.rng });\n            // } else if (buildStep.horde.id) {\n            //     horde = GWM.horde.from(buildStep.horde.id);\n            // } else {\n            //     buildStep.horde.rng = site.rng;\n            //     horde = GWM.horde.random(buildStep.horde);\n            // }\n            if (!horde) {\n                success = false;\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to pick horde - ' + JSON.stringify(buildStep.horde)\n                );\n            } else {\n                if (horde.blueprint) {\n                    const blueprint = BLUE.get(horde.blueprint);\n                    const newData = new BuildData(\n                        data.site,\n                        blueprint,\n                        data.machineNumber\n                    );\n                    const result = this._build(newData, x, y, null);\n                    newData.free();\n                    if (!result) {\n                        return false;\n                    }\n                }\n\n                const leader = HORDE.spawnHorde(horde, site, x, y, {\n                    machine: site.machineCount,\n                });\n                if (!leader) {\n                    success = false;\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'Failed to build horde - ' + horde\n                    );\n                } else {\n                    // What to do now?\n                    didSomething = true;\n\n                    // leader adopts item...\n                    if (torch && buildStep.hordeTakesItem) {\n                        torchBearer = leader;\n                        torchBearer.item = torch;\n                        torch.x = -1;\n                        torch.y = -1;\n                    }\n\n                    if (horde.feature) {\n                        horde.feature(site, x, y);\n                    }\n\n                    if (buildStep.horde.feature) {\n                        buildStep.horde.feature(site, x, y);\n                    }\n                }\n            }\n        }\n\n        if (success && didSomething) {\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!data.blueprint.noInteriorFlag) {\n                site.setMachine(\n                    x,\n                    y,\n                    data.machineNumber,\n                    data.blueprint.isRoom\n                );\n            }\n\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.impregnable) {\n                site.makeImpregnable(x, y);\n            }\n\n            this.log.onStepInstanceSuccess(data, buildStep, x, y);\n        } else if (didSomething) {\n            // roll back any changes?\n        }\n\n        return success && didSomething;\n    }\n}\n\n////////////////////////////////////////////////////\n// TODO - Change this!!!\n// const blue = BLUE.get(id | blue);\n// const result =  blue.buildAt(map, x, y);\n//\nexport function build(\n    blueprint: BlueType,\n    site: Site,\n    x: number,\n    y: number,\n    opts?: Partial<BuilderOptions>\n): BuildResult {\n    const builder = new Builder(opts);\n\n    return builder.build(site, blueprint, x, y);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\nimport * as LEVEL from './digger';\n\nimport * as TYPES from './types';\nimport * as ROOM from './room';\n// import * as HALL from './hall';\n// import * as LOOP from './loop';\n// import * as LAKE from './lake';\n// import * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as DIG from './digger';\nimport { RoomOptions } from '.';\n\nexport interface DungeonOptions extends DIG.DiggerOptions {\n    // seed?: number;\n    levels: number;\n    goesUp?: boolean;\n\n    width: number;\n    height: number;\n\n    entrance?: string | string[] | Record<string, number> | ROOM.RoomDigger;\n\n    startLoc?: GWU.xy.Loc;\n    startTile?: TYPES.TileId;\n    stairDistance?: number;\n\n    endLoc?: GWU.xy.Loc;\n    endTile?: TYPES.TileId;\n\n    // rooms?: {\n    //     count?: number;\n    //     digger?: string | ROOM.RoomDigger;\n    //     entrance?: string | ROOM.RoomDigger;\n    //     first?: string | ROOM.RoomDigger;\n    // };\n\n    // halls?: Partial<HALL.HallOptions>;\n    // loops?: Partial<LOOP.LoopOptions>;\n    // lakes?: Partial<LAKE.LakeOpts>;\n    // bridges?: Partial<BRIDGE.BridgeOpts>;\n    // stairs?: Partial<STAIRS.StairOpts>;\n\n    // boundary?: boolean;\n}\n\nexport type LocPair = [GWU.xy.Loc, GWU.xy.Loc];\n\nexport class Dungeon {\n    // @ts-ignore\n    config: DungeonOptions = {\n        levels: 1,\n        width: 80,\n        height: 34,\n        rooms: { fails: 20 },\n        // rooms: { count: 20, digger: 'DEFAULT' },\n        // halls: {},\n        // loops: {},\n        // lakes: {},\n        // bridges: {},\n        // stairs: {},\n\n        boundary: true,\n    };\n    seeds: number[] = [];\n    stairLocs: LocPair[] = [];\n\n    constructor(options: DungeonOptions) {\n        GWU.object.setOptions(this.config, options);\n\n        if (this.config.seed) {\n            GWU.rng.random.seed(this.config.seed);\n        }\n\n        if (typeof this.config.stairs === 'boolean' || !this.config.stairs) {\n            this.config.stairs = {};\n        }\n        if (!this.config.rooms) {\n            this.config.rooms = {};\n        } else if (typeof this.config.rooms === 'number') {\n            this.config.rooms = { count: this.config.rooms };\n        }\n\n        this._initSeeds();\n        this._initStairLocs();\n    }\n\n    get length() {\n        return this.config.levels;\n    }\n\n    _initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.rng.random.number(2 ** 32);\n        }\n    }\n\n    _initStairLocs() {\n        let startLoc: GWU.xy.Loc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n\n        const minDistance =\n            this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n\n        let needUpdate = false;\n        for (let i = 0; i < this.config.levels; ++i) {\n            let endLoc: GWU.xy.Loc;\n\n            if (\n                this.stairLocs[i] &&\n                this.stairLocs[i][1] &&\n                this.stairLocs[i][1][0] > 0\n            ) {\n                endLoc = this.stairLocs[i][1];\n                needUpdate =\n                    GWU.xy.distanceBetween(\n                        startLoc[0],\n                        startLoc[1],\n                        endLoc[0],\n                        endLoc[1]\n                    ) < minDistance;\n            } else {\n                endLoc = GWU.rng.random.matchingLoc(\n                    this.config.width,\n                    this.config.height,\n                    (x, y) => {\n                        return (\n                            GWU.xy.distanceBetween(\n                                startLoc[0],\n                                startLoc[1],\n                                x,\n                                y\n                            ) > minDistance\n                        );\n                    }\n                );\n            }\n\n            this.stairLocs[i] = [\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ];\n            startLoc = endLoc;\n        }\n\n        if (needUpdate) {\n            // loop does not go all the way to level 0\n            for (let i = this.config.levels - 1; i > 0; --i) {\n                let [startLoc, endLoc] = this.stairLocs[i];\n\n                if (\n                    GWU.xy.distanceBetween(\n                        startLoc[0],\n                        startLoc[1],\n                        endLoc[0],\n                        endLoc[1]\n                    ) > minDistance\n                ) {\n                    break;\n                }\n\n                startLoc = GWU.rng.random.matchingLoc(\n                    this.config.width,\n                    this.config.height,\n                    (x, y) => {\n                        return (\n                            GWU.xy.distanceBetween(endLoc[0], endLoc[1], x, y) >\n                            minDistance\n                        );\n                    }\n                );\n\n                this.stairLocs[i][0] = startLoc;\n                this.stairLocs[i - 1][1] = startLoc;\n            }\n        }\n    }\n\n    getLevel(id: number, cb: TYPES.DigFn) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n\n        const stairOpts = Object.assign(\n            {},\n            this.config.stairs as Partial<STAIRS.StairOpts>\n        );\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        } else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n\n        const rooms = Object.assign(\n            {},\n            this.config.rooms as Partial<RoomOptions>\n        );\n        if (id === 0 && this.config.entrance) {\n            rooms.first = this.config.entrance;\n        }\n\n        let width = this.config.width,\n            height = this.config.height;\n        // if (cb instanceof GWM.map.Map) {\n        //     width = cb.width;\n        //     height = cb.height;\n        // }\n\n        const levelOpts = {\n            seed: this.seeds[id],\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n\n            rooms: rooms,\n\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n\n            goesUp: this.config.goesUp,\n            width,\n            height,\n        };\n\n        return this._makeLevel(id, levelOpts, cb);\n\n        // TODO - Update startLoc, endLoc\n    }\n\n    _makeLevel(id: number, opts: LEVEL.DiggerOptions, cb: TYPES.DigFn) {\n        const digger = new LEVEL.Digger(opts);\n        let result = false;\n        // if (cb instanceof GWM.map.Map) {\n        //     result = digger.create(cb);\n        // } else {\n        result = digger.create(this.config.width, this.config.height, cb);\n        // }\n\n        this.stairLocs[id] = [digger.locations.start, digger.locations.end];\n\n        // if (cb instanceof GWM.map.Map) {\n        //     const locs = this.stairLocs[id];\n        //     if (this.config.goesUp) {\n        //         cb.locations.down = cb.locations.start = locs[0];\n        //         cb.locations.up = cb.locations.end = locs[1];\n        //     } else {\n        //         cb.locations.down = cb.locations.start = locs[1];\n        //         cb.locations.up = cb.locations.end = locs[0];\n        //     }\n        // }\n        return result;\n    }\n}\n"],"names":["tileIds","allTiles","installTile","id","opts","base","index","length","priority","tags","extends","root","getTile","Object","assign","Error","info","GWU","object","assignOmitting","make","text","replace","search","Number","parseInt","tile","substring","delta","undefined","blocksPathing","blocksMove","push","name","tileId","ch","blocksVision","door","secretDoor","stairs","liquid","impregnable","features","types","installType","fn","feature","Array","isArray","featureFeature","bind","site","x","y","feat","config","FALSE","parts","split","shift","toLowerCase","handler","steps","map","filter","a","entries","key","every","step","makeArray","cfg","c","s","src","includes","superpriority","blockedByActors","blockedByItems","tileAction","machine","setTile","chance","endsWith","parseFloat","chanceAction","rng","Fl","flag","fl","Flags","spread","args","t","trim","grow","decrement","flags","from","matchTile","indexOf","action","spreadFeature","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","didSomething","spawnMap","grid","alloc","width","height","computeSpawnMap","mapDisruptedBy","free","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","update","v","forEach","i","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","xy","forRect","j","lakeX","lakeY","get","isStairs","first","floodFill","cellIsOk","effect","isStart","hasXY","isProtected","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","hasTile","dir","x2","y2","madeChange","startProb","probDec","fill","count","DIRS","_flags","clearTile","blockingMap","eachActor","loc","matchingLocNear","forbidsActor","eachItem","forbidsItem","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","hordes","pickHorde","depth","rules","tagMatch","random","makeMatch","find","h","choices","horde","freq","frequency","weighted","spawnHorde","canSpawn","TRUE","leader","canSpawnActor","matchingLoc","hasActor","_pickLeaderLoc","_opts","addActor","_addLeader","_spawnLeader","members","kindId","value","_spawnMember","_spawnMembers","member","instance","actor","_pickMemberLoc","_addMember","items","pickItem","tagRules","item","makeItem","directionOfDoorSite","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","isFloor","chooseRandomDoorSites","k","doorSiteFailed","DOORS","w","isDiggable","isSet","doorSites","siteDisruptedByXY","options","offsetX","offsetY","arcCount","isPassable","result","siteDisruptedBy","blockingX","blockingY","getMachine","updateWalkable","siteDisruptedSize","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","_maxDistance","reset","setGoal","calculate","path","OK","blocksDiagonal","OBSTRUCTION","BLOCKED","clearInteriorFlag","needsMachine","setMachine","analyze","updateChokeCounts","updateLoopiness","updateChokepoints","updateCounts","passMap","isSecretDoor","passableArcCount","clearChokepoint","isInLoop","oldX","CLOCK_DIRS","oldY","setChokepoint","setChokeCount","isChokepoint","cellCount","floodFillCount","i2","j2","getChokeCount","clearGateSite","setGateSite","results","startX","startY","getCount","isAreaMachine","todo","pop","resetLoopiness","checkLoopiness","cleanLoopiness","setInLoop","clearInLoop","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","designationSurvives","Site","[object Object]","this","machineCount","_tiles","_doors","_machine","_chokeCounts","fmt","dump","TILE.getTile","other","copy","slice","actors","otherX","otherY","seed","isBoundaryXY","isDoor","isBridge","isShallow","_x","_y","isNothing","isDeep","isInMachine","TILE.tileId","IMPREGNABLE","CHOKEPOINT","GATE_SITE","IN_LOOP","ANALYZE.analyze","snapshot","isRoom","IN_MACHINE","IN_AREA_MACHINE","_v","Utils.directionOfDoorSite","hasItem","_actor","cb","_a","some","_i","NullLogger","StepFlags","CandidateType","BuildStep","pad","range","FEATURE.make","BS_ADOPT_ITEM","buildAtOrigin","hi","repeatUntilNoProgress","hordeTakesItem","allowBoundary","BS_ALLOW_BOUNDARY","notInHallway","BS_NOT_IN_HALLWAY","buildInWalls","BS_BUILD_IN_WALLS","buildAnywhere","BS_BUILD_ANYWHERE_ON_LEVEL","BS_REPEAT_UNTIL_NO_PROGRESS","permitBlocking","BS_PERMIT_BLOCKING","treatAsBlocking","BS_TREAT_AS_BLOCKING","BS_NO_BLOCK_ORIGIN","noBlockOrigin","adoptItem","itemIsKey","BS_ITEM_IS_KEY","keyIsDisposable","BS_KEY_DISPOSABLE","outsourceItem","BS_OUTSOURCE_ITEM_TO_MACHINE","BS_IMPREGNABLE","buildVestibule","BS_BUILD_VESTIBULE","BS_HORDE_TAKES_ITEM","generateEverywhere","BS_EVERYWHERE","BS_BUILD_AT_ORIGIN","buildsInstances","data","candidates","distanceBound","updateViewMap","blueprint","candidateType","cellIsCandidate","_data","JSON","stringify","lo","toString","join","builder","buildStep","BS_IN_VIEW_OF_ORIGIN","BS_IN_PASSABLE_VIEW_OF_ORIGIN","fov","FOV","isBlocked","viewMap","calcDistanceBound","BS_NEAR_ORIGIN","distance25","BS_FAR_FROM_ORIGIN","distance75","IN_HALLWAY","ON_BOUNDARY","MUST_BE_ORIGIN","NOT_ORIGIN","occupied","OCCUPIED","NOT_IN_VIEW","distance","getDistance","TOO_FAR","TOO_CLOSE","cellMachine","interior","machineNumber","failed","neighborMachine","INVALID_WALL","NOT_CANDIDATE","blocksItems","FAILED","ConsoleLogger","console","group","groupEnd","room","roomSite","_site","_room","_roomSite","error","log","label","size","wantCount","haveCount","_step","requiredTile","cells","tiles","line","source","costGrid","Hall","Bounds","super","dx","dy","doors","d","makeHall","dirIndex","hallLength","hallWidth","abs","Room","cx","floor","cy","hall","translate","checkConfig","expected","expect","have","RoomDigger","_setOptions","carve","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","randomRoom","ERROR","create","Cavern","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","DOWN","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickWidth","clamp","Range","weights","_pickWidth","pickLength","lengths","UP","pickHallDirection","dirs","sequence","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.makeHall","lower","higher","actual","halls","Lakes","tries","canDisrupt","wreathTile","wreathChance","wreathSize","assignObject","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","DijkstraMap","dirCoords","seq","isAnyLiquid","bridgeDir","SITE.computeDistanceMap","isBridgeCandidate","_bridgeDir","Stairs","up","down","start","upTile","downTile","wall","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","distanceBetween","setupStairs","end","wallTile","indexes","x0","y0","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","Digger","fails","setOptions","goesUp","startLoc","_locs","endLoc","loops","lakes","bridges","LOGGER.NullLogger","SITE.Site","needsFree","dest","_createSite","_create","addRooms","addLoops","onLoopsAdded","addLakes","onLakesAdded","addBridges","onBridgesAdded","addStairs","onStairsAdded","finish","number","setSeed","clear","stair","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","addFirstRoom","updateDoorDirs","onDigFirstRoom","maxFails","addRoom","shuffle","_makeRoomSite","getDigger","_attachRoomAtLoc","HALL.dig","onRoomCandidate","_attachRoom","onRoomSuccess","onRoomFailed","len","getDoorDir","oppDir","_roomFitsAt","copyTiles","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","locs","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","boundaryTile","boundary","BuildData","maxDistance","qualifyingTileCount","distances","dist","Blueprint","STEP.BuildStep","BP_ADOPT_ITEM","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","BP_NOT_IN_HALLWAY","requiredFlags","want","alternativeFlags","STEP.StepFlags","BS_ALTERNATIVE","BS_ALTERNATIVE_2","keepFeature","totalFreq","randIndex","_f","addTileToInteriorAndIterate","computeVestibuleInterior","goalSize","n","isOccupied","markCandidates","buildData","isGateSite","contains","pickCandidateLoc","randSite","doorChokeCount","vestibuleLoc","vestibuleChokeCount","roomSize","wantSize","distMap","startChokeCount","additional","minimumInteriorNeighbors","interiorNeighborCount","interiorCount","maxInteriorCount","gen","prepareInterior","blueprints","Builder","values","BLUE.get","BLUE.blueprints","b","qualifies","requiredMachineFlags","BLUE.Flags","adoptedItem","_pickRandom","onBuildError","onBlueprintPick","_buildAt","_build","_markCandidates","BLUE.pickCandidateLoc","onBlueprintFail","onBlueprintStart","_computeInterior","nextMachineId","BLUE.prepareInterior","calcDistances","components","pickComponents","component","_buildStep","restore","SITE.clearInteriorFlag","onBlueprintSuccess","BLUE.markCandidates","onBlueprintCandidates","fail","fillInterior","SITE.siteDisruptedBy","SITE.siteDisruptedSize","onBlueprintInterior","builtCount","onStepStart","STEP.calcDistanceBound","buildRandom","onStepFail","onStepSuccess","onStepCandidates","_buildStepInstance","makePersonalSpace","g","SITE.siteDisruptedByXY","onStepInstanceFail","tileBlocksMove","torch","itemInfo","ITEM.pickItem","ITEM.makeItem","disposable","addItem","torchBearer","HORDE.pickHorde","newData","HORDE.spawnHorde","onStepInstanceSuccess","build","matches","levels","_initSeeds","_initStairLocs","seeds","stairDistance","needUpdate","stairLocs","stairOpts","startTile","endTile","entrance","levelOpts","_makeLevel","LEVEL.Digger"],"mappings":"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"}