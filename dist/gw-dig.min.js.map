{"version":3,"file":"gw-dig.min.js","sources":["../js/site/digSite.js","../js/site/utils.js","../js/site/gridSite.js","../js/site/mapSite.js","../js/types.js","../js/room.js","../js/hall.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/digger.js","../js/blueprint/data.js","../js/blueprint/logger.js","../js/blueprint/buildStep.js","../js/blueprint/blueprint.js","../js/blueprint/consoleLogger.js","../js/blueprint/builder.js","../js/dungeon.js"],"sourcesContent":["var _a, _b;\nimport * as GWM from 'gw-map';\nexport const NOTHING = GWM.tile.get('NULL').index;\nexport const FLOOR = GWM.tile.get('FLOOR').index;\nexport const DOOR = GWM.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GWM.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GWM.tile.get('WALL').index;\nexport const DEEP = GWM.tile.get('LAKE').index;\nexport const SHALLOW = GWM.tile.get('SHALLOW').index;\nexport const BRIDGE = GWM.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GWM.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GWM.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GWM.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\n// import * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = site.rng.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = site.rng.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = site.rng.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GWU.xy.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n}\nexport function siteDisruptedByXY(site, x, y, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    if (GWU.xy.arcCount(x, y, (i, j) => {\n        return site.isPassable(i, j);\n    }) <= 1)\n        return false;\n    const blockingGrid = GWU.grid.alloc(site.width, site.height);\n    blockingGrid[x][y] = 1;\n    const result = siteDisruptedBy(site, blockingGrid, options);\n    GWU.grid.free(blockingGrid);\n    return result;\n}\nexport function siteDisruptedBy(site, blockingGrid, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const blockingX = i + options.offsetX;\n        const blockingY = j + options.offsetY;\n        if (blockingGrid.get(blockingX, blockingY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (options.updateWalkable) {\n        if (!options.updateWalkable(walkableGrid)) {\n            return true;\n        }\n    }\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GWU.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GWU.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GWU.grid.free(costGrid);\n}\nexport function clearInteriorFlag(site, machine) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine &&\n                !site.hasCellFlag(i, j, GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as Utils from './utils';\nimport * as DIG from './digSite';\nexport class GridSite {\n    constructor(width, height) {\n        this.rng = GWU.rng.random;\n        this.tiles = GWU.grid.alloc(width, height);\n        this.doors = GWU.grid.alloc(width, height);\n    }\n    free() {\n        GWU.grid.free(this.tiles);\n        GWU.grid.free(this.doors);\n    }\n    clear() {\n        this.tiles.fill(0);\n        this.doors.fill(0);\n    }\n    dump() {\n        this.tiles.dump();\n    }\n    setSeed(seed) {\n        this.rng.seed(seed);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == DIG.FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.WALL || v === DIG.IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.UP_STAIRS || v === DIG.DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DIG.DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === DIG.SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    getMachine(_x, _y) {\n        return 0;\n    }\n    updateDoorDirs() {\n        this.doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x, y) {\n        return this.doors[x][y];\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as Utils from './utils';\nconst Flags = GWM.flags.Cell;\nexport class MapSnapshot {\n    constructor(site, snap) {\n        this.machineCount = 0;\n        this.needsAnalysis = true;\n        this.isUsed = false;\n        this.site = site;\n        this.snapshot = snap;\n        this.machineCount = this.site.machineCount;\n        this.needsAnalysis = this.site.needsAnalysis;\n        this.isUsed = true;\n    }\n    restore() {\n        this.site.snapshots.revertMapTo(this.snapshot);\n        this.site.machineCount = this.machineCount;\n        this.site.needsAnalysis = this.needsAnalysis;\n        this.cancel();\n    }\n    cancel() {\n        this.site.snapshots.release(this.snapshot);\n    }\n}\nexport class MapSite {\n    constructor(map) {\n        this.machineCount = 0;\n        this.needsAnalysis = true;\n        this.map = map;\n        this.doors = GWU.grid.alloc(map.width, map.height);\n        this.snapshots = new GWM.map.SnapshotManager(map);\n    }\n    get rng() {\n        return this.map.rng;\n    }\n    // get seed() {\n    //     return this.map.seed;\n    // }\n    // set seed(v: number) {\n    //     this.map.seed = v;\n    // }\n    setSeed(seed) {\n        this.map.seed = seed;\n    }\n    get width() {\n        return this.map.width;\n    }\n    get height() {\n        return this.map.height;\n    }\n    dump() {\n        this.map.dump();\n    }\n    hasXY(x, y) {\n        return this.map.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.map.isBoundaryXY(x, y);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.map.cellInfo(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).clearCellFlag(flag);\n    }\n    hasTile(x, y, tile) {\n        return this.map.cellInfo(x, y).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        this.needsAnalysis = true;\n        return this.map.setTile(x, y, tile, opts);\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.map.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    clear() {\n        this.needsAnalysis = true;\n        this.map.cells.forEach((c) => c.clear());\n    }\n    hasItem(x, y) {\n        return this.map.cellInfo(x, y).hasItem();\n    }\n    makeRandomItem(tags) {\n        if (typeof tags === 'string') {\n            tags = { tags };\n        }\n        tags.rng = this.rng;\n        return GWM.item.makeRandom(tags);\n    }\n    addItem(x, y, item) {\n        this.needsAnalysis = true;\n        return this.map.forceItem(x, y, item);\n    }\n    hasActor(x, y) {\n        return this.map.hasActor(x, y);\n    }\n    blocksMove(x, y) {\n        return this.map.cellInfo(x, y).blocksMove();\n    }\n    blocksVision(x, y) {\n        return this.map.cellInfo(x, y).blocksVision();\n    }\n    blocksDiagonal(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return (info.hasEntityFlag(GWM.flags.Entity.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GWM.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isWall(x, y) {\n        return this.map.cellInfo(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.map.cellInfo(x, y).isStairs();\n    }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.map.cell(x, y).isEmpty();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.isEmpty())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.map.cell(x, y).isEmpty();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    isDeep(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (!!cell.depthTile(GWM.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (cell.hasDepthTile(GWM.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    isPassable(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return !(info.blocksMove() || info.blocksPathing());\n    }\n    // tileBlocksMove(tile: number): boolean {\n    //     return GWM.tile.get(tile).blocksMove();\n    // }\n    snapshot() {\n        return new MapSnapshot(this, this.snapshots.takeNew());\n    }\n    free() {\n        GWU.grid.free(this.doors);\n    }\n    getChokeCount(x, y) {\n        return this.map.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.map.cell(x, y).chokeCount = count;\n    }\n    analyze() {\n        if (this.needsAnalysis) {\n            GWM.map.analyze(this.map);\n        }\n        this.needsAnalysis = false;\n    }\n    buildEffect(effect, x, y) {\n        this.needsAnalysis = true;\n        return GWM.effect.fireSync(effect, this.map, x, y, { rng: this.rng });\n    }\n    nextMachineId() {\n        return ++this.machineCount;\n    }\n    getMachine(x, y) {\n        return this.map.cell(x, y).machineId;\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).machineId = id;\n        if (id == 0) {\n            this.map.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.map.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n    updateDoorDirs() {\n        this.doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x, y) {\n        return this.doors[x][y];\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Hall extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport function makeHall(loc, dirIndex, hallLength, hallWidth = 1) {\n    const dir = GWU.xy.DIRS[dirIndex];\n    const x = Math.min(loc[0], loc[0] + dir[0] * (hallLength - 1));\n    const y = Math.min(loc[1], loc[1] + dir[1] * (hallLength - 1));\n    const width = Math.abs(dir[0] * hallLength) || hallWidth;\n    const height = Math.abs(dir[1] * hallLength) || hallWidth;\n    return new Hall(x, y, width, height);\n}\nexport class Room extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = (rng) => rng.item(choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = (rng) => rng.weighted(choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom(site.rng);\n        const room = rooms[id];\n        if (!room) {\n            GWU.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GWU.blob.Blob({\n            rng: site.rng,\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * site.rng.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * site.rng.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX + site.rng.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            site.rng.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * site.rng.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * site.rng.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value(site.rng);\n        const ringMinWidth = this.options.ringMinWidth.value(site.rng);\n        const holeMinSize = this.options.holeMinSize.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            site.rng.chance(this.options.holeChance.value(site.rng))) {\n            GWU.xy.forCircle(x, y, site.rng.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value(site.rng);\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = site.rng.range(minX, maxX);\n            y = site.rng.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(width, rng) {\n    return GWU.clamp(_pickWidth(width, rng), 1, 3);\n}\nfunction _pickWidth(width, rng) {\n    if (!width)\n        return 1;\n    if (typeof width === 'number')\n        return width;\n    rng = rng !== null && rng !== void 0 ? rng : GWU.rng.random;\n    if (Array.isArray(width)) {\n        width = rng.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GWU.range.make(width).value(rng);\n    }\n    else if (width instanceof GWU.range.Range) {\n        width = width.value(rng);\n    }\n    else {\n        const weights = width;\n        width = Number.parseInt(rng.weighted(weights));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths, rng) {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value(rng);\n    }\n    else {\n        return lengths[0].value(rng);\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = site.rng.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = site.rng.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: 1,\n            length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = options.width;\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n        if (!site.rng.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = pickWidth(this.config.width, site.rng);\n        const length = pickLength(dir, this.config.length, site.rng);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = TYPES.makeHall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GWU.xy.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = TYPES.makeHall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        // hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = site.rng.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GWU.blob.Blob({\n                rng: site.rng,\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = site.rng.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = site.rng.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GWU.xy.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n        const seq = site.rng.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GWU.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc = null;\n        let downLoc = null;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = site.rng.matchingLocNear(GWU.xy.x(start), GWU.xy.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GWU.xy.distanceBetween(x, y, downLoc[0], downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = site.rng.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GWU.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n            doorChance: 50,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = site.rng.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = site.rng.chance(this.options.doorChance)\n                                ? SITE.DOOR\n                                : SITE.FLOOR;\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nexport class Digger {\n    constructor(options = {}) {\n        var _a, _b;\n        this.seed = 0;\n        this.rooms = { fails: 20 };\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.seed = options.seed || 0;\n        GWU.object.setOptions(this.rooms, options.rooms);\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        }\n        else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        }\n        else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        }\n        else {\n            if (options.loops === true)\n                options.loops = {};\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                (_a = options.loops.doorChance) !== null && _a !== void 0 ? _a : (_b = options.doors) === null || _b === void 0 ? void 0 : _b.chance;\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        }\n        else {\n            if (options.lakes === true)\n                options.lakes = {};\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        }\n        else {\n            if (options.bridges === true)\n                options.bridges = {};\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        }\n        else {\n            if (options.stairs === true)\n                options.stairs = {};\n            GWU.object.setOptions(this.stairs, options.stairs);\n        }\n        this.startLoc = options.startLoc || [-1, -1];\n        this.endLoc = options.endLoc || [-1, -1];\n    }\n    _makeRoomSite(width, height) {\n        const site = new SITE.GridSite(width, height);\n        site.rng = this.site.rng;\n        return site;\n    }\n    async create(...args) {\n        if (args.length == 1 && args[0] instanceof GWM.map.Map) {\n            const map = args[0];\n            this.site = new SITE.MapSite(map);\n        }\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            this.site = new SITE.GridSite(width, height);\n        }\n        const result = await this._create(this.site);\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            const cb = args[2];\n            GWU.xy.forRect(width, height, (x, y) => {\n                const t = this.site.getTileIndex(x, y);\n                if (t)\n                    cb(x, y, t);\n            });\n        }\n        this.site.free();\n        return result;\n    }\n    async _create(site) {\n        if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n            this.startLoc[0] = Math.floor(site.width / 2);\n            this.startLoc[1] = site.height - 2;\n        }\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        site.updateDoorDirs();\n        // site.dump();\n        // console.log('- rng.number', site.rng.number());\n        let fails = 0;\n        let count = 1;\n        const maxFails = this.rooms.fails || 20;\n        while (fails < maxFails) {\n            if (this.addRoom(site)) {\n                fails = 0;\n                site.updateDoorDirs();\n                site.rng.shuffle(this.seq);\n                // site.dump();\n                // console.log('- rng.number', site.rng.number());\n                if (this.rooms.count && ++count >= this.rooms.count) {\n                    break; // we are done\n                }\n            }\n            else {\n                ++fails;\n            }\n        }\n        if (this.loops)\n            this.addLoops(site, this.loops);\n        if (this.lakes)\n            this.addLakes(site, this.lakes);\n        if (this.bridges)\n            this.addBridges(site, this.bridges);\n        if (this.stairs)\n            this.addStairs(site, this.stairs);\n        this.finish(site);\n        return true;\n    }\n    start(site) {\n        const seed = this.seed || GWU.rng.random.number();\n        site.setSeed(seed);\n        site.clear();\n        this.seq = site.rng.sequence(site.width * site.height);\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        // console.log('potential room');\n        // roomSite.dump();\n        if (room && !this._attachRoom(site, roomSite, room)) {\n            room = null;\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        let i = 0;\n        const len = this.seq.length;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (i = 0; i < len; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n            const dir = site.getDoorDir(x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, room, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    SITE.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = site.rng.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, room, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                SITE.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, room, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        const hall = room.hall || room;\n        const left = Math.min(room.left, hall.left);\n        const top = Math.min(room.top, hall.top);\n        const right = Math.max(room.right, hall.right);\n        const bottom = Math.max(room.bottom, hall.bottom);\n        for (xRoom = left; xRoom <= right; xRoom++) {\n            for (yRoom = top; yRoom <= bottom; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    if (!map.hasXY(xSite, ySite) ||\n                        map.isBoundaryXY(xSite, ySite)) {\n                        return false;\n                    }\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(site, room, x, y, dir) {\n        const opts = this.doors;\n        let isDoor = false;\n        if (opts.chance && site.rng.chance(opts.chance)) {\n            isDoor = true;\n        }\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        site.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || room.hall.width == 1 || room.hall.height == 1) {\n            return;\n        }\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (site.isNothing(x - k, y)) {\n                    if (site.isSet(x - k, y - 1) && site.isSet(x - k, y + 1)) {\n                        site.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x + k, y)) {\n                    if (site.isSet(x + k, y - 1) && site.isSet(x + k, y + 1)) {\n                        site.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (site.isNothing(x, y - k)) {\n                    if (site.isSet(x - 1, y - k) && site.isSet(x + 1, y - k)) {\n                        site.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x, y + k)) {\n                    if (site.isSet(x - 1, y + k) && site.isSet(x + 1, y + k)) {\n                        site.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (site.rng.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nexport class BuildData {\n    constructor(map, options = {}) {\n        this.map = map;\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.depth = 0;\n        this.seed = 0;\n        this.site = new SITE.MapSite(map);\n        this.interior = GWU.grid.alloc(map.width, map.height);\n        this.occupied = GWU.grid.alloc(map.width, map.height);\n        this.viewMap = GWU.grid.alloc(map.width, map.height);\n        this.distanceMap = GWU.grid.alloc(map.width, map.height);\n        this.candidates = GWU.grid.alloc(map.width, map.height);\n        this.depth = options.depth || 1;\n        this.seed = options.seed || 0;\n    }\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.distanceMap);\n        GWU.grid.free(this.candidates);\n    }\n    reset(originX, originY) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        // this.candidates.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        this.distance25 = 0;\n        this.distance75 = 0;\n        if (this.seed) {\n            this.site.setSeed(this.seed);\n        }\n    }\n    calcDistances(maxSize) {\n        this.distanceMap.fill(0);\n        SITE.computeDistanceMap(this.site, this.distanceMap, this.originX, this.originY, maxSize);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        this.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = this.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","export class NullLogger {\n    async onError() { }\n    async onBlueprintPick() { }\n    async onBlueprintCandidates() { }\n    async onBlueprintStart() { }\n    async onBlueprintInterior() { }\n    async onBlueprintFail() { }\n    async onBlueprintSuccess() { }\n    async onStepStart() { }\n    async onStepCandidates() { }\n    async onStepInstanceSuccess() { }\n    async onStepInstanceFail() { }\n    async onStepSuccess() { }\n    async onStepFail() { }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nconst Fl = GWU.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    StepFlags[StepFlags[\"BF_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BF_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BF_BUILD_VESTIBULE\"] = Fl(2)] = \"BF_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BF_ADOPT_ITEM\"] = Fl(3)] = \"BF_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BF_BUILD_AT_ORIGIN\"] = Fl(4)] = \"BF_BUILD_AT_ORIGIN\";\n    StepFlags[StepFlags[\"BF_PERMIT_BLOCKING\"] = Fl(5)] = \"BF_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BF_TREAT_AS_BLOCKING\"] = Fl(6)] = \"BF_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BF_NEAR_ORIGIN\"] = Fl(7)] = \"BF_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BF_FAR_FROM_ORIGIN\"] = Fl(8)] = \"BF_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_VIEW_OF_ORIGIN\"] = Fl(9)] = \"BF_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(10)] = \"BF_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_MONSTER_TAKE_ITEM\"] = Fl(11)] = \"BF_MONSTER_TAKE_ITEM\";\n    StepFlags[StepFlags[\"BF_MONSTER_SLEEPING\"] = Fl(12)] = \"BF_MONSTER_SLEEPING\";\n    StepFlags[StepFlags[\"BF_MONSTER_FLEEING\"] = Fl(13)] = \"BF_MONSTER_FLEEING\";\n    StepFlags[StepFlags[\"BF_MONSTERS_DORMANT\"] = Fl(14)] = \"BF_MONSTERS_DORMANT\";\n    StepFlags[StepFlags[\"BF_ITEM_IS_KEY\"] = Fl(15)] = \"BF_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BF_ITEM_IDENTIFIED\"] = Fl(16)] = \"BF_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BF_ITEM_PLAYER_AVOIDS\"] = Fl(17)] = \"BF_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BF_EVERYWHERE\"] = Fl(18)] = \"BF_EVERYWHERE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE\"] = Fl(19)] = \"BF_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE_2\"] = Fl(20)] = \"BF_ALTERNATIVE_2\";\n    StepFlags[StepFlags[\"BF_BUILD_IN_WALLS\"] = Fl(21)] = \"BF_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BF_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BF_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BF_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BF_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BF_IMPREGNABLE\"] = Fl(24)] = \"BF_IMPREGNABLE\";\n    StepFlags[StepFlags[\"BF_NO_BLOCK_ORIGIN\"] = Fl(25)] = \"BF_NO_BLOCK_ORIGIN\";\n    // TODO - BF_ALLOW_IN_HALLWAY instead?\n    StepFlags[StepFlags[\"BF_NOT_IN_HALLWAY\"] = Fl(27)] = \"BF_NOT_IN_HALLWAY\";\n    StepFlags[StepFlags[\"BF_ALLOW_BOUNDARY\"] = Fl(28)] = \"BF_ALLOW_BOUNDARY\";\n    StepFlags[StepFlags[\"BF_SKELETON_KEY\"] = Fl(29)] = \"BF_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BF_KEY_DISPOSABLE\"] = Fl(30)] = \"BF_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    constructor(cfg = {}) {\n        var _a;\n        this.tile = -1;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        // public next: null = null;\n        this.id = 'n/a';\n        this.tile = (_a = cfg.tile) !== null && _a !== void 0 ? _a : -1;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        this.item = cfg.item || null;\n        this.horde = cfg.horde || null;\n        if (cfg.effect) {\n            this.effect = GWM.effect.from(cfg.effect);\n        }\n        if (this.item && this.flags & StepFlags.BF_ADOPT_ITEM) {\n            throw new Error('Cannot have blueprint step with item and BF_ADOPT_ITEM.');\n        }\n        if (this.buildAtOrigin && this.count.hi > 1) {\n            throw new Error('Cannot have count > 1 for step with BF_BUILD_AT_ORIGIN.');\n        }\n        if (this.buildAtOrigin && this.repeatUntilNoProgress) {\n            throw new Error('Cannot have BF_BUILD_AT_ORIGIN and BF_REPEAT_UNTIL_NO_PROGRESS together in a build step.');\n        }\n    }\n    get allowBoundary() {\n        return !!(this.flags & StepFlags.BF_ALLOW_BOUNDARY);\n    }\n    get notInHallway() {\n        return !!(this.flags & StepFlags.BF_NOT_IN_HALLWAY);\n    }\n    get buildInWalls() {\n        return !!(this.flags & StepFlags.BF_BUILD_IN_WALLS);\n    }\n    get buildAnywhere() {\n        return !!(this.flags & StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL);\n    }\n    get repeatUntilNoProgress() {\n        return !!(this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS);\n    }\n    get permitBlocking() {\n        return !!(this.flags & StepFlags.BF_PERMIT_BLOCKING);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags &\n            (StepFlags.BF_TREAT_AS_BLOCKING | StepFlags.BF_NO_BLOCK_ORIGIN));\n    }\n    get noBlockOrigin() {\n        return !!(this.flags & StepFlags.BF_NO_BLOCK_ORIGIN);\n    }\n    get adoptItem() {\n        return !!(this.flags & StepFlags.BF_ADOPT_ITEM);\n    }\n    get itemIsKey() {\n        return !!(this.flags & StepFlags.BF_ITEM_IS_KEY);\n    }\n    get keyIsDisposable() {\n        return !!(this.flags & StepFlags.BF_KEY_DISPOSABLE);\n    }\n    get outsourceItem() {\n        return !!(this.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE);\n    }\n    get impregnable() {\n        return !!(this.flags & StepFlags.BF_IMPREGNABLE);\n    }\n    get buildVestibule() {\n        return !!(this.flags & StepFlags.BF_BUILD_VESTIBULE);\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BF_EVERYWHERE &\n            ~StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildsInstances() {\n        return !!(this.effect ||\n            this.tile != -1 ||\n            this.item ||\n            this.horde ||\n            this.adoptItem);\n    }\n    // cellIsCandidate(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     x: number,\n    //     y: number,\n    //     distanceBound: [number, number]\n    // ) {\n    //     return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    // }\n    // distanceBound(builder: BuildData): [number, number] {\n    //     return calcDistanceBound(builder, this);\n    // }\n    // updateViewMap(builder: BuildData): void {\n    //     updateViewMap(builder, this);\n    // }\n    // build(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     adoptedItem: GWM.item.Item | null\n    // ): boolean {\n    //     return buildStep(builder, blueprint, this, adoptedItem);\n    // }\n    markCandidates(data, blueprint, candidates, distanceBound = [0, 10000]) {\n        updateViewMap(data, this);\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            if (cellIsCandidate(data, blueprint, this, i, j, distanceBound)) {\n                count++;\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return count;\n    }\n}\nexport function updateViewMap(builder, buildStep) {\n    if (buildStep.flags &\n        (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n            StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        else {\n            const fov = new GWU.fov.FOV({\n                // TileFlags.T_OBSTRUCTS_PASSABILITY |\n                //     TileFlags.T_OBSTRUCTS_VISION,\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\nexport function calcDistanceBound(builder, buildStep) {\n    const distanceBound = [0, 10000];\n    if (buildStep.flags & StepFlags.BF_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BF_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\nexport function cellIsCandidate(builder, blueprint, buildStep, x, y, distanceBound) {\n    const site = builder.site;\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (buildStep.notInHallway &&\n        GWU.xy.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n        return false;\n    }\n    // if (buildStep.noBlockOrigin) {\n    //     let ok = true;\n    //     GWU.xy.eachNeighbor(\n    //         x,\n    //         y,\n    //         (nx, ny) => {\n    //             if (nx === builder.originX && ny === builder.originY) {\n    //                 ok = false;\n    //             }\n    //         },\n    //         true\n    //     );\n    //     if (!ok) return false;\n    // }\n    // No building along the perimeter of the level if it's prohibited.\n    if ((x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1) &&\n        !buildStep.allowBoundary) {\n        return false;\n    }\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.buildAtOrigin) {\n        return x == builder.originX && y == builder.originY;\n    }\n    else if (blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY) {\n        return false;\n    }\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return false;\n    }\n    // Must be in the viewmap if the appropriate flag is set.\n    if (buildStep.flags &\n        (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n            StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]) {\n        return false;\n    }\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (!builder.distanceMap.hasXY(i, j))\n                return;\n            if (!site.blocksPathing(i, j) &&\n                distance > builder.distanceMap[i][j] + 1) {\n                distance = builder.distanceMap[i][j] + 1;\n            }\n        }, true);\n    }\n    else {\n        distance = builder.distanceMap[x][y];\n    }\n    if (distance > distanceBound[1] || // distance exceeds max\n        distance < distanceBound[0]) {\n        // distance falls short of min\n        return false;\n    }\n    if (buildStep.buildInWalls) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (!builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)) {\n            let ok = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(x, y, (newX, newY) => {\n                if (!site.hasXY(newX, newY))\n                    return;\n                if (!builder.interior[newX][newY] &&\n                    !buildStep.buildAnywhere) {\n                    return;\n                }\n                // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                if (buildStep.buildAnywhere &&\n                    !site.blocksPathing(newX, newY) &&\n                    !site.getMachine(newX, newY) &&\n                    !(newX == builder.originX && newY == builder.originY)) {\n                    ok = true;\n                }\n            }, true);\n            return ok;\n        }\n        return false;\n    }\n    else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return false;\n    }\n    else if (buildStep.buildAnywhere) {\n        if ((buildStep.item && site.blocksItems(x, y)) ||\n            site.hasCellFlag(x, y, GWM.flags.Cell.IS_CHOKEPOINT |\n                GWM.flags.Cell.IS_IN_LOOP |\n                GWM.flags.Cell.IS_IN_MACHINE)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    else if (builder.interior[x][y]) {\n        return true;\n    }\n    return false;\n}\nexport function makePersonalSpace(builder, x, y, candidates, personalSpace) {\n    let count = 0;\n    for (let i = x - personalSpace + 1; i <= x + personalSpace - 1; i++) {\n        for (let j = y - personalSpace + 1; j <= y + personalSpace - 1; j++) {\n            if (builder.site.hasXY(i, j)) {\n                if (candidates[i][j]) {\n                    candidates[i][j] = 0;\n                    ++count;\n                }\n                builder.occupied[i][j] = 1;\n            }\n        }\n    }\n    return count;\n}\n// export function buildStep(\n//     builder: BuildData,\n//     blueprint: Blueprint,\n//     buildStep: BuildStep,\n//     adoptedItem: GWM.item.Item | null\n// ): boolean {\n//     let wantCount = 0;\n//     let builtCount = 0;\n//     const site = builder.site;\n//     const candidates = GWU.grid.alloc(site.width, site.height);\n//     // Figure out the distance bounds.\n//     const distanceBound = calcDistanceBound(builder, buildStep);\n//     buildStep.updateViewMap(builder);\n//     // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n//     // Make a master map of candidate locations for this feature.\n//     let qualifyingTileCount = markCandidates(\n//         candidates,\n//         builder,\n//         blueprint,\n//         buildStep,\n//         distanceBound\n//     );\n//     if (!buildStep.generateEverywhere) {\n//         wantCount = buildStep.count.value();\n//     }\n//     if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n//         console.log(\n//             ' - Only %s qualifying tiles - want at least %s.',\n//             qualifyingTileCount,\n//             buildStep.count.lo\n//         );\n//         GWU.grid.free(candidates);\n//         return false;\n//     }\n//     let x = 0,\n//         y = 0;\n//     let success = true;\n//     let didSomething = false;\n//     do {\n//         success = true;\n//         // Find a location for the feature.\n//         if (buildStep.buildAtOrigin) {\n//             // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n//             x = builder.originX;\n//             y = builder.originY;\n//         } else {\n//             // Pick our candidate location randomly, and also strike it from\n//             // the candidates map so that subsequent instances of this same feature can't choose it.\n//             [x, y] = site.rng.matchingLoc(\n//                 candidates.width,\n//                 candidates.height,\n//                 (x, y) => candidates[x][y] > 0\n//             );\n//         }\n//         // Don't waste time trying the same place again whether or not this attempt succeeds.\n//         candidates[x][y] = 0;\n//         qualifyingTileCount--;\n//         // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n//         if (buildStep.effect) {\n//             success = site.fireEffect(buildStep.effect, x, y);\n//             didSomething = success;\n//         }\n//         // Now try to place the terrain tile, if any.\n//         if (success && buildStep.tile !== -1) {\n//             const tile = GWM.tile.get(buildStep.tile);\n//             if (\n//                 !(buildStep.flags & StepFlags.BF_PERMIT_BLOCKING) &&\n//                 (tile.blocksMove() ||\n//                     buildStep.flags & StepFlags.BF_TREAT_AS_BLOCKING)\n//             ) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y, {\n//                     machine: site.machineCount,\n//                 });\n//             }\n//             if (success) {\n//                 success = site.setTile(x, y, tile);\n//                 didSomething = didSomething || success;\n//             }\n//         }\n//         // Generate an actor, if necessary\n//         // Generate an item, if necessary\n//         if (success && buildStep.item) {\n//             const item = site.makeRandomItem(buildStep.item);\n//             if (!item) {\n//                 success = false;\n//             }\n//             if (buildStep.flags & StepFlags.BF_ITEM_IS_KEY) {\n//                 item.key = GWM.entity.makeKeyInfo(\n//                     x,\n//                     y,\n//                     !!(buildStep.flags & StepFlags.BF_KEY_DISPOSABLE)\n//                 );\n//             }\n//             if (buildStep.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE) {\n//                 success = builder.buildRandom(\n//                     Flags.BP_ADOPT_ITEM,\n//                     -1,\n//                     -1,\n//                     item\n//                 );\n//                 if (success) {\n//                     didSomething = true;\n//                 }\n//             } else {\n//                 success = site.addItem(x, y, item);\n//                 didSomething = didSomething || success;\n//             }\n//         } else if (success && buildStep.flags & StepFlags.BF_ADOPT_ITEM) {\n//             // adopt item if necessary\n//             if (!adoptedItem) {\n//                 GWU.grid.free(candidates);\n//                 throw new Error(\n//                     'Failed to build blueprint because there is no adopted item.'\n//                 );\n//             }\n//             if (buildStep.flags & StepFlags.BF_TREAT_AS_BLOCKING) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y);\n//             }\n//             if (success) {\n//                 success = site.addItem(x, y, adoptedItem);\n//                 if (success) {\n//                     didSomething = true;\n//                 } else {\n//                     console.log('- failed to add item', x, y);\n//                 }\n//             } else {\n//                 // console.log('- blocks map', x, y);\n//             }\n//         }\n//         if (success && didSomething) {\n//             // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n//             qualifyingTileCount -= makePersonalSpace(\n//                 builder,\n//                 x,\n//                 y,\n//                 candidates,\n//                 buildStep.pad\n//             );\n//             builtCount++; // we've placed an instance\n//             // Mark the feature location as part of the machine, in case it is not already inside of it.\n//             if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n//                 site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n//             }\n//             // Mark the feature location as impregnable if requested.\n//             if (buildStep.flags & StepFlags.BF_IMPREGNABLE) {\n//                 site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n//             }\n//         }\n//         // Finished with this instance!\n//     } while (\n//         qualifyingTileCount > 0 &&\n//         (buildStep.generateEverywhere ||\n//             builtCount < wantCount ||\n//             buildStep.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS)\n//     );\n//     if (success && buildStep.flags & StepFlags.BF_BUILD_VESTIBULE) {\n//         // Generate a door guard machine.\n//         // Try to create a sub-machine that qualifies.\n//         success = builder.buildRandom(\n//             Flags.BP_VESTIBULE,\n//             builder.originX,\n//             builder.originY\n//         );\n//         if (!success) {\n//             // console.log(\n//             //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n//             // );\n//             // failure! abort!\n//             GWU.grid.free(candidates);\n//             return false;\n//         }\n//         ++builtCount;\n//     }\n//     //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n//     //DEBUG logBuffer(candidates);\n//     success = builtCount > 0;\n//     GWU.grid.free(candidates);\n//     return success;\n// }\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nconst Fl = GWU.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(0)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(2)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(3)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(4)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(5)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(6)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(7)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(8)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(9)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(10)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(11)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(12)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(13)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(14)] = \"BP_NO_INTERIOR_FLAG\";\n    Flags[Flags[\"BP_NOT_IN_HALLWAY\"] = Fl(15)] = \"BP_NOT_IN_HALLWAY\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo <= 0)\n                this.size.lo = 1;\n            if (this.size.hi < this.size.lo)\n                this.size.hi = this.size.lo;\n        }\n        else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (!this.steps.some((s) => s.flags & STEP.StepFlags.BF_ADOPT_ITEM)) {\n                throw new Error('Blueprint wants to BP_ADOPT_ITEM, but has no steps with BF_ADOPT_ITEM.');\n            }\n        }\n        if (opts.id) {\n            this.id = opts.id;\n        }\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    get notInHallway() {\n        return !!(this.flags & Flags.BP_NOT_IN_HALLWAY);\n    }\n    qualifies(requiredFlags, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return false;\n        }\n        if (\n        // Must have the required flags:\n        ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickComponents(rng) {\n        const alternativeFlags = [\n            STEP.StepFlags.BF_ALTERNATIVE,\n            STEP.StepFlags.BF_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = rng.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n    fillInterior(builder) {\n        const interior = builder.interior;\n        const site = builder.site;\n        interior.fill(0);\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            return addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n        }\n        else if (this.isVestiblue) {\n            return computeVestibuleInterior(builder, this);\n            // success\n        }\n        else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n            let distanceMap = builder.distanceMap;\n            SITE.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, this.size.hi);\n            const seq = site.rng.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = this.size.value(); // Keeps track of the goal size.\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (let n = 0; n < seq.length && qualifyingTileCount < goalSize; n++) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n                    if (distanceMap[i][j] == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n                        if (site.isOccupied(i, j) ||\n                            site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            return 0;\n                        }\n                    }\n                }\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            return qualifyingTileCount;\n        }\n    }\n}\nexport function markCandidates(buildData, blueprint) {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    candidates.fill(0);\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n        candidates.update((_v, x, y) => {\n            return site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE) &&\n                blueprint.size.contains(site.getChokeCount(x, y))\n                ? 1\n                : 0;\n        });\n    }\n    else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        throw new Error('ERROR: Attempted to build a vestiblue without a location being provided.');\n    }\n    else {\n        candidates.update((_v, x, y) => {\n            if (!site.isPassable(x, y))\n                return 0;\n            if (blueprint.notInHallway) {\n                const count = GWU.xy.arcCount(x, y, (i, j) => site.isPassable(i, j));\n                return count <= 1 ? 1 : 0;\n            }\n            return 1;\n        });\n    }\n    return candidates.count((v) => v == 1);\n}\nexport function pickCandidateLoc(buildData, _blueprint) {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const randSite = site.rng.matchingLoc(site.width, site.height, (x, y) => candidates[x][y] == 1);\n    if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n        // If no suitable sites, abort.\n        return null;\n    }\n    return randSite;\n}\n// // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n// export function computeInterior(\n//     builder: BuildData,\n//     blueprint: Blueprint\n// ): boolean {\n//     let failsafe = blueprint.isRoom ? 10 : 20;\n//     let tryAgain;\n//     const interior = builder.interior;\n//     const site = builder.site;\n//     do {\n//         tryAgain = false;\n//         if (--failsafe <= 0) {\n//             // console.log(\n//             //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n//             // );\n//             return false;\n//         }\n//         let count = fillInterior(builder, blueprint);\n//         // Now make sure the interior map satisfies the machine's qualifications.\n//         if (!count) {\n//             console.debug('- no interior');\n//             tryAgain = true;\n//         } else if (!blueprint.size.contains(count)) {\n//             console.debug('- too small');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.treatAsBlocking &&\n//             SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })\n//         ) {\n//             console.debug('- blocks');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.requireBlocking &&\n//             SITE.siteDisruptedSize(site, interior) < 100\n//         ) {\n//             console.debug('- does not block');\n//             tryAgain = true;\n//         }\n//         // Now loop if necessary.\n//     } while (tryAgain);\n//     // console.log(tryAgain, failsafe);\n//     return true;\n// }\nexport function computeVestibuleInterior(builder, blueprint) {\n    let success = true;\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n    if (blueprint.size.hi == 1) {\n        interior[builder.originX][builder.originY] = 1;\n        return 1;\n    }\n    // If this is a wall - it is really an error (maybe manually trying a build location?)\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    if (doorChokeCount > 10000) {\n        return 0;\n    }\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(builder.originX, builder.originY, (x, y) => {\n        const count = site.getChokeCount(x, y);\n        if (count == doorChokeCount)\n            return;\n        if (count > 10000)\n            return;\n        if (count < 0)\n            return;\n        vestibuleLoc[0] = x;\n        vestibuleLoc[1] = y;\n        vestibuleChokeCount = count;\n    }, true);\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(vestibuleLoc[0], vestibuleLoc[1], (_v, i, j) => {\n            if (site.isOccupied(i, j)) {\n                success = false;\n            }\n            return site.getChokeCount(i, j) === vestibuleChokeCount;\n        }, 1);\n        if (success && blueprint.size.contains(count))\n            return roomSize;\n    }\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(site.rng); // Keeps track of the goal size.\n    const distMap = builder.distanceMap;\n    SITE.computeDistanceMap(site, distMap, builder.originX, builder.originY, blueprint.size.hi);\n    const cells = site.rng.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (let i = 0; i < cells.length && qualifyingTileCount < wantSize; ++i) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n            const dist = distMap[x][y];\n            if (dist != k)\n                continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount)\n                continue;\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n    return qualifyingTileCount;\n}\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(builder, startX, startY) {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n    let count = 1;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY))\n            continue;\n        if (interior[newX][newY])\n            continue; // already done\n        if (site.isOccupied(newX, newY) ||\n            (site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE) &&\n                !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_GATE_SITE))) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return 0;\n        }\n        if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE)) {\n            let additional = addTileToInteriorAndIterate(builder, newX, newY);\n            if (additional <= 0)\n                return 0;\n            count += additional;\n        }\n    }\n    return count;\n}\nexport function prepareInterior(builder, blueprint) {\n    const interior = builder.interior;\n    const site = builder.site;\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        expandMachineInterior(builder, 1);\n    }\n    else if (blueprint.openInterior) {\n        expandMachineInterior(builder, 4);\n    }\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x, y, SITE.FLOOR);\n        });\n    }\n    // If requested, purge pathing blockers -- no traps allowed.\n    if (blueprint.purgeBlockers) {\n        interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            if (site.blocksPathing(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n        });\n    }\n    // If requested, purge the liquid layer in the interior -- no liquids allowed.\n    if (blueprint.purgeLiquids) {\n        interior.forEach((v, x, y) => {\n            if (v && site.isAnyLiquid(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n        });\n    }\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not valid x,y\n                if (interior[i][j])\n                    return; // is part of machine\n                if (site.isWall(i, j))\n                    return; // is already a wall (of some sort)\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return; // is a door site\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE))\n                    return; // is part of a machine\n                if (!site.blocksPathing(i, j))\n                    return; // is not a blocker for the player (water?)\n                site.setTile(i, j, SITE.WALL);\n            }, false);\n        });\n    }\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (interior[i][j])\n                    return;\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(i, j, GWM.flags.Cell.IMPREGNABLE);\n            }, false);\n        });\n    }\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v)\n            return;\n        if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, SITE.DOOR);\n        }\n    });\n}\nexport function expandMachineInterior(builder, minimumInteriorNeighbors = 1) {\n    let madeChange;\n    const interior = builder.interior;\n    const site = builder.site;\n    do {\n        madeChange = false;\n        interior.forEach((_v, x, y) => {\n            // if (v && site.isDoor(x, y)) {\n            //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n            //     return;\n            // }\n            if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE))\n                return;\n            if (!site.blocksPathing(x, y))\n                return;\n            let nbcount = 0;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not in map\n                if (interior[i][j] && !site.blocksPathing(i, j)) {\n                    ++nbcount; // in machine and open tile\n                }\n            }, false);\n            if (nbcount < minimumInteriorNeighbors)\n                return;\n            nbcount = 0;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // not on map\n                if (interior[i][j])\n                    return; // already part of machine\n                if (!site.isWall(i, j) ||\n                    site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                    ++nbcount; // tile is not a wall or is in a machine\n                }\n            }, false);\n            if (nbcount)\n                return;\n            // Eliminate this obstruction; welcome its location into the machine.\n            madeChange = true;\n            interior[x][y] = 1;\n            if (site.blocksPathing(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (site.isSet(i, j))\n                    return;\n                site.setTile(i, j, SITE.WALL);\n            });\n        });\n    } while (madeChange);\n}\n///////////////////////////\n// INSTALL\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth, rng) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags) && b.frequency(depth));\n    rng = rng || GWU.rng.random;\n    return rng.item(matches);\n}\nexport function get(id) {\n    if (id instanceof Blueprint)\n        return id;\n    return blueprints[id];\n}\nexport function make(config) {\n    // if (!config.id) throw new Error('id is required to make Blueprint.');\n    return new Blueprint(config);\n}\n","import * as GWU from 'gw-utils';\nimport { Flags } from './blueprint';\nimport { StepFlags } from './buildStep';\nexport class ConsoleLogger {\n    async onError(_data, error) {\n        console.log(`onBuildError - error: ${error}`);\n    }\n    async onBlueprintPick(_data, blueprint, flags, depth) {\n        console.log(`onBlueprintPick - ${blueprint.id}, depth = ${depth}, matchingFlags = ${GWU.flag.toString(Flags, flags)}`);\n    }\n    async onBlueprintCandidates(data, blueprint) {\n        const label = `onBlueprintCandidates - ${blueprint.id}`;\n        console.group(label);\n        data.candidates.dump();\n        console.groupEnd();\n    }\n    async onBlueprintStart(data, blueprint) {\n        console.group(`onBlueprintStart - ${blueprint.id} @ ${data.originX},${data.originY} : stepCount: ${blueprint.steps.length}, size: [${blueprint.size.toString()}], flags: ${GWU.flag.toString(Flags, blueprint.flags)}`);\n    }\n    async onBlueprintInterior(data, blueprint) {\n        console.group(`onBlueprintInterior - ${blueprint.id}`);\n        data.interior.dump();\n        console.groupEnd();\n    }\n    async onBlueprintFail(data, blueprint, error) {\n        console.log(`onBlueprintFail - ${blueprint.id} @ ${data.originX},${data.originY} : error: ${error}`);\n        console.groupEnd();\n    }\n    async onBlueprintSuccess(data, blueprint) {\n        console.log(`onBlueprintSuccess - ${blueprint.id} @ ${data.originX},${data.originY}`);\n        console.groupEnd();\n    }\n    async onStepStart(data, blueprint, step) {\n        console.group(`onStepStart - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : count: [${step.count.toString()}], flags: ${GWU.flag.toString(StepFlags, step.flags)}`);\n    }\n    async onStepCandidates(data, blueprint, step, candidates, wantCount) {\n        const haveCount = candidates.count((v) => v == 1);\n        console.log(`onStepCandidates - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : wantCount: ${wantCount}, have: ${haveCount}`);\n        candidates.dump();\n    }\n    async onStepInstanceSuccess(_data, _blueprint, _step, x, y) {\n        console.log(`onStepInstance @ ${x},${y}`);\n    }\n    async onStepInstanceFail(_data, _blueprint, _step, x, y, error) {\n        console.log(`onStepInstanceFail @ ${x},${y} - error: ${error}`);\n    }\n    async onStepSuccess(data, blueprint, step) {\n        console.log(`onStepSuccess - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : count: [${step.count.toString()}], flags: ${GWU.flag.toString(StepFlags, step.flags)}`);\n        console.groupEnd();\n    }\n    async onStepFail(data, blueprint, step, error) {\n        console.log(`onStepFail - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : error : ${error}`);\n        console.groupEnd();\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\nimport * as STEP from './buildStep';\nimport { BuildData } from './data';\nimport { NullLogger } from './logger';\nimport { ConsoleLogger } from './consoleLogger';\nexport class Builder {\n    constructor(map, options = {}) {\n        this.blueprints = null;\n        this.data = new BuildData(map, options);\n        if (options.blueprints) {\n            if (!Array.isArray(options.blueprints)) {\n                options.blueprints = Object.values(options.blueprints);\n            }\n            this.blueprints = options.blueprints.map((v) => BLUE.get(v));\n        }\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        }\n        else {\n            this.log = options.log || new NullLogger();\n        }\n    }\n    _pickRandom(requiredFlags) {\n        const blueprints = this.blueprints || Object.values(BLUE.blueprints);\n        const weights = blueprints.map((b) => {\n            if (!b.qualifies(requiredFlags))\n                return 0;\n            return b.frequency(this.data.depth);\n        });\n        const index = this.data.map.rng.weighted(weights);\n        return blueprints[index] || null;\n    }\n    async buildRandom(requiredMachineFlags = BLUE.Flags.BP_ROOM, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        data.site.analyze();\n        let tries = 0;\n        while (tries < 10) {\n            const blueprint = this._pickRandom(requiredMachineFlags);\n            if (!blueprint) {\n                await this.log.onError(data, `Failed to find matching blueprint: requiredMachineFlags : ${GWU.flag.toString(BLUE.Flags, requiredMachineFlags)}, depth: ${data.depth}`);\n                return false;\n            }\n            await this.log.onBlueprintPick(data, blueprint, requiredMachineFlags, data.depth);\n            if (await this._buildAt(blueprint, x, y, adoptedItem)) {\n                return true;\n            }\n            ++tries;\n        }\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return false;\n    }\n    async build(blueprint, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        if (typeof blueprint === 'string') {\n            const id = blueprint;\n            blueprint = BLUE.blueprints[id];\n            if (!blueprint)\n                throw new Error('Failed to find blueprint - ' + id);\n        }\n        data.site.analyze();\n        return await this._buildAt(blueprint, x, y, adoptedItem);\n    }\n    async _buildAt(blueprint, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        if (x >= 0 && y >= 0) {\n            return await this._build(blueprint, x, y, adoptedItem);\n        }\n        let count = await this._markCandidates(blueprint);\n        if (!count) {\n            return false;\n        }\n        let tries = 20; // TODO - Make property of Blueprint\n        while (count-- && tries--) {\n            const loc = BLUE.pickCandidateLoc(data, blueprint) || false;\n            if (loc) {\n                if (await this._build(blueprint, loc[0], loc[1], adoptedItem)) {\n                    return true;\n                }\n            }\n        }\n        await this.log.onBlueprintFail(data, blueprint, 'No suitable locations found to build blueprint.');\n        return false;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    async _build(blueprint, originX, originY, adoptedItem = null) {\n        const data = this.data;\n        data.reset(originX, originY);\n        await this.log.onBlueprintStart(data, blueprint, adoptedItem);\n        if (!(await this._computeInterior(blueprint))) {\n            return false;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const snapshot = data.site.snapshot();\n        data.machineNumber = data.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        BLUE.prepareInterior(data, blueprint);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        data.calcDistances(blueprint.size.hi);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = blueprint.pickComponents(data.site.rng);\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            if (!(await this._buildStep(blueprint, component, adoptedItem))) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                await this.log.onBlueprintFail(data, blueprint, `Failed to build step ${index + 1}.`);\n                snapshot.restore();\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return false;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(data.site, data.machineNumber);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        await this.log.onBlueprintSuccess(data, blueprint);\n        snapshot.cancel();\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return true;\n    }\n    async _markCandidates(blueprint) {\n        const data = this.data;\n        const count = BLUE.markCandidates(data, blueprint);\n        if (count <= 0) {\n            await this.log.onBlueprintFail(data, blueprint, 'No suitable candidate locations found.');\n            return 0;\n        }\n        await this.log.onBlueprintCandidates(data, blueprint);\n        return count;\n    }\n    async _computeInterior(blueprint) {\n        let fail = null;\n        const data = this.data;\n        let count = blueprint.fillInterior(data);\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (!count) {\n            fail = 'Interior error.';\n        }\n        else if (!blueprint.size.contains(count)) {\n            fail = `Interior wrong size - have: ${count}, want: ${blueprint.size.toString()}`;\n        }\n        else if (blueprint.treatAsBlocking &&\n            SITE.siteDisruptedBy(data.site, data.interior, {\n                machine: data.site.machineCount,\n            })) {\n            fail = 'Interior blocks map.';\n        }\n        else if (blueprint.requireBlocking &&\n            SITE.siteDisruptedSize(data.site, data.interior) < 100) {\n            fail = 'Interior does not block enough cells.';\n        }\n        if (!fail) {\n            await this.log.onBlueprintInterior(data, blueprint);\n            return true;\n        }\n        await this.log.onBlueprintFail(data, blueprint, fail);\n        return false;\n    }\n    async _buildStep(blueprint, buildStep, adoptedItem) {\n        let wantCount = 0;\n        let builtCount = 0;\n        const data = this.data;\n        const site = data.site;\n        await this.log.onStepStart(data, blueprint, buildStep, adoptedItem);\n        // console.log(\n        //     'buildComponent',\n        //     blueprint.id,\n        //     blueprint.steps.indexOf(buildStep)\n        // );\n        // Figure out the distance bounds.\n        const distanceBound = STEP.calcDistanceBound(data, buildStep);\n        // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n        // Make a master map of candidate locations for this feature.\n        let qualifyingTileCount = 0;\n        if (buildStep.buildVestibule) {\n            // Generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n            let success = await this.buildRandom(BLUE.Flags.BP_VESTIBULE, data.originX, data.originY);\n            if (!success) {\n                await this.log.onStepFail(data, blueprint, buildStep, 'Failed to build vestibule');\n                return false;\n            }\n        }\n        // If we are just building a vestibule, then we can exit here...\n        if (!buildStep.buildsInstances) {\n            await this.log.onStepSuccess(data, blueprint, buildStep);\n            return true;\n        }\n        const candidates = GWU.grid.alloc(site.width, site.height);\n        let didSomething = false;\n        do {\n            didSomething = false;\n            if (buildStep.buildAtOrigin) {\n                candidates[data.originX][data.originY] = 1;\n                qualifyingTileCount = 1;\n                wantCount = 1;\n            }\n            else {\n                qualifyingTileCount = buildStep.markCandidates(data, blueprint, candidates, distanceBound);\n                if (buildStep.generateEverywhere ||\n                    buildStep.repeatUntilNoProgress) {\n                    wantCount = qualifyingTileCount;\n                }\n                else {\n                    wantCount = buildStep.count.value(site.rng);\n                }\n                await this.log.onStepCandidates(data, blueprint, buildStep, candidates, wantCount);\n                if (!qualifyingTileCount ||\n                    qualifyingTileCount < buildStep.count.lo) {\n                    await this.log.onStepFail(data, blueprint, buildStep, `Blueprint ${blueprint.id}, step ${blueprint.steps.indexOf(buildStep)} - Only ${qualifyingTileCount} qualifying tiles - want ${buildStep.count.toString()}.`);\n                    return false;\n                }\n            }\n            let x = 0, y = 0;\n            while (qualifyingTileCount > 0 && builtCount < wantCount) {\n                // Find a location for the feature.\n                if (buildStep.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = data.originX;\n                    y = data.originY;\n                }\n                else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = this.data.map.rng.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] > 0);\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n                const snapshot = data.site.snapshot();\n                if (await this._buildStepInstance(blueprint, buildStep, x, y, adoptedItem)) {\n                    // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                    qualifyingTileCount -= STEP.makePersonalSpace(data, x, y, candidates, buildStep.pad);\n                    builtCount++; // we've placed an instance\n                    didSomething = true;\n                    snapshot.cancel(); // This snapshot is useless b/c we made changes...\n                }\n                else {\n                    snapshot.restore(); // need to undo any changes...\n                }\n                // Finished with this instance!\n            }\n        } while (didSomething && buildStep.repeatUntilNoProgress);\n        GWU.grid.free(candidates);\n        if (!buildStep.count.contains(builtCount) &&\n            !buildStep.generateEverywhere &&\n            !buildStep.repeatUntilNoProgress) {\n            await this.log.onStepFail(data, blueprint, buildStep, `Failed to build enough instances - want: ${buildStep.count.toString()}, built: ${builtCount}`);\n            return false;\n        }\n        await this.log.onStepSuccess(data, blueprint, buildStep);\n        return true;\n    }\n    async _buildStepInstance(blueprint, buildStep, x, y, adoptedItem = null) {\n        let success = true;\n        let didSomething = true;\n        const data = this.data;\n        const site = data.site;\n        if (success && buildStep.treatAsBlocking) {\n            // Yes, check for blocking.\n            const options = {\n                machine: site.machineCount,\n            };\n            if (buildStep.noBlockOrigin) {\n                options.updateWalkable = (g) => {\n                    g[data.originX][data.originY] = 1;\n                    return true;\n                };\n            }\n            if (SITE.siteDisruptedByXY(site, x, y, options)) {\n                await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'instance blocks map');\n                success = false;\n            }\n        }\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (success && buildStep.effect) {\n            success = site.buildEffect(buildStep.effect, x, y);\n            didSomething = success;\n            if (!success) {\n                this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to build effect - ' +\n                    JSON.stringify(buildStep.effect));\n            }\n        }\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile !== -1) {\n            const tile = GWM.tile.get(buildStep.tile);\n            if (!buildStep.permitBlocking &&\n                tile.blocksMove() &&\n                !buildStep.treatAsBlocking // already did treatAsBlocking\n            ) {\n                if (SITE.siteDisruptedByXY(site, x, y, {\n                    machine: site.machineCount,\n                })) {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'tile blocks site');\n                    success = false;\n                }\n            }\n            if (success) {\n                success = site.setTile(x, y, tile);\n                didSomething = didSomething || success;\n                if (!success) {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'failed to set tile - ' + tile.id);\n                }\n            }\n        }\n        // Generate an actor, if necessary\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const item = site.makeRandomItem(buildStep.item);\n            if (!item) {\n                success = false;\n                await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to make random item - ' +\n                    JSON.stringify(buildStep.item));\n            }\n            else {\n                if (buildStep.itemIsKey) {\n                    item.key = GWM.entity.makeKeyInfo(x, y, !!buildStep.keyIsDisposable);\n                }\n                if (buildStep.outsourceItem) {\n                    success = await this.buildRandom(BLUE.Flags.BP_ADOPT_ITEM, -1, -1, item);\n                    if (success) {\n                        didSomething = true;\n                    }\n                    else {\n                        await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to build machine to adopt item - ' +\n                            item.kind.id);\n                    }\n                }\n                else {\n                    success = site.addItem(x, y, item);\n                    didSomething = didSomething || success;\n                    if (!success) {\n                        await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to add item to site - ' + item.kind.id);\n                    }\n                }\n            }\n        }\n        else if (success && buildStep.adoptItem) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error('Failed to build blueprint because there is no adopted item.');\n            }\n            if (success) {\n                success = site.addItem(x, y, adoptedItem);\n                if (success) {\n                    didSomething = true;\n                }\n                else {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to add adopted item to site - ' +\n                        adoptedItem.kind.id);\n                }\n            }\n        }\n        if (success && didSomething) {\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!blueprint.noInteriorFlag) {\n                site.setMachine(x, y, data.machineNumber, blueprint.isRoom);\n            }\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.impregnable) {\n                site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            }\n            await this.log.onStepInstanceSuccess(data, blueprint, buildStep, x, y);\n        }\n        else if (didSomething) {\n            // roll back any changes?\n        }\n        return success && didSomething;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as LEVEL from './digger';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GWU.object.setOptions(this.config, options);\n        if (this.config.seed) {\n            GWU.rng.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.rng.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GWU.rng.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GWU.xy.distanceBetween(startLoc[0], startLoc[1], x, y) >\n                    minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    async getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            seed: this.seeds[id],\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    async makeLevel(id, opts, cb) {\n        const digger = new LEVEL.Digger(opts);\n        const result = await digger.create(this.config.width, this.config.height, cb);\n        if (!GWU.xy.equalsXY(digger.endLoc, opts.endLoc) ||\n            !GWU.xy.equalsXY(digger.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [digger.startLoc, digger.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["_a","_b","NOTHING","GWM","tile","get","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","DIRS","GWU","xy","directionOfDoorSite","site","x","y","dir","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","hasXY","isFloor","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","height","w","width","isDiggable","isSet","push","doorSites","loc","rng","item","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","v","getTileIndex","setTile","fillCostGrid","costGrid","update","_v","isPassable","path","OBSTRUCTION","siteDisruptedByXY","options","_c","machine","arcCount","blockingGrid","grid","alloc","result","siteDisruptedBy","free","walkableGrid","disrupts","blockingX","blockingY","isStairs","getMachine","updateWalkable","first","floodFill","siteDisruptedSize","blockingToMapX","blockingToMapY","lakeX","lakeY","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","clearInteriorFlag","hasCellFlag","flags","Cell","IS_WIRED","IS_CIRCUIT_BREAKER","setMachine","GridSite","this","random","tiles","doors","fill","dump","seed","isBoundaryXY","isDoor","isBridge","isShallow","DIG.NOTHING","DIG.FLOOR","DIG.DOOR","DIG.SECRET_DOOR","DIG.BRIDGE","DIG.WALL","DIG.IMPREGNABLE","isNothing","isWall","isDeep","blocksPathing","DIG.UP_STAIRS","DIG.DOWN_STAIRS","DIG.DEEP","DIG.SHALLOW","Tile","obj","Error","_x","_y","Utils.directionOfDoorSite","Flags","MapSnapshot","snap","machineCount","needsAnalysis","isUsed","snapshot","snapshots","revertMapTo","cancel","release","MapSite","map","SnapshotManager","flag","cellInfo","cell","setCellFlag","clearCellFlag","hasTile","opts","highestPriorityTile","cells","forEach","c","clear","hasItem","tags","makeRandom","forceItem","hasActor","blocksMove","blocksVision","hasEntityFlag","Entity","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","hasTileFlag","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","isEmpty","T_BRIDGE","T_IS_DOOR","L_SECRETLY_PASSABLE","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","takeNew","chokeCount","count","analyze","effect","fireSync","machineId","id","isRoom","IS_IN_MACHINE","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","Hall","Bounds","super","dx","dy","d","makeHall","dirIndex","hallLength","hallWidth","abs","Room","hall","cx","floor","cy","translate","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","make","RoomDigger","_setOptions","carve","length","every","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","weighted","room","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","DOWN","Cross","SymmetricalCross","minorWidth","minorHeight","x2","y2","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickWidth","clamp","Range","weights","Number","parseInt","_pickWidth","pickLength","lengths","UP","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.makeHall","lower","higher","actual","startX","startY","halls","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","bind","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","CLOCK_DIRS","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","SITE.DOOR","Digger","fails","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","object","setOptions","SITE.GridSite","args","Map","SITE.MapSite","_create","cb","t","addFirstRoom","updateDoorDirs","maxFails","addRoom","shuffle","addLoops","addLakes","addBridges","addStairs","finish","number","setSeed","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","roomSite","_makeRoomSite","getDigger","_attachRoomAtLoc","HALL.dig","_attachRoom","len","getDoorDir","oppDir","_roomFitsAt","SITE.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksDiagonal","boundaryTile","SITE.WALL","BuildData","distance25","distance75","machineNumber","depth","interior","occupied","viewMap","candidates","maxSize","SITE.computeDistanceMap","qualifyingTileCount","distances","dist","NullLogger","Fl","fl","StepFlags","BuildStep","cfg","pad","horde","from","BF_ADOPT_ITEM","buildAtOrigin","repeatUntilNoProgress","allowBoundary","BF_ALLOW_BOUNDARY","notInHallway","BF_NOT_IN_HALLWAY","buildInWalls","BF_BUILD_IN_WALLS","buildAnywhere","BF_BUILD_ANYWHERE_ON_LEVEL","BF_REPEAT_UNTIL_NO_PROGRESS","permitBlocking","BF_PERMIT_BLOCKING","treatAsBlocking","BF_TREAT_AS_BLOCKING","BF_NO_BLOCK_ORIGIN","noBlockOrigin","adoptItem","itemIsKey","BF_ITEM_IS_KEY","keyIsDisposable","BF_KEY_DISPOSABLE","outsourceItem","BF_OUTSOURCE_ITEM_TO_MACHINE","impregnable","BF_IMPREGNABLE","buildVestibule","BF_BUILD_VESTIBULE","generateEverywhere","BF_EVERYWHERE","BF_BUILD_AT_ORIGIN","buildsInstances","data","blueprint","distanceBound","updateViewMap","cellIsCandidate","builder","buildStep","BF_IN_VIEW_OF_ORIGIN","BF_IN_PASSABLE_VIEW_OF_ORIGIN","fov","FOV","isBlocked","calculate","calcDistanceBound","BF_NEAR_ORIGIN","BF_FAR_FROM_ORIGIN","distance","eachNeighbor","cellMachine","ok","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","makePersonalSpace","personalSpace","Blueprint","steps","split","trim","frequency","size","lo","STEP.BuildStep","BP_ADOPT_ITEM","some","s","STEP.StepFlags","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","BP_NOT_IN_HALLWAY","requiredFlags","want","includes","alternativeFlags","BF_ALTERNATIVE","BF_ALTERNATIVE_2","keepFeature","totalFreq","randIndex","filter","_f","addTileToInteriorAndIterate","doorChokeCount","getChokeCount","vestibuleLoc","vestibuleChokeCount","roomSize","contains","isOccupied","wantSize","distMap","computeVestibuleInterior","goalSize","n","pickCandidateLoc","buildData","_blueprint","randSite","startChokeCount","IS_GATE_SITE","additional","expandMachineInterior","minimumInteriorNeighbors","madeChange","nbcount","blueprints","ConsoleLogger","_data","error","console","log","toString","label","group","groupEnd","step","indexOf","wantCount","haveCount","_step","matches","values","b","qualifies","BLUE.get","BLUE.blueprints","requiredMachineFlags","BLUE.Flags","adoptedItem","_pickRandom","onError","onBlueprintPick","_buildAt","_build","_markCandidates","BLUE.pickCandidateLoc","onBlueprintFail","reset","onBlueprintStart","_computeInterior","nextMachineId","isSecretDoor","BLUE.prepareInterior","calcDistances","components","pickComponents","component","_buildStep","restore","SITE.clearInteriorFlag","onBlueprintSuccess","BLUE.markCandidates","onBlueprintCandidates","fail","fillInterior","SITE.siteDisruptedBy","SITE.siteDisruptedSize","onBlueprintInterior","builtCount","onStepStart","STEP.calcDistanceBound","buildRandom","onStepFail","onStepSuccess","markCandidates","onStepCandidates","_buildStepInstance","STEP.makePersonalSpace","g","SITE.siteDisruptedByXY","onStepInstanceFail","buildEffect","JSON","stringify","makeRandomItem","entity","makeKeyInfo","kind","addItem","onStepInstanceSuccess","levels","seeds","stairLocs","initSeeds","initStairLocs","stairDistance","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","LEVEL.Digger","equalsXY"],"mappings":"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"}