{"version":3,"file":"gw-dig.min.js","sources":["../js/site/utils.js","../js/site/digSite.js","../js/site/buildSite.js","../js/types.js","../js/room.js","../js/hall.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/level.js","../js/blueprint/data.js","../js/blueprint/logger.js","../js/blueprint/buildStep.js","../js/blueprint/blueprint.js","../js/blueprint/consoleLogger.js","../js/blueprint/builder.js","../js/dungeon.js"],"sourcesContent":["import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\n// import * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = GWU.rng.random.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = GWU.rng.random.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = GWU.rng.random.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GWU.xy.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n}\nexport function siteDisruptedByXY(site, x, y, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    if (GWU.xy.arcCount(x, y, (i, j) => {\n        return site.isPassable(i, j);\n    }) <= 1)\n        return false;\n    const blockingGrid = GWU.grid.alloc(site.width, site.height);\n    blockingGrid[x][y] = 1;\n    const result = siteDisruptedBy(site, blockingGrid, options);\n    GWU.grid.free(blockingGrid);\n    return result;\n}\nexport function siteDisruptedBy(site, blockingGrid, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + options.offsetX;\n        const lakeY = j + options.offsetY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GWU.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GWU.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GWU.grid.free(costGrid);\n}\nexport function clearInteriorFlag(site, machine) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine &&\n                !site.hasCellFlag(i, j, GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","var _a, _b;\nimport * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as Utils from './utils';\nexport const NOTHING = GWM.tile.get('NULL').index;\nexport const FLOOR = GWM.tile.get('FLOOR').index;\nexport const DOOR = GWM.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GWM.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GWM.tile.get('WALL').index;\nexport const DEEP = GWM.tile.get('LAKE').index;\nexport const SHALLOW = GWM.tile.get('SHALLOW').index;\nexport const BRIDGE = GWM.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GWM.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GWM.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GWM.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\nexport class GridSite {\n    constructor(width, height) {\n        this.seed = 0;\n        this.tiles = GWU.grid.alloc(width, height);\n        this.doors = GWU.grid.alloc(width, height);\n    }\n    free() {\n        GWU.grid.free(this.tiles);\n        GWU.grid.free(this.doors);\n    }\n    clear() {\n        this.tiles.fill(0);\n        this.doors.fill(0);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === WALL || v === IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === UP_STAIRS || v === DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    getMachine(_x, _y) {\n        return 0;\n    }\n    updateDoorDirs() {\n        this.doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x, y) {\n        return this.doors[x][y];\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as Utils from './utils';\nconst Flags = GWM.flags.Cell;\nexport class MapSite {\n    constructor(map) {\n        this.machineCount = 0;\n        this.needsAnalysis = true;\n        this.map = map;\n        this.doors = GWU.grid.alloc(map.width, map.height);\n    }\n    get seed() {\n        return this.map.seed;\n    }\n    set seed(v) {\n        this.map.seed = v;\n    }\n    get width() {\n        return this.map.width;\n    }\n    get height() {\n        return this.map.height;\n    }\n    hasXY(x, y) {\n        return this.map.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.map.isBoundaryXY(x, y);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.map.cellInfo(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).clearCellFlag(flag);\n    }\n    hasTile(x, y, tile) {\n        return this.map.cellInfo(x, y).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        this.needsAnalysis = true;\n        return this.map.setTile(x, y, tile, opts);\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.map.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    clear() {\n        this.needsAnalysis = true;\n        this.map.cells.forEach((c) => c.clear());\n    }\n    hasItem(x, y) {\n        return this.map.cellInfo(x, y).hasItem();\n    }\n    makeRandomItem(tags) {\n        return GWM.item.makeRandom(tags);\n    }\n    addItem(x, y, item) {\n        this.needsAnalysis = true;\n        return this.map.forceItem(x, y, item);\n    }\n    hasActor(x, y) {\n        return this.map.hasActor(x, y);\n    }\n    blocksMove(x, y) {\n        return this.map.cellInfo(x, y).blocksMove();\n    }\n    blocksVision(x, y) {\n        return this.map.cellInfo(x, y).blocksVision();\n    }\n    blocksDiagonal(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return (info.hasEntityFlag(GWM.flags.Entity.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GWM.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isWall(x, y) {\n        return this.map.cellInfo(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.map.cellInfo(x, y).isStairs();\n    }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.map.cell(x, y).isEmpty();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.isEmpty())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.map.cell(x, y).isEmpty();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    isDeep(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (!!cell.depthTile(GWM.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (cell.hasDepthTile(GWM.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    isPassable(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return !(info.blocksMove() || info.blocksPathing());\n    }\n    // tileBlocksMove(tile: number): boolean {\n    //     return GWM.tile.get(tile).blocksMove();\n    // }\n    backup() {\n        const site = new MapSite(this.map.clone());\n        site.machineCount = this.machineCount;\n        site.needsAnalysis = this.needsAnalysis;\n        return site;\n    }\n    restore(backup) {\n        this.map.copy(backup.map);\n        this.machineCount = backup.machineCount;\n        this.needsAnalysis = backup.needsAnalysis;\n    }\n    free() {\n        GWU.grid.free(this.doors);\n    }\n    getChokeCount(x, y) {\n        return this.map.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.map.cell(x, y).chokeCount = count;\n    }\n    analyze() {\n        if (this.needsAnalysis) {\n            GWM.map.analyze(this.map);\n        }\n        this.needsAnalysis = false;\n    }\n    buildEffect(effect, x, y) {\n        this.needsAnalysis = true;\n        return GWM.effect.fireSync(effect, this.map, x, y);\n    }\n    nextMachineId() {\n        return ++this.machineCount;\n    }\n    getMachine(x, y) {\n        return this.map.cell(x, y).machineId;\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).machineId = id;\n        if (id == 0) {\n            this.map.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.map.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n    updateDoorDirs() {\n        this.doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x, y) {\n        return this.doors[x][y];\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Hall extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport function makeHall(loc, dirIndex, hallLength, hallWidth = 1) {\n    const dir = GWU.xy.DIRS[dirIndex];\n    const x = Math.min(loc[0], loc[0] + dir[0] * (hallLength - 1));\n    const y = Math.min(loc[1], loc[1] + dir[1] * (hallLength - 1));\n    const width = Math.abs(dir[0] * hallLength) || hallWidth;\n    const height = Math.abs(dir[1] * hallLength) || hallWidth;\n    return new Hall(x, y, width, height);\n}\nexport class Room extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = GWU.rng.random.item.bind(GWU.rng.random, choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = GWU.rng.random.weighted.bind(GWU.rng.random, choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom();\n        const room = rooms[id];\n        if (!room) {\n            GWU.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GWU.blob.Blob({\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * GWU.rng.random.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * GWU.rng.random.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX +\n            GWU.rng.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            GWU.rng.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * GWU.rng.random.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * GWU.rng.random.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const ringMinWidth = this.options.ringMinWidth.value();\n        const holeMinSize = this.options.holeMinSize.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            GWU.rng.random.chance(this.options.holeChance.value())) {\n            GWU.xy.forCircle(x, y, GWU.rng.random.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value();\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = GWU.rng.random.range(minX, maxX);\n            y = GWU.rng.random.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(opts) {\n    if (typeof opts === 'number')\n        opts = { width: opts };\n    opts.width = opts.width || 1;\n    return GWU.clamp(_pickWidth(opts.width), 1, 3);\n}\nfunction _pickWidth(width) {\n    if (!width)\n        return 1;\n    if (typeof width === 'number')\n        return width;\n    if (width === undefined)\n        return 1;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        width = GWU.rng.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GWU.range.make(width).value();\n    }\n    else if (width instanceof GWU.range.Range) {\n        width = width.value();\n    }\n    else {\n        const weights = width;\n        width = Number.parseInt(GWU.rng.random.weighted(weights));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths) {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value();\n    }\n    else {\n        return lengths[0].value();\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = GWU.rng.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = GWU.rng.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: GWU.range.make(1),\n            length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = GWU.range.make(options.width);\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n        if (!GWU.rng.random.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = this.config.width.value();\n        const length = pickLength(dir, this.config.length);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = TYPES.makeHall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GWU.xy.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = TYPES.makeHall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        // hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = GWU.rng.random.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GWU.blob.Blob({\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = GWU.rng.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = GWU.rng.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GWU.xy.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n        const seq = GWU.rng.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GWU.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc = null;\n        let downLoc = null;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = GWU.rng.random.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = GWU.rng.random.matchingLocNear(GWU.xy.x(start), GWU.xy.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GWU.rng.random.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = GWU.rng.random.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GWU.rng.random.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = GWU.rng.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = GWU.rng.random.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = GWU.rng.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GWU.xy.distanceBetween(x, y, downLoc[0], downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = GWU.rng.random.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = GWU.rng.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = GWU.rng.random.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = GWU.rng.random.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GWU.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n            doorChance: 50,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = GWU.rng.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = GWU.rng.random.chance(this.options.doorChance)\n                                ? SITE.DOOR\n                                : SITE.FLOOR;\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nexport class Level {\n    constructor(options = {}) {\n        var _a, _b;\n        this.seed = 0;\n        this.rooms = {};\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.seed = options.seed || GWU.rng.random.number();\n        GWU.object.setOptions(this.rooms, options.rooms);\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        }\n        else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        }\n        else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        }\n        else {\n            if (options.loops === true)\n                options.loops = {};\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                (_a = options.loops.doorChance) !== null && _a !== void 0 ? _a : (_b = options.doors) === null || _b === void 0 ? void 0 : _b.chance;\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        }\n        else {\n            if (options.lakes === true)\n                options.lakes = {};\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        }\n        else {\n            if (options.bridges === true)\n                options.bridges = {};\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        }\n        else {\n            if (options.stairs === true)\n                options.stairs = {};\n            GWU.object.setOptions(this.stairs, options.stairs);\n        }\n        this.startLoc = options.startLoc || [-1, -1];\n        this.endLoc = options.endLoc || [-1, -1];\n    }\n    _makeSite(width, height) {\n        return new SITE.GridSite(width, height);\n    }\n    create(...args) {\n        if (args.length == 1 && args[0] instanceof GWM.map.Map) {\n            const map = args[0];\n            this.site = new SITE.MapSite(map);\n        }\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            this.site = new SITE.GridSite(width, height);\n        }\n        const result = this._create(this.site);\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            const cb = args[2];\n            GWU.xy.forRect(width, height, (x, y) => {\n                const t = this.site.getTileIndex(x, y);\n                if (t)\n                    cb(x, y, t);\n            });\n        }\n        this.site.free();\n        return result;\n    }\n    _create(site) {\n        if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n            this.startLoc[0] = Math.floor(site.width / 2);\n            this.startLoc[1] = site.height - 2;\n        }\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        site.updateDoorDirs();\n        let fails = 0;\n        while (fails < 20) {\n            if (this.addRoom(site)) {\n                fails = 0;\n                site.updateDoorDirs();\n                GWU.rng.random.shuffle(this.seq);\n            }\n            else {\n                ++fails;\n            }\n        }\n        if (this.loops)\n            this.addLoops(site, this.loops);\n        if (this.lakes)\n            this.addLakes(site, this.lakes);\n        if (this.bridges)\n            this.addBridges(site, this.bridges);\n        if (this.stairs)\n            this.addStairs(site, this.stairs);\n        this.finish(site);\n        return true;\n    }\n    start(site) {\n        if (this.seed) {\n            GWU.rng.random.seed(this.seed);\n            site.seed = this.seed;\n        }\n        site.clear();\n        this.seq = GWU.rng.random.sequence(site.width * site.height);\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        if (room && !this._attachRoom(site, roomSite, room)) {\n            room = null;\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        let i = 0;\n        const len = this.seq.length;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (i = 0; i < len; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n            const dir = site.getDoorDir(x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, room, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    SITE.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = GWU.rng.random.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, room, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                SITE.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, room, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        const hall = room.hall || room;\n        const left = Math.min(room.left, hall.left);\n        const top = Math.min(room.top, hall.top);\n        const right = Math.max(room.right, hall.right);\n        const bottom = Math.max(room.bottom, hall.bottom);\n        for (xRoom = left; xRoom <= right; xRoom++) {\n            for (yRoom = top; yRoom <= bottom; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    if (!map.hasXY(xSite, ySite) ||\n                        map.isBoundaryXY(xSite, ySite)) {\n                        return false;\n                    }\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(map, room, x, y, dir) {\n        const opts = this.doors;\n        let isDoor = false;\n        if (opts.chance && GWU.rng.random.chance(opts.chance)) {\n            isDoor = true;\n        }\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        map.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || room.hall.width == 1 || room.hall.height == 1) {\n            return;\n        }\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x - k, y)) {\n                    if (map.isSet(x - k, y - 1) && map.isSet(x - k, y + 1)) {\n                        map.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x + k, y)) {\n                    if (map.isSet(x + k, y - 1) && map.isSet(x + k, y + 1)) {\n                        map.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x, y - k)) {\n                    if (map.isSet(x - 1, y - k) && map.isSet(x + 1, y - k)) {\n                        map.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x, y + k)) {\n                    if (map.isSet(x - 1, y + k) && map.isSet(x + 1, y + k)) {\n                        map.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (GWU.rng.random.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nexport class BuildData {\n    constructor(map, depth) {\n        this.map = map;\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.depth = 0;\n        this.site = new SITE.MapSite(map);\n        this.interior = GWU.grid.alloc(map.width, map.height);\n        this.occupied = GWU.grid.alloc(map.width, map.height);\n        this.viewMap = GWU.grid.alloc(map.width, map.height);\n        this.distanceMap = GWU.grid.alloc(map.width, map.height);\n        this.candidates = GWU.grid.alloc(map.width, map.height);\n        this.depth = depth;\n    }\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.distanceMap);\n        GWU.grid.free(this.candidates);\n    }\n    reset(originX, originY) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        // this.candidates.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        this.distance25 = 0;\n        this.distance75 = 0;\n    }\n    calcDistances(maxSize) {\n        this.distanceMap.fill(0);\n        SITE.computeDistanceMap(this.site, this.distanceMap, this.originX, this.originY, maxSize);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        this.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = this.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","export class NullLogger {\n    async onError() { }\n    async onBlueprintPick() { }\n    async onBlueprintCandidates() { }\n    async onBlueprintStart() { }\n    async onBlueprintInterior() { }\n    async onBlueprintFail() { }\n    async onBlueprintSuccess() { }\n    async onStepStart() { }\n    async onStepCandidates() { }\n    async onStepInstanceSuccess() { }\n    async onStepInstanceFail() { }\n    async onStepSuccess() { }\n    async onStepFail() { }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nconst Fl = GWU.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    StepFlags[StepFlags[\"BF_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BF_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BF_BUILD_VESTIBULE\"] = Fl(2)] = \"BF_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BF_ADOPT_ITEM\"] = Fl(3)] = \"BF_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BF_BUILD_AT_ORIGIN\"] = Fl(4)] = \"BF_BUILD_AT_ORIGIN\";\n    StepFlags[StepFlags[\"BF_PERMIT_BLOCKING\"] = Fl(5)] = \"BF_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BF_TREAT_AS_BLOCKING\"] = Fl(6)] = \"BF_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BF_NEAR_ORIGIN\"] = Fl(7)] = \"BF_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BF_FAR_FROM_ORIGIN\"] = Fl(8)] = \"BF_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_VIEW_OF_ORIGIN\"] = Fl(9)] = \"BF_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(10)] = \"BF_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_MONSTER_TAKE_ITEM\"] = Fl(11)] = \"BF_MONSTER_TAKE_ITEM\";\n    StepFlags[StepFlags[\"BF_MONSTER_SLEEPING\"] = Fl(12)] = \"BF_MONSTER_SLEEPING\";\n    StepFlags[StepFlags[\"BF_MONSTER_FLEEING\"] = Fl(13)] = \"BF_MONSTER_FLEEING\";\n    StepFlags[StepFlags[\"BF_MONSTERS_DORMANT\"] = Fl(14)] = \"BF_MONSTERS_DORMANT\";\n    StepFlags[StepFlags[\"BF_ITEM_IS_KEY\"] = Fl(15)] = \"BF_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BF_ITEM_IDENTIFIED\"] = Fl(16)] = \"BF_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BF_ITEM_PLAYER_AVOIDS\"] = Fl(17)] = \"BF_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BF_EVERYWHERE\"] = Fl(18)] = \"BF_EVERYWHERE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE\"] = Fl(19)] = \"BF_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE_2\"] = Fl(20)] = \"BF_ALTERNATIVE_2\";\n    StepFlags[StepFlags[\"BF_BUILD_IN_WALLS\"] = Fl(21)] = \"BF_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BF_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BF_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BF_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BF_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BF_IMPREGNABLE\"] = Fl(24)] = \"BF_IMPREGNABLE\";\n    // TODO - BF_ALLOW_IN_HALLWAY instead?\n    StepFlags[StepFlags[\"BF_NOT_IN_HALLWAY\"] = Fl(27)] = \"BF_NOT_IN_HALLWAY\";\n    StepFlags[StepFlags[\"BF_ALLOW_BOUNDARY\"] = Fl(28)] = \"BF_ALLOW_BOUNDARY\";\n    StepFlags[StepFlags[\"BF_SKELETON_KEY\"] = Fl(29)] = \"BF_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BF_KEY_DISPOSABLE\"] = Fl(30)] = \"BF_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    constructor(cfg = {}) {\n        var _a;\n        this.tile = -1;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        this.id = 'n/a';\n        this.tile = (_a = cfg.tile) !== null && _a !== void 0 ? _a : -1;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        this.item = cfg.item || null;\n        this.horde = cfg.horde || null;\n        if (cfg.effect) {\n            this.effect = GWM.effect.from(cfg.effect);\n        }\n        if (this.item && this.flags & StepFlags.BF_ADOPT_ITEM) {\n            throw new Error('Cannot have blueprint step with item and BF_ADOPT_ITEM.');\n        }\n        if (this.buildAtOrigin && this.count.hi > 1) {\n            throw new Error('Cannot have count > 1 for step with BF_BUILD_AT_ORIGIN.');\n        }\n    }\n    get allowBoundary() {\n        return !!(this.flags & StepFlags.BF_ALLOW_BOUNDARY);\n    }\n    get notInHallway() {\n        return !!(this.flags & StepFlags.BF_NOT_IN_HALLWAY);\n    }\n    get buildInWalls() {\n        return !!(this.flags & StepFlags.BF_BUILD_IN_WALLS);\n    }\n    get buildAnywhere() {\n        return !!(this.flags & StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL);\n    }\n    get repeatUntilNoProgress() {\n        return !!(this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS);\n    }\n    get permitBlocking() {\n        return !!(this.flags & StepFlags.BF_PERMIT_BLOCKING);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & StepFlags.BF_TREAT_AS_BLOCKING);\n    }\n    get adoptItem() {\n        return !!(this.flags & StepFlags.BF_ADOPT_ITEM);\n    }\n    get itemIsKey() {\n        return !!(this.flags & StepFlags.BF_ITEM_IS_KEY);\n    }\n    get keyIsDisposable() {\n        return !!(this.flags & StepFlags.BF_KEY_DISPOSABLE);\n    }\n    get outsourceItem() {\n        return !!(this.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE);\n    }\n    get impregnable() {\n        return !!(this.flags & StepFlags.BF_IMPREGNABLE);\n    }\n    get buildVestibule() {\n        return !!(this.flags & StepFlags.BF_BUILD_VESTIBULE);\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BF_EVERYWHERE &\n            ~StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildsInstances() {\n        return !!(this.effect ||\n            this.tile != -1 ||\n            this.item ||\n            this.horde ||\n            this.adoptItem);\n    }\n    // cellIsCandidate(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     x: number,\n    //     y: number,\n    //     distanceBound: [number, number]\n    // ) {\n    //     return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    // }\n    // distanceBound(builder: BuildData): [number, number] {\n    //     return calcDistanceBound(builder, this);\n    // }\n    // updateViewMap(builder: BuildData): void {\n    //     updateViewMap(builder, this);\n    // }\n    // build(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     adoptedItem: GWM.item.Item | null\n    // ): boolean {\n    //     return buildStep(builder, blueprint, this, adoptedItem);\n    // }\n    markCandidates(data, blueprint, candidates, distanceBound = [0, 10000]) {\n        updateViewMap(data, this);\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            if (cellIsCandidate(data, blueprint, this, i, j, distanceBound)) {\n                count++;\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return count;\n    }\n}\nexport function updateViewMap(builder, buildStep) {\n    if (buildStep.flags &\n        (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n            StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        else {\n            const fov = new GWU.fov.FOV({\n                // TileFlags.T_OBSTRUCTS_PASSABILITY |\n                //     TileFlags.T_OBSTRUCTS_VISION,\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\nexport function calcDistanceBound(builder, buildStep) {\n    const distanceBound = [0, 10000];\n    if (buildStep.flags & StepFlags.BF_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BF_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\nexport function cellIsCandidate(builder, blueprint, buildStep, x, y, distanceBound) {\n    const site = builder.site;\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (buildStep.notInHallway &&\n        GWU.xy.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n        return false;\n    }\n    // No building along the perimeter of the level if it's prohibited.\n    if ((x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1) &&\n        !buildStep.allowBoundary) {\n        return false;\n    }\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.buildAtOrigin) {\n        return x == builder.originX && y == builder.originY;\n    }\n    else if (blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY) {\n        return false;\n    }\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return false;\n    }\n    // Must be in the viewmap if the appropriate flag is set.\n    if (buildStep.flags &\n        (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n            StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]) {\n        return false;\n    }\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (!builder.distanceMap.hasXY(i, j))\n                return;\n            if (!site.blocksPathing(i, j) &&\n                distance > builder.distanceMap[i][j] + 1) {\n                distance = builder.distanceMap[i][j] + 1;\n            }\n        }, true);\n    }\n    else {\n        distance = builder.distanceMap[x][y];\n    }\n    if (distance > distanceBound[1] || // distance exceeds max\n        distance < distanceBound[0]) {\n        // distance falls short of min\n        return false;\n    }\n    if (buildStep.buildInWalls) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (!builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)) {\n            let ok = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(x, y, (newX, newY) => {\n                if (!site.hasXY(newX, newY))\n                    return;\n                if (!builder.interior[newX][newY] &&\n                    !buildStep.buildAnywhere) {\n                    return;\n                }\n                // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                if (buildStep.buildAnywhere &&\n                    !site.blocksPathing(newX, newY) &&\n                    !site.getMachine(newX, newY) &&\n                    !(newX == builder.originX && newY == builder.originY)) {\n                    ok = true;\n                }\n            }, true);\n            return ok;\n        }\n        return false;\n    }\n    else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return false;\n    }\n    else if (buildStep.buildAnywhere) {\n        if ((buildStep.item && site.blocksItems(x, y)) ||\n            site.hasCellFlag(x, y, GWM.flags.Cell.IS_CHOKEPOINT |\n                GWM.flags.Cell.IS_IN_LOOP |\n                GWM.flags.Cell.IS_IN_MACHINE)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    else if (builder.interior[x][y]) {\n        return true;\n    }\n    return false;\n}\nexport function makePersonalSpace(builder, x, y, candidates, personalSpace) {\n    let count = 0;\n    for (let i = x - personalSpace + 1; i <= x + personalSpace - 1; i++) {\n        for (let j = y - personalSpace + 1; j <= y + personalSpace - 1; j++) {\n            if (builder.site.hasXY(i, j)) {\n                if (candidates[i][j]) {\n                    candidates[i][j] = 0;\n                    ++count;\n                }\n                builder.occupied[i][j] = 1;\n            }\n        }\n    }\n    return count;\n}\n// export function buildStep(\n//     builder: BuildData,\n//     blueprint: Blueprint,\n//     buildStep: BuildStep,\n//     adoptedItem: GWM.item.Item | null\n// ): boolean {\n//     let wantCount = 0;\n//     let builtCount = 0;\n//     const site = builder.site;\n//     const candidates = GWU.grid.alloc(site.width, site.height);\n//     // Figure out the distance bounds.\n//     const distanceBound = calcDistanceBound(builder, buildStep);\n//     buildStep.updateViewMap(builder);\n//     // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n//     // Make a master map of candidate locations for this feature.\n//     let qualifyingTileCount = markCandidates(\n//         candidates,\n//         builder,\n//         blueprint,\n//         buildStep,\n//         distanceBound\n//     );\n//     if (!buildStep.generateEverywhere) {\n//         wantCount = buildStep.count.value();\n//     }\n//     if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n//         console.log(\n//             ' - Only %s qualifying tiles - want at least %s.',\n//             qualifyingTileCount,\n//             buildStep.count.lo\n//         );\n//         GWU.grid.free(candidates);\n//         return false;\n//     }\n//     let x = 0,\n//         y = 0;\n//     let success = true;\n//     let didSomething = false;\n//     do {\n//         success = true;\n//         // Find a location for the feature.\n//         if (buildStep.buildAtOrigin) {\n//             // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n//             x = builder.originX;\n//             y = builder.originY;\n//         } else {\n//             // Pick our candidate location randomly, and also strike it from\n//             // the candidates map so that subsequent instances of this same feature can't choose it.\n//             [x, y] = GWU.rng.random.matchingLoc(\n//                 candidates.width,\n//                 candidates.height,\n//                 (x, y) => candidates[x][y] > 0\n//             );\n//         }\n//         // Don't waste time trying the same place again whether or not this attempt succeeds.\n//         candidates[x][y] = 0;\n//         qualifyingTileCount--;\n//         // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n//         if (buildStep.effect) {\n//             success = site.fireEffect(buildStep.effect, x, y);\n//             didSomething = success;\n//         }\n//         // Now try to place the terrain tile, if any.\n//         if (success && buildStep.tile !== -1) {\n//             const tile = GWM.tile.get(buildStep.tile);\n//             if (\n//                 !(buildStep.flags & StepFlags.BF_PERMIT_BLOCKING) &&\n//                 (tile.blocksMove() ||\n//                     buildStep.flags & StepFlags.BF_TREAT_AS_BLOCKING)\n//             ) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y, {\n//                     machine: site.machineCount,\n//                 });\n//             }\n//             if (success) {\n//                 success = site.setTile(x, y, tile);\n//                 didSomething = didSomething || success;\n//             }\n//         }\n//         // Generate an actor, if necessary\n//         // Generate an item, if necessary\n//         if (success && buildStep.item) {\n//             const item = site.makeRandomItem(buildStep.item);\n//             if (!item) {\n//                 success = false;\n//             }\n//             if (buildStep.flags & StepFlags.BF_ITEM_IS_KEY) {\n//                 item.key = GWM.entity.makeKeyInfo(\n//                     x,\n//                     y,\n//                     !!(buildStep.flags & StepFlags.BF_KEY_DISPOSABLE)\n//                 );\n//             }\n//             if (buildStep.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE) {\n//                 success = builder.buildRandom(\n//                     Flags.BP_ADOPT_ITEM,\n//                     -1,\n//                     -1,\n//                     item\n//                 );\n//                 if (success) {\n//                     didSomething = true;\n//                 }\n//             } else {\n//                 success = site.addItem(x, y, item);\n//                 didSomething = didSomething || success;\n//             }\n//         } else if (success && buildStep.flags & StepFlags.BF_ADOPT_ITEM) {\n//             // adopt item if necessary\n//             if (!adoptedItem) {\n//                 GWU.grid.free(candidates);\n//                 throw new Error(\n//                     'Failed to build blueprint because there is no adopted item.'\n//                 );\n//             }\n//             if (buildStep.flags & StepFlags.BF_TREAT_AS_BLOCKING) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y);\n//             }\n//             if (success) {\n//                 success = site.addItem(x, y, adoptedItem);\n//                 if (success) {\n//                     didSomething = true;\n//                 } else {\n//                     console.log('- failed to add item', x, y);\n//                 }\n//             } else {\n//                 // console.log('- blocks map', x, y);\n//             }\n//         }\n//         if (success && didSomething) {\n//             // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n//             qualifyingTileCount -= makePersonalSpace(\n//                 builder,\n//                 x,\n//                 y,\n//                 candidates,\n//                 buildStep.pad\n//             );\n//             builtCount++; // we've placed an instance\n//             // Mark the feature location as part of the machine, in case it is not already inside of it.\n//             if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n//                 site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n//             }\n//             // Mark the feature location as impregnable if requested.\n//             if (buildStep.flags & StepFlags.BF_IMPREGNABLE) {\n//                 site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n//             }\n//         }\n//         // Finished with this instance!\n//     } while (\n//         qualifyingTileCount > 0 &&\n//         (buildStep.generateEverywhere ||\n//             builtCount < wantCount ||\n//             buildStep.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS)\n//     );\n//     if (success && buildStep.flags & StepFlags.BF_BUILD_VESTIBULE) {\n//         // Generate a door guard machine.\n//         // Try to create a sub-machine that qualifies.\n//         success = builder.buildRandom(\n//             Flags.BP_VESTIBULE,\n//             builder.originX,\n//             builder.originY\n//         );\n//         if (!success) {\n//             // console.log(\n//             //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n//             // );\n//             // failure! abort!\n//             GWU.grid.free(candidates);\n//             return false;\n//         }\n//         ++builtCount;\n//     }\n//     //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n//     //DEBUG logBuffer(candidates);\n//     success = builtCount > 0;\n//     GWU.grid.free(candidates);\n//     return success;\n// }\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nconst Fl = GWU.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(0)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(2)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(3)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(4)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(5)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(6)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(7)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(8)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(9)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(10)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(11)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(12)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(13)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(14)] = \"BP_NO_INTERIOR_FLAG\";\n    Flags[Flags[\"BP_NOT_IN_HALLWAY\"] = Fl(15)] = \"BP_NOT_IN_HALLWAY\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo <= 0)\n                this.size.lo = 1;\n            if (this.size.hi < this.size.lo)\n                this.size.hi = this.size.lo;\n        }\n        else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (!this.steps.some((s) => s.flags & STEP.StepFlags.BF_ADOPT_ITEM)) {\n                throw new Error('Blueprint wants to BP_ADOPT_ITEM, but has no steps with BF_ADOPT_ITEM.');\n            }\n        }\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    get notInHallway() {\n        return !!(this.flags & Flags.BP_NOT_IN_HALLWAY);\n    }\n    qualifies(requiredFlags, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return false;\n        }\n        if (\n        // Must have the required flags:\n        ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickComponents() {\n        const alternativeFlags = [\n            STEP.StepFlags.BF_ALTERNATIVE,\n            STEP.StepFlags.BF_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = GWU.rng.random.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n    fillInterior(builder) {\n        const interior = builder.interior;\n        const site = builder.site;\n        interior.fill(0);\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            return addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n        }\n        else if (this.isVestiblue) {\n            return computeVestibuleInterior(builder, this);\n            // success\n        }\n        else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n            let distanceMap = builder.distanceMap;\n            SITE.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, this.size.hi);\n            const seq = GWU.rng.random.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = this.size.value(); // Keeps track of the goal size.\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (let n = 0; n < seq.length && qualifyingTileCount < goalSize; n++) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n                    if (distanceMap[i][j] == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n                        if (site.isOccupied(i, j) ||\n                            site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            return 0;\n                        }\n                    }\n                }\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            return qualifyingTileCount;\n        }\n    }\n}\nexport function markCandidates(buildData, blueprint) {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    candidates.fill(0);\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n        candidates.update((_v, x, y) => {\n            return site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE) &&\n                blueprint.size.contains(site.getChokeCount(x, y))\n                ? 1\n                : 0;\n        });\n    }\n    else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        throw new Error('ERROR: Attempted to build a vestiblue without a location being provided.');\n    }\n    else {\n        candidates.update((_v, x, y) => {\n            if (!site.isPassable(x, y))\n                return 0;\n            if (blueprint.notInHallway) {\n                const count = GWU.xy.arcCount(x, y, (i, j) => site.isPassable(i, j));\n                return count <= 1 ? 1 : 0;\n            }\n            return 1;\n        });\n    }\n    return candidates.count((v) => v == 1);\n}\nexport function pickCandidateLoc(buildData, _blueprint) {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const randSite = GWU.rng.random.matchingLoc(site.width, site.height, (x, y) => candidates[x][y] == 1);\n    if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n        // If no suitable sites, abort.\n        return null;\n    }\n    return randSite;\n}\n// // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n// export function computeInterior(\n//     builder: BuildData,\n//     blueprint: Blueprint\n// ): boolean {\n//     let failsafe = blueprint.isRoom ? 10 : 20;\n//     let tryAgain;\n//     const interior = builder.interior;\n//     const site = builder.site;\n//     do {\n//         tryAgain = false;\n//         if (--failsafe <= 0) {\n//             // console.log(\n//             //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n//             // );\n//             return false;\n//         }\n//         let count = fillInterior(builder, blueprint);\n//         // Now make sure the interior map satisfies the machine's qualifications.\n//         if (!count) {\n//             console.debug('- no interior');\n//             tryAgain = true;\n//         } else if (!blueprint.size.contains(count)) {\n//             console.debug('- too small');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.treatAsBlocking &&\n//             SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })\n//         ) {\n//             console.debug('- blocks');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.requireBlocking &&\n//             SITE.siteDisruptedSize(site, interior) < 100\n//         ) {\n//             console.debug('- does not block');\n//             tryAgain = true;\n//         }\n//         // Now loop if necessary.\n//     } while (tryAgain);\n//     // console.log(tryAgain, failsafe);\n//     return true;\n// }\nexport function computeVestibuleInterior(builder, blueprint) {\n    let success = true;\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n    if (blueprint.size.hi == 1) {\n        interior[builder.originX][builder.originY] = 1;\n        return 1;\n    }\n    // If this is a wall - it is really an error (maybe manually trying a build location?)\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    if (doorChokeCount > 10000) {\n        return 0;\n    }\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(builder.originX, builder.originY, (x, y) => {\n        const count = site.getChokeCount(x, y);\n        if (count == doorChokeCount)\n            return;\n        if (count > 10000)\n            return;\n        if (count < 0)\n            return;\n        vestibuleLoc[0] = x;\n        vestibuleLoc[1] = y;\n        vestibuleChokeCount = count;\n    }, true);\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(vestibuleLoc[0], vestibuleLoc[1], (_v, i, j) => {\n            if (site.isOccupied(i, j)) {\n                success = false;\n            }\n            return site.getChokeCount(i, j) === vestibuleChokeCount;\n        }, 1);\n        if (success && blueprint.size.contains(count))\n            return roomSize;\n    }\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(); // Keeps track of the goal size.\n    const distMap = builder.distanceMap;\n    SITE.computeDistanceMap(site, distMap, builder.originX, builder.originY, blueprint.size.hi);\n    const cells = GWU.rng.random.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (let i = 0; i < cells.length && qualifyingTileCount < wantSize; ++i) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n            const dist = distMap[x][y];\n            if (dist != k)\n                continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount)\n                continue;\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n    return qualifyingTileCount;\n}\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(builder, startX, startY) {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n    let count = 1;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY))\n            continue;\n        if (interior[newX][newY])\n            continue; // already done\n        if (site.isOccupied(newX, newY) ||\n            (site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE) &&\n                !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_GATE_SITE))) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return 0;\n        }\n        if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE)) {\n            let additional = addTileToInteriorAndIterate(builder, newX, newY);\n            if (additional <= 0)\n                return 0;\n            count += additional;\n        }\n    }\n    return count;\n}\nexport function prepareInterior(builder, blueprint) {\n    const interior = builder.interior;\n    const site = builder.site;\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        expandMachineInterior(builder, 1);\n    }\n    else if (blueprint.openInterior) {\n        expandMachineInterior(builder, 4);\n    }\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x, y, SITE.FLOOR);\n        });\n    }\n    // If requested, purge pathing blockers -- no traps allowed.\n    if (blueprint.purgeBlockers) {\n        interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            if (site.blocksPathing(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n        });\n    }\n    // If requested, purge the liquid layer in the interior -- no liquids allowed.\n    if (blueprint.purgeLiquids) {\n        interior.forEach((v, x, y) => {\n            if (v && site.isAnyLiquid(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n        });\n    }\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not valid x,y\n                if (interior[i][j])\n                    return; // is part of machine\n                if (site.isWall(i, j))\n                    return; // is already a wall (of some sort)\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return; // is a door site\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE))\n                    return; // is part of a machine\n                if (!site.blocksPathing(i, j))\n                    return; // is not a blocker for the player (water?)\n                site.setTile(i, j, SITE.WALL);\n            }, false);\n        });\n    }\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (interior[i][j])\n                    return;\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(i, j, GWM.flags.Cell.IMPREGNABLE);\n            }, false);\n        });\n    }\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v)\n            return;\n        if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, SITE.DOOR);\n        }\n    });\n}\nexport function expandMachineInterior(builder, minimumInteriorNeighbors = 1) {\n    let madeChange;\n    const interior = builder.interior;\n    const site = builder.site;\n    do {\n        madeChange = false;\n        interior.forEach((_v, x, y) => {\n            // if (v && site.isDoor(x, y)) {\n            //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n            //     return;\n            // }\n            if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE))\n                return;\n            if (!site.blocksPathing(x, y))\n                return;\n            let nbcount = 0;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not in map\n                if (interior[i][j] && !site.blocksPathing(i, j)) {\n                    ++nbcount; // in machine and open tile\n                }\n            }, false);\n            if (nbcount < minimumInteriorNeighbors)\n                return;\n            nbcount = 0;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // not on map\n                if (interior[i][j])\n                    return; // already part of machine\n                if (!site.isWall(i, j) ||\n                    site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                    ++nbcount; // tile is not a wall or is in a machine\n                }\n            }, false);\n            if (nbcount)\n                return;\n            // Eliminate this obstruction; welcome its location into the machine.\n            madeChange = true;\n            interior[x][y] = 1;\n            if (site.blocksPathing(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (site.isSet(i, j))\n                    return;\n                site.setTile(i, j, SITE.WALL);\n            });\n        });\n    } while (madeChange);\n}\n///////////////////////////\n// INSTALL\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags) && b.frequency(depth));\n    return GWU.rng.random.item(matches);\n}\nexport function get(id) {\n    if (id instanceof Blueprint)\n        return id;\n    return blueprints[id];\n}\n","import * as GWU from 'gw-utils';\nimport { Flags } from './blueprint';\nimport { StepFlags } from './buildStep';\nexport class ConsoleLogger {\n    async onError(_data, error) {\n        console.log(`onBuildError - error: ${error}`);\n    }\n    async onBlueprintPick(_data, blueprint, flags, depth) {\n        console.log(`onBlueprintPick - ${blueprint.id}, depth = ${depth}, matchingFlags = ${GWU.flag.toString(Flags, flags)}`);\n    }\n    async onBlueprintCandidates(data, blueprint) {\n        const label = `onBlueprintCandidates - ${blueprint.id}`;\n        console.group(label);\n        data.candidates.dump();\n        console.groupEnd();\n    }\n    async onBlueprintStart(data, blueprint) {\n        console.log(`onBlueprintStart - ${blueprint.id} @ ${data.originX},${data.originY} : stepCount: ${blueprint.steps.length}, size: [${blueprint.size.toString()}], flags: ${GWU.flag.toString(Flags, blueprint.flags)}`);\n    }\n    async onBlueprintInterior(data, blueprint) {\n        console.log(`onBlueprintInterior - ${blueprint.id}`);\n        data.interior.dump();\n    }\n    async onBlueprintFail(data, blueprint, error) {\n        console.log(`onBlueprintFail - ${blueprint.id} @ ${data.originX},${data.originY} : error: ${error}`);\n    }\n    async onBlueprintSuccess(data, blueprint) {\n        console.log(`onBlueprintSuccess - ${blueprint.id} @ ${data.originX},${data.originY}`);\n    }\n    async onStepStart(data, blueprint, step) {\n        console.log(`onStepStart - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : count: [${step.count.toString()}], flags: ${GWU.flag.toString(StepFlags, step.flags)}`);\n    }\n    async onStepCandidates(data, blueprint, step, candidates, wantCount) {\n        const haveCount = candidates.count((v) => v == 1);\n        console.log(`onStepCandidates - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : wantCount: ${wantCount}, have: ${haveCount}`);\n        candidates.dump();\n    }\n    async onStepInstanceSuccess(_data, _blueprint, _step, x, y) {\n        console.log(`onStepInstance @ ${x},${y}`);\n    }\n    async onStepInstanceFail(_data, _blueprint, _step, x, y, error) {\n        console.log(`onStepInstanceFail @ ${x},${y} - error: ${error}`);\n    }\n    async onStepSuccess(data, blueprint, step) {\n        console.log(`onStepSuccess - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : count: [${step.count.toString()}], flags: ${GWU.flag.toString(StepFlags, step.flags)}`);\n    }\n    async onStepFail(data, blueprint, step, error) {\n        console.log(`onStepFail - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : error : ${error}`);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\nimport * as STEP from './buildStep';\nimport { BuildData } from './data';\nimport { NullLogger } from './logger';\nimport { ConsoleLogger } from './consoleLogger';\nexport class Builder {\n    constructor(map, options = {}) {\n        this.data = new BuildData(map, options.depth || 1);\n        if (options.blueprints) {\n            if (!Array.isArray(options.blueprints)) {\n                options.blueprints = Object.values(options.blueprints);\n            }\n            this.blueprints = options.blueprints.map((v) => BLUE.get(v));\n        }\n        else {\n            this.blueprints = Object.values(BLUE.blueprints);\n        }\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        }\n        else {\n            this.log = options.log || new NullLogger();\n        }\n    }\n    _pickRandom(requiredFlags) {\n        const weights = this.blueprints.map((b) => {\n            if (!b.qualifies(requiredFlags))\n                return 0;\n            return b.frequency(this.data.depth);\n        });\n        const index = GWU.rng.random.weighted(weights);\n        return this.blueprints[index] || null;\n    }\n    async buildRandom(requiredMachineFlags = BLUE.Flags.BP_ROOM, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        data.site.analyze();\n        let tries = 0;\n        while (tries < 10) {\n            const blueprint = this._pickRandom(requiredMachineFlags);\n            if (!blueprint) {\n                await this.log.onError(data, `Failed to find matching blueprint: requiredMachineFlags : ${GWU.flag.toString(BLUE.Flags, requiredMachineFlags)}, depth: ${data.depth}`);\n                return false;\n            }\n            await this.log.onBlueprintPick(data, blueprint, requiredMachineFlags, data.depth);\n            if (await this._buildAt(blueprint, x, y, adoptedItem)) {\n                return true;\n            }\n            ++tries;\n        }\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return false;\n    }\n    async build(blueprint, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        if (typeof blueprint === 'string') {\n            const id = blueprint;\n            blueprint = BLUE.blueprints[id];\n            if (!blueprint)\n                throw new Error('Failed to find blueprint - ' + id);\n        }\n        data.site.analyze();\n        return await this._buildAt(blueprint, x, y, adoptedItem);\n    }\n    async _buildAt(blueprint, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        if (x >= 0 && y >= 0) {\n            return await this._build(blueprint, x, y, adoptedItem);\n        }\n        let count = await this._markCandidates(blueprint);\n        if (!count) {\n            return false;\n        }\n        let tries = 20; // TODO - Make property of Blueprint\n        while (count-- && tries--) {\n            const loc = BLUE.pickCandidateLoc(data, blueprint) || false;\n            if (loc) {\n                if (await this._build(blueprint, loc[0], loc[1], adoptedItem)) {\n                    return true;\n                }\n            }\n        }\n        await this.log.onBlueprintFail(data, blueprint, 'No suitable locations found to build blueprint.');\n        return false;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    async _build(blueprint, originX, originY, adoptedItem = null) {\n        const data = this.data;\n        data.reset(originX, originY);\n        await this.log.onBlueprintStart(data, blueprint, adoptedItem);\n        if (!(await this._computeInterior(blueprint))) {\n            return false;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const levelBackup = data.site.backup();\n        data.machineNumber = data.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        BLUE.prepareInterior(data, blueprint);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        data.calcDistances(blueprint.size.hi);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = blueprint.pickComponents();\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            if (!(await this._buildStep(blueprint, component, adoptedItem))) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                data.site.restore(levelBackup);\n                await this.log.onBlueprintFail(data, blueprint, `Failed to build step ${index + 1}.`);\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return false;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(data.site, data.machineNumber);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        await this.log.onBlueprintSuccess(data, blueprint);\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return true;\n    }\n    async _markCandidates(blueprint) {\n        const data = this.data;\n        const count = BLUE.markCandidates(data, blueprint);\n        if (count <= 0) {\n            await this.log.onBlueprintFail(data, blueprint, 'No suitable candidate locations found.');\n            return 0;\n        }\n        await this.log.onBlueprintCandidates(data, blueprint);\n        return count;\n    }\n    async _computeInterior(blueprint) {\n        let fail = null;\n        const data = this.data;\n        let count = blueprint.fillInterior(data);\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (!count) {\n            fail = 'Interior error.';\n        }\n        else if (!blueprint.size.contains(count)) {\n            fail = `Interior wrong size - have: ${count}, want: ${blueprint.size.toString()}`;\n        }\n        else if (blueprint.treatAsBlocking &&\n            SITE.siteDisruptedBy(data.site, data.interior, {\n                machine: data.site.machineCount,\n            })) {\n            fail = 'Interior blocks map.';\n        }\n        else if (blueprint.requireBlocking &&\n            SITE.siteDisruptedSize(data.site, data.interior) < 100) {\n            fail = 'Interior does not block enough cells.';\n        }\n        if (!fail) {\n            await this.log.onBlueprintInterior(data, blueprint);\n            return true;\n        }\n        await this.log.onBlueprintFail(data, blueprint, fail);\n        return false;\n    }\n    async _buildStep(blueprint, buildStep, adoptedItem) {\n        let wantCount = 0;\n        let builtCount = 0;\n        const data = this.data;\n        const site = data.site;\n        await this.log.onStepStart(data, blueprint, buildStep, adoptedItem);\n        // console.log(\n        //     'buildComponent',\n        //     blueprint.id,\n        //     blueprint.steps.indexOf(buildStep)\n        // );\n        // Figure out the distance bounds.\n        const distanceBound = STEP.calcDistanceBound(data, buildStep);\n        // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n        // Make a master map of candidate locations for this feature.\n        let qualifyingTileCount = 0;\n        if (buildStep.buildVestibule) {\n            // Generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n            let success = await this.buildRandom(BLUE.Flags.BP_VESTIBULE, data.originX, data.originY);\n            if (!success) {\n                await this.log.onStepFail(data, blueprint, buildStep, 'Failed to build vestibule');\n                return false;\n            }\n        }\n        // If we are just building a vestibule, then we can exit here...\n        if (!buildStep.buildsInstances) {\n            return true;\n        }\n        const candidates = GWU.grid.alloc(site.width, site.height);\n        if (buildStep.buildAtOrigin) {\n            candidates[data.originX][data.originY] = 1;\n            qualifyingTileCount = 1;\n            wantCount = 1;\n        }\n        else {\n            qualifyingTileCount = buildStep.markCandidates(data, blueprint, candidates, distanceBound);\n            if (buildStep.generateEverywhere) {\n                wantCount = qualifyingTileCount;\n            }\n            else {\n                wantCount = buildStep.count.value();\n            }\n            await this.log.onStepCandidates(data, blueprint, buildStep, candidates, wantCount);\n            if (!qualifyingTileCount ||\n                qualifyingTileCount < buildStep.count.lo) {\n                await this.log.onStepFail(data, blueprint, buildStep, `Blueprint ${blueprint.id}, step ${blueprint.steps.indexOf(buildStep)} - Only ${qualifyingTileCount} qualifying tiles - want ${buildStep.count.toString()}.`);\n                return false;\n            }\n        }\n        let x = 0, y = 0;\n        let success = true;\n        while (qualifyingTileCount > 0 &&\n            (buildStep.generateEverywhere ||\n                builtCount < wantCount ||\n                buildStep.repeatUntilNoProgress)) {\n            success = true;\n            // Find a location for the feature.\n            if (buildStep.buildAtOrigin) {\n                // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                x = data.originX;\n                y = data.originY;\n            }\n            else {\n                // Pick our candidate location randomly, and also strike it from\n                // the candidates map so that subsequent instances of this same feature can't choose it.\n                [x, y] = GWU.rng.random.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] > 0);\n            }\n            // Don't waste time trying the same place again whether or not this attempt succeeds.\n            candidates[x][y] = 0;\n            qualifyingTileCount--;\n            success = await this._buildStepInstance(blueprint, buildStep, x, y, adoptedItem);\n            if (success) {\n                // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                qualifyingTileCount -= STEP.makePersonalSpace(data, x, y, candidates, buildStep.pad);\n                builtCount++; // we've placed an instance\n            }\n            // Finished with this instance!\n        }\n        GWU.grid.free(candidates);\n        if (!buildStep.count.contains(builtCount) &&\n            !buildStep.generateEverywhere &&\n            !buildStep.repeatUntilNoProgress) {\n            success = false;\n            await this.log.onStepFail(data, blueprint, buildStep, `Failed to build enough instances - want: ${buildStep.count.toString()}, built: ${builtCount}`);\n        }\n        //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n        //DEBUG logBuffer(candidates);\n        if (success) {\n            await this.log.onStepSuccess(data, blueprint, buildStep);\n        }\n        return success;\n    }\n    async _buildStepInstance(blueprint, buildStep, x, y, adoptedItem = null) {\n        let success = true;\n        let didSomething = true;\n        const data = this.data;\n        const site = data.site;\n        if (success && buildStep.treatAsBlocking) {\n            // Yes, check for blocking.\n            if (SITE.siteDisruptedByXY(site, x, y)) {\n                await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'instance blocks map');\n                success = false;\n            }\n        }\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (success && buildStep.effect) {\n            success = site.buildEffect(buildStep.effect, x, y);\n            didSomething = success;\n            if (!success) {\n                this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to build effect - ' +\n                    JSON.stringify(buildStep.effect));\n            }\n        }\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile !== -1) {\n            const tile = GWM.tile.get(buildStep.tile);\n            if (!buildStep.permitBlocking &&\n                tile.blocksMove() &&\n                !buildStep.treatAsBlocking // already did treatAsBlocking\n            ) {\n                if (SITE.siteDisruptedByXY(site, x, y, {\n                    machine: site.machineCount,\n                })) {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'tile blocks site');\n                    success = false;\n                }\n            }\n            if (success) {\n                success = site.setTile(x, y, tile);\n                didSomething = didSomething || success;\n                if (!success) {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'failed to set tile - ' + tile.id);\n                }\n            }\n        }\n        // Generate an actor, if necessary\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const item = site.makeRandomItem(buildStep.item);\n            if (!item) {\n                success = false;\n                await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to make random item - ' +\n                    JSON.stringify(buildStep.item));\n            }\n            else {\n                if (buildStep.itemIsKey) {\n                    item.key = GWM.entity.makeKeyInfo(x, y, !!buildStep.keyIsDisposable);\n                }\n                if (buildStep.outsourceItem) {\n                    success = await this.buildRandom(BLUE.Flags.BP_ADOPT_ITEM, -1, -1, item);\n                    if (success) {\n                        didSomething = true;\n                    }\n                    else {\n                        await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to build machine to adopt item - ' +\n                            item.kind.id);\n                    }\n                }\n                else {\n                    success = site.addItem(x, y, item);\n                    didSomething = didSomething || success;\n                    if (!success) {\n                        await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to add item to site - ' + item.kind.id);\n                    }\n                }\n            }\n        }\n        else if (success && buildStep.adoptItem) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error('Failed to build blueprint because there is no adopted item.');\n            }\n            if (success) {\n                success = site.addItem(x, y, adoptedItem);\n                if (success) {\n                    didSomething = true;\n                }\n                else {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to add adopted item to site - ' +\n                        adoptedItem.kind.id);\n                }\n            }\n        }\n        if (success && didSomething) {\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!blueprint.noInteriorFlag) {\n                site.setMachine(x, y, data.machineNumber, blueprint.isRoom);\n            }\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.impregnable) {\n                site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            }\n            await this.log.onStepInstanceSuccess(data, blueprint, buildStep, x, y);\n        }\n        else if (didSomething) {\n            // roll back any changes?\n        }\n        return success && didSomething;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as LEVEL from './level';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GWU.object.setOptions(this.config, options);\n        if (this.config.seed) {\n            GWU.rng.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.rng.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GWU.rng.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GWU.xy.distanceBetween(startLoc[0], startLoc[1], x, y) >\n                    minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        GWU.rng.random.seed(this.seeds[id]);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    makeLevel(id, opts, cb) {\n        const level = new LEVEL.Level(opts);\n        const result = level.create(this.config.width, this.config.height, cb);\n        if (!GWU.xy.equalsXY(level.endLoc, opts.endLoc) ||\n            !GWU.xy.equalsXY(level.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [level.startLoc, level.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["DIRS","GWU","xy","directionOfDoorSite","site","x","y","dir","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","hasXY","isFloor","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","height","w","width","isDiggable","isSet","push","doorSites","loc","rng","random","item","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","v","getTileIndex","setTile","fillCostGrid","costGrid","update","_v","isPassable","path","OBSTRUCTION","siteDisruptedByXY","options","_a","_b","_c","machine","arcCount","blockingGrid","grid","alloc","result","siteDisruptedBy","free","walkableGrid","disrupts","lakeX","lakeY","get","isStairs","getMachine","first","floodFill","siteDisruptedSize","blockingToMapX","blockingToMapY","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","clearInteriorFlag","hasCellFlag","GWM","flags","Cell","IS_WIRED","IS_CIRCUIT_BREAKER","setMachine","NOTHING","tile","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","GridSite","this","seed","tiles","doors","fill","isBoundaryXY","isDoor","isBridge","isShallow","isNothing","isWall","isDeep","blocksPathing","Tile","obj","Error","_x","_y","Utils.directionOfDoorSite","Flags","MapSite","map","machineCount","needsAnalysis","flag","cellInfo","cell","setCellFlag","clearCellFlag","hasTile","opts","highestPriorityTile","cells","forEach","c","clear","hasItem","tags","makeRandom","forceItem","hasActor","blocksMove","blocksVision","hasEntityFlag","Entity","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","hasTileFlag","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","isEmpty","T_BRIDGE","T_IS_DOOR","L_SECRETLY_PASSABLE","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","clone","backup","copy","chokeCount","count","analyze","effect","fireSync","machineId","id","isRoom","IS_IN_MACHINE","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","Hall","Bounds","super","dx","dy","d","makeHall","dirIndex","hallLength","hallWidth","abs","Room","hall","cx","floor","cy","translate","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","make","RoomDigger","_setOptions","carve","length","every","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","bind","weighted","room","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","DOWN","Cross","SymmetricalCross","minorWidth","minorHeight","x2","y2","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickLength","lengths","UP","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.makeHall","lower","higher","actual","startX","startY","halls","clamp","Range","weights","Number","parseInt","_pickWidth","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","CLOCK_DIRS","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","SITE.DOOR","Level","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","number","object","setOptions","SITE.GridSite","args","Map","SITE.MapSite","_create","cb","t","addFirstRoom","updateDoorDirs","fails","addRoom","shuffle","addLoops","addLakes","addBridges","addStairs","finish","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","roomSite","_makeSite","getDigger","_attachRoomAtLoc","HALL.dig","_attachRoom","len","getDoorDir","oppDir","_roomFitsAt","SITE.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksDiagonal","boundaryTile","SITE.WALL","BuildData","depth","distance25","distance75","machineNumber","interior","occupied","viewMap","candidates","maxSize","SITE.computeDistanceMap","qualifyingTileCount","distances","dist","NullLogger","Fl","fl","StepFlags","BuildStep","cfg","pad","horde","from","BF_ADOPT_ITEM","buildAtOrigin","allowBoundary","BF_ALLOW_BOUNDARY","notInHallway","BF_NOT_IN_HALLWAY","buildInWalls","BF_BUILD_IN_WALLS","buildAnywhere","BF_BUILD_ANYWHERE_ON_LEVEL","repeatUntilNoProgress","BF_REPEAT_UNTIL_NO_PROGRESS","permitBlocking","BF_PERMIT_BLOCKING","treatAsBlocking","BF_TREAT_AS_BLOCKING","adoptItem","itemIsKey","BF_ITEM_IS_KEY","keyIsDisposable","BF_KEY_DISPOSABLE","outsourceItem","BF_OUTSOURCE_ITEM_TO_MACHINE","impregnable","BF_IMPREGNABLE","buildVestibule","BF_BUILD_VESTIBULE","generateEverywhere","BF_EVERYWHERE","BF_BUILD_AT_ORIGIN","buildsInstances","data","blueprint","distanceBound","updateViewMap","cellIsCandidate","builder","buildStep","BF_IN_VIEW_OF_ORIGIN","BF_IN_PASSABLE_VIEW_OF_ORIGIN","fov","FOV","isBlocked","calculate","calcDistanceBound","BF_NEAR_ORIGIN","BF_FAR_FROM_ORIGIN","distance","eachNeighbor","cellMachine","ok","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","makePersonalSpace","personalSpace","Blueprint","steps","split","trim","frequency","size","lo","STEP.BuildStep","BP_ADOPT_ITEM","some","s","STEP.StepFlags","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","BP_NOT_IN_HALLWAY","requiredFlags","want","includes","alternativeFlags","BF_ALTERNATIVE","BF_ALTERNATIVE_2","keepFeature","totalFreq","randIndex","filter","_f","addTileToInteriorAndIterate","doorChokeCount","getChokeCount","vestibuleLoc","vestibuleChokeCount","roomSize","contains","isOccupied","wantSize","distMap","computeVestibuleInterior","goalSize","n","pickCandidateLoc","buildData","_blueprint","randSite","startChokeCount","IS_GATE_SITE","additional","expandMachineInterior","minimumInteriorNeighbors","madeChange","nbcount","blueprints","ConsoleLogger","_data","error","console","log","toString","label","group","dump","groupEnd","step","indexOf","wantCount","haveCount","_step","matches","values","b","qualifies","BLUE.get","BLUE.blueprints","requiredMachineFlags","BLUE.Flags","adoptedItem","_pickRandom","onError","onBlueprintPick","_buildAt","_build","_markCandidates","BLUE.pickCandidateLoc","onBlueprintFail","reset","onBlueprintStart","_computeInterior","levelBackup","nextMachineId","isSecretDoor","BLUE.prepareInterior","calcDistances","components","pickComponents","component","_buildStep","restore","SITE.clearInteriorFlag","onBlueprintSuccess","BLUE.markCandidates","onBlueprintCandidates","fail","fillInterior","SITE.siteDisruptedBy","SITE.siteDisruptedSize","onBlueprintInterior","builtCount","onStepStart","STEP.calcDistanceBound","buildRandom","onStepFail","markCandidates","onStepCandidates","_buildStepInstance","STEP.makePersonalSpace","onStepSuccess","SITE.siteDisruptedByXY","onStepInstanceFail","buildEffect","JSON","stringify","makeRandomItem","entity","makeKeyInfo","kind","addItem","onStepInstanceSuccess","levels","seeds","stairLocs","initSeeds","initStairLocs","stairDistance","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","level","LEVEL.Level","equalsXY"],"mappings":"smBAGA,MAAMA,EAAOC,EAAIC,GAAGF,KAoIb,SAASG,EAAoBC,EAAMC,EAAGC,GACzC,IAAIC,EAAKC,EACLC,EAAMC,EAAMC,EAAMC,EAEtB,IADAJ,EAAcP,EAAIC,GAAGW,aAChBN,EAAM,EAAGA,EAAM,EAAGA,IAKnB,GAJAE,EAAOJ,EAAIL,EAAKO,GAAK,GACrBG,EAAOJ,EAAIN,EAAKO,GAAK,GACrBI,EAAON,EAAIL,EAAKO,GAAK,GACrBK,EAAON,EAAIN,EAAKO,GAAK,GACjBH,EAAKU,MAAMH,EAAMC,IACjBR,EAAKU,MAAML,EAAMC,IACjBN,EAAKW,QAAQJ,EAAMC,GAAO,CAE1B,GAAIJ,GAAeP,EAAIC,GAAGW,aAEtB,OAAOZ,EAAIC,GAAGW,aAElBL,EAAcD,EAGtB,OAAOC,EAEJ,SAASQ,EAAsBZ,GAClC,IAAIa,EAAGC,EAAGC,EAAGV,EAAMC,EACfH,EACAa,EACJ,MAAMC,EAAQ,CAAC,GAAI,GAAI,GAAI,IAGrBC,EAAIlB,EAAKmB,OACTC,EAAIpB,EAAKqB,MACf,IAAKR,EAAI,EAAGA,EAAIO,EAAGP,IACf,IAAKC,EAAI,EAAGA,EAAII,EAAGJ,IACf,GAAId,EAAKsB,WAAWT,EAAGC,KACnBX,EAAMJ,EAAoBC,EAAMa,EAAGC,GAC/BX,GAAON,EAAIC,GAAGW,cAAc,CAM5B,IAHAJ,EAAOQ,EAAIhB,EAAIC,GAAGF,KAAKO,GAAK,GAC5BG,EAAOQ,EAAIjB,EAAIC,GAAGF,KAAKO,GAAK,GAC5Ba,GAAiB,EACZD,EAAI,EAAGA,EAAI,IAAMf,EAAKU,MAAML,EAAMC,KAAUU,EAAgBD,IACzDf,EAAKuB,MAAMlB,EAAMC,KACjBU,GAAiB,GAErBX,GAAQR,EAAIC,GAAGF,KAAKO,GAAK,GACzBG,GAAQT,EAAIC,GAAGF,KAAKO,GAAK,GAExBa,GACDC,EAAMd,GAAKqB,KAAK,CAACX,EAAGC,IAMxC,IAAIW,EAAY,GAEhB,IAAKtB,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC1B,MAAMuB,EAAM7B,EAAI8B,IAAIC,OAAOC,KAAKZ,EAAMd,KAAS,EAAE,GAAI,GACrDsB,EAAUtB,GAAO,CAACuB,EAAI,GAAIA,EAAI,IAGlC,OAAOD,EAoGJ,SAASK,EAASC,EAAMC,EAAQC,EAAU,EAAGC,EAAU,GAC1DrC,EAAIC,GAAGqC,QAAQJ,EAAKV,MAAOU,EAAKZ,QAAQ,CAAClB,EAAGC,KACxC,MAAMkC,EAASnC,EAAIgC,EACbI,EAASnC,EAAIgC,EACbI,EAAIN,EAAOO,aAAaH,EAAQC,GACjCC,GAELP,EAAKS,QAAQvC,EAAGC,EAAGoC,MAGpB,SAASG,EAAaT,EAAQU,GACjCA,EAASC,QAAO,CAACC,EAAI3C,EAAGC,IAAM8B,EAAOa,WAAW5C,EAAGC,GAAK,EAAIL,EAAIiD,KAAKC,cAElE,SAASC,EAAkBhD,EAAMC,EAAGC,EAAG+C,EAAU,IACpD,IAAIC,EAAIC,EAAIC,EAIZ,GAH2B,QAA1BF,EAAKD,EAAQhB,eAA4B,IAAPiB,IAAsBD,EAAQhB,QAAU,GAChD,QAA1BkB,EAAKF,EAAQf,eAA4B,IAAPiB,IAAsBF,EAAQf,QAAU,GAChD,QAA1BkB,EAAKH,EAAQI,eAA4B,IAAPD,IAAsBH,EAAQI,QAAU,GACvExD,EAAIC,GAAGwD,SAASrD,EAAGC,GAAG,CAACW,EAAGC,IACnBd,EAAK6C,WAAWhC,EAAGC,MACxB,EACF,OAAO,EACX,MAAMyC,EAAe1D,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QACrDoC,EAAatD,GAAGC,GAAK,EACrB,MAAMwD,EAASC,EAAgB3D,EAAMuD,EAAcN,GAEnD,OADApD,EAAI2D,KAAKI,KAAKL,GACPG,EAEJ,SAASC,EAAgB3D,EAAMuD,EAAcN,EAAU,IAC1D,IAAIC,EAAIC,EAAIC,EACe,QAA1BF,EAAKD,EAAQhB,eAA4B,IAAPiB,IAAsBD,EAAQhB,QAAU,GAChD,QAA1BkB,EAAKF,EAAQf,eAA4B,IAAPiB,IAAsBF,EAAQf,QAAU,GAChD,QAA1BkB,EAAKH,EAAQI,eAA4B,IAAPD,IAAsBH,EAAQI,QAAU,GAC3E,MAAMQ,EAAehE,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QACrD,IAAI2C,GAAW,EAEfjE,EAAIC,GAAGqC,QAAQnC,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAACN,EAAGC,KACxC,MAAMiD,EAAQlD,EAAIoC,EAAQhB,QACpB+B,EAAQlD,EAAImC,EAAQf,QACtBqB,EAAaU,IAAIF,EAAOC,GACpBhE,EAAKkE,SAASrD,EAAGC,KACjBgD,GAAW,IAGV9D,EAAK6C,WAAWhC,EAAGC,IACE,GAAzBd,EAAKmE,WAAWtD,EAAGC,IAChBd,EAAKmE,WAAWtD,EAAGC,IAAMmC,EAAQI,UACrCQ,EAAahD,GAAGC,GAAK,MAG7B,IAAIsD,GAAQ,EACZ,IAAK,IAAIvD,EAAI,EAAGA,EAAIgD,EAAaxC,QAAUyC,IAAYjD,EACnD,IAAK,IAAIC,EAAI,EAAGA,EAAI+C,EAAa1C,SAAW2C,IAAYhD,EAC1B,GAAtB+C,EAAahD,GAAGC,KACZsD,GACAP,EAAaQ,UAAUxD,EAAGC,EAAG,EAAG,GAChCsD,GAAQ,GAGRN,GAAW,GAQ3B,OADAjE,EAAI2D,KAAKI,KAAKC,GACPC,EAEJ,SAASQ,EAAkBtE,EAAMuD,EAAcgB,EAAiB,EAAGC,EAAiB,GACvF,MAAMX,EAAehE,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QACrD,IAAI2C,EAAW,EAcf,GAZAjE,EAAIC,GAAGqC,QAAQnC,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAACN,EAAGC,KACxC,MAAMiD,EAAQlD,EAAI0D,EACZP,EAAQlD,EAAI0D,EACdjB,EAAaU,IAAIF,EAAOC,GACpBhE,EAAKkE,SAASrD,EAAGC,KACjBgD,EAAW9D,EAAKqB,MAAQrB,EAAKmB,QAG5BnB,EAAK6C,WAAWhC,EAAGC,KACxB+C,EAAahD,GAAGC,GAAK,MAGzBgD,EACA,OAAOA,EACX,IAAIM,GAAQ,EACRK,EAAS,EACTC,EAAU1E,EAAKqB,MAAQrB,EAAKmB,OAChC,IAAK,IAAIN,EAAI,EAAGA,EAAIgD,EAAaxC,QAASR,EACtC,IAAK,IAAIC,EAAI,EAAGA,EAAI+C,EAAa1C,SAAUL,EACvC,GAA0B,GAAtB+C,EAAahD,GAAGC,GAAS,CACzB,MAAM6D,EAAYd,EAAaQ,UAAUxD,EAAGC,EAAG,EAAG2D,KAClDC,EAAUE,KAAKC,IAAIH,EAASC,GACxBP,EACAA,GAAQ,EAGRN,EAAWY,EAQ3B,OADA7E,EAAI2D,KAAKI,KAAKC,GACPC,EAEJ,SAASgB,EAAmB9E,EAAM+E,EAAaC,EAASC,EAASC,GACpE,MAAMxC,EAAW7C,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QACjDsB,EAAazC,EAAM0C,GACnB7C,EAAIiD,KAAKqC,mBAAmBJ,EAAaC,EAASC,EAASvC,GAAU,EAAOwC,EAAc,GAE1FrF,EAAI2D,KAAKI,KAAKlB,GAEX,SAAS0C,EAAkBpF,EAAMqD,GACpC,IAAK,IAAIxC,EAAI,EAAGA,EAAIb,EAAKqB,MAAOR,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAKmB,OAAQL,IACzBd,EAAKmE,WAAWtD,EAAGC,IAAMuC,GACxBrD,EAAKqF,YAAYxE,EAAGC,EAAGwE,EAAIC,MAAMC,KAAKC,SAAWH,EAAIC,MAAMC,KAAKE,qBACjE1F,EAAK2F,WAAW9E,EAAGC,EAAG,GClatC,IAAIoC,EAAIC,EAID,MAAMyC,EAAUN,EAAIO,KAAK5B,IAAI,QAAQ6B,MAC/BC,EAAQT,EAAIO,KAAK5B,IAAI,SAAS6B,MAC9BE,EAAOV,EAAIO,KAAK5B,IAAI,QAAQ6B,MAC5BG,EAA0G,QAA3F9C,EAA4C,QAAtCD,EAAKoC,EAAIO,KAAK5B,IAAI,sBAAmC,IAAPf,OAAgB,EAASA,EAAG4C,aAA0B,IAAP3C,EAAgBA,GAAM,EACxI+C,EAAOZ,EAAIO,KAAK5B,IAAI,QAAQ6B,MAC5BK,EAAOb,EAAIO,KAAK5B,IAAI,QAAQ6B,MAC5BM,EAAUd,EAAIO,KAAK5B,IAAI,WAAW6B,MAClCO,EAASf,EAAIO,KAAK5B,IAAI,UAAU6B,MAChCQ,EAAYhB,EAAIO,KAAK5B,IAAI,aAAa6B,MACtCS,EAAcjB,EAAIO,KAAK5B,IAAI,eAAe6B,MAC1CU,EAAclB,EAAIO,KAAK5B,IAAI,eAAe6B,MAC1CW,EAAU,CACnBC,CAACd,GAAU,OACXc,CAACX,GAAQ,QACTW,CAACV,GAAO,OACRU,CAACR,GAAO,OACRQ,CAACF,GAAc,cACfE,CAACP,GAAO,OACRO,CAACN,GAAU,UACXM,CAACL,GAAS,SACVK,CAACJ,GAAY,YACbI,CAACH,GAAc,eAEZ,MAAMI,EACTD,YAAYrF,EAAOF,GACfyF,KAAKC,KAAO,EACZD,KAAKE,MAAQjH,EAAI2D,KAAKC,MAAMpC,EAAOF,GACnCyF,KAAKG,MAAQlH,EAAI2D,KAAKC,MAAMpC,EAAOF,GAEvCuF,OACI7G,EAAI2D,KAAKI,KAAKgD,KAAKE,OACnBjH,EAAI2D,KAAKI,KAAKgD,KAAKG,OAEvBL,QACIE,KAAKE,MAAME,KAAK,GAChBJ,KAAKG,MAAMC,KAAK,GAEpB3F,YACI,OAAOuF,KAAKE,MAAMzF,MAEtBF,aACI,OAAOyF,KAAKE,MAAM3F,OAEtBuF,MAAMzG,EAAGC,GACL,OAAO0G,KAAKE,MAAMpG,MAAMT,EAAGC,GAE/BwG,aAAazG,EAAGC,GACZ,OAAO0G,KAAKE,MAAMG,aAAahH,EAAGC,GAEtCwG,WAAWzG,EAAGC,GACV,OAAQ0G,KAAKjG,QAAQV,EAAGC,IACpB0G,KAAKM,OAAOjH,EAAGC,IACf0G,KAAKO,SAASlH,EAAGC,IACjB0G,KAAK1C,SAASjE,EAAGC,IACjB0G,KAAKQ,UAAUnH,EAAGC,GAE1BwG,UAAUzG,EAAGC,GAET,OADU0G,KAAKE,MAAM7C,IAAIhE,EAAGC,KACf0F,EAEjBc,WAAWzG,EAAGC,GAEV,OADU0G,KAAKE,MAAM7C,IAAIhE,EAAGC,KACf0F,EAEjBc,QAAQzG,EAAGC,GACP,OAAO0G,KAAKE,MAAM7C,IAAIhE,EAAGC,IAAM6F,EAEnCW,OAAOzG,EAAGC,GAEN,OADU0G,KAAKE,MAAM7C,IAAIhE,EAAGC,KACf8F,EAEjBU,aAAazG,EAAGC,GAEZ,OADU0G,KAAKE,MAAM7C,IAAIhE,EAAGC,KACf+F,EAEjBS,SAASzG,EAAGC,GAER,OADU0G,KAAKE,MAAM7C,IAAIhE,EAAGC,KACfmG,EAEjBK,OAAOzG,EAAGC,GACN,MAAMoC,EAAIsE,KAAKE,MAAM7C,IAAIhE,EAAGC,GAC5B,OAAOoC,IAAM4D,GAAQ5D,IAAMkE,EAE/BE,WAAWzG,EAAGC,GACV,OAAO0G,KAAKS,UAAUpH,EAAGC,IAAM0G,KAAKU,OAAOrH,EAAGC,IAAM0G,KAAKW,OAAOtH,EAAGC,GAEvEwG,eAAezG,EAAGC,GACd,OAAO0G,KAAKS,UAAUpH,EAAGC,IAAM0G,KAAKU,OAAOrH,EAAGC,GAElDwG,cAAczG,EAAGC,GACb,OAAQ0G,KAAKS,UAAUpH,EAAGC,IACtB0G,KAAKU,OAAOrH,EAAGC,IACf0G,KAAKW,OAAOtH,EAAGC,IACf0G,KAAK1C,SAASjE,EAAGC,GAEzBwG,aAAazG,EAAGC,GACZ,OAAO0G,KAAKS,UAAUpH,EAAGC,IAAM0G,KAAKU,OAAOrH,EAAGC,GAElDwG,YAAYzG,EAAGC,GACX,OAAO0G,KAAKY,cAAcvH,EAAGC,IAAM0G,KAAKY,cAAcvH,EAAGC,GAE7DwG,cAAczG,EAAGC,GACb,OAAO0G,KAAKU,OAAOrH,EAAGC,GAE1BwG,SAASzG,EAAGC,GACR,MAAMoC,EAAIsE,KAAKE,MAAM7C,IAAIhE,EAAGC,GAC5B,OAAOoC,IAAMgE,GAAahE,IAAMiE,EAEpCG,OAAOzG,EAAGC,GACN,OAAO0G,KAAKE,MAAM7C,IAAIhE,EAAGC,KAAOiG,EAEpCO,UAAUzG,EAAGC,GACT,OAAO0G,KAAKE,MAAM7C,IAAIhE,EAAGC,KAAOkG,EAEpCM,YAAYzG,EAAGC,GACX,OAAO0G,KAAKW,OAAOtH,EAAGC,IAAM0G,KAAKQ,UAAUnH,EAAGC,GAElDwG,MAAMzG,EAAGC,GACL,OAAQ0G,KAAKE,MAAM7C,IAAIhE,EAAGC,IAAM,GAAK,EAEzCwG,aAAazG,EAAGC,GACZ,OAAO0G,KAAKE,MAAM7C,IAAIhE,EAAGC,IAAM,EAEnCwG,QAAQzG,EAAGC,EAAG2F,GAIV,GAHIA,aAAgBP,EAAIO,KAAK4B,OACzB5B,EAAOA,EAAKC,OAEI,iBAATD,EAAmB,CAC1B,MAAM6B,EAAMpC,EAAIO,KAAKiB,MAAMjB,GAC3B,IAAK6B,EACD,MAAM,IAAIC,MAAM,uBAAyB9B,GAC7CA,EAAO6B,EAAI5B,MAEf,QAAKc,KAAKE,MAAMpG,MAAMT,EAAGC,KAEzB0G,KAAKE,MAAM7G,GAAGC,GAAK2F,GACZ,GAEXa,QAAQzG,EAAGC,EAAG2F,GAIV,GAHIA,aAAgBP,EAAIO,KAAK4B,OACzB5B,EAAOA,EAAKC,OAEI,iBAATD,EAAmB,CAC1B,MAAM6B,EAAMpC,EAAIO,KAAKiB,MAAMjB,GAC3B,IAAK6B,EACD,MAAM,IAAIC,MAAM,uBAAyB9B,GAC7CA,EAAO6B,EAAI5B,MAEf,OAAOc,KAAKE,MAAMpG,MAAMT,EAAGC,IAAM0G,KAAKE,MAAM7G,GAAGC,IAAM2F,EAEzDa,WAAWkB,EAAIC,GACX,OAAO,EAEXnB,iBACIE,KAAKG,MAAMpE,QAAO,CAACC,EAAI3C,EAAGC,IACf4H,EAA0BlB,KAAM3G,EAAGC,KAGlDwG,WAAWzG,EAAGC,GACV,OAAO0G,KAAKG,MAAM9G,GAAGC,IChK7B,MAAM6H,EAAQzC,EAAIC,MAAMC,KACjB,MAAMwC,EACTtB,YAAYuB,GACRrB,KAAKsB,aAAe,EACpBtB,KAAKuB,eAAgB,EACrBvB,KAAKqB,IAAMA,EACXrB,KAAKG,MAAQlH,EAAI2D,KAAKC,MAAMwE,EAAI5G,MAAO4G,EAAI9G,QAE/C0F,WACI,OAAOD,KAAKqB,IAAIpB,KAEpBA,SAASvE,GACLsE,KAAKqB,IAAIpB,KAAOvE,EAEpBjB,YACI,OAAOuF,KAAKqB,IAAI5G,MAEpBF,aACI,OAAOyF,KAAKqB,IAAI9G,OAEpBuF,MAAMzG,EAAGC,GACL,OAAO0G,KAAKqB,IAAIvH,MAAMT,EAAGC,GAE7BwG,aAAazG,EAAGC,GACZ,OAAO0G,KAAKqB,IAAIhB,aAAahH,EAAGC,GAEpCwG,YAAYzG,EAAGC,EAAGkI,GACd,OAAOxB,KAAKqB,IAAII,SAASpI,EAAGC,GAAGmF,YAAY+C,GAE/C1B,YAAYzG,EAAGC,EAAGkI,GACdxB,KAAKuB,eAAgB,EACrBvB,KAAKqB,IAAIK,KAAKrI,EAAGC,GAAGqI,YAAYH,GAEpC1B,cAAczG,EAAGC,EAAGkI,GAChBxB,KAAKuB,eAAgB,EACrBvB,KAAKqB,IAAIK,KAAKrI,EAAGC,GAAGsI,cAAcJ,GAEtC1B,QAAQzG,EAAGC,EAAG2F,GACV,OAAOe,KAAKqB,IAAII,SAASpI,EAAGC,GAAGuI,QAAQ5C,GAE3Ca,QAAQzG,EAAGC,EAAG2F,EAAM6C,GAEhB,OADA9B,KAAKuB,eAAgB,EACdvB,KAAKqB,IAAIzF,QAAQvC,EAAGC,EAAG2F,EAAM6C,GAExChC,aAAazG,EAAGC,GACZ,IAAK0G,KAAKlG,MAAMT,EAAGC,GACf,OAAO,EAGX,OAFa0G,KAAKqB,IAAIK,KAAKrI,EAAGC,GACZyI,sBACN7C,MAEhBY,QACIE,KAAKuB,eAAgB,EACrBvB,KAAKqB,IAAIW,MAAMC,SAASC,GAAMA,EAAEC,UAEpCrC,QAAQzG,EAAGC,GACP,OAAO0G,KAAKqB,IAAII,SAASpI,EAAGC,GAAG8I,UAEnCtC,eAAeuC,GACX,OAAO3D,EAAIzD,KAAKqH,WAAWD,GAE/BvC,QAAQzG,EAAGC,EAAG2B,GAEV,OADA+E,KAAKuB,eAAgB,EACdvB,KAAKqB,IAAIkB,UAAUlJ,EAAGC,EAAG2B,GAEpC6E,SAASzG,EAAGC,GACR,OAAO0G,KAAKqB,IAAImB,SAASnJ,EAAGC,GAEhCwG,WAAWzG,EAAGC,GACV,OAAO0G,KAAKqB,IAAII,SAASpI,EAAGC,GAAGmJ,aAEnC3C,aAAazG,EAAGC,GACZ,OAAO0G,KAAKqB,IAAII,SAASpI,EAAGC,GAAGoJ,eAEnC5C,eAAezG,EAAGC,GACd,OAAO0G,KAAKqB,IACPI,SAASpI,EAAGC,GACZqJ,cAAcjE,EAAIC,MAAMiE,OAAOC,mBAExC/C,cAAczG,EAAGC,GACb,MAAMwJ,EAAO9C,KAAKqB,IAAII,SAASpI,EAAGC,GAClC,OAAQwJ,EAAKH,cAAcjE,EAAIC,MAAMiE,OAAOG,gBACxCD,EAAKE,YAAYtE,EAAIO,KAAKN,MAAMkC,KAAKoC,mBAE7CnD,YAAYzG,EAAGC,GACX,OAAO0G,KAAKqB,IACPI,SAASpI,EAAGC,GACZqJ,cAAcjE,EAAIC,MAAMiE,OAAOM,gBAExCpD,cAAczG,EAAGC,GACb,OAAO0G,KAAKqB,IACPI,SAASpI,EAAGC,GACZqJ,cAAcjE,EAAIC,MAAMiE,OAAOO,kBAExCrD,OAAOzG,EAAGC,GACN,OAAO0G,KAAKqB,IAAII,SAASpI,EAAGC,GAAGoH,SAEnCZ,SAASzG,EAAGC,GACR,OAAO0G,KAAKqB,IAAII,SAASpI,EAAGC,GAAGgE,WAEnCwC,MAAMzG,EAAGC,GACL,OAAO0G,KAAKlG,MAAMT,EAAGC,KAAO0G,KAAKqB,IAAIK,KAAKrI,EAAGC,GAAG8J,UAEpDtD,WAAWzG,EAAGC,GACV,IAAK0G,KAAKlG,MAAMT,EAAGC,GACf,OAAO,EACX,MAAMoI,EAAO1B,KAAKqB,IAAIK,KAAKrI,EAAGC,GAC9B,QAAIoI,EAAK0B,aAEL1B,EAAKhB,SAIbZ,UAAUzG,EAAGC,GACT,OAAO0G,KAAKlG,MAAMT,EAAGC,IAAM0G,KAAKqB,IAAIK,KAAKrI,EAAGC,GAAG8J,UAEnDtD,QAAQzG,EAAGC,GACP,OAAO0G,KAAK/D,WAAW5C,EAAGC,GAE9BwG,SAASzG,EAAGC,GACR,OAAO0G,KAAKqB,IACPI,SAASpI,EAAGC,GACZ0J,YAAYtE,EAAIO,KAAKN,MAAMkC,KAAKwC,UAEzCvD,OAAOzG,EAAGC,GACN,OAAO0G,KAAKqB,IACPI,SAASpI,EAAGC,GACZ0J,YAAYtE,EAAIO,KAAKN,MAAMkC,KAAKyC,WAEzCxD,aAAazG,EAAGC,GACZ,OAAO0G,KAAKqB,IACPI,SAASpI,EAAGC,GACZqJ,cAAcjE,EAAIC,MAAMiE,OAAOW,qBAExCzD,OAAOzG,EAAGC,GACN,OAAO0G,KAAKqB,IACPI,SAASpI,EAAGC,GACZ0J,YAAYtE,EAAIO,KAAKN,MAAMkC,KAAK2C,cAEzC1D,UAAUzG,EAAGC,GACT,IAAK0G,KAAKlG,MAAMT,EAAGC,GACf,OAAO,EACX,MAAMoI,EAAO1B,KAAKqB,IAAIK,KAAKrI,EAAGC,GAC9B,QAAUoI,EAAK+B,UAAU/E,EAAIC,MAAM+E,MAAMC,UACpCjC,EAAKsB,YAAYtE,EAAIO,KAAKN,MAAMkC,KAAK+C,kBAE9C9D,YAAYzG,EAAGC,GACX,IAAK0G,KAAKlG,MAAMT,EAAGC,GACf,OAAO,EACX,MAAMoI,EAAO1B,KAAKqB,IAAIK,KAAKrI,EAAGC,GAC9B,OAAQoI,EAAKmC,aAAanF,EAAIC,MAAM+E,MAAMC,SACtCjC,EAAKsB,YAAYtE,EAAIO,KAAKN,MAAMkC,KAAK+C,kBAE7C9D,WAAWzG,EAAGC,GACV,OAAO0G,KAAKoC,QAAQ/I,EAAGC,IAAM0G,KAAKwC,SAASnJ,EAAGC,GAElDwG,WAAWzG,EAAGC,GACV,MAAMwJ,EAAO9C,KAAKqB,IAAII,SAASpI,EAAGC,GAClC,QAASwJ,EAAKL,cAAgBK,EAAKlC,iBAKvCd,SACI,MAAM1G,EAAO,IAAIgI,EAAQpB,KAAKqB,IAAIyC,SAGlC,OAFA1K,EAAKkI,aAAetB,KAAKsB,aACzBlI,EAAKmI,cAAgBvB,KAAKuB,cACnBnI,EAEX0G,QAAQiE,GACJ/D,KAAKqB,IAAI2C,KAAKD,EAAO1C,KACrBrB,KAAKsB,aAAeyC,EAAOzC,aAC3BtB,KAAKuB,cAAgBwC,EAAOxC,cAEhCzB,OACI7G,EAAI2D,KAAKI,KAAKgD,KAAKG,OAEvBL,cAAczG,EAAGC,GACb,OAAO0G,KAAKqB,IAAIK,KAAKrI,EAAGC,GAAG2K,WAE/BnE,cAAczG,EAAGC,EAAG4K,GAChBlE,KAAKqB,IAAIK,KAAKrI,EAAGC,GAAG2K,WAAaC,EAErCpE,UACQE,KAAKuB,eACL7C,EAAI2C,IAAI8C,QAAQnE,KAAKqB,KAEzBrB,KAAKuB,eAAgB,EAEzBzB,YAAYsE,EAAQ/K,EAAGC,GAEnB,OADA0G,KAAKuB,eAAgB,EACd7C,EAAI0F,OAAOC,SAASD,EAAQpE,KAAKqB,IAAKhI,EAAGC,GAEpDwG,gBACI,QAASE,KAAKsB,aAElBxB,WAAWzG,EAAGC,GACV,OAAO0G,KAAKqB,IAAIK,KAAKrI,EAAGC,GAAGgL,UAE/BxE,WAAWzG,EAAGC,EAAGiL,EAAIC,GAAS,GAC1BxE,KAAKuB,eAAgB,EACrBvB,KAAKqB,IAAIK,KAAKrI,EAAGC,GAAGgL,UAAYC,EACtB,GAANA,EACAvE,KAAKqB,IAAIO,cAAcvI,EAAGC,EAAG6H,EAAMsD,eAGnCzE,KAAKqB,IAAIM,YAAYtI,EAAGC,EAAGkL,EAASrD,EAAMuD,mBAAqBvD,EAAMwD,oBAG7E7E,iBACIE,KAAKG,MAAMpE,QAAO,CAACC,EAAI3C,EAAGC,IACf4H,EAA0BlB,KAAM3G,EAAGC,KAGlDwG,WAAWzG,EAAGC,GACV,OAAO0G,KAAKG,MAAM9G,GAAGC,oWCzNtB,MAAMsL,UAAa3L,EAAIC,GAAG2L,OAC7B/E,YAAYzG,EAAGC,EAAGmB,EAAOF,GACrBuK,MAAMzL,EAAGC,EAAGmB,EAAOF,GACnByF,KAAKG,MAAQ,GAEjBL,UAAUiF,EAAIC,GACVhF,KAAK3G,GAAK0L,EACV/E,KAAK1G,GAAK0L,EACNhF,KAAKG,OACLH,KAAKG,MAAM8B,SAASgD,IACXA,IAEDA,EAAE,GAAK,GAAKA,EAAE,GAAK,IAEvBA,EAAE,IAAMF,EACRE,EAAE,IAAMD,QAKjB,SAASE,EAASpK,EAAKqK,EAAUC,EAAYC,EAAY,GAC5D,MAAM9L,EAAMN,EAAIC,GAAGF,KAAKmM,GAClB9L,EAAI2E,KAAKC,IAAInD,EAAI,GAAIA,EAAI,GAAKvB,EAAI,IAAM6L,EAAa,IACrD9L,EAAI0E,KAAKC,IAAInD,EAAI,GAAIA,EAAI,GAAKvB,EAAI,IAAM6L,EAAa,IACrD3K,EAAQuD,KAAKsH,IAAI/L,EAAI,GAAK6L,IAAeC,EACzC9K,EAASyD,KAAKsH,IAAI/L,EAAI,GAAK6L,IAAeC,EAChD,OAAO,IAAIT,EAAKvL,EAAGC,EAAGmB,EAAOF,GAE1B,MAAMgL,UAAatM,EAAIC,GAAG2L,OAC7B/E,YAAYzG,EAAGC,EAAGmB,EAAOF,GACrBuK,MAAMzL,EAAGC,EAAGmB,EAAOF,GACnByF,KAAKG,MAAQ,GACbH,KAAKwF,KAAO,KAEhBC,SACI,OAAOzF,KAAK3G,EAAI2E,KAAK0H,MAAM1F,KAAKvF,MAAQ,GAE5CkL,SACI,OAAO3F,KAAK1G,EAAI0E,KAAK0H,MAAM1F,KAAKzF,OAAS,GAE7CuF,UAAUiF,EAAIC,GACVhF,KAAK3G,GAAK0L,EACV/E,KAAK1G,GAAK0L,EACNhF,KAAKG,OACLH,KAAKG,MAAM8B,SAASgD,IACXA,IAEDA,EAAE,GAAK,GAAKA,EAAE,GAAK,IAEvBA,EAAE,IAAMF,EACRE,EAAE,IAAMD,OAGZhF,KAAKwF,MACLxF,KAAKwF,KAAKI,UAAUb,EAAIC,ICpD7B,SAASa,EAAYC,EAAQC,EAAW,IA+B3C,OA9BAD,EAASA,GAAU,GACnBC,EAAWA,GAAY,GACvBC,OAAOC,QAAQF,GAAU9D,SAAQ,EAAEiE,EAAKC,MACpC,IAAIC,EAAON,EAAOI,GAClB,GAAY,SAARA,EAIA,iBAHaG,IAATD,IACAN,EAAOI,GAAOC,IAItB,IAAe,IAAXA,GAEA,IAAKC,EACD,MAAM,IAAIrF,MAAM,4CAA8CmF,QAKlEE,GAFuB,iBAAXD,GAIPG,MAAMC,QAAQJ,GAFZC,GAAQD,GASnB,MAAMK,EAAQvN,EAAIuN,MAAMC,KAAKL,GAC7BN,EAAOI,GAAOM,KAEXV,EAEJ,MAAMY,EACT5G,YAAYgG,EAAQC,EAAW,IAC3B/F,KAAK3D,QAAU,GACf2D,KAAKG,MAAQ,GACbH,KAAK2G,YAAYb,EAAQC,GAE7BjG,YAAYgG,EAAQC,EAAW,IAC3B/F,KAAK3D,QAAUwJ,EAAYC,EAAQC,GAEvCjG,OAAO1G,GACH,MAAM0D,EAASkD,KAAK4G,MAAMxN,GAQ1B,OAPI0D,IACKA,EAAOqD,OACe,GAAvBrD,EAAOqD,MAAM0G,SACb/J,EAAOqD,MAAM2G,OAAOhM,IAASA,IAAkB,GAAXA,EAAI,OACxCgC,EAAOqD,MAAQ4G,EAA2B3N,KAG3C0D,GAGR,IAAIkK,EAAQ,GACZ,MAAMC,UAAmBP,EAC5B5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CACVoB,QAAS,CAAC,aAGlBpH,YAAYgG,EAAQC,EAAW,IAC3B,MAAMmB,EAAUpB,EAAOoB,SAAWnB,EAASmB,QAC3C,GAAIZ,MAAMC,QAAQW,GACdlH,KAAKmH,WAAalO,EAAI8B,IAAIC,OAAOC,KAAKmM,KAAKnO,EAAI8B,IAAIC,OAAQkM,OAE1D,CAAA,GAAsB,iBAAXA,EAIZ,MAAM,IAAInG,MAAM,6FAHhBf,KAAKmH,WAAalO,EAAI8B,IAAIC,OAAOqM,SAASD,KAAKnO,EAAI8B,IAAIC,OAAQkM,IAMvEpH,MAAM1G,GACF,IAAImL,EAAKvE,KAAKmH,aACd,MAAMG,EAAON,EAAMzC,GAKnB,OAJK+C,GACDrO,EAAIsO,MAAM,+BAAiChD,GAGxC+C,EAAKE,OAAOpO,IAQpB,MAAMqO,UAAef,EACxB5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CACVrL,MAAO,GACPF,OAAQ,IAGhBuF,MAAM1G,GACF,MAAMqB,EAAQuF,KAAK3D,QAAQ5B,MAAMiN,QAC3BnN,EAASyF,KAAK3D,QAAQ9B,OAAOmN,QAC7BzI,EAAOe,KAAK3D,QAAQ4C,MAAQ0I,EAC5BC,EAAW3O,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,OAAQ,GACnDsN,EAAW7J,KAAK0H,MAAM,GAAMjL,GAC5BqN,EAAWrN,EACXsN,EAAY/J,KAAK0H,MAAM,GAAMnL,GAC7ByN,EAAYzN,EAWZ0N,EAVO,IAAIhP,EAAIiP,KAAKC,KAAK,CAC3BC,OAAQ,EACRP,SAAUA,EACVE,UAAWA,EACXD,SAAUA,EACVE,UAAWA,EACXK,cAAe,GACfC,gBAAiB,YACjBC,mBAAoB,cAEJ3B,MAAMgB,EAASnN,MAAOmN,EAASrN,QAAQ,CAAClB,EAAGC,IAAOsO,EAASvO,GAAGC,GAAK,IAEjFkP,EAAQxK,KAAK0H,OAAOtM,EAAKqB,MAAQwN,EAAOxN,OAAS,GACjDsK,EAAKyD,EAAQP,EAAO5O,EACpBoP,EAAQzK,KAAK0H,OAAOtM,EAAKmB,OAAS0N,EAAO1N,QAAU,GACnDyK,EAAKyD,EAAQR,EAAO3O,EAO1B,OALAsO,EAAS3F,SAAQ,CAACvG,EAAGrC,EAAGC,KAChBoC,GACAtC,EAAKwC,QAAQvC,EAAI0L,EAAIzL,EAAI0L,EAAI/F,MAErChG,EAAI2D,KAAKI,KAAK4K,GACP,IAAIc,EAAWF,EAAOC,EAAOR,EAAOxN,MAAOwN,EAAO1N,SAS1D,MAAMoO,UAAuBjC,EAChC5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CACVrL,MAAO,GACPF,OAAQ,KAGhBuF,MAAM1G,GACF,MAAMqB,EAAQuF,KAAK3D,QAAQ5B,MAAMiN,QAC3BnN,EAASyF,KAAK3D,QAAQ9B,OAAOmN,QAC7BzI,EAAOe,KAAK3D,QAAQ4C,MAAQ0I,EAC5BiB,EAAY5K,KAAK0H,MAAM,GAAMjL,GAC7BoO,EAAatO,EACbuO,EAAarO,EACbsO,EAAc/K,KAAK0H,MAAM,GAAMnL,GAE/ByO,EAAQhL,KAAK0H,MAAMtM,EAAKqB,MAAQ,EAAImO,EAAY,EAAI,GACpDK,EAAQ7P,EAAKmB,OAASsO,EAAa,EACnCK,EAASlL,KAAK0H,MAAMtM,EAAKqB,MAAQ,EAAIqO,EAAa,EAAI,GACtDK,EAAS/P,EAAKmB,OAASwO,EAAc,EAC3C9P,EAAIC,GAAGqC,QAAQyN,EAAOC,EAAOL,EAAWC,GAAY,CAACxP,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KACjFhG,EAAIC,GAAGqC,QAAQ2N,EAAQC,EAAQL,EAAYC,GAAa,CAAC1P,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KACrF,MAAMqI,EAAO,IAAIoB,EAAW1K,KAAKC,IAAI+K,EAAOE,GAASlL,KAAKC,IAAIgL,EAAOE,GAASnL,KAAKoL,IAAIR,EAAWE,GAAa9K,KAAKoL,IAAIP,EAAYE,IAEpI,OADAzB,EAAKnH,MAAMlH,EAAIC,GAAGmQ,MAAQ,CAACrL,KAAK0H,MAAMtM,EAAKqB,MAAQ,GAAIrB,EAAKmB,OAAS,GAC9D+M,GAQR,MAAMgC,UAAc5C,EACvB5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CAAErL,MAAO,GAAIF,OAAQ,KAEvCuF,MAAM1G,GACF,MAAMqB,EAAQuF,KAAK3D,QAAQ5B,MAAMiN,QAC3BnN,EAASyF,KAAK3D,QAAQ9B,OAAOmN,QAC7BzI,EAAOe,KAAK3D,QAAQ4C,MAAQ0I,EAC5BiB,EAAYnO,EACZqO,EAAa9K,KAAKoL,IAAI,EAAGpL,KAAK0H,MAAOjL,EAAQxB,EAAI8B,IAAIC,OAAOwL,MAAM,GAAI,IAAO,MAC7EqC,EAAa7K,KAAKoL,IAAI,EAAGpL,KAAK0H,MAAOnL,EAAStB,EAAI8B,IAAIC,OAAOwL,MAAM,GAAI,IAAO,MAC9EuC,EAAcxO,EACdyO,EAAQhL,KAAK0H,OAAOtM,EAAKqB,MAAQmO,GAAa,GAC9CM,EAASF,EACX/P,EAAI8B,IAAIC,OAAOwL,MAAM,EAAGxI,KAAKoL,IAAI,EAAGR,EAAYE,EAAa,IAC3DK,EAASnL,KAAK0H,OAAOtM,EAAKmB,OAASwO,GAAe,GAClDE,EAAQE,EACVlQ,EAAI8B,IAAIC,OAAOwL,MAAM,EAAGxI,KAAKoL,IAAI,EAAGL,EAAcF,EAAa,IAGnE,OAFA5P,EAAIC,GAAGqC,QAAQyN,EAAOC,EAAOL,EAAWC,GAAY,CAACxP,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KACjFhG,EAAIC,GAAGqC,QAAQ2N,EAAQC,EAAQL,EAAYC,GAAa,CAAC1P,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KAC9E,IAAIyJ,EAAWM,EAAOG,EAAQnL,KAAKoL,IAAIR,EAAWE,GAAa9K,KAAKoL,IAAIP,EAAYE,KAQ5F,MAAMQ,UAAyB7C,EAClC5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CAAErL,MAAO,EAAGF,OAAQ,IAEtCuF,MAAM1G,GACF,MAAMqB,EAAQuF,KAAK3D,QAAQ5B,MAAMiN,QAC3BnN,EAASyF,KAAK3D,QAAQ9B,OAAOmN,QAC7BzI,EAAOe,KAAK3D,QAAQ4C,MAAQ0I,EAClC,IAAI6B,EAAaxL,KAAKoL,IAAI,EAAGpL,KAAK0H,MAAOjL,EAAQxB,EAAI8B,IAAIC,OAAOwL,MAAM,GAAI,IAAO,MAI7EiD,EAAczL,KAAKoL,IAAI,EAAGpL,KAAK0H,MAAOnL,EAAStB,EAAI8B,IAAIC,OAAOwL,MAAM,GAAI,IAAO,MAInF,MAAMnN,EAAI2E,KAAK0H,OAAOtM,EAAKqB,MAAQA,GAAS,GACtCnB,EAAI0E,KAAK0H,OAAOtM,EAAKmB,OAASkP,GAAe,GACnDxQ,EAAIC,GAAGqC,QAAQlC,EAAGC,EAAGmB,EAAOgP,GAAa,CAACpQ,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KACtE,MAAMyK,EAAK1L,KAAK0H,OAAOtM,EAAKqB,MAAQ+O,GAAc,GAC5CG,EAAK3L,KAAK0H,OAAOtM,EAAKmB,OAASA,GAAU,GAE/C,OADAtB,EAAIC,GAAGqC,QAAQmO,EAAIC,EAAIH,EAAYjP,GAAQ,CAAClB,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KACjE,IAAIyJ,EAAW1K,KAAKC,IAAI5E,EAAGqQ,GAAK1L,KAAKC,IAAI3E,EAAGqQ,GAAK3L,KAAKoL,IAAI3O,EAAO+O,GAAaxL,KAAKoL,IAAI7O,EAAQkP,KAQvG,MAAMG,UAAoBlD,EAC7B5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CACVrL,MAAO,CAAC,EAAG,GACXF,OAAQ,CAAC,EAAG,KAGpBuF,MAAM1G,GACF,MAAMqB,EAAQuF,KAAK3D,QAAQ5B,MAAMiN,QAC3BnN,EAASyF,KAAK3D,QAAQ9B,OAAOmN,QAC7BzI,EAAOe,KAAK3D,QAAQ4C,MAAQ0I,EAC5BtO,EAAI2E,KAAK0H,OAAOtM,EAAKqB,MAAQA,GAAS,GACtCnB,EAAI0E,KAAK0H,OAAOtM,EAAKmB,OAASA,GAAU,GAE9C,OADAtB,EAAIC,GAAGqC,QAAQlC,EAAGC,EAAGmB,EAAOF,GAAQ,CAAClB,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KAC1D,IAAIyJ,EAAWrP,EAAGC,EAAGmB,EAAOF,IAQpC,MAAMsP,UAAiBnD,EAC1B5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CACVgE,OAAQ,CAAC,EAAG,KAGpBhK,MAAM1G,GACF,MAAM0Q,EAAS9J,KAAK3D,QAAQyN,OAAOpC,QAC7BzI,EAAOe,KAAK3D,QAAQ4C,MAAQ0I,EAC5BtO,EAAI2E,KAAK0H,MAAMtM,EAAKqB,MAAQ,GAC5BnB,EAAI0E,KAAK0H,MAAMtM,EAAKmB,OAAS,GAInC,OAHIuP,EAAS,GACT7Q,EAAIC,GAAG6Q,UAAU1Q,EAAGC,EAAGwQ,GAAQ,CAACzQ,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KAEzD,IAAIyJ,EAAWrP,EAAIyQ,EAAQxQ,EAAIwQ,EAAiB,EAATA,EAAa,EAAY,EAATA,EAAa,IAQ5E,MAAME,UAAoBtD,EAC7B5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CACVgE,OAAQ,CAAC,EAAG,IACZG,aAAc,EACdC,YAAa,EACbC,WAAY,KAGpBrK,MAAM1G,GACF,MAAM0Q,EAAS9J,KAAK3D,QAAQyN,OAAOpC,QAC7BuC,EAAejK,KAAK3D,QAAQ4N,aAAavC,QACzCwC,EAAclK,KAAK3D,QAAQ6N,YAAYxC,QACvCzI,EAAOe,KAAK3D,QAAQ4C,MAAQ0I,EAC5BtO,EAAI2E,KAAK0H,MAAMtM,EAAKqB,MAAQ,GAC5BnB,EAAI0E,KAAK0H,MAAMtM,EAAKmB,OAAS,GAMnC,OALAtB,EAAIC,GAAG6Q,UAAU1Q,EAAGC,EAAGwQ,GAAQ,CAACzQ,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KACxD6K,EAASG,EAAeC,GACxBjR,EAAI8B,IAAIC,OAAOoP,OAAOpK,KAAK3D,QAAQ8N,WAAWzC,UAC9CzO,EAAIC,GAAG6Q,UAAU1Q,EAAGC,EAAGL,EAAI8B,IAAIC,OAAOwL,MAAM0D,EAAaJ,EAASI,IAAc,CAAC7Q,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG,KAE1G,IAAIoP,EAAWrP,EAAIyQ,EAAQxQ,EAAIwQ,EAAiB,EAATA,EAAa,EAAY,EAATA,EAAa,IAQ5E,MAAMO,UAAmB3D,EAC5B5G,YAAYgG,EAAS,IACjBhB,MAAMgB,EAAQ,CACV5B,MAAO,CAAC,EAAG,IACXzJ,MAAO,CAAC,EAAG,IACXF,OAAQ,CAAC,EAAG,MAGpBuF,MAAM1G,GACF,IAAIa,EAAGZ,EAAGC,EACNgR,EAAatK,KAAK3D,QAAQ6H,MAAMwD,QACpC,MAAMjN,EAAQuF,KAAK3D,QAAQ5B,MAAMiN,QAC3BnN,EAASyF,KAAK3D,QAAQ9B,OAAOmN,QAC7BzI,EAAOe,KAAK3D,QAAQ4C,MAAQ0I,EAC5B4C,EAAOvM,KAAK0H,MAAMtM,EAAKqB,MAAQ,GAAKuD,KAAK0H,MAAMjL,EAAQ,GACvD+P,EAAOxM,KAAK0H,MAAMtM,EAAKqB,MAAQ,GAAKuD,KAAK0H,MAAMjL,EAAQ,GACvDgQ,EAAOzM,KAAK0H,MAAMtM,EAAKmB,OAAS,GAAKyD,KAAK0H,MAAMnL,EAAS,GACzDmQ,EAAO1M,KAAK0H,MAAMtM,EAAKmB,OAAS,GAAKyD,KAAK0H,MAAMnL,EAAS,GAC/D,IAAIoQ,EAAO3M,KAAK0H,MAAMtM,EAAKqB,MAAQ,GAC/BmQ,EAAQD,EACRE,EAAM7M,KAAK0H,MAAMtM,EAAKmB,OAAS,GAC/BuQ,EAASD,EAMb,IALA5R,EAAIC,GAAG6Q,UAAUY,EAAME,EAAK,GAAG,CAACxR,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KAC5D0L,GAAQ,EACRC,GAAS,EACTC,GAAO,EACPC,GAAU,EACL7Q,EAAI,EAAGA,EAAIqQ,GAGZ,GAFAjR,EAAIJ,EAAI8B,IAAIC,OAAOwL,MAAM+D,EAAMC,GAC/BlR,EAAIL,EAAI8B,IAAIC,OAAOwL,MAAMiE,EAAMC,GAC3BtR,EAAKuB,MAAMtB,EAAGC,GAAI,CAClB,GAAID,EAAI,EAAIkR,EACR,SACJ,GAAIlR,EAAI,EAAImR,EACR,SACJ,GAAIlR,EAAI,EAAImR,EACR,SACJ,GAAInR,EAAI,EAAIoR,EACR,SACJC,EAAO3M,KAAKC,IAAI5E,EAAI,EAAGsR,GACvBC,EAAQ5M,KAAKoL,IAAI/P,EAAI,EAAGuR,GACxBC,EAAM7M,KAAKC,IAAI3E,EAAI,EAAGuR,GACtBC,EAAS9M,KAAKoL,IAAI9P,EAAI,EAAGwR,GACzB7R,EAAIC,GAAG6Q,UAAU1Q,EAAGC,EAAG,GAAG,CAACD,EAAGC,IAAMF,EAAKwC,QAAQvC,EAAGC,EAAG2F,KACvDhF,IAGR,OAAO,IAAIyO,EAAWiC,EAAME,EAAKD,EAAQD,EAAO,EAAGG,EAASD,EAAM,IAQnE,SAASE,EAAQxG,EAAI+C,GAExB,OADAN,EAAMzC,GAAM+C,EACLA,IAEH,UAAW,IAAIsC,kGAlRhB,SAAoB9D,EAAQ1M,GAG/B,OADe,IAAI6N,EAAWnB,GAChB0B,OAAOpO,oBA2ClB,SAAgB0M,EAAQ1M,GAG3B,OADe,IAAIqO,EAAO3B,GACZ0B,OAAOpO,oCA8BlB,SAAwB0M,EAAQ1M,GAGnC,OADe,IAAIuP,EAAe7C,GACpB0B,OAAOpO,kBAyBlB,SAAe0M,EAAQ1M,GAG1B,OADe,IAAIkQ,EAAMxD,GACX0B,OAAOpO,wCA2BlB,SAA0B0M,EAAQ1M,GAGrC,OADe,IAAImQ,EAAiBzD,GACtB0B,OAAOpO,8BAmBlB,SAAqB0M,EAAQ1M,GAGhC,OADe,IAAIwQ,EAAY9D,GACjB0B,OAAOpO,wBAmBlB,SAAkB0M,EAAQ1M,GAG7B,OADe,IAAIyQ,EAAS/D,GACd0B,OAAOpO,8BA0BlB,SAAqB0M,EAAQ1M,GAGhC,OADe,IAAI4Q,EAAYlE,GACjB0B,OAAOpO,4BAoDlB,SAAoB0M,EAAQ1M,GAG/B,OADe,IAAIiR,EAAWvE,GAChB0B,OAAOpO,gBC/VzB,MAAMJ,EAAOC,EAAIC,GAAGF,KACb,SAASgS,EAAU5R,EAAM0B,EAAKvB,GACjC,IAAKH,EAAKU,MAAMgB,EAAI,GAAIA,EAAI,IACxB,OAAO,EAEX,IAAK1B,EAAKsB,WAAWI,EAAI,GAAIA,EAAI,IAC7B,OAAO,EACX,MAAMwM,EAAO,CAACxM,EAAI,GAAKvB,EAAI,GAAIuB,EAAI,GAAKvB,EAAI,IAC5C,QAAKH,EAAKU,MAAMwN,EAAK,GAAIA,EAAK,OAGzBlO,EAAKW,QAAQuN,EAAK,GAAIA,EAAK,IAkC7B,SAAS2D,EAAW1R,EAAK2R,GAC5B,OAAI3R,GAAON,EAAIC,GAAGiS,IAAM5R,GAAON,EAAIC,GAAGmQ,KAC3B6B,EAAQ,GAAGxD,QAGXwD,EAAQ,GAAGxD,QAGnB,SAAS0D,GAAkBhS,EAAM+G,EAAO+K,GAE3C,IAAI3R,EAAMN,EAAIC,GAAGW,aACjB,GAAIN,GAAON,EAAIC,GAAGW,aAAc,CAC5B,MAAMwR,EAAOpS,EAAI8B,IAAIC,OAAOsQ,SAAS,GACrC,IAAK,IAAIrR,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxBV,EAAM8R,EAAKpR,GACX,MAAM4M,EAASqE,GAASjR,EAAI,GAAK,GAAGsR,GAC9BC,EAAOrL,EAAM5G,GACnB,GAAIiS,IAAoB,GAAZA,EAAK,KAAwB,GAAZA,EAAK,GAAU,CACxC,MAAMzG,EAAKyG,EAAK,GAAKxN,KAAK0H,MAAM1M,EAAKO,GAAK,GAAKsN,GACzC7B,EAAKwG,EAAK,GAAKxN,KAAK0H,MAAM1M,EAAKO,GAAK,GAAKsN,GAC/C,GAAIzN,EAAKU,MAAMiL,EAAIC,GACf,MAGRzL,EAAMN,EAAIC,GAAGW,cAGrB,OAAON,EAEJ,SAASkS,GAAcrS,EAAMC,EAAGC,EAAGC,EAAKmS,GAC3C,IAAIjS,EAAMC,EACV,MAAMiS,EAA0B1S,EAAI8B,IAAIC,OAAOoP,OAAOsB,GAChDE,EAAY,GAMlB,IAAK,IAAIC,EAAO,EAAGA,EAAO,EAAGA,IACzBpS,EAAOJ,EAAIL,EAAK6S,GAAM,GACtBnS,EAAOJ,EAAIN,EAAK6S,GAAM,GACjBA,GAAQtS,IAAQoS,IAChBvS,EAAKU,MAAML,EAAMC,IAClBN,EAAKuB,MAAMlB,EAAMC,KAIjBkS,EAAUC,GAAQ,CAACpS,EAAMC,IAGjC,OAAOkS,EAEJ,MAAME,GACThM,YAAYzD,EAAU,IAClB2D,KAAK8F,OAAS,CACVrL,MAAOxB,EAAIuN,MAAMC,KAAK,GACtBI,OAAQ,CAAC5N,EAAIuN,MAAMC,KAAK,QAASxN,EAAIuN,MAAMC,KAAK,QAChDxH,KAAM0I,EACN+D,cAAe,GACftB,OAAQ,KAEZpK,KAAK2G,YAAYtK,GAErByD,YAAYzD,EAAU,IAIlB,GAHIA,EAAQ5B,QACRuF,KAAK8F,OAAOrL,MAAQxB,EAAIuN,MAAMC,KAAKpK,EAAQ5B,QAE3C4B,EAAQwK,QACsB,iBAAnBxK,EAAQwK,OAAqB,CACpC,MAAMkF,EAAI9S,EAAIuN,MAAMC,KAAKpK,EAAQwK,QACjC7G,KAAK8F,OAAOe,OAAS,CAACkF,EAAGA,GAG7B1P,EAAQ4C,OACRe,KAAK8F,OAAO7G,KAAO5C,EAAQ4C,MAE3B5C,EAAQ+N,SACRpK,KAAK8F,OAAOsE,OAAS/N,EAAQ+N,QAGrCtK,OAAO1G,EAAM+G,EAAQ,IAEjB,GADAA,EAAQA,GAAS4G,EAA2B3N,IACvCH,EAAI8B,IAAIC,OAAOoP,OAAOpK,KAAK8F,OAAOsE,QACnC,OAAO,KACX,MAAM7Q,EAAM6R,GAAkBhS,EAAM+G,EAAOH,KAAK8F,OAAOe,QACvD,GAAItN,IAAQN,EAAIC,GAAGW,aACf,OAAO,KACX,IAAKsG,EAAM5G,GACP,OAAO,KACX,MAAMkB,EAAQuF,KAAK8F,OAAOrL,MAAMiN,QAC1Bb,EAASoE,EAAW1R,EAAKyG,KAAK8F,OAAOe,QACrCmF,EAAU7L,EAAM5G,GACtB,OAAa,GAATkB,EACOuF,KAAKiM,IAAI7S,EAAMG,EAAKyS,EAASnF,GAG7B7G,KAAKkM,QAAQ9S,EAAMG,EAAKyS,EAASnF,EAAQpM,GAGxDqF,SAAS1G,EAAMoS,EAAMjS,EAAKsN,GACtB,IAAIxN,EAAImS,EAAK,GACTlS,EAAIkS,EAAK,GACb,MAAMvM,EAAOe,KAAK8F,OAAO7G,KACzB,IAAK,IAAIhF,EAAI,EAAGA,EAAI4M,EAAQ5M,IACxBb,EAAKwC,QAAQvC,EAAGC,EAAG2F,GACnB5F,GAAKE,EAAI,GACTD,GAAKC,EAAI,GAIb,OAFAF,GAAKE,EAAI,GACTD,GAAKC,EAAI,GACF,CAACF,EAAGC,GAEfwG,IAAI1G,EAAMG,EAAKiS,EAAM3E,GACjB,MAAMsF,EAAMnT,EAAKO,IACVF,EAAGC,GAAK0G,KAAKoM,SAAShT,EAAMoS,EAAMW,EAAKtF,GACxCrB,EAAO6G,EAAeb,EAAMjS,EAAKsN,GAEvC,OADArB,EAAKrF,MAAQsL,GAAcrS,EAAMC,EAAGC,EAAGC,EAAKyG,KAAK8F,OAAO4F,eACjDlG,EAEX1F,QAAQ1G,EAAMG,EAAKiS,EAAM3E,EAAQpM,GAC7B,MAAM0R,EAAMlT,EAAIC,GAAGF,KAAKO,GAClB+S,EAAQ,CAACd,EAAK,GAAKW,EAAI,GAAIX,EAAK,GAAKW,EAAI,IACzCI,EAAS,CAACf,EAAK,GAAKW,EAAI,GAAIX,EAAK,GAAKW,EAAI,IAChDnM,KAAKoM,SAAShT,EAAMoS,EAAMW,EAAKtF,GAC/B,IAAI2F,EAAS,EACTC,EAASjB,EAAK,GACdkB,EAASlB,EAAK,GACdgB,EAAS/R,GAASuQ,EAAU5R,EAAMkT,EAAOH,KACzCnM,KAAKoM,SAAShT,EAAMkT,EAAOH,EAAKtF,GAChC4F,EAASzO,KAAKC,IAAIqO,EAAM,GAAIG,GAC5BC,EAAS1O,KAAKC,IAAIqO,EAAM,GAAII,KAC1BF,GAEFA,EAAS/R,GAASuQ,EAAU5R,EAAMmT,EAAQJ,KAC1CnM,KAAKoM,SAAShT,EAAMmT,EAAQJ,EAAKtF,GACjC4F,EAASzO,KAAKC,IAAIsO,EAAO,GAAIE,GAC7BC,EAAS1O,KAAKC,IAAIsO,EAAO,GAAIG,KAC3BF,GAEN,MAAMhH,EAAO6G,EAAe,CAACI,EAAQC,GAASnT,EAAKsN,EAAQpM,GAO3D,OANA+K,EAAKrF,MAAQ,GACbqF,EAAKrF,MAAM5G,GAAO,CACdiS,EAAK,GAAK3E,EAASsF,EAAI,GACvBX,EAAK,GAAK3E,EAASsF,EAAI,IAGpB3G,GAGR,SAASyG,GAAInG,EAAQ1M,EAAM+G,GAE9B,OADe,IAAI2L,GAAWhG,GAChB0B,OAAOpO,EAAM+G,GAExB,IAAIwM,GAAQ,GACZ,SAAS5B,GAAQxG,EAAIiB,GAGxB,OADAmH,GAAMpI,GAAMiB,EACLA,KAEH,UAAW,IAAIsG,GAAW,CAAE1B,OAAQ,iEA7LrC,SAAmBtI,GAItB,MAHoB,iBAATA,IACPA,EAAO,CAAErH,MAAOqH,IACpBA,EAAKrH,MAAQqH,EAAKrH,OAAS,EACpBxB,EAAI2T,MAEf,SAAoBnS,GAChB,IAAKA,EACD,OAAO,EACX,GAAqB,iBAAVA,EACP,OAAOA,EACX,QAAc4L,IAAV5L,EACA,OAAO,EACX,GAAqB,iBAAVA,EACP,OAAOA,EACN,GAAI6L,MAAMC,QAAQ9L,GACnBA,EAAQxB,EAAI8B,IAAIC,OAAOqM,SAAS5M,GAAS,OAExC,GAAqB,iBAAVA,EACZA,EAAQxB,EAAIuN,MAAMC,KAAKhM,GAAOiN,aAE7B,GAAIjN,aAAiBxB,EAAIuN,MAAMqG,MAChCpS,EAAQA,EAAMiN,YAEb,CACD,MAAMoF,EAAUrS,EAChBA,EAAQsS,OAAOC,SAAS/T,EAAI8B,IAAIC,OAAOqM,SAASyF,IAEpD,OAAOrS,EAxBUwS,CAAWnL,EAAKrH,OAAQ,EAAG,kGCpBzC,MAAMyS,GACTpN,YAAYzD,EAAU,IAClB2D,KAAK3D,QAAU,CACX9B,OAAQ,GACRE,MAAO,GACPqD,QAAS,EACTqP,MAAO,GACPjJ,MAAO,EACPkJ,YAAY,EACZC,WAAYC,EACZC,aAAc,GACdC,WAAY,EACZvO,KAAMwO,GAEVzH,OAAO0H,OAAO1N,KAAK3D,QAASA,GAEhCyD,OAAO1G,GACH,IAAIa,EAAGC,EAAGC,EACNd,EAAGC,EACHqU,EAAeC,EAAcC,EAAaV,EAAOW,EAAUV,EAC3DlJ,EAAQ,EACZyJ,EAAgB3N,KAAK3D,QAAQ9B,QAAU,GACvCqT,EAAe5N,KAAK3D,QAAQ5B,OAAS,GACrCoT,EAAc7N,KAAK3D,QAAQyB,SAAW,EACtCqP,EAAQnN,KAAK3D,QAAQ8Q,OAAS,GAC9BW,EAAW9N,KAAK3D,QAAQ6H,OAAS,EACjCkJ,EAAapN,KAAK3D,QAAQ+Q,aAAc,EACxC,MAAMW,IAAY9U,EAAI8B,IAAIC,OAAOoP,OAAOpK,KAAK3D,QAAQkR,cAG/CF,EAAarN,KAAK3D,QAAQgR,YAAcC,EACxCE,EAAaxN,KAAK3D,QAAQmR,YAAc,EACxCvO,EAAOe,KAAK3D,QAAQ4C,MAAQwO,EAC5BO,EAAW/U,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,OAAQ,GACzD,IAAI0T,EAAW,EACf,KAAOA,EAAWH,GAAY5J,EAAQ4J,GAAU,CAE5C,MAAMrT,EAAQuD,KAAKkQ,OAAQN,EAAeC,IAAgBC,EAAWG,GACjEH,GAAYD,EACVtT,EAASyD,KAAKkQ,OAAQP,EAAgBE,IAAgBC,EAAWG,GACnEH,GAAYD,EAWV5F,EAVO,IAAIhP,EAAIiP,KAAKC,KAAK,CAC3BC,OAAQ,EACRP,SAAU,EACVE,UAAW,EACXD,SAAUrN,EACVuN,UAAWzN,EACX8N,cAAe,GACfC,gBAAiB,YACjBC,mBAAoB,cAEJ3B,MAAMoH,EAASvT,MAAOuT,EAASzT,QAAQ,CAAClB,EAAGC,IAAO0U,EAAS3U,GAAGC,GAAK,IAEvF,IAAI6U,GAAU,EACd,IAAKhU,EAAI,EAAGA,EAAIgT,IAAUgB,EAAShU,IAK/B,GAFAd,EAAIJ,EAAI8B,IAAIC,OAAOwL,MAAM,EAAIyB,EAAO5O,EAAG2U,EAASvT,MAAQwN,EAAOxN,MAAQwN,EAAO5O,EAAI,GAClFC,EAAIL,EAAI8B,IAAIC,OAAOwL,MAAM,EAAIyB,EAAO3O,EAAG0U,EAASzT,OAAS0N,EAAO1N,OAAS0N,EAAO3O,EAAI,GAChF8T,IAAepN,KAAKoO,cAAchV,EAAM4U,GAAW3U,GAAIC,GAAI,CAK3D,IAFA6U,GAAU,EAELlU,EAAI,EAAGA,EAAIgO,EAAOxN,MAAOR,IAE1B,IAAKC,EAAI,EAAGA,EAAI+N,EAAO1N,OAAQL,IAE3B,GAAI8T,EAAS/T,EAAIgO,EAAO5O,GAAGa,EAAI+N,EAAO3O,GAAI,CACtC,MAAM+U,EAAKpU,EAAIgO,EAAO5O,EAAIA,EACpBiV,EAAKpU,EAAI+N,EAAO3O,EAAIA,EAC1BF,EAAKwC,QAAQyS,EAAIC,EAAIrP,GACjB8O,GACA9U,EAAIC,GAAG6Q,UAAUsE,EAAIC,EAAId,GAAY,CAACvT,EAAGC,KACjCd,EAAK6C,WAAWhC,EAAGC,IAInBd,EAAKwC,QAAQ3B,EAAGC,EAAGmT,MAO3C,MAGJc,IACEjK,IAGA+J,EAIV,OADAhV,EAAI2D,KAAKI,KAAKgR,GACP9J,EAEXpE,cAAc1G,EAAM4U,EAAUO,EAAa,EAAGC,EAAa,GACvD,MAAMvR,EAAehE,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QACrD,IAAI2C,GAAW,EAEfjE,EAAIC,GAAGqC,QAAQnC,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAACN,EAAGC,KACxC,MAAMiD,EAAQlD,EAAIsU,EACZnR,EAAQlD,EAAIsU,EACdR,EAAS3Q,IAAIF,EAAOC,GAChBhE,EAAKkE,SAASrD,EAAGC,KACjBgD,GAAW,GAGV9D,EAAK6C,WAAWhC,EAAGC,KACxB+C,EAAahD,GAAGC,GAAK,MAG7B,IAAIsD,GAAQ,EACZ,IAAK,IAAIvD,EAAI,EAAGA,EAAIgD,EAAaxC,QAAUyC,IAAYjD,EACnD,IAAK,IAAIC,EAAI,EAAGA,EAAI+C,EAAa1C,SAAW2C,IAAYhD,EAC1B,GAAtB+C,EAAahD,GAAGC,KACZsD,GACAP,EAAaQ,UAAUxD,EAAGC,EAAG,EAAG,GAChCsD,GAAQ,GAGRN,GAAW,GAQ3B,OADAjE,EAAI2D,KAAKI,KAAKC,GACPC,mDCnIR,MAAMuR,GACT3O,YAAYzD,EAAU,IAClB2D,KAAK3D,QAAU,CACXqS,YAAa,GACbC,UAAW,GAEf3I,OAAO0H,OAAO1N,KAAK3D,QAASA,GAEhCyD,OAAO1G,GACH,IACIK,EAAMC,EACNO,EAAGC,EAAG+K,EAAG5L,EAAGC,EAFZ4K,EAAQ,EAGZ,MAAMyK,EAAY3O,KAAK3D,QAAQsS,UACzBD,EAAc1O,KAAK3D,QAAQqS,YAC3BE,EAAW3V,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QAC3CuB,EAAW7C,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QAC3CsU,EAAY,CACd,CAAC,EAAG,GACJ,CAAC,EAAG,IAER/S,EAASC,QAAO,CAACC,EAAI3C,EAAGC,IAAMF,EAAK6C,WAAW5C,EAAGC,GAAK,EAAIL,EAAIiD,KAAKC,cACnE,MAAM2S,EAAM7V,EAAI8B,IAAIC,OAAOsQ,SAASlS,EAAKqB,MAAQrB,EAAKmB,QACtD,IAAKN,EAAI,EAAGA,EAAI6U,EAAIjI,OAAQ5M,IAGxB,GAFAZ,EAAI2E,KAAK0H,MAAMoJ,EAAI7U,GAAKb,EAAKmB,QAC7BjB,EAAIwV,EAAI7U,GAAKb,EAAKmB,OAIlBnB,EAAK6C,WAAW5C,EAAGC,KACdF,EAAK2V,YAAY1V,EAAGC,GACrB,IAAK2L,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAErB,MAAM+J,EAAYH,EAAU5J,GAO5B,GANAxL,EAAOJ,EAAI2V,EAAU,GACrBtV,EAAOJ,EAAI0V,EAAU,GACrB9U,EAAIyU,EAIAvV,EAAK2V,YAAYtV,EAAMC,GACvB,IAAKQ,EAAI,EAAGA,EAAIyU,IACZlV,GAAQuV,EAAU,GAClBtV,GAAQsV,EAAU,GAEb5V,EAAK2V,YAAYtV,EAAMC,MAJHQ,GASjC,GAEAd,EAAK6C,WAAWxC,EAAMC,IAClBQ,EAAIyU,IACJ1V,EAAIiD,KAAKqC,mBAAmBqQ,EAAUnV,EAAMC,EAAMoC,GAAU,GAIxD8S,EAASvV,GAAGC,GAAKoV,GACjBE,EAASvV,GAAGC,GAAKL,EAAIiD,KAAK+S,SAAS,CAUnC,KAAO5V,IAAMI,GAAQH,IAAMI,GACnBsG,KAAKkP,kBAAkB9V,EAAMC,EAAGC,EAAG0V,IACnC5V,EAAKwC,QAAQvC,EAAGC,EAAG6V,GACnBrT,EAASzC,GAAGC,GAAK,IAGjBF,EAAKwC,QAAQvC,EAAGC,EAAGqO,GACnB7L,EAASzC,GAAGC,GAAK,GAErBD,GAAK2V,EAAU,GACf1V,GAAK0V,EAAU,KAEjB9K,EACF,OAQpB,OAFAjL,EAAI2D,KAAKI,KAAK4R,GACd3V,EAAI2D,KAAKI,KAAKlB,GACPoI,EAEXpE,kBAAkB1G,EAAMC,EAAGC,EAAG0V,GAC1B,QAAI5V,EAAKmH,SAASlH,EAAGC,MAEhBF,EAAK2V,YAAY1V,EAAGC,OAEpBF,EAAK2V,YAAY1V,EAAI2V,EAAU,GAAI1V,EAAI0V,EAAU,OAEjD5V,EAAK2V,YAAY1V,EAAI2V,EAAU,GAAI1V,EAAI0V,EAAU,wDClGvD,MAAMI,GACTtP,YAAYzD,EAAU,IAClB2D,KAAK3D,QAAU,CACXgT,IAAI,EACJC,MAAM,EACNZ,YAAa,GACba,OAAO,EACPC,OAAQC,EACRC,SAAUC,EACVC,KAAMC,GAEV7J,OAAO0H,OAAO1N,KAAK3D,QAASA,GAEhCyD,OAAO1G,GACH,IAAI0W,GAA6B,IAApB9P,KAAK3D,QAAQgT,GACtBU,GAAiC,IAAtB/P,KAAK3D,QAAQiT,KAC5B,MAAMZ,EAAc1O,KAAK3D,QAAQqS,aAC7B1Q,KAAK0H,MAAM1H,KAAKoL,IAAIhQ,EAAKqB,MAAOrB,EAAKmB,QAAU,GAC7CyV,EAAY,GAClB,IAAIC,EAAQ,KACRC,EAAU,KACd,MAAMC,EAAanQ,KAAKoQ,UAAUhJ,KAAKpH,KAAM5G,GAC7C,GAAI4G,KAAK3D,QAAQkT,OAAuC,iBAAvBvP,KAAK3D,QAAQkT,MAAoB,CAC9D,IAAIA,EAAQvP,KAAK3D,QAAQkT,MAErBA,GADU,IAAVA,EACQtW,EAAI8B,IAAIC,OAAOqV,YAAYjX,EAAKqB,MAAOrB,EAAKmB,OAAQ4V,GAGpDlX,EAAI8B,IAAIC,OAAOsV,gBAAgBrX,EAAIC,GAAGG,EAAEkW,GAAQtW,EAAIC,GAAGI,EAAEiW,GAAQY,GAE7EH,EAAUT,MAAQA,EAEtB,GAAIjJ,MAAMC,QAAQvG,KAAK3D,QAAQgT,KAC3B/I,MAAMC,QAAQvG,KAAK3D,QAAQiT,MAAO,CAClC,MAAMD,EAAKrP,KAAK3D,QAAQgT,GACxBY,EAAQhX,EAAI8B,IAAIC,OAAOsV,gBAAgBrX,EAAIC,GAAGG,EAAEgW,GAAKpW,EAAIC,GAAGI,EAAE+V,GAAKc,GACnE,MAAMb,EAAOtP,KAAK3D,QAAQiT,KAC1BY,EAAUjX,EAAI8B,IAAIC,OAAOsV,gBAAgBrX,EAAIC,GAAGG,EAAEiW,GAAOrW,EAAIC,GAAGI,EAAEgW,GAAOa,QAExE,GAAI7J,MAAMC,QAAQvG,KAAK3D,QAAQgT,MAC/B/I,MAAMC,QAAQvG,KAAK3D,QAAQiT,MAAO,CACnC,MAAMD,EAAKrP,KAAK3D,QAAQgT,GACxBY,EAAQhX,EAAI8B,IAAIC,OAAOsV,gBAAgBrX,EAAIC,GAAGG,EAAEgW,GAAKpW,EAAIC,GAAGI,EAAE+V,GAAKc,GAC/DJ,IACAG,EAAUjX,EAAI8B,IAAIC,OAAOqV,YAAYjX,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAAClB,EAAGC,MAG9DL,EAAIC,GAAGqX,gBAAgBlX,EAAGC,EAAG2W,EAAM,GAAIA,EAAM,IACzCvB,IAEGyB,EAAW9W,EAAGC,WAI5B,GAAIgN,MAAMC,QAAQvG,KAAK3D,QAAQiT,QAC/BhJ,MAAMC,QAAQvG,KAAK3D,QAAQgT,IAAK,CACjC,MAAMC,EAAOtP,KAAK3D,QAAQiT,KAC1BY,EAAUjX,EAAI8B,IAAIC,OAAOsV,gBAAgBrX,EAAIC,GAAGG,EAAEiW,GAAOrW,EAAIC,GAAGI,EAAEgW,GAAOa,GACrEL,IACAG,EAAQhX,EAAI8B,IAAIC,OAAOqV,YAAYjX,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAAClB,EAAGC,MACxDL,EAAIC,GAAGqX,gBAAgBlX,EAAGC,EAAG4W,EAAQ,GAAIA,EAAQ,IAAMxB,IAEpDyB,EAAW9W,EAAGC,WAIxBwW,GACLG,EAAQhX,EAAI8B,IAAIC,OAAOqV,YAAYjX,EAAKqB,MAAOrB,EAAKmB,OAAQ4V,GACxDJ,IACAG,EAAUjX,EAAI8B,IAAIC,OAAOqV,YAAYjX,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAAClB,EAAGC,MAG9DL,EAAIC,GAAGqX,gBAAgBlX,EAAGC,EAAG2W,EAAM,GAAIA,EAAM,IACzCvB,IAEGyB,EAAW9W,EAAGC,OAIxByW,IACLG,EAAUjX,EAAI8B,IAAIC,OAAOqV,YAAYjX,EAAKqB,MAAOrB,EAAKmB,OAAQ4V,IAclE,OAZIF,IACAD,EAAUX,GAAKY,EAAMO,QACrBxQ,KAAKyQ,YAAYrX,EAAM6W,EAAM,GAAIA,EAAM,GAAIjQ,KAAK3D,QAAQmT,QAC7B,OAAvBxP,KAAK3D,QAAQkT,QACbS,EAAUT,MAAQS,EAAUX,KAEhCa,IACAF,EAAUV,KAAOY,EAAQM,QACzBxQ,KAAKyQ,YAAYrX,EAAM8W,EAAQ,GAAIA,EAAQ,GAAIlQ,KAAK3D,QAAQqT,UACjC,SAAvB1P,KAAK3D,QAAQkT,QACbS,EAAUT,MAAQS,EAAUV,OAE7BW,GAASC,EAAUF,EAAY,KAE1ClQ,MAAM1G,EAAMC,EAAGC,GACX,QAAID,EAAI,GAAKC,EAAI,MAEbD,GAAKD,EAAKqB,OAASnB,GAAKF,EAAKmB,QAIrCuF,UAAU1G,EAAMC,EAAGC,GACf,IAAI4K,EAAQ,EACZ,IAAKlE,KAAKlG,MAAMV,EAAMC,EAAGC,KAAOF,EAAKsB,WAAWrB,EAAGC,GAC/C,OAAO,EACX,IAAK,IAAIW,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,MAAMV,EAAMN,EAAIC,GAAGF,KAAKiB,GACxB,IAAK+F,KAAKlG,MAAMV,EAAMC,EAAIE,EAAI,GAAID,EAAIC,EAAI,IACtC,OAAO,EACX,IAAKyG,KAAKlG,MAAMV,EAAMC,EAAIE,EAAI,GAAID,EAAIC,EAAI,IACtC,OAAO,EACX,GAAIH,EAAKW,QAAQV,EAAIE,EAAI,GAAID,EAAIC,EAAI,IAAK,CAEtC,GADA2K,GAAS,GACJ9K,EAAKsB,WAAWrB,EAAIE,EAAI,GAAKA,EAAI,GAAID,EAAIC,EAAI,GAAKA,EAAI,IACvD,OAAO,EACX,IAAKH,EAAKsB,WAAWrB,EAAIE,EAAI,GAAKA,EAAI,GAAID,EAAIC,EAAI,GAAKA,EAAI,IACvD,OAAO,OAEV,IAAKH,EAAKsB,WAAWrB,EAAIE,EAAI,GAAID,EAAIC,EAAI,IAC1C,OAAO,EAGf,OAAgB,GAAT2K,EAEXpE,YAAY1G,EAAMC,EAAGC,EAAG2F,GACpB,MAAMyR,EAAUzX,EAAI8B,IAAIC,OAAOsQ,SAAS,GACxC,IAAI/R,EAAM,KACV,IAAK,IAAIU,EAAI,EAAGA,EAAIyW,EAAQ7J,SAAU5M,EAAG,CACrCV,EAAMN,EAAIC,GAAGF,KAAKiB,GAClB,MAAM0W,EAAKtX,EAAIE,EAAI,GACbqX,EAAKtX,EAAIC,EAAI,GACnB,GAAIH,EAAKW,QAAQ4W,EAAIC,IACbxX,EAAKsB,WAAWrB,EAAIE,EAAI,GAAID,EAAIC,EAAI,IACpC,MAERA,EAAM,KAELA,GACDN,EAAIsO,MAAM,6BACdnO,EAAKwC,QAAQvC,EAAGC,EAAG2F,GACnB,MAAMkG,EAAWlM,EAAIC,GAAG2X,WAAWC,WAElC7L,GAAMA,EAAE,IAAM1L,EAAI,IAAM0L,EAAE,IAAM1L,EAAI,KAC/BqW,EAAO5P,KAAK3D,QAAQuT,KAC1B,IAAK,IAAI3V,EAAI,EAAGA,EAAIhB,EAAIC,GAAG2X,WAAWhK,SAAU5M,EAAG,CAC/C,MAAM8R,EAAI9R,EAAIA,EAAI,EAAI,EAChB8W,GAAK9W,EAAI,GAAK,EACpB,GAAIA,GAAKkL,GAAY4G,GAAK5G,GAAY4L,GAAK5L,EACvC,SACJ,MAAMF,EAAIhM,EAAIC,GAAG2X,WAAW5W,GAC5Bb,EAAKwC,QAAQvC,EAAI4L,EAAE,GAAI3L,EAAI2L,EAAE,GAAI2K,GAIrC,OAAO,oDC5JR,MAAMoB,GACTlR,YAAYzD,EAAU,IAClB2D,KAAK3D,QAAU,CACXqS,YAAa,IACbC,UAAW,EACXsC,WAAY,IAEhBjL,OAAO0H,OAAO1N,KAAK3D,QAASA,GAEhCyD,OAAO1G,GACH,IAAIqT,EAAQC,EAAQwE,EAAMC,EACtBlX,EAAGC,EAAG+K,EAAG5L,EAAGC,EAChB,MAAMoV,EAAc1Q,KAAKC,IAAI+B,KAAK3D,QAAQqS,YAAa1Q,KAAK0H,MAAM1H,KAAKoL,IAAIhQ,EAAKqB,MAAOrB,EAAKmB,QAAU,IAChGoU,EAAY3O,KAAK3D,QAAQsS,UACzBC,EAAW3V,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QAC3CuB,EAAW7C,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QAC3CsU,EAAY,CACd,CAAC,EAAG,GACJ,CAAC,EAAG,IAGR,SAASuC,EAAmB/X,EAAGC,EAAGC,GAC9B,QAAKH,EAAKU,MAAMT,EAAGC,OAEdF,EAAKU,MAAMT,EAAIE,EAAI,GAAID,EAAIC,EAAI,QAE/BH,EAAKU,MAAMT,EAAIE,EAAI,GAAID,EAAIC,EAAI,OAEhCH,EAAKuB,MAAMtB,EAAGC,MAEdF,EAAKuB,MAAMtB,EAAIE,EAAI,GAAID,EAAIC,EAAI,MAE/BH,EAAKuB,MAAMtB,EAAIE,EAAI,GAAID,EAAIC,EAAI,QAIvC,SAAS8X,EAAiBhY,EAAGC,EAAGC,GAC5B,QAAKH,EAAKU,MAAMT,EAAGC,OAEdF,EAAKU,MAAMT,EAAIE,EAAI,GAAID,EAAIC,EAAI,QAE/BH,EAAKU,MAAMT,EAAIE,EAAI,GAAID,EAAIC,EAAI,QAEhCH,EAAKuB,MAAMtB,EAAGC,OAEdF,EAAKuB,MAAMtB,EAAIE,EAAI,GAAID,EAAIC,EAAI,OAE/BH,EAAKuB,MAAMtB,EAAIE,EAAI,GAAID,EAAIC,EAAI,QA3BvC+X,EAAkBlY,EAAM0C,GA+BxB,IAAIoI,EAAQ,EACZ,MAAM4K,EAAM7V,EAAI8B,IAAIC,OAAOsQ,SAASlS,EAAKqB,MAAQrB,EAAKmB,QACtD,IAAKN,EAAI,EAAGA,EAAI6U,EAAIjI,OAAQ5M,IAGxB,GAFAZ,EAAI2E,KAAK0H,MAAMoJ,EAAI7U,GAAKb,EAAKmB,QAC7BjB,EAAIwV,EAAI7U,GAAKb,EAAKmB,QACbnB,EAAKuB,MAAMtB,EAAGC,GACf,IAAK2L,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAErB,IAAI1L,EAAMsV,EAAU5J,GACpB,GAAKmM,EAAmB/X,EAAGC,EAAGC,GAA9B,CAIA,GAFAW,EAAIyU,EAEAvV,EAAKU,MAAMT,EAAIE,EAAI,GAAID,EAAIC,EAAI,KAC/BH,EAAK6C,WAAW5C,EAAIE,EAAI,GAAID,EAAIC,EAAI,KAEpC,IAAKH,EAAKU,MAAMT,EAAIE,EAAI,GAAID,EAAIC,EAAI,KAChCH,EAAKkH,OAAOjH,EAAIE,EAAI,GAAID,EAAIC,EAAI,IAChC,aAGH,CAAA,IAAIH,EAAKU,MAAMT,EAAIE,EAAI,GAAID,EAAIC,EAAI,MACpCH,EAAK6C,WAAW5C,EAAIE,EAAI,GAAID,EAAIC,EAAI,IAQpC,SAPA,IAAKH,EAAKU,MAAMT,EAAIE,EAAI,GAAID,EAAIC,EAAI,KAChCH,EAAKkH,OAAOjH,EAAIE,EAAI,GAAID,EAAIC,EAAI,IAChC,SAEJA,EAAMA,EAAI8H,KAAK3F,IAAO,EAAIA,IAS9B,IAJA+Q,EAASpT,EAAIE,EAAI,GACjBmT,EAASpT,EAAIC,EAAI,GACjB2X,EAAO7X,EACP8X,EAAO7X,EACFY,EAAI,EAAGA,EAAIyU,IACZuC,GAAQ3X,EAAI,GACZ4X,GAAQ5X,EAAI,IAER8X,EAAiBH,EAAMC,EAAM5X,MAJRW,GAQ7B,GAAIA,EAAIyU,IACJ1V,EAAIiD,KAAKqC,mBAAmBqQ,EAAUnC,EAAQC,EAAQ5Q,GAAU,GAI5D8S,EAASsC,GAAMC,GAAQzC,GACvBE,EAASsC,GAAMC,GAAQ,KAAO,CAY9B,KAAOD,IAASzE,GAAU0E,IAASzE,GAC3BtT,EAAKqH,UAAUyQ,EAAMC,KACrB/X,EAAKwC,QAAQsV,EAAMC,EAAMxJ,GACzB7L,EAASoV,GAAMC,GAAQ,GAE3BD,GAAQ3X,EAAI,GACZ4X,GAAQ5X,EAAI,GAGhB,MAAM0F,EAAOhG,EAAI8B,IAAIC,OAAOoP,OAAOpK,KAAK3D,QAAQ4U,YAC1CM,EACA5J,EACNvO,EAAKwC,QAAQvC,EAAGC,EAAG2F,KACjBiF,EACF,QAQpB,OAFAjL,EAAI2D,KAAKI,KAAK4R,GACd3V,EAAI2D,KAAKI,KAAKlB,GACPoI,+DAIR,SAAkB9K,EAAM0I,EAAO,IAElC,OADe,IAAIkP,GAAWlP,GAChB0F,OAAOpO,MCtIlB,MAAMoY,GACT1R,YAAYzD,EAAU,IAClB,IAAIC,EAAIC,EACRyD,KAAKC,KAAO,EACZD,KAAKgH,MAAQ,GACbhH,KAAKG,MAAQ,CAAEiK,OAAQ,IACvBpK,KAAK2M,MAAQ,CAAEvC,OAAQ,IACvBpK,KAAKyR,MAAQ,GACbzR,KAAK0R,MAAQ,GACb1R,KAAK2R,QAAU,GACf3R,KAAK4R,OAAS,GACd5R,KAAK6R,UAAW,EAChB7R,KAAK8R,SAAW,EAAE,GAAI,GACtB9R,KAAK+R,OAAS,EAAE,GAAI,GACpB/R,KAAKC,KAAO5D,EAAQ4D,MAAQhH,EAAI8B,IAAIC,OAAOgX,SAC3C/Y,EAAIgZ,OAAOC,WAAWlS,KAAKgH,MAAO3K,EAAQ2K,QAEpB,IAAlB3K,EAAQ8D,MACR9D,EAAQ8D,MAAQ,CAAEiK,OAAQ,IAEH,IAAlB/N,EAAQ8D,QACb9D,EAAQ8D,MAAQ,CAAEiK,OAAQ,MAE9BnR,EAAIgZ,OAAOC,WAAWlS,KAAKG,MAAO9D,EAAQ8D,QAEpB,IAAlB9D,EAAQsQ,MACRtQ,EAAQsQ,MAAQ,CAAEvC,OAAQ,IAEH,IAAlB/N,EAAQsQ,QACbtQ,EAAQsQ,MAAQ,IAEpB1T,EAAIgZ,OAAOC,WAAWlS,KAAK2M,MAAOtQ,EAAQsQ,QAEpB,IAAlBtQ,EAAQoV,MACRzR,KAAKyR,MAAQ,OAGS,IAAlBpV,EAAQoV,QACRpV,EAAQoV,MAAQ,IACpBpV,EAAQoV,MAAQpV,EAAQoV,OAAS,GACjCpV,EAAQoV,MAAMR,WAC0B,QAAnC3U,EAAKD,EAAQoV,MAAMR,kBAA+B,IAAP3U,EAAgBA,EAA8B,QAAxBC,EAAKF,EAAQ8D,aAA0B,IAAP5D,OAAgB,EAASA,EAAG6N,OAClInR,EAAIgZ,OAAOC,WAAWlS,KAAKyR,MAAOpV,EAAQoV,SAGxB,IAAlBpV,EAAQqV,MACR1R,KAAK0R,MAAQ,OAGS,IAAlBrV,EAAQqV,QACRrV,EAAQqV,MAAQ,IACpBzY,EAAIgZ,OAAOC,WAAWlS,KAAK0R,MAAOrV,EAAQqV,SAGtB,IAApBrV,EAAQsV,QACR3R,KAAK2R,QAAU,OAGS,IAApBtV,EAAQsV,UACRtV,EAAQsV,QAAU,IACtB1Y,EAAIgZ,OAAOC,WAAWlS,KAAK2R,QAAStV,EAAQsV,WAGzB,IAAnBtV,EAAQuV,OACR5R,KAAK4R,OAAS,OAGS,IAAnBvV,EAAQuV,SACRvV,EAAQuV,OAAS,IACrB3Y,EAAIgZ,OAAOC,WAAWlS,KAAK4R,OAAQvV,EAAQuV,SAE/C5R,KAAK8R,SAAWzV,EAAQyV,UAAY,EAAE,GAAI,GAC1C9R,KAAK+R,OAAS1V,EAAQ0V,QAAU,EAAE,GAAI,GAE1CjS,UAAUrF,EAAOF,GACb,OAAO,IAAI4X,EAAc1X,EAAOF,GAEpCuF,UAAUsS,GACN,GAAmB,GAAfA,EAAKvL,QAAeuL,EAAK,aAAc1T,EAAI2C,IAAIgR,IAAK,CACpD,MAAMhR,EAAM+Q,EAAK,GACjBpS,KAAK5G,KAAO,IAAIkZ,EAAajR,GAEjC,GAAI+Q,EAAKvL,OAAS,EAAG,CACjB,MAAMpM,EAAQ2X,EAAK,GACb7X,EAAS6X,EAAK,GACpBpS,KAAK5G,KAAO,IAAI+Y,EAAc1X,EAAOF,GAEzC,MAAMuC,EAASkD,KAAKuS,QAAQvS,KAAK5G,MACjC,GAAIgZ,EAAKvL,OAAS,EAAG,CACjB,MAAMpM,EAAQ2X,EAAK,GACb7X,EAAS6X,EAAK,GACdI,EAAKJ,EAAK,GAChBnZ,EAAIC,GAAGqC,QAAQd,EAAOF,GAAQ,CAAClB,EAAGC,KAC9B,MAAMmZ,EAAIzS,KAAK5G,KAAKuC,aAAatC,EAAGC,GAChCmZ,GACAD,EAAGnZ,EAAGC,EAAGmZ,MAIrB,OADAzS,KAAK5G,KAAK4D,OACHF,EAEXgD,QAAQ1G,GACA4G,KAAK8R,SAAS,GAAK,GAAK9R,KAAK8R,SAAS,GAAK,IAC3C9R,KAAK8R,SAAS,GAAK9T,KAAK0H,MAAMtM,EAAKqB,MAAQ,GAC3CuF,KAAK8R,SAAS,GAAK1Y,EAAKmB,OAAS,GAErCyF,KAAKuP,MAAMnW,GACX,IAAI+T,EAAQ,GACZ,OAASA,IACDnN,KAAK0S,aAAatZ,KAG1B,IAAK+T,EACD,MAAM,IAAIpM,MAAM,+BACpB3H,EAAKuZ,iBACL,IAAIC,EAAQ,EACZ,KAAOA,EAAQ,IACP5S,KAAK6S,QAAQzZ,IACbwZ,EAAQ,EACRxZ,EAAKuZ,iBACL1Z,EAAI8B,IAAIC,OAAO8X,QAAQ9S,KAAK8O,QAG1B8D,EAYV,OATI5S,KAAKyR,OACLzR,KAAK+S,SAAS3Z,EAAM4G,KAAKyR,OACzBzR,KAAK0R,OACL1R,KAAKgT,SAAS5Z,EAAM4G,KAAK0R,OACzB1R,KAAK2R,SACL3R,KAAKiT,WAAW7Z,EAAM4G,KAAK2R,SAC3B3R,KAAK4R,QACL5R,KAAKkT,UAAU9Z,EAAM4G,KAAK4R,QAC9B5R,KAAKmT,OAAO/Z,IACL,EAEX0G,MAAM1G,GACE4G,KAAKC,OACLhH,EAAI8B,IAAIC,OAAOiF,KAAKD,KAAKC,MACzB7G,EAAK6G,KAAOD,KAAKC,MAErB7G,EAAK+I,QACLnC,KAAK8O,IAAM7V,EAAI8B,IAAIC,OAAOsQ,SAASlS,EAAKqB,MAAQrB,EAAKmB,QAEzDuF,UAAUyE,GACN,IAAKA,EACD,MAAM,IAAIxD,MAAM,mBACpB,GAAIwD,aAAc6O,EACd,OAAO7O,EACX,GAAkB,iBAAPA,EAAiB,CACxB,MAAM8O,EAASC,EAAW/O,GAC1B,IAAK8O,EACD,MAAM,IAAItS,MAAM,2BAA6BwD,GAEjD,OAAO8O,EAEX,OAAO,IAAIE,EAAgBhP,GAE/BzE,aAAa1G,GACT,MAAMoa,EAAWxT,KAAKyT,UAAUra,EAAKqB,MAAOrB,EAAKmB,QACjD,IACI+M,EADStH,KAAK0T,UAAU1T,KAAKgH,MAAMxJ,OAASwC,KAAKgH,MAAMqM,QAAU,WACnD7L,OAAOgM,GAOzB,OANIlM,IACCtH,KAAK2T,iBAAiBva,EAAMoa,EAAUlM,EAAMtH,KAAK8R,YAClDxK,EAAO,MAEXkM,EAASxW,OAEFsK,EAEXxH,QAAQ1G,GACJ,MAAMoa,EAAWxT,KAAKyT,UAAUra,EAAKqB,MAAOrB,EAAKmB,QACjD,IACI+M,EADStH,KAAK0T,UAAU1T,KAAKgH,MAAMqM,QAAU,WAC/B7L,OAAOgM,GAEzB,GAAIxT,KAAK2M,MAAMvC,OAAQ,CACnB,IAAI5E,EAAOoO,GAAS5T,KAAK2M,MAAO6G,EAAUlM,EAAKnH,OAC3CqF,IACA8B,EAAK9B,KAAOA,GAOpB,OAJI8B,IAAStH,KAAK6T,YAAYza,EAAMoa,EAAUlM,KAC1CA,EAAO,MAEXkM,EAASxW,OACFsK,EAEXxH,YAAY1G,EAAMoa,EAAUlM,GAExB,MAAMzM,EAAYyM,EAAK9B,KAAO8B,EAAK9B,KAAKrF,MAAQmH,EAAKnH,MACrD,IAAIlG,EAAI,EACR,MAAM6Z,EAAM9T,KAAK8O,IAAIjI,OAErB,IAAK5M,EAAI,EAAGA,EAAI6Z,EAAK7Z,IAAK,CACtB,MAAMZ,EAAI2E,KAAK0H,MAAM1F,KAAK8O,IAAI7U,GAAKb,EAAKmB,QAClCjB,EAAI0G,KAAK8O,IAAI7U,GAAKb,EAAKmB,OACvBhB,EAAMH,EAAK2a,WAAW1a,EAAGC,GAC/B,GAAIC,GAAON,EAAIC,GAAGW,aAAc,CAC5B,MAAMma,GAAUza,EAAM,GAAK,EACrBiS,EAAO3Q,EAAUmZ,GACvB,IAAKxI,EACD,SACJ,MAAMnQ,EAAUhC,EAAImS,EAAK,GACnBlQ,EAAUhC,EAAIkS,EAAK,GACzB,IAAgB,GAAZA,EAAK,IACLxL,KAAKiU,YAAY7a,EAAMoa,EAAUlM,EAAMjM,EAASC,GAOhD,OALA4Y,EAAc9a,EAAMoa,EAAUnY,EAASC,GACvC0E,KAAKmU,YAAY/a,EAAMkO,EAAMjO,EAAGC,EAAG0a,GAGnC1M,EAAK1B,UAAUvK,EAASC,IACjB,GAInB,OAAO,EAEXwE,iBAAiB1G,EAAMoa,EAAUlM,EAAM8M,GACnC,MAAO/a,EAAGC,GAAK8a,EACTvZ,EAAYyM,EAAK9B,KAAO8B,EAAK9B,KAAKrF,MAAQmH,EAAKnH,MAC/CkL,EAAOpS,EAAI8B,IAAIC,OAAOsQ,SAAS,GAErC,IAAK,IAAI/R,KAAO8R,EAAM,CAClB,MACMG,EAAO3Q,GADGtB,EAAM,GAAK,GAE3B,IAAKiS,IAAoB,GAAZA,EAAK,GACd,SACJ,MAAM6I,EAAOhb,EAAImS,EAAK,GAChB8I,EAAOhb,EAAIkS,EAAK,GACtB,GAAIxL,KAAKiU,YAAY7a,EAAMoa,EAAUlM,EAAM+M,EAAMC,GAY7C,OATAJ,EAAc9a,EAAMoa,EAAUa,EAAMC,GAEpChN,EAAK1B,UAAUyO,EAAMC,IAOd,EAGf,OAAO,EAEXxU,YAAYuB,EAAKkT,EAAUjN,EAAMkN,EAAaC,GAC1C,IAAIC,EAAOC,EAAOC,EAAOC,EAAO5a,EAAGC,EAEnC,MAAMsL,EAAO8B,EAAK9B,MAAQ8B,EACpBqD,EAAO3M,KAAKC,IAAIqJ,EAAKqD,KAAMnF,EAAKmF,MAChCE,EAAM7M,KAAKC,IAAIqJ,EAAKuD,IAAKrF,EAAKqF,KAC9BD,EAAQ5M,KAAKoL,IAAI9B,EAAKsD,MAAOpF,EAAKoF,OAClCE,EAAS9M,KAAKoL,IAAI9B,EAAKwD,OAAQtF,EAAKsF,QAC1C,IAAK4J,EAAQ/J,EAAM+J,GAAS9J,EAAO8J,IAC/B,IAAKC,EAAQ9J,EAAK8J,GAAS7J,EAAQ6J,IAC/B,GAAIJ,EAAS5Z,MAAM+Z,EAAOC,GAAQ,CAG9B,GAFAC,EAAQF,EAAQF,EAChBK,EAAQF,EAAQF,GACXpT,EAAIvH,MAAM8a,EAAOC,IAClBxT,EAAIhB,aAAauU,EAAOC,GACxB,OAAO,EAEX,IAAK5a,EAAI2a,EAAQ,EAAG3a,GAAK2a,EAAQ,EAAG3a,IAChC,IAAKC,EAAI2a,EAAQ,EAAG3a,GAAK2a,EAAQ,EAAG3a,IAChC,IAAKmH,EAAIZ,UAAUxG,EAAGC,GAElB,OAAO,EAQ/B,OAAO,EAEX4F,YAAYuB,EAAKiG,EAAMjO,EAAGC,EAAGC,GACzB,MAAMuI,EAAO9B,KAAKG,MAClB,IAAIG,GAAS,EACTwB,EAAKsI,QAAUnR,EAAI8B,IAAIC,OAAOoP,OAAOtI,EAAKsI,UAC1C9J,GAAS,GAEb,MAAMrB,EAAOqB,EAASwB,EAAK7C,MAAQsS,EAAY5J,EAG/C,GAFAtG,EAAIzF,QAAQvC,EAAGC,EAAG2F,GAEbqI,EAAK9B,MAA2B,GAAnB8B,EAAK9B,KAAK/K,OAAkC,GAApB6M,EAAK9B,KAAKjL,OAGpD,GAAIhB,IAAQN,EAAIC,GAAGiS,IAAM5R,IAAQN,EAAIC,GAAGmQ,KAAM,CAC1C,IAAIyL,GAAe,EACf3a,EAAI,EACR,KAAO2a,GACHA,GAAe,EACXzT,EAAIZ,UAAUpH,EAAIc,EAAGb,IACjB+H,EAAI1G,MAAMtB,EAAIc,EAAGb,EAAI,IAAM+H,EAAI1G,MAAMtB,EAAIc,EAAGb,EAAI,KAChD+H,EAAIzF,QAAQvC,EAAIc,EAAGb,EAAG2F,GACtB6V,GAAe,GAGnBzT,EAAIZ,UAAUpH,EAAIc,EAAGb,IACjB+H,EAAI1G,MAAMtB,EAAIc,EAAGb,EAAI,IAAM+H,EAAI1G,MAAMtB,EAAIc,EAAGb,EAAI,KAChD+H,EAAIzF,QAAQvC,EAAIc,EAAGb,EAAG2F,GACtB6V,GAAe,KAGrB3a,MAGL,CACD,IAAI2a,GAAe,EACf3a,EAAI,EACR,KAAO2a,GACHA,GAAe,EACXzT,EAAIZ,UAAUpH,EAAGC,EAAIa,IACjBkH,EAAI1G,MAAMtB,EAAI,EAAGC,EAAIa,IAAMkH,EAAI1G,MAAMtB,EAAI,EAAGC,EAAIa,KAChDkH,EAAIzF,QAAQvC,EAAGC,EAAIa,EAAG8E,GACtB6V,GAAe,GAGnBzT,EAAIZ,UAAUpH,EAAGC,EAAIa,IACjBkH,EAAI1G,MAAMtB,EAAI,EAAGC,EAAIa,IAAMkH,EAAI1G,MAAMtB,EAAI,EAAGC,EAAIa,KAChDkH,EAAIzF,QAAQvC,EAAGC,EAAIa,EAAG8E,GACtB6V,GAAe,KAGrB3a,GAId2F,SAAS1G,EAAM0I,GAEX,OADe,IAAIiT,GAAgBjT,GACrB0F,OAAOpO,GAEzB0G,SAAS1G,EAAM0I,GAEX,OADe,IAAIkT,GAAWlT,GAChB0F,OAAOpO,GAEzB0G,WAAW1G,EAAM0I,GAEb,OADe,IAAImT,GAAenT,GACpB0F,OAAOpO,GAEzB0G,UAAU1G,EAAM0I,GAEZ,OADe,IAAIoT,GAAcpT,GACnB0F,OAAOpO,GAEzB0G,OAAO1G,GACH4G,KAAKmV,wBAAwB/b,GAC7B4G,KAAKoV,aAAahc,GAClB4G,KAAKqV,aAAajc,GAEtB0G,wBAAwB1G,GACpB,IAAIa,EAAGC,EAAGC,EAAGmb,EAAIC,EACbC,EACJ,GAEI,IADAA,GAAwB,EACnBvb,EAAI,EAAGA,EAAIb,EAAKqB,MAAQ,EAAGR,IAC5B,IAAKC,EAAI,EAAGA,EAAId,EAAKmB,OAAS,EAAGL,IAC7B,IAAKC,EAAI,EAAGA,GAAK,EAAGA,KACXf,EAAKqJ,WAAWxI,EAAIE,EAAGD,IACxBd,EAAKqJ,WAAWxI,GAAK,EAAIE,GAAID,IAC7Bd,EAAKqc,eAAexb,GAAK,EAAIE,GAAID,IACjCd,EAAKqJ,WAAWxI,EAAIE,EAAGD,EAAI,IAC3Bd,EAAKqc,eAAexb,EAAIE,EAAGD,EAAI,KAC9Bd,EAAKqJ,WAAWxI,GAAK,EAAIE,GAAID,EAAI,KAC9BjB,EAAI8B,IAAIC,OAAOoP,OAAO,KACtBkL,EAAKrb,GAAK,EAAIE,GACdob,EAAKrb,IAGLob,EAAKrb,EAAIE,EACTob,EAAKrb,EAAI,GAEbsb,GAAwB,EACxBpc,EAAKwC,QAAQ0Z,EAAIC,EAAI5N,UAKP,GAAzB6N,GAEb1V,aAAa1G,GACTH,EAAIC,GAAGqC,QAAQnC,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAAClB,EAAGC,KACpCF,EAAKiH,aAAahH,EAAGC,IAGrBF,EAAKkH,OAAOjH,EAAGC,MAGdF,EAAKW,QAAQV,EAAI,EAAGC,IAAMF,EAAKW,QAAQV,EAAI,EAAGC,MAC1CF,EAAKW,QAAQV,EAAGC,EAAI,IAAMF,EAAKW,QAAQV,EAAGC,EAAI,MAKzCF,EAAKwH,cAAcvH,EAAI,EAAGC,GAAK,EAAI,IACxCF,EAAKwH,cAAcvH,EAAI,EAAGC,GAAK,EAAI,IACnCF,EAAKwH,cAAcvH,EAAGC,EAAI,GAAK,EAAI,IACnCF,EAAKwH,cAAcvH,EAAGC,EAAI,GAAK,EAAI,IACpC,IANAF,EAAKwC,QAAQvC,EAAGC,EAAGqO,MAcnC7H,aAAa1G,GACT,MAAMsc,EAAe1V,KAAK6R,SAAWhC,EAAmB8F,EACxD1c,EAAIC,GAAGqC,QAAQnC,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAAClB,EAAGC,KACpCF,EAAKqH,UAAUpH,EAAGC,KACdF,EAAKiH,aAAahH,EAAGC,GACrBF,EAAKwC,QAAQvC,EAAGC,EAAGoc,GAGnBtc,EAAKwC,QAAQvC,EAAGC,EAAGqc,QCxahC,MAAMC,GACT9V,YAAYuB,EAAKwU,GACb7V,KAAKqB,IAAMA,EACXrB,KAAK5B,SAAW,EAChB4B,KAAK3B,SAAW,EAChB2B,KAAK8V,YAAc,EACnB9V,KAAK+V,YAAc,EACnB/V,KAAKgW,cAAgB,EACrBhW,KAAK6V,MAAQ,EACb7V,KAAK5G,KAAO,IAAIkZ,EAAajR,GAC7BrB,KAAKiW,SAAWhd,EAAI2D,KAAKC,MAAMwE,EAAI5G,MAAO4G,EAAI9G,QAC9CyF,KAAKkW,SAAWjd,EAAI2D,KAAKC,MAAMwE,EAAI5G,MAAO4G,EAAI9G,QAC9CyF,KAAKmW,QAAUld,EAAI2D,KAAKC,MAAMwE,EAAI5G,MAAO4G,EAAI9G,QAC7CyF,KAAK7B,YAAclF,EAAI2D,KAAKC,MAAMwE,EAAI5G,MAAO4G,EAAI9G,QACjDyF,KAAKoW,WAAand,EAAI2D,KAAKC,MAAMwE,EAAI5G,MAAO4G,EAAI9G,QAChDyF,KAAK6V,MAAQA,EAEjB/V,OACI7G,EAAI2D,KAAKI,KAAKgD,KAAKiW,UACnBhd,EAAI2D,KAAKI,KAAKgD,KAAKkW,UACnBjd,EAAI2D,KAAKI,KAAKgD,KAAKmW,SACnBld,EAAI2D,KAAKI,KAAKgD,KAAK7B,aACnBlF,EAAI2D,KAAKI,KAAKgD,KAAKoW,YAEvBtW,MAAM1B,EAASC,GACX2B,KAAKiW,SAAS7V,KAAK,GACnBJ,KAAKkW,SAAS9V,KAAK,GACnBJ,KAAKmW,QAAQ/V,KAAK,GAClBJ,KAAK7B,YAAYiC,KAAK,GAEtBJ,KAAK5B,QAAUA,EACf4B,KAAK3B,QAAUA,EACf2B,KAAK8V,WAAa,EAClB9V,KAAK+V,WAAa,EAEtBjW,cAAcuW,GACVrW,KAAK7B,YAAYiC,KAAK,GACtBkW,EAAwBtW,KAAK5G,KAAM4G,KAAK7B,YAAa6B,KAAK5B,QAAS4B,KAAK3B,QAASgY,GACjF,IAAIE,EAAsB,EAC1B,MAAMC,EAAY,IAAIlQ,MAAM,KAAKlG,KAAK,GACtCJ,KAAKiW,SAAShU,SAAQ,CAACvG,EAAGrC,EAAGC,KACzB,IAAKoC,EACD,OACJ,MAAM+a,EAAOzW,KAAK7B,YAAY9E,GAAGC,GAC7Bmd,EAAO,MACPD,EAAUC,KACVF,QAGR,IAAIT,EAAa9X,KAAKkQ,MAAMqI,EAAsB,GAC9CR,EAAa/X,KAAKkQ,MAAO,EAAIqI,EAAuB,GACxD,IAAK,IAAItc,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,GAAI6b,GAAcU,EAAUvc,GAAI,CAC5B6b,EAAa7b,EACb,MAGA6b,GAAcU,EAAUvc,GAGhC,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,GAAI8b,GAAcS,EAAUvc,GAAI,CAC5B8b,EAAa9b,EACb,MAGA8b,GAAcS,EAAUvc,GAGhC+F,KAAK8V,WAAaA,EAClB9V,KAAK+V,WAAaA,GCxEnB,MAAMW,GACT5W,iBACAA,yBACAA,+BACAA,0BACAA,6BACAA,yBACAA,4BACAA,qBACAA,0BACAA,+BACAA,4BACAA,uBACAA,qBCXJ,MAAM6W,GAAK1d,EAAIuI,KAAKoV,GACb,IAAIC,IACX,SAAWA,GACPA,EAAUA,EAAwC,6BAAIF,GAAG,IAAM,+BAC/DE,EAAUA,EAA8B,mBAAIF,GAAG,IAAM,qBACrDE,EAAUA,EAAyB,cAAIF,GAAG,IAAM,gBAChDE,EAAUA,EAA8B,mBAAIF,GAAG,IAAM,qBACrDE,EAAUA,EAA8B,mBAAIF,GAAG,IAAM,qBACrDE,EAAUA,EAAgC,qBAAIF,GAAG,IAAM,uBACvDE,EAAUA,EAA0B,eAAIF,GAAG,IAAM,iBACjDE,EAAUA,EAA8B,mBAAIF,GAAG,IAAM,qBACrDE,EAAUA,EAAgC,qBAAIF,GAAG,IAAM,uBACvDE,EAAUA,EAAyC,8BAAIF,GAAG,KAAO,gCACjEE,EAAUA,EAAgC,qBAAIF,GAAG,KAAO,uBACxDE,EAAUA,EAA+B,oBAAIF,GAAG,KAAO,sBACvDE,EAAUA,EAA8B,mBAAIF,GAAG,KAAO,qBACtDE,EAAUA,EAA+B,oBAAIF,GAAG,KAAO,sBACvDE,EAAUA,EAA0B,eAAIF,GAAG,KAAO,iBAClDE,EAAUA,EAA8B,mBAAIF,GAAG,KAAO,qBACtDE,EAAUA,EAAiC,sBAAIF,GAAG,KAAO,wBACzDE,EAAUA,EAAyB,cAAIF,GAAG,KAAO,gBACjDE,EAAUA,EAA0B,eAAIF,GAAG,KAAO,iBAClDE,EAAUA,EAA4B,iBAAIF,GAAG,KAAO,mBACpDE,EAAUA,EAA6B,kBAAIF,GAAG,KAAO,oBACrDE,EAAUA,EAAsC,2BAAIF,GAAG,KAAO,6BAC9DE,EAAUA,EAAuC,4BAAIF,GAAG,KAAO,8BAC/DE,EAAUA,EAA0B,eAAIF,GAAG,KAAO,iBAElDE,EAAUA,EAA6B,kBAAIF,GAAG,KAAO,oBACrDE,EAAUA,EAA6B,kBAAIF,GAAG,KAAO,oBACrDE,EAAUA,EAA2B,gBAAIF,GAAG,KAAO,kBACnDE,EAAUA,EAA6B,kBAAIF,GAAG,KAAO,oBA7BzD,CA8BGE,KAAcA,GAAY,KACtB,MAAMC,GACThX,YAAYiX,EAAM,IACd,IAAIza,EAsBJ,GArBA0D,KAAKf,MAAQ,EACbe,KAAKrB,MAAQ,EACbqB,KAAKgX,IAAM,EACXhX,KAAK/E,KAAO,KACZ+E,KAAKiX,MAAQ,KACbjX,KAAKoE,OAAS,KACdpE,KAAKoK,OAAS,EACdpK,KAAKuE,GAAK,MACVvE,KAAKf,KAA2B,QAAnB3C,EAAKya,EAAI9X,YAAyB,IAAP3C,EAAgBA,GAAM,EAC1Dya,EAAIpY,QACJqB,KAAKrB,MAAQ1F,EAAIuI,KAAK0V,KAAKL,GAAWE,EAAIpY,QAE1CoY,EAAIC,MACJhX,KAAKgX,IAAMD,EAAIC,KAEnBhX,KAAKkE,MAAQjL,EAAIuN,MAAMC,KAAKsQ,EAAI7S,OAAS,GACzClE,KAAK/E,KAAO8b,EAAI9b,MAAQ,KACxB+E,KAAKiX,MAAQF,EAAIE,OAAS,KACtBF,EAAI3S,SACJpE,KAAKoE,OAAS1F,EAAI0F,OAAO8S,KAAKH,EAAI3S,SAElCpE,KAAK/E,MAAQ+E,KAAKrB,MAAQkY,GAAUM,cACpC,MAAM,IAAIpW,MAAM,2DAEpB,GAAIf,KAAKoX,eAAiBpX,KAAKkE,MAAMqH,GAAK,EACtC,MAAM,IAAIxK,MAAM,2DAGxBsW,oBACI,SAAUrX,KAAKrB,MAAQkY,GAAUS,mBAErCC,mBACI,SAAUvX,KAAKrB,MAAQkY,GAAUW,mBAErCC,mBACI,SAAUzX,KAAKrB,MAAQkY,GAAUa,mBAErCC,oBACI,SAAU3X,KAAKrB,MAAQkY,GAAUe,4BAErCC,4BACI,SAAU7X,KAAKrB,MAAQkY,GAAUiB,6BAErCC,qBACI,SAAU/X,KAAKrB,MAAQkY,GAAUmB,oBAErCC,sBACI,SAAUjY,KAAKrB,MAAQkY,GAAUqB,sBAErCC,gBACI,SAAUnY,KAAKrB,MAAQkY,GAAUM,eAErCiB,gBACI,SAAUpY,KAAKrB,MAAQkY,GAAUwB,gBAErCC,sBACI,SAAUtY,KAAKrB,MAAQkY,GAAU0B,mBAErCC,oBACI,SAAUxY,KAAKrB,MAAQkY,GAAU4B,8BAErCC,kBACI,SAAU1Y,KAAKrB,MAAQkY,GAAU8B,gBAErCC,qBACI,SAAU5Y,KAAKrB,MAAQkY,GAAUgC,oBAErCC,yBACI,SAAU9Y,KAAKrB,MACXkY,GAAUkC,eACTlC,GAAUmC,oBAEnB5B,oBACI,SAAUpX,KAAKrB,MAAQkY,GAAUmC,oBAErCC,sBACI,SAAUjZ,KAAKoE,SACG,GAAdpE,KAAKf,MACLe,KAAK/E,MACL+E,KAAKiX,OACLjX,KAAKmY,WAwBbrY,eAAeoZ,EAAMC,EAAW/C,EAAYgD,EAAgB,CAAC,EAAG,MAC5DC,GAAcH,EAAMlZ,MACpB,IAAIkE,EAAQ,EAUZ,OATAkS,EAAWra,QAAO,CAACC,EAAI/B,EAAGC,IAClBof,GAAgBJ,EAAMC,EAAWnZ,KAAM/F,EAAGC,EAAGkf,IAC7ClV,IACO,GAGA,IAGRA,GAGR,SAASmV,GAAcE,EAASC,GACnC,GAAIA,EAAU7a,OACTkY,GAAU4C,qBACP5C,GAAU6C,+BAAgC,CAC9C,MAAMtgB,EAAOmgB,EAAQngB,KACrB,GAAIogB,EAAU7a,MAAQkY,GAAU6C,8BAA+B,CAC/C,IAAIzgB,EAAI0gB,IAAIC,IAAI,CACxBC,UAAW,CAACxgB,EAAGC,IACJF,EAAKwH,cAAcvH,EAAGC,GAEjCQ,MAAO,CAACT,EAAGC,IACAF,EAAKU,MAAMT,EAAGC,KAGzBwgB,UAAUP,EAAQnb,QAASmb,EAAQlb,QAAS,IAAI,CAAChF,EAAGC,KACpDigB,EAAQpD,QAAQ9c,GAAGC,GAAK,SAG3B,CACW,IAAIL,EAAI0gB,IAAIC,IAAI,CAGxBC,UAAW,CAACxgB,EAAGC,IACJF,EAAKwH,cAAcvH,EAAGC,IAAMF,EAAKsJ,aAAarJ,EAAGC,GAE5DQ,MAAO,CAACT,EAAGC,IACAF,EAAKU,MAAMT,EAAGC,KAGzBwgB,UAAUP,EAAQnb,QAASmb,EAAQlb,QAAS,IAAI,CAAChF,EAAGC,KACpDigB,EAAQpD,QAAQ9c,GAAGC,GAAK,KAGhCigB,EAAQpD,QAAQoD,EAAQnb,SAASmb,EAAQlb,SAAW,GAGrD,SAAS0b,GAAkBR,EAASC,GACvC,MAAMJ,EAAgB,CAAC,EAAG,KAO1B,OANII,EAAU7a,MAAQkY,GAAUmD,iBAC5BZ,EAAc,GAAKG,EAAQzD,YAE3B0D,EAAU7a,MAAQkY,GAAUoD,qBAC5Bb,EAAc,GAAKG,EAAQxD,YAExBqD,EAEJ,SAASE,GAAgBC,EAASJ,EAAWK,EAAWngB,EAAGC,EAAG8f,GACjE,MAAMhgB,EAAOmgB,EAAQngB,KAIrB,GAAIogB,EAAUjC,cACVte,EAAIC,GAAGwD,SAASrD,EAAGC,GAAG,CAACW,EAAGC,IAAMd,EAAKU,MAAMG,EAAGC,IAAMd,EAAK6C,WAAWhC,EAAGC,KAAM,EAC7E,OAAO,EAGX,IAAU,GAALb,GAAUA,GAAKD,EAAKqB,MAAQ,GAAU,GAALnB,GAAUA,GAAKF,EAAKmB,OAAS,KAC9Dif,EAAUnC,cACX,OAAO,EAIX,GAAImC,EAAUpC,cACV,OAAO/d,GAAKkgB,EAAQnb,SAAW9E,GAAKigB,EAAQlb,QAE3C,GAAI8a,EAAU3U,QACfnL,GAAKkgB,EAAQnb,SACb9E,GAAKigB,EAAQlb,QACb,OAAO,EAGX,GAAIkb,EAAQrD,SAAS7c,GAAGC,GACpB,OAAO,EAGX,GAAIkgB,EAAU7a,OACTkY,GAAU4C,qBACP5C,GAAU6C,iCACbH,EAAQpD,QAAQ9c,GAAGC,GACpB,OAAO,EAGX,IAAI4gB,EAAW,IAef,GAdI9gB,EAAKsH,OAAOrH,EAAGC,GAEfL,EAAIC,GAAGihB,aAAa9gB,EAAGC,GAAG,CAACW,EAAGC,KACrBqf,EAAQpb,YAAYrE,MAAMG,EAAGC,KAE7Bd,EAAKwH,cAAc3G,EAAGC,IACvBggB,EAAWX,EAAQpb,YAAYlE,GAAGC,GAAK,IACvCggB,EAAWX,EAAQpb,YAAYlE,GAAGC,GAAK,MAE5C,GAGHggB,EAAWX,EAAQpb,YAAY9E,GAAGC,GAElC4gB,EAAWd,EAAc,IACzBc,EAAWd,EAAc,GAEzB,OAAO,EAEX,GAAII,EAAU/B,aAAc,CAExB,MAAM2C,EAAchhB,EAAKmE,WAAWlE,EAAGC,GACvC,IAAKigB,EAAQtD,SAAS5c,GAAGC,MACnB8gB,GAAeA,GAAeb,EAAQvD,gBACxC5c,EAAKsH,OAAOrH,EAAGC,GAAI,CACnB,IAAI+gB,GAAK,EAiBT,OAfAphB,EAAIC,GAAGihB,aAAa9gB,EAAGC,GAAG,CAACG,EAAMC,KACxBN,EAAKU,MAAML,EAAMC,KAEjB6f,EAAQtD,SAASxc,GAAMC,IACvB8f,EAAU7B,kBAIX6B,EAAU7B,eACTve,EAAKwH,cAAcnH,EAAMC,IACzBN,EAAKmE,WAAW9D,EAAMC,IACrBD,GAAQ8f,EAAQnb,SAAW1E,GAAQ6f,EAAQlb,UAC7Cgc,GAAK,OAEV,GACIA,EAEX,OAAO,EAEN,OAAIjhB,EAAKsH,OAAOrH,EAAGC,KAIfkgB,EAAU7B,gBACV6B,EAAUve,MAAQ7B,EAAKkhB,YAAYjhB,EAAGC,IACvCF,EAAKqF,YAAYpF,EAAGC,EAAGoF,EAAIC,MAAMC,KAAK2b,cAClC7b,EAAIC,MAAMC,KAAK4b,WACf9b,EAAIC,MAAMC,KAAK6F,kBAOlB8U,EAAQtD,SAAS5c,GAAGC,IAK1B,SAASmhB,GAAkBlB,EAASlgB,EAAGC,EAAG8c,EAAYsE,GACzD,IAAIxW,EAAQ,EACZ,IAAK,IAAIjK,EAAIZ,EAAIqhB,EAAgB,EAAGzgB,GAAKZ,EAAIqhB,EAAgB,EAAGzgB,IAC5D,IAAK,IAAIC,EAAIZ,EAAIohB,EAAgB,EAAGxgB,GAAKZ,EAAIohB,EAAgB,EAAGxgB,IACxDqf,EAAQngB,KAAKU,MAAMG,EAAGC,KAClBkc,EAAWnc,GAAGC,KACdkc,EAAWnc,GAAGC,GAAK,IACjBgK,GAENqV,EAAQrD,SAASjc,GAAGC,GAAK,GAIrC,OAAOgK,EC3TX,MAAMyS,GAAK1d,EAAIuI,KAAKoV,GACb,IAAIzV,IACX,SAAWA,GACPA,EAAMA,EAAe,QAAIwV,GAAG,IAAM,UAClCxV,EAAMA,EAAoB,aAAIwV,GAAG,IAAM,eACvCxV,EAAMA,EAAiB,UAAIwV,GAAG,IAAM,YACpCxV,EAAMA,EAAqB,cAAIwV,GAAG,IAAM,gBACxCxV,EAAMA,EAAiC,0BAAIwV,GAAG,IAAM,4BACpDxV,EAAMA,EAAyB,kBAAIwV,GAAG,IAAM,oBAC5CxV,EAAMA,EAAwB,iBAAIwV,GAAG,IAAM,mBAC3CxV,EAAMA,EAA8B,uBAAIwV,GAAG,IAAM,yBACjDxV,EAAMA,EAAsB,eAAIwV,GAAG,IAAM,iBACzCxV,EAAMA,EAAwB,iBAAIwV,GAAG,IAAM,mBAC3CxV,EAAMA,EAA4B,qBAAIwV,GAAG,KAAO,uBAChDxV,EAAMA,EAA4B,qBAAIwV,GAAG,KAAO,uBAChDxV,EAAMA,EAA4B,qBAAIwV,GAAG,KAAO,uBAChDxV,EAAMA,EAA2B,oBAAIwV,GAAG,KAAO,sBAC/CxV,EAAMA,EAA2B,oBAAIwV,GAAG,KAAO,sBAC/CxV,EAAMA,EAAyB,kBAAIwV,GAAG,KAAO,oBAhBjD,CAiBGxV,KAAUA,GAAQ,KACd,MAAMwZ,GACT7a,YAAYgC,EAAO,IA4Bf,GA3BA9B,KAAKqC,KAAO,GACZrC,KAAKrB,MAAQ,EACbqB,KAAK4a,MAAQ,GACb5a,KAAKuE,GAAK,MACNzC,EAAKO,OACoB,iBAAdP,EAAKO,OACZP,EAAKO,KAAOP,EAAKO,KAAKwY,MAAM,QAAQxZ,KAAK3F,GAAMA,EAAEof,UAErD9a,KAAKqC,KAAOP,EAAKO,MAErBrC,KAAK+a,UAAY9hB,EAAI8hB,UAAUtU,KAAK3E,EAAKiZ,WAAa,KAClDjZ,EAAKkZ,MACLhb,KAAKgb,KAAO/hB,EAAIuN,MAAMC,KAAK3E,EAAKkZ,MAC5Bhb,KAAKgb,KAAKC,IAAM,IAChBjb,KAAKgb,KAAKC,GAAK,GACfjb,KAAKgb,KAAKzP,GAAKvL,KAAKgb,KAAKC,KACzBjb,KAAKgb,KAAKzP,GAAKvL,KAAKgb,KAAKC,KAG7Bjb,KAAKgb,KAAO/hB,EAAIuN,MAAMC,KAAK,CAAC,EAAG,IAE/B3E,EAAKnD,QACLqB,KAAKrB,MAAQ1F,EAAIuI,KAAK0V,KAAK/V,GAAOW,EAAKnD,QAEvCmD,EAAK8Y,QACL5a,KAAK4a,MAAQ9Y,EAAK8Y,MAAMvZ,KAAK0V,GAAQ,IAAImE,GAAenE,MAExD/W,KAAKrB,MAAQwC,GAAMga,gBACdnb,KAAK4a,MAAMQ,MAAMC,GAAMA,EAAE1c,MAAQ2c,GAAenE,gBACjD,MAAM,IAAIpW,MAAM,0EAI5ByD,aACI,SAAUxE,KAAKrB,MAAQwC,GAAMoa,SAEjCC,eACI,SAAUxb,KAAKrB,MAAQwC,GAAMsa,WAEjCC,kBACI,SAAU1b,KAAKrB,MAAQwC,GAAMwa,cAEjCC,iBACI,SAAU5b,KAAKrB,MAAQwC,GAAMga,eAEjClD,sBACI,SAAUjY,KAAKrB,MAAQwC,GAAM0a,sBAEjCC,sBACI,SAAU9b,KAAKrB,MAAQwC,GAAM4a,qBAEjCC,oBACI,SAAUhc,KAAKrB,MAAQwC,GAAM8a,mBAEjCC,oBACI,SAAUlc,KAAKrB,MAAQwC,GAAMgb,2BAEjCC,mBACI,SAAUpc,KAAKrB,MAAQwC,GAAMkb,kBAEjCC,wBACI,SAAUtc,KAAKrB,MAAQwC,GAAMob,wBAEjCC,sBACI,SAAUxc,KAAKrB,MAAQwC,GAAMsb,gBAEjCC,uBACI,SAAU1c,KAAKrB,MAAQwC,GAAMwb,sBAEjCC,mBACI,SAAU5c,KAAKrB,MAAQwC,GAAM0b,kBAEjCC,qBACI,SAAU9c,KAAKrB,MAAQwC,GAAM4b,qBAEjCxF,mBACI,SAAUvX,KAAKrB,MAAQwC,GAAM6b,mBAEjCld,UAAUmd,EAAe5a,GACrB,QAAIA,GAAQA,EAAKwE,SACO,iBAATxE,IACPA,EAAOA,EAAKwY,MAAM,QAAQxZ,KAAK3F,GAAMA,EAAEof,WAGtCzY,EAAKyE,OAAOoW,GAASld,KAAKqC,KAAK8a,SAASD,WAKhDld,KAAKrB,MAAQse,GAEVjd,KAAKrB,MAAQwC,GAAMga,eAAiB8B,GAEpCjd,KAAKrB,MAAQwC,GAAMwa,cAAgBsB,GAK3Cnd,iBACI,MAAMsd,EAAmB,CACrB9B,GAAe+B,eACf/B,GAAegC,kBAEbC,EAAc,IAAIjX,MAAMtG,KAAK4a,MAAM/T,QAAQzG,MAAK,GACtD,IAAK,IAAIlG,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzB,IAAIsjB,EAAY,EAChB,IAAK,IAAIvjB,EAAI,EAAGA,EAAIsjB,EAAY1W,OAAQ5M,IAChC+F,KAAK4a,MAAM3gB,GAAG0E,MAAQye,EAAiBljB,KACvCqjB,EAAYtjB,IAAK,EACjBujB,KAGR,GAAIA,EAAY,EAAG,CACf,IAAIC,EAAYxkB,EAAI8B,IAAIC,OAAOwL,MAAM,EAAGgX,GACxC,IAAK,IAAIvjB,EAAI,EAAGA,EAAIsjB,EAAY1W,OAAQ5M,IACpC,GAAI+F,KAAK4a,MAAM3gB,GAAG0E,MAAQye,EAAiBljB,GAAI,CAC3C,GAAiB,GAAbujB,EAAgB,CAChBF,EAAYtjB,IAAK,EACjB,MAGAwjB,MAMpB,OAAOzd,KAAK4a,MAAM8C,QAAO,CAACC,EAAI1jB,IAAMsjB,EAAYtjB,KAEpD6F,aAAayZ,GACT,MAAMtD,EAAWsD,EAAQtD,SACnB7c,EAAOmgB,EAAQngB,KAGrB,GAFA6c,EAAS7V,KAAK,GAEVJ,KAAKwE,OAOL,OAAOoZ,GAA4BrE,EAASA,EAAQnb,QAASmb,EAAQlb,SAEpE,GAAI2B,KAAK0b,YACV,OAwHL,SAAkCnC,EAASJ,GAC9C,IAAIhL,GAAU,EACd,MAAM/U,EAAOmgB,EAAQngB,KACf6c,EAAWsD,EAAQtD,SAEzB,GADAA,EAAS7V,KAAK,GACW,GAArB+Y,EAAU6B,KAAKzP,GAEf,OADA0K,EAASsD,EAAQnb,SAASmb,EAAQlb,SAAW,EACtC,EAGX,MAAMwf,EAAiBzkB,EAAK0kB,cAAcvE,EAAQnb,QAASmb,EAAQlb,SACnE,GAAIwf,EAAiB,IACjB,OAAO,EAEX,MAAME,EAAe,EAAE,GAAI,GAC3B,IAAIC,EAAsBH,EAC1B5kB,EAAIC,GAAGihB,aAAaZ,EAAQnb,QAASmb,EAAQlb,SAAS,CAAChF,EAAGC,KACtD,MAAM4K,EAAQ9K,EAAK0kB,cAAczkB,EAAGC,GAChC4K,GAAS2Z,IAET3Z,EAAQ,KAERA,EAAQ,IAEZ6Z,EAAa,GAAK1kB,EAClB0kB,EAAa,GAAKzkB,EAClB0kB,EAAsB9Z,OACvB,GACH,MAAM+Z,EAAWD,EAAsBH,EACvC,GAAI1E,EAAU6B,KAAKkD,SAASD,GAAW,CAEnC,MAAM/Z,EAAQ+R,EAASxY,UAAUsgB,EAAa,GAAIA,EAAa,IAAI,CAAC/hB,EAAI/B,EAAGC,KACnEd,EAAK+kB,WAAWlkB,EAAGC,KACnBiU,GAAU,GAEP/U,EAAK0kB,cAAc7jB,EAAGC,KAAO8jB,IACrC,GACH,GAAI7P,GAAWgL,EAAU6B,KAAKkD,SAASha,GACnC,OAAO+Z,EAEf,IAAI1H,EAAsB,EAC1B,MAAM6H,EAAWjF,EAAU6B,KAAKtT,QAC1B2W,EAAU9E,EAAQpb,YACxBmY,EAAwBld,EAAMilB,EAAS9E,EAAQnb,QAASmb,EAAQlb,QAAS8a,EAAU6B,KAAKzP,IACxF,MAAMvJ,EAAQ/I,EAAI8B,IAAIC,OAAOsQ,SAASlS,EAAKqB,MAAQrB,EAAKmB,QACxD4T,GAAU,EACV,IAAK,IAAIhU,EAAI,EAAGA,EAAI,KAAQoc,EAAsB6H,EAAUjkB,IACxD,IAAK,IAAIF,EAAI,EAAGA,EAAI+H,EAAM6E,QAAU0P,EAAsB6H,IAAYnkB,EAAG,CACrE,MAAMZ,EAAI2E,KAAK0H,MAAM1D,EAAM/H,GAAKb,EAAKmB,QAC/BjB,EAAI0I,EAAM/H,GAAKb,EAAKmB,OACb8jB,EAAQhlB,GAAGC,IACZa,IAERf,EAAK+kB,WAAW9kB,EAAGC,KACnB6U,GAAU,EACVoI,EAAsB6H,GAEtBhlB,EAAK0kB,cAAczkB,EAAGC,IAAMukB,IAEhC5H,EAAS5c,GAAGC,GAAK,EACjBid,GAAuB,IAG/B,OAAOA,EAvLQ+H,CAAyB/E,EAASvZ,MAGxC,CAMD,IAAI7B,EAAcob,EAAQpb,YAC1BmY,EAAwBld,EAAM+E,EAAaob,EAAQnb,QAASmb,EAAQlb,QAAS2B,KAAKgb,KAAKzP,IACvF,MAAMuD,EAAM7V,EAAI8B,IAAIC,OAAOsQ,SAASlS,EAAKqB,MAAQrB,EAAKmB,QACtD,IAAIgc,EAAsB,EACtBgI,EAAWve,KAAKgb,KAAKtT,QACzB,IAAK,IAAIvN,EAAI,EAAGA,EAAI,KAAQoc,EAAsBgI,EAAUpkB,IACxD,IAAK,IAAIqkB,EAAI,EAAGA,EAAI1P,EAAIjI,QAAU0P,EAAsBgI,EAAUC,IAAK,CACnE,MAAMvkB,EAAI+D,KAAK0H,MAAMoJ,EAAI0P,GAAKplB,EAAKmB,QAC7BL,EAAI4U,EAAI0P,GAAKplB,EAAKmB,OACxB,GAAI4D,EAAYlE,GAAGC,IAAMC,IACrB8b,EAAShc,GAAGC,GAAK,EACjBqc,IACInd,EAAK+kB,WAAWlkB,EAAGC,IACnBd,EAAKqF,YAAYxE,EAAGC,EAAGwE,EAAIC,MAAMC,KAAK6F,gBAEtC,OAAO,EAOvB,OAAO8R,IAoCZ,SAASkI,GAAiBC,EAAWC,GACxC,MAAMvlB,EAAOslB,EAAUtlB,KACjBgd,EAAasI,EAAUtI,WACvBwI,EAAW3lB,EAAI8B,IAAIC,OAAOqV,YAAYjX,EAAKqB,MAAOrB,EAAKmB,QAAQ,CAAClB,EAAGC,IAA0B,GAApB8c,EAAW/c,GAAGC,KAC7F,OAAKslB,GAAYA,EAAS,GAAK,GAAKA,EAAS,GAAK,EAEvC,KAEJA,EAiHX,SAAShB,GAA4BrE,EAAS9M,EAAQC,GAElD,MAAMuJ,EAAWsD,EAAQtD,SACnB7c,EAAOmgB,EAAQngB,KACrB,IAAI8K,EAAQ,EACZ+R,EAASxJ,GAAQC,GAAU,EAC3B,MAAMmS,EAAkBzlB,EAAK0kB,cAAcrR,EAAQC,GACnD,IAAK,IAAInT,EAAM,EAAGA,EAAM,EAAgBA,IAAO,CAC3C,MAAME,EAAOgT,EAASxT,EAAIC,GAAGF,KAAKO,GAAK,GACjCG,EAAOgT,EAASzT,EAAIC,GAAGF,KAAKO,GAAK,GACvC,GAAKH,EAAKU,MAAML,EAAMC,KAElBuc,EAASxc,GAAMC,GAAnB,CAEA,GAAIN,EAAK+kB,WAAW1kB,EAAMC,IACrBN,EAAKqF,YAAYhF,EAAMC,EAAMgF,EAAIC,MAAMC,KAAK6F,iBACxCrL,EAAKqF,YAAYhF,EAAMC,EAAMgF,EAAIC,MAAMC,KAAKkgB,cAKjD,OAAO,EAEX,GAAI1lB,EAAK0kB,cAAcrkB,EAAMC,IAASmlB,IACjCzlB,EAAKqF,YAAYhF,EAAMC,EAAMgF,EAAIC,MAAMC,KAAK6F,eAAgB,CAC7D,IAAIsa,EAAanB,GAA4BrE,EAAS9f,EAAMC,GAC5D,GAAIqlB,GAAc,EACd,OAAO,EACX7a,GAAS6a,IAGjB,OAAO7a,EAgGJ,SAAS8a,GAAsBzF,EAAS0F,EAA2B,GACtE,IAAIC,EACJ,MAAMjJ,EAAWsD,EAAQtD,SACnB7c,EAAOmgB,EAAQngB,KACrB,GACI8lB,GAAa,EACbjJ,EAAShU,SAAQ,CAACjG,EAAI3C,EAAGC,KAKrB,GAAIF,EAAKqF,YAAYpF,EAAGC,EAAGoF,EAAIC,MAAMC,KAAK6F,eACtC,OACJ,IAAKrL,EAAKwH,cAAcvH,EAAGC,GACvB,OACJ,IAAI6lB,EAAU,EACdlmB,EAAIC,GAAGihB,aAAa9gB,EAAGC,GAAG,CAACW,EAAGC,KACrB+b,EAASnc,MAAMG,EAAGC,IAEnB+b,EAAShc,GAAGC,KAAOd,EAAKwH,cAAc3G,EAAGC,MACvCilB,KAEP,GACCA,EAAUF,IAEdE,EAAU,EACVlmB,EAAIC,GAAGihB,aAAa9gB,EAAGC,GAAG,CAACW,EAAGC,KACrB+b,EAASnc,MAAMG,EAAGC,KAEnB+b,EAAShc,GAAGC,IAEXd,EAAKsH,OAAOzG,EAAGC,KAChBd,EAAKqF,YAAYxE,EAAGC,EAAGwE,EAAIC,MAAMC,KAAK6F,kBACpC0a,MAEP,GACCA,IAGJD,GAAa,EACbjJ,EAAS5c,GAAGC,GAAK,EACbF,EAAKwH,cAAcvH,EAAGC,IACtBF,EAAKwC,QAAQvC,EAAGC,EAAGqO,GAEvB1O,EAAIC,GAAGihB,aAAa9gB,EAAGC,GAAG,CAACW,EAAGC,KACrB+b,EAASnc,MAAMG,EAAGC,KAEnBd,EAAKuB,MAAMV,EAAGC,IAElBd,EAAKwC,QAAQ3B,EAAGC,EAAGyb,kBAGtBuJ,GAIN,MAAME,GAAa,GC1hBnB,MAAMC,GACTvf,cAAcwf,EAAOC,GACjBC,QAAQC,IAAI,yBAAyBF,KAEzCzf,sBAAsBwf,EAAOnG,EAAWxa,EAAOkX,GAC3C2J,QAAQC,IAAI,qBAAqBtG,EAAU5U,eAAesR,sBAA0B5c,EAAIuI,KAAKke,SAASve,GAAOxC,MAEjHmB,4BAA4BoZ,EAAMC,GAC9B,MAAMwG,EAAQ,2BAA2BxG,EAAU5U,KACnDib,QAAQI,MAAMD,GACdzG,EAAK9C,WAAWyJ,OAChBL,QAAQM,WAEZhgB,uBAAuBoZ,EAAMC,GACzBqG,QAAQC,IAAI,sBAAsBtG,EAAU5U,QAAQ2U,EAAK9a,WAAW8a,EAAK7a,wBAAwB8a,EAAUyB,MAAM/T,kBAAkBsS,EAAU6B,KAAK0E,uBAAuBzmB,EAAIuI,KAAKke,SAASve,GAAOgY,EAAUxa,UAEhNmB,0BAA0BoZ,EAAMC,GAC5BqG,QAAQC,IAAI,yBAAyBtG,EAAU5U,MAC/C2U,EAAKjD,SAAS4J,OAElB/f,sBAAsBoZ,EAAMC,EAAWoG,GACnCC,QAAQC,IAAI,qBAAqBtG,EAAU5U,QAAQ2U,EAAK9a,WAAW8a,EAAK7a,oBAAoBkhB,KAEhGzf,yBAAyBoZ,EAAMC,GAC3BqG,QAAQC,IAAI,wBAAwBtG,EAAU5U,QAAQ2U,EAAK9a,WAAW8a,EAAK7a,WAE/EyB,kBAAkBoZ,EAAMC,EAAW4G,GAC/BP,QAAQC,IAAI,iBAAiBtG,EAAU5U,MAAM4U,EAAUyB,MAAMoF,QAAQD,GAAQ,KAAK5G,EAAUyB,MAAM/T,aAAaqS,EAAK9a,WAAW8a,EAAK7a,qBAAqB0hB,EAAK7b,MAAMwb,uBAAuBzmB,EAAIuI,KAAKke,SAAS7I,GAAWkJ,EAAKphB,UAEjOmB,uBAAuBoZ,EAAMC,EAAW4G,EAAM3J,EAAY6J,GACtD,MAAMC,EAAY9J,EAAWlS,OAAOxI,GAAW,GAALA,IAC1C8jB,QAAQC,IAAI,sBAAsBtG,EAAU5U,MAAM4U,EAAUyB,MAAMoF,QAAQD,GAAQ,KAAK5G,EAAUyB,MAAM/T,aAAaqS,EAAK9a,WAAW8a,EAAK7a,wBAAwB4hB,YAAoBC,KACrL9J,EAAWyJ,OAEf/f,4BAA4Bwf,EAAOX,EAAYwB,EAAO9mB,EAAGC,GACrDkmB,QAAQC,IAAI,oBAAoBpmB,KAAKC,KAEzCwG,yBAAyBwf,EAAOX,EAAYwB,EAAO9mB,EAAGC,EAAGimB,GACrDC,QAAQC,IAAI,wBAAwBpmB,KAAKC,cAAcimB,KAE3Dzf,oBAAoBoZ,EAAMC,EAAW4G,GACjCP,QAAQC,IAAI,mBAAmBtG,EAAU5U,MAAM4U,EAAUyB,MAAMoF,QAAQD,GAAQ,KAAK5G,EAAUyB,MAAM/T,aAAaqS,EAAK9a,WAAW8a,EAAK7a,qBAAqB0hB,EAAK7b,MAAMwb,uBAAuBzmB,EAAIuI,KAAKke,SAAS7I,GAAWkJ,EAAKphB,UAEnOmB,iBAAiBoZ,EAAMC,EAAW4G,EAAMR,GACpCC,QAAQC,IAAI,gBAAgBtG,EAAU5U,MAAM4U,EAAUyB,MAAMoF,QAAQD,GAAQ,KAAK5G,EAAUyB,MAAM/T,aAAaqS,EAAK9a,WAAW8a,EAAK7a,qBAAqBkhB,uFD+ezJ,SAAiBhb,EAAI4U,GAMxB,OALMA,aAAqBwB,KACvBxB,EAAY,IAAIwB,GAAUxB,IAE9BiG,GAAW7a,GAAM4U,EACjBA,EAAU5U,GAAKA,EACR4U,UAEJ,SAAgB8D,EAAepH,GAClC,MAAMuK,EAAUpa,OAAOqa,OAAOjB,IAAY1B,QAAQ4C,GAAMA,EAAEC,UAAUtD,IAAkBqD,EAAEvF,UAAUlF,KAClG,OAAO5c,EAAI8B,IAAIC,OAAOC,KAAKmlB,2KEhiBxB,MACHtgB,YAAYuB,EAAKhF,EAAU,IACvB2D,KAAKkZ,KAAO,IAAItD,GAAUvU,EAAKhF,EAAQwZ,OAAS,GAC5CxZ,EAAQ+iB,YACH9Y,MAAMC,QAAQlK,EAAQ+iB,cACvB/iB,EAAQ+iB,WAAapZ,OAAOqa,OAAOhkB,EAAQ+iB,aAE/Cpf,KAAKof,WAAa/iB,EAAQ+iB,WAAW/d,KAAK3F,IAAM8kB,OF2hBxCjc,EE3hBiD7I,aF4hB/Cif,GACPpW,EACJ6a,GAAW7a,GAHf,IAAaA,MExhBRvE,KAAKof,WAAapZ,OAAOqa,OAAOI,KAEhB,IAAhBpkB,EAAQojB,IACRzf,KAAKyf,IAAM,IAAIJ,GAGfrf,KAAKyf,IAAMpjB,EAAQojB,KAAO,IAAI/I,GAGtC5W,YAAYmd,GACR,MAAMnQ,EAAU9M,KAAKof,WAAW/d,KAAKif,GAC5BA,EAAEC,UAAUtD,GAEVqD,EAAEvF,UAAU/a,KAAKkZ,KAAKrD,OADlB,IAGT3W,EAAQjG,EAAI8B,IAAIC,OAAOqM,SAASyF,GACtC,OAAO9M,KAAKof,WAAWlgB,IAAU,KAErCY,kBAAkB4gB,EAAuBC,GAAWpF,QAASliB,GAAI,EAAIC,GAAI,EAAIsnB,EAAc,MACvF,MAAM1H,EAAOlZ,KAAKkZ,KAClBA,EAAK9f,KAAK+K,UACV,IAAIgJ,EAAQ,EACZ,KAAOA,EAAQ,IAAI,CACf,MAAMgM,EAAYnZ,KAAK6gB,YAAYH,GACnC,IAAKvH,EAED,aADMnZ,KAAKyf,IAAIqB,QAAQ5H,EAAM,6DAA6DjgB,EAAIuI,KAAKke,SAASiB,GAAYD,cAAiCxH,EAAKrD,UACvJ,EAGX,SADM7V,KAAKyf,IAAIsB,gBAAgB7H,EAAMC,EAAWuH,EAAsBxH,EAAKrD,aACjE7V,KAAKghB,SAAS7H,EAAW9f,EAAGC,EAAGsnB,GACrC,OAAO,IAETzT,EAQN,OAAO,EAEXrN,YAAYqZ,EAAW9f,GAAI,EAAIC,GAAI,EAAIsnB,EAAc,MACjD,MAAM1H,EAAOlZ,KAAKkZ,KAClB,GAAyB,iBAAdC,EAAwB,CAC/B,MAAM5U,EAAK4U,EAEX,KADAA,EAAYsH,GAAgBlc,IAExB,MAAM,IAAIxD,MAAM,8BAAgCwD,GAGxD,OADA2U,EAAK9f,KAAK+K,gBACGnE,KAAKghB,SAAS7H,EAAW9f,EAAGC,EAAGsnB,GAEhD9gB,eAAeqZ,EAAW9f,GAAI,EAAIC,GAAI,EAAIsnB,EAAc,MACpD,MAAM1H,EAAOlZ,KAAKkZ,KAClB,GAAI7f,GAAK,GAAKC,GAAK,EACf,aAAa0G,KAAKihB,OAAO9H,EAAW9f,EAAGC,EAAGsnB,GAE9C,IAAI1c,QAAclE,KAAKkhB,gBAAgB/H,GACvC,IAAKjV,EACD,OAAO,EAEX,IAAIiJ,EAAQ,GACZ,KAAOjJ,KAAWiJ,KAAS,CACvB,MAAMrS,EAAMqmB,GAAsBjI,KAAoB,EACtD,GAAIpe,SACUkF,KAAKihB,OAAO9H,EAAWre,EAAI,GAAIA,EAAI,GAAI8lB,GAC7C,OAAO,EAKnB,aADM5gB,KAAKyf,IAAI2B,gBAAgBlI,EAAMC,EAAW,oDACzC,EAKXrZ,aAAaqZ,EAAW/a,EAASC,EAASuiB,EAAc,MACpD,MAAM1H,EAAOlZ,KAAKkZ,KAGlB,GAFAA,EAAKmI,MAAMjjB,EAASC,SACd2B,KAAKyf,IAAI6B,iBAAiBpI,EAAMC,EAAWyH,UACrC5gB,KAAKuhB,iBAAiBpI,GAC9B,OAAO,EAGX,MAAMqI,EAActI,EAAK9f,KAAK2K,SAC9BmV,EAAKlD,cAAgBkD,EAAK9f,KAAKqoB,gBF+RhC,SAAyBlI,EAASJ,GACrC,MAAMlD,EAAWsD,EAAQtD,SACnB7c,EAAOmgB,EAAQngB,KAEjB+f,EAAUuD,iBACVsC,GAAsBzF,EAAS,GAE1BJ,EAAUyD,cACfoC,GAAsBzF,EAAS,GAG/BJ,EAAU6C,eACV/F,EAAShU,SAAQ,CAACvG,EAAGrC,EAAGC,KAChBoC,GACAtC,EAAKwC,QAAQvC,EAAGC,EAAGqO,MAI3BwR,EAAU+C,eACVjG,EAAShU,SAAQ,CAACvG,EAAGrC,EAAGC,KACfoC,GAEDtC,EAAKwH,cAAcvH,EAAGC,IACtBF,EAAKwC,QAAQvC,EAAGC,EAAGqO,MAK3BwR,EAAUiD,cACVnG,EAAShU,SAAQ,CAACvG,EAAGrC,EAAGC,KAChBoC,GAAKtC,EAAK2V,YAAY1V,EAAGC,IACzBF,EAAKwC,QAAQvC,EAAGC,EAAGqO,MAK3BwR,EAAUmD,mBACVrG,EAAShU,SAAQ,CAACvG,EAAGrC,EAAGC,KACfoC,IAAKtC,EAAKqF,YAAYpF,EAAGC,EAAGoF,EAAIC,MAAMC,KAAKkgB,eAEhD7lB,EAAIC,GAAGihB,aAAa9gB,EAAGC,GAAG,CAACW,EAAGC,KACrB+b,EAASnc,MAAMG,EAAGC,KAEnB+b,EAAShc,GAAGC,IAEZd,EAAKsH,OAAOzG,EAAGC,IAEfd,EAAKqF,YAAYxE,EAAGC,EAAGwE,EAAIC,MAAMC,KAAKkgB,eAEtC1lB,EAAKqF,YAAYxE,EAAGC,EAAGwE,EAAIC,MAAMC,KAAK6F,gBAErCrL,EAAKwH,cAAc3G,EAAGC,IAE3Bd,EAAKwC,QAAQ3B,EAAGC,EAAGyb,OACpB,MASPwD,EAAUqD,iBACVvG,EAAShU,SAAQ,CAACvG,EAAGrC,EAAGC,KACfoC,IAAKtC,EAAKqF,YAAYpF,EAAGC,EAAGoF,EAAIC,MAAMC,KAAKkgB,gBAEhD1lB,EAAKuI,YAAYtI,EAAGC,EAAGoF,EAAIC,MAAMC,KAAKgB,aACtC3G,EAAIC,GAAGihB,aAAa9gB,EAAGC,GAAG,CAACW,EAAGC,KACrB+b,EAASnc,MAAMG,EAAGC,KAEnB+b,EAAShc,GAAGC,IAEZd,EAAKqF,YAAYxE,EAAGC,EAAGwE,EAAIC,MAAMC,KAAKkgB,eAE1C1lB,EAAKuI,YAAY1H,EAAGC,EAAGwE,EAAIC,MAAMC,KAAKgB,iBACvC,OAIX,MAAMoW,EAAgBuD,EAAQvD,cAC9BC,EAAShU,SAAQ,CAACvG,EAAGrC,EAAGC,KACfoC,IAECyd,EAAUxa,MAAQwC,GAAM4b,qBAC1B3jB,EAAK2F,WAAW1F,EAAGC,EAAG0c,EAAemD,EAAU3U,QAI/CpL,EAAKsoB,aAAaroB,EAAGC,IACrBF,EAAKwC,QAAQvC,EAAGC,EAAGiY,OEvXvBoQ,CAAqBzI,EAAMC,GAG3BD,EAAK0I,cAAczI,EAAU6B,KAAKzP,IAGlC,MAAMsW,EAAa1I,EAAU2I,iBAG7B,IAAK,IAAI5iB,EAAQ,EAAGA,EAAQ2iB,EAAWhb,OAAQ3H,IAAS,CACpD,MAAM6iB,EAAYF,EAAW3iB,GAE7B,UAAYc,KAAKgiB,WAAW7I,EAAW4I,EAAWnB,GAM9C,OAHA1H,EAAK9f,KAAK6oB,QAAQT,SACZxhB,KAAKyf,IAAI2B,gBAAgBlI,EAAMC,EAAW,wBAAwBja,EAAQ,OAEzE,EAgBf,OAZIia,EAAU2D,gBACVoF,EAAuBhJ,EAAK9f,KAAM8f,EAAKlD,qBASrChW,KAAKyf,IAAI0C,mBAAmBjJ,EAAMC,IAEjC,EAEXrZ,sBAAsBqZ,GAClB,MAAMD,EAAOlZ,KAAKkZ,KACZhV,EF6DP,SAAwBwa,EAAWvF,GACtC,MAAM/f,EAAOslB,EAAUtlB,KACjBgd,EAAasI,EAAUtI,WAG7B,GAFAA,EAAWhW,KAAK,GAEZ+Y,EAAU3U,OAGV4R,EAAWra,QAAO,CAACC,EAAI3C,EAAGC,IACfF,EAAKqF,YAAYpF,EAAGC,EAAGoF,EAAIC,MAAMC,KAAKkgB,eACzC3F,EAAU6B,KAAKkD,SAAS9kB,EAAK0kB,cAAczkB,EAAGC,IAC5C,EACA,QAGT,CAAA,GAAI6f,EAAUuC,YAEf,MAAM,IAAI3a,MAAM,4EAGhBqV,EAAWra,QAAO,CAACC,EAAI3C,EAAGC,IACjBF,EAAK6C,WAAW5C,EAAGC,GAEpB6f,EAAU5B,aACIte,EAAIC,GAAGwD,SAASrD,EAAGC,GAAG,CAACW,EAAGC,IAAMd,EAAK6C,WAAWhC,EAAGC,MACjD,EAAI,EAAI,EAErB,EALI,IAQnB,OAAOkc,EAAWlS,OAAOxI,GAAW,GAALA,IE3Fb0mB,CAAoBlJ,EAAMC,GACxC,OAAIjV,GAAS,SACHlE,KAAKyf,IAAI2B,gBAAgBlI,EAAMC,EAAW,0CACzC,UAELnZ,KAAKyf,IAAI4C,sBAAsBnJ,EAAMC,GACpCjV,GAEXpE,uBAAuBqZ,GACnB,IAAImJ,EAAO,KACX,MAAMpJ,EAAOlZ,KAAKkZ,KAClB,IAAIhV,EAAQiV,EAAUoJ,aAAarJ,GAkBnC,OAhBKhV,EAGKiV,EAAU6B,KAAKkD,SAASha,GAGzBiV,EAAUlB,iBACfuK,EAAqBtJ,EAAK9f,KAAM8f,EAAKjD,SAAU,CAC3CxZ,QAASyc,EAAK9f,KAAKkI,eAEvBghB,EAAO,uBAEFnJ,EAAU2C,iBACf2G,EAAuBvJ,EAAK9f,KAAM8f,EAAKjD,UAAY,MACnDqM,EAAO,yCAVPA,EAAO,+BAA+Bpe,YAAgBiV,EAAU6B,KAAK0E,aAHrE4C,EAAO,kBAeNA,SAICtiB,KAAKyf,IAAI2B,gBAAgBlI,EAAMC,EAAWmJ,IACzC,UAJGtiB,KAAKyf,IAAIiD,oBAAoBxJ,EAAMC,IAClC,GAKfrZ,iBAAiBqZ,EAAWK,EAAWoH,GACnC,IAAIX,EAAY,EACZ0C,EAAa,EACjB,MAAMzJ,EAAOlZ,KAAKkZ,KACZ9f,EAAO8f,EAAK9f,WACZ4G,KAAKyf,IAAImD,YAAY1J,EAAMC,EAAWK,EAAWoH,GAOvD,MAAMxH,EAAgByJ,GAAuB3J,EAAMM,GAGnD,IAAIjD,EAAsB,EAC1B,GAAIiD,EAAUZ,eAAgB,CAI1B,UADoB5Y,KAAK8iB,YAAYnC,GAAWhF,aAAczC,EAAK9a,QAAS8a,EAAK7a,SAG7E,aADM2B,KAAKyf,IAAIsD,WAAW7J,EAAMC,EAAWK,EAAW,8BAC/C,EAIf,IAAKA,EAAUP,gBACX,OAAO,EAEX,MAAM7C,EAAand,EAAI2D,KAAKC,MAAMzD,EAAKqB,MAAOrB,EAAKmB,QACnD,GAAIif,EAAUpC,cACVhB,EAAW8C,EAAK9a,SAAS8a,EAAK7a,SAAW,EACzCkY,EAAsB,EACtB0J,EAAY,OAWZ,GARA1J,EAAsBiD,EAAUwJ,eAAe9J,EAAMC,EAAW/C,EAAYgD,GAExE6G,EADAzG,EAAUV,mBACEvC,EAGAiD,EAAUtV,MAAMwD,cAE1B1H,KAAKyf,IAAIwD,iBAAiB/J,EAAMC,EAAWK,EAAWpD,EAAY6J,IACnE1J,GACDA,EAAsBiD,EAAUtV,MAAM+W,GAEtC,aADMjb,KAAKyf,IAAIsD,WAAW7J,EAAMC,EAAWK,EAAW,aAAaL,EAAU5U,YAAY4U,EAAUyB,MAAMoF,QAAQxG,aAAqBjD,6BAA+CiD,EAAUtV,MAAMwb,gBAC9L,EAGf,IAAIrmB,EAAI,EAAGC,EAAI,EACX6U,GAAU,EACd,KAAOoI,EAAsB,IACxBiD,EAAUV,oBACP6J,EAAa1C,GACbzG,EAAU3B,wBACd1J,GAAU,EAENqL,EAAUpC,eAEV/d,EAAI6f,EAAK9a,QACT9E,EAAI4f,EAAK7a,UAKRhF,EAAGC,GAAKL,EAAI8B,IAAIC,OAAOqV,YAAY+F,EAAW3b,MAAO2b,EAAW7b,QAAQ,CAAClB,EAAGC,IAAM8c,EAAW/c,GAAGC,GAAK,IAG1G8c,EAAW/c,GAAGC,GAAK,EACnBid,IACApI,QAAgBnO,KAAKkjB,mBAAmB/J,EAAWK,EAAWngB,EAAGC,EAAGsnB,GAChEzS,IAEAoI,GAAuB4M,GAAuBjK,EAAM7f,EAAGC,EAAG8c,EAAYoD,EAAUxC,KAChF2L,KAgBR,OAZA1pB,EAAI2D,KAAKI,KAAKoZ,GACToD,EAAUtV,MAAMga,SAASyE,IACzBnJ,EAAUV,oBACVU,EAAU3B,wBACX1J,GAAU,QACJnO,KAAKyf,IAAIsD,WAAW7J,EAAMC,EAAWK,EAAW,4CAA4CA,EAAUtV,MAAMwb,sBAAsBiD,MAIxIxU,SACMnO,KAAKyf,IAAI2D,cAAclK,EAAMC,EAAWK,GAE3CrL,EAEXrO,yBAAyBqZ,EAAWK,EAAWngB,EAAGC,EAAGsnB,EAAc,MAC/D,IAAIzS,GAAU,EACV2G,GAAe,EACnB,MAAMoE,EAAOlZ,KAAKkZ,KACZ9f,EAAO8f,EAAK9f,KAkBlB,GAjBI+U,GAAWqL,EAAUvB,iBAEjBoL,EAAuBjqB,EAAMC,EAAGC,WAC1B0G,KAAKyf,IAAI6D,mBAAmBpK,EAAMC,EAAWK,EAAWngB,EAAGC,EAAG,uBACpE6U,GAAU,GAIdA,GAAWqL,EAAUpV,SACrB+J,EAAU/U,EAAKmqB,YAAY/J,EAAUpV,OAAQ/K,EAAGC,GAChDwb,EAAe3G,EACVA,GACDnO,KAAKyf,IAAI6D,mBAAmBpK,EAAMC,EAAWK,EAAWngB,EAAGC,EAAG,4BAC1DkqB,KAAKC,UAAUjK,EAAUpV,UAIjC+J,IAA+B,IAApBqL,EAAUva,KAAa,CAClC,MAAMA,EAAOP,EAAIO,KAAK5B,IAAImc,EAAUva,MAC/Bua,EAAUzB,iBACX9Y,EAAKwD,cACJ+W,EAAUvB,iBAEPoL,EAAuBjqB,EAAMC,EAAGC,EAAG,CACnCmD,QAASrD,EAAKkI,uBAERtB,KAAKyf,IAAI6D,mBAAmBpK,EAAMC,EAAWK,EAAWngB,EAAGC,EAAG,oBACpE6U,GAAU,GAGdA,IACAA,EAAU/U,EAAKwC,QAAQvC,EAAGC,EAAG2F,GAC7B6V,EAAeA,GAAgB3G,EAC1BA,SACKnO,KAAKyf,IAAI6D,mBAAmBpK,EAAMC,EAAWK,EAAWngB,EAAGC,EAAG,wBAA0B2F,EAAKsF,KAM/G,GAAI4J,GAAWqL,EAAUve,KAAM,CAC3B,MAAMA,EAAO7B,EAAKsqB,eAAelK,EAAUve,MACtCA,GAMGue,EAAUpB,YACVnd,EAAKiL,IAAMxH,EAAIilB,OAAOC,YAAYvqB,EAAGC,IAAKkgB,EAAUlB,kBAEpDkB,EAAUhB,eACVrK,QAAgBnO,KAAK8iB,YAAYnC,GAAWxF,eAAgB,GAAI,EAAGlgB,GAC/DkT,EACA2G,GAAe,QAGT9U,KAAKyf,IAAI6D,mBAAmBpK,EAAMC,EAAWK,EAAWngB,EAAGC,EAAG,2CAChE2B,EAAK4oB,KAAKtf,MAIlB4J,EAAU/U,EAAK0qB,QAAQzqB,EAAGC,EAAG2B,GAC7B6Z,EAAeA,GAAgB3G,EAC1BA,SACKnO,KAAKyf,IAAI6D,mBAAmBpK,EAAMC,EAAWK,EAAWngB,EAAGC,EAAG,gCAAkC2B,EAAK4oB,KAAKtf,OAtBxH4J,GAAU,QACJnO,KAAKyf,IAAI6D,mBAAmBpK,EAAMC,EAAWK,EAAWngB,EAAGC,EAAG,gCAChEkqB,KAAKC,UAAUjK,EAAUve,aAyBhC,GAAIkT,GAAWqL,EAAUrB,UAAW,CAErC,IAAKyI,EACD,MAAM,IAAI7f,MAAM,+DAEhBoN,IACAA,EAAU/U,EAAK0qB,QAAQzqB,EAAGC,EAAGsnB,GACzBzS,EACA2G,GAAe,QAGT9U,KAAKyf,IAAI6D,mBAAmBpK,EAAMC,EAAWK,EAAWngB,EAAGC,EAAG,wCAChEsnB,EAAYiD,KAAKtf,KAkBjC,OAdI4J,GAAW2G,IAENqE,EAAU2D,gBACX1jB,EAAK2F,WAAW1F,EAAGC,EAAG4f,EAAKlD,cAAemD,EAAU3U,QAGpDgV,EAAUd,aACVtf,EAAKuI,YAAYtI,EAAGC,EAAGoF,EAAIC,MAAMC,KAAKgB,mBAEpCI,KAAKyf,IAAIsE,sBAAsB7K,EAAMC,EAAWK,EAAWngB,EAAGC,IAKjE6U,GAAW2G,iCCxXnB,MACHhV,YAAYzD,EAAU,IAClB2D,KAAK8F,OAAS,CACVke,OAAQ,EACRvpB,MAAO,GACPF,OAAQ,GACRyM,MAAO,CAAE9C,MAAO,GAAImP,OAAQ,WAC5B1G,MAAO,GACP8E,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,OAAQ,GACRC,UAAU,GAEd7R,KAAKikB,MAAQ,GACbjkB,KAAKkkB,UAAY,GACjBjrB,EAAIgZ,OAAOC,WAAWlS,KAAK8F,OAAQzJ,GAC/B2D,KAAK8F,OAAO7F,MACZhH,EAAI8B,IAAIC,OAAOiF,KAAKD,KAAK8F,OAAO7F,MAEpCD,KAAKmkB,YACLnkB,KAAKokB,gBAETJ,aACI,OAAOhkB,KAAK8F,OAAOke,OAEvBlkB,YACI,IAAK,IAAI7F,EAAI,EAAGA,EAAI+F,KAAK8F,OAAOke,SAAU/pB,EACtC+F,KAAKikB,MAAMhqB,GAAKhB,EAAI8B,IAAIC,OAAOgX,OAAO,GAAK,IAGnDlS,gBACI,IAAIgS,EAAW9R,KAAK8F,OAAOgM,UAAY,CACnC9T,KAAK0H,MAAM1F,KAAK8F,OAAOrL,MAAQ,GAC/BuF,KAAK8F,OAAOvL,OAAS,GAEzB,MAAMmU,EAAc1O,KAAK8F,OAAOue,eAC5BrmB,KAAK0H,MAAM1H,KAAKoL,IAAIpJ,KAAK8F,OAAOrL,MAAQ,EAAGuF,KAAK8F,OAAOvL,OAAS,IACpE,IAAK,IAAIN,EAAI,EAAGA,EAAI+F,KAAK8F,OAAOke,SAAU/pB,EAAG,CACzC,MAAM8X,EAAS9Y,EAAI8B,IAAIC,OAAOqV,YAAYrQ,KAAK8F,OAAOrL,MAAOuF,KAAK8F,OAAOvL,QAAQ,CAAClB,EAAGC,IACzEL,EAAIC,GAAGqX,gBAAgBuB,EAAS,GAAIA,EAAS,GAAIzY,EAAGC,GACxDoV,IAER1O,KAAKkkB,UAAUtpB,KAAK,CAChB,CAACkX,EAAS,GAAIA,EAAS,IACvB,CAACC,EAAO,GAAIA,EAAO,MAEvBD,EAAWC,GAGnBjS,SAASyE,EAAIiO,GACT,GAAIjO,EAAK,GAAKA,EAAKvE,KAAK8F,OAAOke,OAC3B,MAAM,IAAIjjB,MAAM,qBAAuBwD,GAC3CtL,EAAI8B,IAAIC,OAAOiF,KAAKD,KAAKikB,MAAM1f,IAE/B,MAAOuN,EAAUC,GAAU/R,KAAKkkB,UAAU3f,GACpC+f,EAAYte,OAAO0H,OAAO,GAAI1N,KAAK8F,OAAO8L,QAC5C5R,KAAK8F,OAAOye,QACZD,EAAUhV,KAAOwC,EACjBwS,EAAUjV,GAAK0C,EACL,GAANxN,GAAWvE,KAAK8F,OAAO0e,YACvBF,EAAU5U,SAAW1P,KAAK8F,OAAO0e,WAEjCjgB,GAAMvE,KAAK8F,OAAOke,OAAS,GAAKhkB,KAAK8F,OAAO2e,UAC5CH,EAAU9U,OAASxP,KAAK8F,OAAO2e,WAInCH,EAAUhV,KAAOyC,EACjBuS,EAAUjV,GAAKyC,EACL,GAANvN,GAAWvE,KAAK8F,OAAO0e,YACvBF,EAAU9U,OAASxP,KAAK8F,OAAO0e,WAE/BjgB,GAAMvE,KAAK8F,OAAOke,OAAS,GAAKhkB,KAAK8F,OAAO2e,UAC5CH,EAAU5U,SAAW1P,KAAK8F,OAAO2e,UAGzC,MAAMzd,EAAQhB,OAAO0H,OAAO,GAAI1N,KAAK8F,OAAOkB,OACjC,IAAPzC,GAAYyC,EAAM0d,WAClB1d,EAAMxJ,MAAQwJ,EAAM0d,UAExB,MAAMC,EAAY,CACdlT,MAAOzR,KAAK8F,OAAO2L,MACnBC,MAAO1R,KAAK8F,OAAO4L,MACnBC,QAAS3R,KAAK8F,OAAO6L,QACrB3K,MAAOA,EACP4K,OAAQ0S,EACRzS,SAAU7R,KAAK8F,OAAO+L,SACtBpX,MAAOuF,KAAK8F,OAAOrL,MACnBF,OAAQyF,KAAK8F,OAAOvL,QAExB,OAAOyF,KAAK4kB,UAAUrgB,EAAIogB,EAAWnS,GAGzC1S,UAAUyE,EAAIzC,EAAM0Q,GAChB,MAAMqS,EAAQ,IAAIC,GAAYhjB,GACxBhF,EAAS+nB,EAAMrd,OAAOxH,KAAK8F,OAAOrL,MAAOuF,KAAK8F,OAAOvL,OAAQiY,GAKnE,OAJKvZ,EAAIC,GAAG6rB,SAASF,EAAM9S,OAAQjQ,EAAKiQ,SACnC9Y,EAAIC,GAAG6rB,SAASF,EAAM/S,SAAUhQ,EAAKgQ,YACtC9R,KAAKkkB,UAAU3f,GAAM,CAACsgB,EAAM/S,SAAU+S,EAAM9S,SAEzCjV"}