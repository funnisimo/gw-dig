{"version":3,"file":"gw-dig.min.js","sources":["../js/site.js","../js/utils.js","../js/types.js","../js/hall.js","../js/room.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/level.js","../js/dig.js","../js/dungeon.js"],"sourcesContent":["import * as GW from 'gw-utils';\nexport const NOTHING = 0;\nexport const FLOOR = 1;\nexport const DOOR = 2;\nexport const WALL = 3;\nexport const DEEP = 4;\nexport const SHALLOW = 5;\nexport const BRIDGE = 6;\nexport const UP_STAIRS = 7;\nexport const DOWN_STAIRS = 17;\nexport const IMPREGNABLE = 8;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\nexport const SEQ = [];\nexport function initSeqence(length) {\n    SEQ.length = length;\n    for (let i = 0; i < length; ++i) {\n        SEQ[i] = i;\n    }\n    GW.random.shuffle(SEQ);\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GW.path.OBSTRUCTION);\n}\nexport class GridSite {\n    constructor(grid) {\n        this.grid = grid;\n    }\n    get width() {\n        return this.grid.width;\n    }\n    get height() {\n        return this.grid.height;\n    }\n    hasXY(x, y) {\n        return this.grid.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.grid.isBoundaryXY(x, y);\n    }\n    get(x, y) {\n        return this.grid.get(x, y) || 0;\n    }\n    copy(other, offsetX = 0, offsetY = 0) {\n        this.grid.forEach((_c, i, j) => {\n            const otherX = i - offsetX;\n            const otherY = j - offsetY;\n            const v = other.get(otherX, otherY);\n            if (!v)\n                return;\n            this.grid.set(i, j, v);\n        });\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.grid.get(x, y);\n        return v === NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.grid.get(x, y);\n        return v === NOTHING;\n    }\n    isFloor(x, y) {\n        return this.grid.get(x, y) == FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.grid.get(x, y);\n        return v === DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.grid.get(x, y);\n        return v === BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.grid.get(x, y);\n        return v === WALL || v === IMPREGNABLE;\n    }\n    isObstruction(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.grid.get(x, y);\n        return v === UP_STAIRS || v === DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.grid.get(x, y) === DEEP;\n    }\n    isShallow(x, y) {\n        return this.grid.get(x, y) === SHALLOW;\n    }\n    isAnyWater(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.grid.get(x, y) || 0) > 0;\n    }\n    setTile(x, y, tile) {\n        if (this.grid.hasXY(x, y))\n            this.grid[x][y] = tile;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nconst DIRS = GW.utils.DIRS;\nexport function attachRoom(map, roomGrid, room, opts) {\n    // console.log('attachRoom');\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    const site = new SITE.GridSite(map);\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SITE.SEQ.length; i++) {\n        const x = Math.floor(SITE.SEQ[i] / map.height);\n        const y = SITE.SEQ[i] % map.height;\n        if (!(map.get(x, y) == SITE.NOTHING))\n            continue;\n        const dir = directionOfDoorSite(site, x, y);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door)\n                continue;\n            const offsetX = x - door[0];\n            const offsetY = y - door[1];\n            if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n                // TYPES.Room fits here.\n                GW.grid.offsetZip(map, roomGrid, offsetX, offsetY, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || SITE.FLOOR;\n                });\n                attachDoor(map, room, opts, x, y, oppDir);\n                // door[0] = -1;\n                // door[1] = -1;\n                room.translate(offsetX, offsetY);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function attachDoor(map, room, opts, x, y, dir) {\n    if (opts.door === 0)\n        return; // no door at all\n    const tile = opts.door || SITE.DOOR;\n    map[x][y] = tile; // Door site.\n    // most cases...\n    if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n        return;\n    }\n    if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n        let didSomething = true;\n        let k = 1;\n        while (didSomething) {\n            didSomething = false;\n            if (map.get(x - k, y) === 0) {\n                if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n                    map[x - k][y] = tile;\n                    didSomething = true;\n                }\n            }\n            if (map.get(x + k, y) === 0) {\n                if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n                    map[x + k][y] = tile;\n                    didSomething = true;\n                }\n            }\n            ++k;\n        }\n    }\n    else {\n        let didSomething = true;\n        let k = 1;\n        while (didSomething) {\n            didSomething = false;\n            if (map.get(x, y - k) === 0) {\n                if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n                    map[x][y - k] = opts.door;\n                    didSomething = true;\n                }\n            }\n            if (map.get(x, y + k) === 0) {\n                if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n                    map[x][y + k] = opts.door;\n                    didSomething = true;\n                }\n            }\n            ++k;\n        }\n    }\n}\nexport function roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n    let xRoom, yRoom, xSite, ySite, i, j;\n    // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n    for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n        for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n            if (roomGrid[xRoom][yRoom]) {\n                xSite = xRoom + roomToSiteX;\n                ySite = yRoom + roomToSiteY;\n                for (i = xSite - 1; i <= xSite + 1; i++) {\n                    for (j = ySite - 1; j <= ySite + 1; j++) {\n                        if (!map.hasXY(i, j) ||\n                            map.isBoundaryXY(i, j) ||\n                            !(map.get(i, j) === SITE.NOTHING)) {\n                            // console.log('- NO');\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // console.log('- YES');\n    return true;\n}\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GW.utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GW.utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GW.utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GW.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GW.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GW.utils.DIRS[dir][0];\n                    newY = j + GW.utils.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GW.utils.DIRS[dir][0];\n                        newY += GW.utils.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = GW.random.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GW.grid.free(grid);\n    return doorSites;\n}\nexport function forceRoomAtMapLoc(map, xy, roomGrid, room, opts) {\n    // console.log('forceRoomAtMapLoc', xy);\n    const site = new SITE.GridSite(map);\n    // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < SITE.SEQ.length; i++) {\n        const x = Math.floor(SITE.SEQ[i] / map.height);\n        const y = SITE.SEQ[i] % map.height;\n        if (roomGrid[x][y])\n            continue;\n        const dir = directionOfDoorSite(site, x, y);\n        if (dir != GW.utils.NO_DIRECTION) {\n            const dx = xy[0] - x;\n            const dy = xy[1] - y;\n            if (roomFitsAt(map, roomGrid, dx, dy)) {\n                GW.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n                    map[i][j] = opts.room.tile || SITE.FLOOR;\n                });\n                if (opts.room.door !== false) {\n                    const door = opts.room.door === true || !opts.room.door\n                        ? SITE.DOOR\n                        : opts.room.door;\n                    map[xy[0]][xy[1]] = door; // Door site.\n                }\n                // TODO - Update doors - we may have to erase one...\n                room.translate(dx, dy);\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function attachRoomAtMapDoor(map, mapDoors, roomGrid, room, opts) {\n    const doorIndexes = GW.random.sequence(mapDoors.length);\n    // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n    // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n    for (let i = 0; i < doorIndexes.length; i++) {\n        const index = doorIndexes[i];\n        const door = mapDoors[index];\n        if (!door)\n            continue;\n        const x = door[0];\n        const y = door[1];\n        if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction attachRoomAtXY(map, x, y, roomGrid, room, opts) {\n    const doorSites = room.hall ? room.hall.doors : room.doors;\n    const dirs = GW.random.sequence(4);\n    // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n    for (let dir of dirs) {\n        const oppDir = (dir + 2) % 4;\n        const door = doorSites[oppDir];\n        if (!door)\n            continue;\n        if (door[0] != -1 &&\n            roomFitsAt(map, roomGrid, x - door[0], y - door[1])) {\n            // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n            // TYPES.Room fits here.\n            const offX = x - door[0];\n            const offY = y - door[1];\n            GW.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n                map[i][j] = opts.room.tile || SITE.FLOOR;\n            });\n            attachDoor(map, room, opts, x, y, oppDir);\n            room.translate(offX, offY);\n            // const newDoors = doorSites.map((site) => {\n            //     const x0 = site[0] + offX;\n            //     const y0 = site[1] + offY;\n            //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n            //     return [x0, y0] as GW.utils.Loc;\n            // });\n            return true;\n        }\n    }\n    return false;\n}\n","import * as GW from 'gw-utils';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GW.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        // console.log('Hall', loc, d, length, width);\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        // console.log(' - ', [this.x2, this.y2]);\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room extends GW.utils.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as UTILS from './utils';\nimport * as TYPES from './types';\nconst DIRS = GW.utils.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(opts = {}) {\n    return GW.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GW.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GW.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GW.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths) {\n    if (dir == GW.utils.UP || dir == GW.utils.DOWN) {\n        return lengths[1].value();\n    }\n    else {\n        return lengths[0].value();\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GW.utils.NO_DIRECTION;\n    if (dir == GW.utils.NO_DIRECTION) {\n        const dirs = GW.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GW.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = GW.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: GW.range.make(1),\n            length: [GW.range.make('2-15'), GW.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = GW.range.make(options.width);\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GW.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || UTILS.chooseRandomDoorSites(site);\n        if (!GW.random.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GW.utils.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = this.config.width.value();\n        const length = pickLength(dir, this.config.length);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = new TYPES.Hall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GW.utils.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = new TYPES.Hall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GW from 'gw-utils';\nimport * as TYPES from './types';\nimport * as UTILS from './utils';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GW.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = UTILS.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = GW.random.item.bind(GW.random, choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = GW.random.weighted.bind(GW.random, choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom();\n        const room = rooms[id];\n        if (!room) {\n            GW.utils.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, grid) {\n    grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(new SITE.GridSite(grid));\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GW.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GW.blob.Blob({\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GW.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, grid) {\n    grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(new SITE.GridSite(grid));\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GW.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GW.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GW.utils.DOWN] = [\n            Math.floor(site.width / 2),\n            site.height - 2,\n        ];\n        return room;\n    }\n}\nexport function brogueEntrance(config, grid) {\n    grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(new SITE.GridSite(grid));\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * GW.random.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * GW.random.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX + GW.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            GW.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GW.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GW.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, grid) {\n    grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(new SITE.GridSite(grid));\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * GW.random.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * GW.random.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GW.utils.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GW.utils.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, grid) {\n    grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(new SITE.GridSite(grid));\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GW.utils.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, grid) {\n    grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(new SITE.GridSite(grid));\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GW.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, grid) {\n    grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(new SITE.GridSite(grid));\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const ringMinWidth = this.options.ringMinWidth.value();\n        const holeMinSize = this.options.holeMinSize.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GW.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            GW.random.chance(this.options.holeChance.value())) {\n            GW.utils.forCircle(x, y, GW.random.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, grid) {\n    grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(new SITE.GridSite(grid));\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value();\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GW.utils.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = GW.random.range(minX, maxX);\n            y = GW.random.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GW.utils.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, grid) {\n    grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(new SITE.GridSite(grid));\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = GW.random.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GW.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GW.blob.Blob({\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = GW.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = GW.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GW.utils.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GW.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GW.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GW.utils.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GW.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GW.grid.alloc(site.width, site.height);\n        const costGrid = GW.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GW.path.OBSTRUCTION);\n        const SEQ = GW.random.sequence(site.width * site.height);\n        for (i = 0; i < SEQ.length; i++) {\n            x = Math.floor(SEQ[i] / site.height);\n            y = SEQ[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyWater(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyWater(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyWater(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GW.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GW.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GW.grid.free(pathGrid);\n        GW.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyWater(x, y))\n            return false;\n        if (!site.isAnyWater(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyWater(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc;\n        let downLoc;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = GW.random.matchingXY(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = GW.random.matchingXYNear(GW.utils.x(start), GW.utils.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GW.random.matchingXYNear(GW.utils.x(up), GW.utils.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = GW.random.matchingXYNear(GW.utils.x(down), GW.utils.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GW.random.matchingXYNear(GW.utils.x(up), GW.utils.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = GW.random.matchingXY(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GW.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = GW.random.matchingXYNear(GW.utils.x(down), GW.utils.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = GW.random.matchingXY(site.width, site.height, (x, y) => {\n                    if (GW.utils.distanceBetween(x, y, \n                    // @ts-ignore\n                    downLoc[0], \n                    // @ts-ignore\n                    downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = GW.random.matchingXY(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = GW.random.matchingXY(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GW.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = GW.random.matchingXY(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc !== undefined) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GW.utils.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = GW.random.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GW.utils.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GW.utils.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GW.utils.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GW.utils.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GW.utils.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GW.grid.alloc(site.width, site.height);\n        const costGrid = GW.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        for (i = 0; i < SITE.SEQ.length; i++) {\n            x = Math.floor(SITE.SEQ[i] / site.height);\n            y = SITE.SEQ[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GW.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            site.setTile(x, y, SITE.DOOR); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GW.grid.free(pathGrid);\n        GW.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(grid, opts = {}) {\n    const digger = new LoopDigger(opts);\n    const site = new SITE.GridSite(grid);\n    return digger.create(site);\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as UTILS from './utils';\nexport class Level {\n    constructor(width, height, options = {}) {\n        this.rooms = {};\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.height = height;\n        this.width = width;\n        if (options.seed) {\n            GW.random.seed(options.seed);\n        }\n        GW.utils.setOptions(this.rooms, options.rooms);\n        GW.utils.setOptions(this.halls, options.halls);\n        GW.utils.setOptions(this.loops, options.loops);\n        GW.utils.setOptions(this.lakes, options.lakes);\n        GW.utils.setOptions(this.bridges, options.bridges);\n        GW.utils.setOptions(this.stairs, options.stairs);\n        GW.utils.setOptions(this.doors, options.doors);\n        this.startLoc = options.startLoc || [Math.floor(width / 2), height - 2];\n        this.endLoc = options.endLoc || [-1, -1];\n    }\n    makeSite(grid) {\n        return new SITE.GridSite(grid);\n    }\n    create(setFn) {\n        const grid = GW.grid.alloc(this.width, this.height, 0);\n        const site = this.makeSite(grid);\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        let fails = 0;\n        while (fails < 20) {\n            if (this.addRoom(site)) {\n                fails = 0;\n            }\n            else {\n                ++fails;\n            }\n        }\n        this.addLoops(site, this.loops);\n        this.addLakes(site, this.lakes);\n        this.addBridges(site, this.bridges);\n        this.addStairs(site, this.stairs);\n        this.finish(site);\n        grid.forEach((v, x, y) => {\n            if (v)\n                setFn(x, y, v);\n        });\n        GW.grid.free(grid);\n        return true;\n    }\n    start(_site) {\n        SITE.initSeqence(this.width * this.height);\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const grid = GW.grid.alloc(site.width, site.height);\n        const roomSite = this.makeSite(grid);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        GW.grid.free(grid);\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const grid = GW.grid.alloc(site.width, site.height);\n        const roomSite = this.makeSite(grid);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        if (room && !this._attachRoom(site, roomSite, room)) {\n            room = null;\n        }\n        GW.grid.free(grid);\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (let i = 0; i < SITE.SEQ.length; i++) {\n            const x = Math.floor(SITE.SEQ[i] / this.height);\n            const y = SITE.SEQ[i] % this.height;\n            if (!site.isNothing(x, y))\n                continue;\n            const dir = UTILS.directionOfDoorSite(site, x, y);\n            if (dir != GW.utils.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    site.copy(roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = GW.random.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                site.copy(roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n                //     return [x0, y0] as GW.utils.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n            for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.hasXY(i, j) ||\n                                map.isBoundaryXY(i, j) ||\n                                !map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(map, room, x, y, dir) {\n        const opts = this.doors;\n        if (opts.chance === 0)\n            return; // no door at all\n        const isDoor = opts.chance && GW.random.chance(opts.chance); // did not pass chance\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        map.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n            return;\n        }\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x - k, y)) {\n                    if (map.isSet(x - k, y - 1) && map.isSet(x - k, y + 1)) {\n                        map.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x + k, y)) {\n                    if (map.isSet(x + k, y - 1) && map.isSet(x + k, y + 1)) {\n                        map.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x, y - k)) {\n                    if (map.isSet(x - 1, y - k) && map.isSet(x + 1, y - k)) {\n                        map.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x, y + k)) {\n                    if (map.isSet(x - 1, y + k) && map.isSet(x + 1, y + k)) {\n                        map.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < this.width - 1; i++) {\n                for (j = 0; j < this.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (site.isPassable(i + k, j) &&\n                            !site.isPassable(i + (1 - k), j) &&\n                            site.isObstruction(i + (1 - k), j) &&\n                            !site.isPassable(i + k, j + 1) &&\n                            site.isObstruction(i + k, j + 1) &&\n                            site.isPassable(i + (1 - k), j + 1)) {\n                            if (GW.random.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GW.utils.forRect(this.width, this.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.isObstruction(x + 1, y) ? 1 : 0) +\n                    (site.isObstruction(x - 1, y) ? 1 : 0) +\n                    (site.isObstruction(x, y + 1) ? 1 : 0) +\n                    (site.isObstruction(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GW.utils.forRect(this.width, this.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as UTILS from './utils';\nimport * as HALL from './hall';\nimport * as ROOM from './room';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as LOOP from './loop';\n// import * as MAP from 'gw-map.js';\nexport * from './site';\nimport * as room_1 from './room';\nexport { room_1 as room };\nimport * as hall_1 from './hall';\nexport { hall_1 as hall };\nimport * as lake_1 from './lake';\nexport { lake_1 as lake };\nimport * as bridge_1 from './bridge';\nexport { bridge_1 as bridge };\nimport * as stairs_1 from './stairs';\nexport { stairs_1 as stairs };\nimport * as utils_1 from './utils';\nexport { utils_1 as utils };\nimport * as loop_1 from './loop';\nexport { loop_1 as loop };\nexport * from './types';\nexport * from './level';\nexport * from './dungeon';\nexport function start(grid) {\n    SITE.initSeqence(grid.width * grid.height);\n    grid.fill(0);\n}\nexport function finish(grid) {\n    removeDiagonalOpenings(grid);\n    finishWalls(grid);\n    finishDoors(grid);\n}\n// Returns an array of door sites if successful\nexport function addRoom(map, opts) {\n    opts = opts || { room: 'DEFAULT', hall: 'DEFAULT', tries: 10 };\n    if (typeof opts === 'string') {\n        opts = { room: opts };\n    }\n    if (opts.loc) {\n        opts.locs = [opts.loc];\n    }\n    let roomDigger;\n    if (typeof opts.room === 'function')\n        opts.room = opts.room();\n    if (!opts.room)\n        roomDigger = ROOM.rooms.DEFAULT;\n    else if (typeof opts.room === 'string') {\n        const name = opts.room;\n        roomDigger = ROOM.rooms[name];\n        if (!roomDigger) {\n            throw new Error('Failed to find room: ' + name);\n        }\n    }\n    else if (opts.room instanceof ROOM.RoomDigger) {\n        roomDigger = opts.room;\n    }\n    else {\n        throw new Error('No room to build!');\n    }\n    // const roomConfig = opts.room as TYPES.RoomConfig;\n    let hallConfig = null;\n    if (opts.hall === true)\n        opts.hall = 'DEFAULT';\n    if (opts.hall !== false && !opts.hall)\n        opts.hall = 'DEFAULT';\n    if (typeof opts.hall === 'function')\n        opts.hall = { fn: opts.hall };\n    if (typeof opts.hall === 'string') {\n        const name = opts.hall;\n        opts.hall = HALL.halls[name];\n        if (!opts.hall) {\n            GW.utils.ERROR('Failed to find hall: ' + name);\n            return null;\n        }\n        hallConfig = opts.hall;\n    }\n    else {\n        if (opts.hall && opts.hall.fn) {\n            hallConfig = opts.hall;\n        }\n    }\n    if (opts.door === false) {\n        opts.door = 0;\n    }\n    else if (opts.door === true) {\n        opts.door = SITE.DOOR;\n    }\n    else if (typeof opts.door === 'number') {\n        opts.door = GW.random.chance(opts.door) ? SITE.DOOR : SITE.FLOOR;\n    }\n    else {\n        opts.door = SITE.FLOOR;\n    }\n    let locs = opts.locs || null;\n    // @ts-ignore\n    if (locs && locs.doors)\n        locs = locs.doors;\n    if (!locs || !Array.isArray(locs)) {\n        locs = null;\n        if (map.count(SITE.FLOOR) === 0) {\n            // empty map\n            const x = Math.floor(map.width / 2);\n            const y = map.height - 2;\n            locs = [[x, y]];\n        }\n    }\n    else if (locs &&\n        locs.length &&\n        locs.length == 2 &&\n        typeof locs[0] == 'number') {\n        // @ts-ignore\n        locs = [locs];\n    }\n    else if (locs.length == 0) {\n        locs = null;\n    }\n    const roomGrid = GW.grid.alloc(map.width, map.height);\n    const site = new SITE.GridSite(roomGrid);\n    let attachHall = false;\n    if (hallConfig) {\n        let hallChance = hallConfig.chance !== undefined ? hallConfig.chance : 15;\n        attachHall = GW.random.chance(hallChance);\n    }\n    // const force = config.force || false;\n    let room = null;\n    let result = false;\n    let tries = opts.tries || 10;\n    while (--tries >= 0 && !result) {\n        roomGrid.fill(SITE.NOTHING);\n        // dig the room in the center\n        room = roomDigger.create(site);\n        // optionally add a hall\n        if (attachHall) {\n            const hallDigger = new HALL.HallDigger();\n            room.hall = hallDigger.create(site, room.doors);\n        }\n        if (locs) {\n            // try the doors first\n            result = UTILS.attachRoomAtMapDoor(map, locs, roomGrid, room, opts);\n        }\n        else {\n            result = UTILS.attachRoom(map, roomGrid, room, opts);\n        }\n        // console.log(\n        //     'try',\n        //     room.hall ? 'hall: ' + room.hall.dir : 'no hall',\n        //     result\n        // );\n        // if (!result) {\n        //     roomGrid.dump();\n        //     map.dump();\n        //     console.log(\n        //         'room doors',\n        //         (room.hall ? room.hall.doors : room.doors).join(', ')\n        //     );\n        //     console.log('map locs', locs.join(', '));\n        // }\n    }\n    GW.grid.free(roomGrid);\n    return room && result ? room : null;\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function addLoops(grid, minDistance, maxLength) {\n    return LOOP.digLoops(grid, { minDistance, maxLength });\n}\nexport function addLakes(map, opts = {}) {\n    const lakes = new LAKE.Lakes(opts);\n    const site = new SITE.GridSite(map);\n    return lakes.create(site);\n}\nexport function addBridges(grid, opts = {}) {\n    const bridges = new BRIDGE.Bridges(opts);\n    const site = new SITE.GridSite(grid);\n    return bridges.create(site);\n}\nexport function addStairs(grid, opts = {}) {\n    const stairs = new STAIRS.Stairs(opts);\n    const site = new SITE.GridSite(grid);\n    return stairs.create(site);\n}\nexport function removeDiagonalOpenings(grid) {\n    let i, j, k, x1, y1;\n    let diagonalCornerRemoved;\n    const site = new SITE.GridSite(grid);\n    do {\n        diagonalCornerRemoved = false;\n        for (i = 0; i < grid.width - 1; i++) {\n            for (j = 0; j < grid.height - 1; j++) {\n                for (k = 0; k <= 1; k++) {\n                    if (site.isPassable(i + k, j) &&\n                        !site.isPassable(i + (1 - k), j) &&\n                        site.isObstruction(i + (1 - k), j) &&\n                        !site.isPassable(i + k, j + 1) &&\n                        site.isObstruction(i + k, j + 1) &&\n                        site.isPassable(i + (1 - k), j + 1)) {\n                        if (GW.random.chance(50)) {\n                            x1 = i + (1 - k);\n                            y1 = j;\n                        }\n                        else {\n                            x1 = i + k;\n                            y1 = j + 1;\n                        }\n                        diagonalCornerRemoved = true;\n                        grid[x1][y1] = SITE.FLOOR; // todo - pick one of the passable tiles around it...\n                    }\n                }\n            }\n        }\n    } while (diagonalCornerRemoved == true);\n}\nexport function finishDoors(grid) {\n    grid.forEach((cell, x, y) => {\n        if (grid.isBoundaryXY(x, y))\n            return;\n        // todo - isDoorway...\n        if (cell == SITE.DOOR) {\n            if (\n            // TODO - isPassable\n            (grid.get(x + 1, y) == SITE.FLOOR ||\n                grid.get(x - 1, y) == SITE.FLOOR) &&\n                (grid.get(x, y + 1) == SITE.FLOOR ||\n                    grid.get(x, y - 1) == SITE.FLOOR)) {\n                // If there's passable terrain to the left or right, and there's passable terrain\n                // above or below, then the door is orphaned and must be removed.\n                grid[x][y] = SITE.FLOOR; // todo - take passable neighbor value\n            }\n            else if (\n            // todo - isPassable\n            (grid.get(x + 1, y) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x - 1, y) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x, y + 1) !== SITE.FLOOR ? 1 : 0) +\n                (grid.get(x, y - 1) !== SITE.FLOOR ? 1 : 0) >=\n                3) {\n                // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                // then the door is orphaned and must be removed.\n                grid[x][y] = SITE.FLOOR; // todo - take passable neighbor\n            }\n        }\n    });\n}\nexport function finishWalls(grid, tile = SITE.WALL) {\n    grid.forEach((cell, i, j) => {\n        if (cell == SITE.NOTHING) {\n            grid[i][j] = tile;\n        }\n    });\n}\n","import * as GW from 'gw-utils';\nimport * as LEVEL from './level';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GW.utils.setOptions(this.config, options);\n        if (this.config.seed) {\n            GW.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GW.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GW.random.matchingXY(this.config.width, this.config.height, (x, y) => {\n                return (GW.utils.distanceBetween(startLoc[0], startLoc[1], x, y) > minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        GW.random.seed(this.seeds[id]);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    makeLevel(id, opts, cb) {\n        const level = new LEVEL.Level(this.config.width, this.config.height, opts);\n        const result = level.create(cb);\n        if (!GW.utils.equalsXY(level.endLoc, opts.endLoc) ||\n            !GW.utils.equalsXY(level.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [level.startLoc, level.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["TILEMAP","0","1","2","3","8","4","5","6","7","17","SEQ","initSeqence","length","i","GW.random","shuffle","fillCostGrid","source","costGrid","update","_v","x","y","isPassable","GW.path","OBSTRUCTION","GridSite","[object Object]","grid","this","width","height","hasXY","isBoundaryXY","get","other","offsetX","offsetY","forEach","_c","j","otherX","otherY","v","set","isFloor","isDoor","isBridge","isStairs","isShallow","isNothing","isWall","isDeep","tile","DIRS","GW.utils","attachRoom","map","roomGrid","room","opts","doorSites","hall","doors","site","SITE.GridSite","SITE.SEQ","Math","floor","dir","directionOfDoorSite","NO_DIRECTION","oppDir","door","roomFitsAt","GW.grid","offsetZip","_d","_s","attachDoor","translate","UP","DOWN","didSomething","k","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","solutionDir","newX","newY","oppX","oppY","chooseRandomDoorSites","doorSiteFailed","DOORS","h","w","isDiggable","isSet","push","loc","item","attachRoomAtMapDoor","mapDoors","doorIndexes","sequence","attachRoomAtXY","dirs","offX","offY","xy","dx","dy","Hall","d","x2","y2","Room","Bounds","super","cx","cy","isDoorLoc","pickLength","lengths","value","pickHallDirection","hi","pickHallExits","obliqueChance","allowObliqueHallwayExit","chance","hallDoors","dir2","HallDigger","options","config","GW.range","make","_setOptions","l","UTILS.chooseRandomDoorSites","doorLoc","dig","digWide","setTile","DIR","_digLine","TYPES.Hall","lower","higher","actual","startX","startY","min","create","halls","install","id","clamp","undefined","Array","isArray","weighted","Number","parseInt","_pickWidth","checkConfig","expected","Object","entries","key","expect","have","Error","range","RoomDigger","result","carve","every","rooms","ChoiceRoom","choices","randomRoom","bind","ERROR","Cavern","blobGrid","alloc","minWidth","maxWidth","minHeight","maxHeight","bounds","GW.blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","free","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","forRect","max","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","ChunkyRoom","count","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","fill","Lakes","minSize","tries","canDisrupt","wreathTile","wreathChance","wreathSize","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","walkableGrid","disrupts","lakeX","lakeY","first","floodFill","Bridges","minDistance","maxLength","pathGrid","dirCoords","isAnyWater","bridgeDir","calculateDistances","NO_PATH","isBridgeCandidate","Stairs","up","down","start","upTile","downTile","wall","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","matchingXY","matchingXYNear","distanceBetween","slice","setupStairs","indexes","x0","y0","dirIndex","CLOCK_DIRS","findIndex","r","LoopDigger","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","digLoops","digger","Level","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","seed","setOptions","setFn","makeSite","addFirstRoom","fails","addRoom","addLoops","addLakes","addBridges","addStairs","finish","_site","SITE.initSeqence","ROOM.RoomDigger","ROOM.rooms","ROOM.ChoiceRoom","roomSite","getDigger","_attachRoomAtLoc","HALL.dig","_attachRoom","UTILS.directionOfDoorSite","_roomFitsAt","copy","_attachDoor","attachLoc","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","isObstruction","boundaryTile","removeDiagonalOpenings","finishDoors","cell","finishWalls","roomDigger","locs","name","DEFAULT","hallConfig","fn","HALL.halls","attachHall","hallChance","hallDigger","HALL.HallDigger","UTILS.attachRoomAtMapDoor","UTILS.attachRoom","LOOP.digLoops","levels","seeds","stairLocs","initSeeds","initStairLocs","number","stairDistance","cb","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","level","LEVEL.Level","equalsXY"],"mappings":"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"}