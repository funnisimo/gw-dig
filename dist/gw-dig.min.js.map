{"version":3,"file":"gw-dig.min.js","sources":["../js/site/digSite.js","../js/site/buildSite.js","../js/site/utils.js","../js/types.js","../js/room.js","../js/hall.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/level.js","../js/blueprint/buildStep.js","../js/blueprint/blueprint.js","../js/blueprint/builder.js","../js/dungeon.js"],"sourcesContent":["var _a, _b;\nimport * as GW from 'gw-utils';\nexport const NOTHING = GW.tile.get('NULL').index;\nexport const FLOOR = GW.tile.get('FLOOR').index;\nexport const DOOR = GW.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GW.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GW.tile.get('WALL').index;\nexport const DEEP = GW.tile.get('LAKE').index;\nexport const SHALLOW = GW.tile.get('SHALLOW').index;\nexport const BRIDGE = GW.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GW.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GW.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GW.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\nexport class GridSite {\n    constructor(width, height) {\n        this.tiles = GW.grid.alloc(width, height);\n    }\n    free() {\n        GW.grid.free(this.tiles);\n    }\n    clear() {\n        this.tiles.fill(0);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === WALL || v === IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === UP_STAIRS || v === DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GW.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GW.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GW.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GW.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    tileBlocksMove(tile) {\n        return (tile === WALL ||\n            tile === DEEP ||\n            tile === IMPREGNABLE ||\n            tile === NOTHING);\n    }\n}\n","import * as GW from 'gw-utils';\nconst Flags = GW.map.flags.Cell;\nexport class MapSite {\n    constructor(map) {\n        this.machineCount = 0;\n        this.map = map;\n        this.machineId = new GW.grid.NumGrid(map.width, map.height);\n    }\n    get width() {\n        return this.map.width;\n    }\n    get height() {\n        return this.map.height;\n    }\n    hasXY(x, y) {\n        return this.map.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.map.isBoundaryXY(x, y);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.map.cellInfo(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.map.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.map.cell(x, y).clearCellFlag(flag);\n    }\n    hasTile(x, y, tile) {\n        return this.map.cellInfo(x, y).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        return this.map.setTile(x, y, tile, opts);\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.map.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    clear() {\n        this.map.cells.forEach((c) => c.clear());\n    }\n    hasItem(x, y) {\n        return this.map.cellInfo(x, y).hasItem();\n    }\n    hasActor(x, y) {\n        return this.map.hasActor(x, y);\n    }\n    blocksMove(x, y) {\n        return this.map.cellInfo(x, y).blocksMove();\n    }\n    blocksVision(x, y) {\n        return this.map.cellInfo(x, y).blocksVision();\n    }\n    blocksDiagonal(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GW.gameObject.flags.GameObject.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return (info.hasObjectFlag(GW.gameObject.flags.GameObject.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GW.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GW.gameObject.flags.GameObject.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GW.gameObject.flags.GameObject.L_BLOCKS_EFFECTS);\n    }\n    isWall(x, y) {\n        return this.map.cellInfo(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.map.cellInfo(x, y).isStairs();\n    }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.map.cell(x, y).isEmpty();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.isEmpty())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.map.cell(x, y).isEmpty();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.map.cellInfo(x, y).hasTileFlag(GW.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GW.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GW.gameObject.flags.GameObject.L_SECRETLY_PASSABLE);\n    }\n    isDeep(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GW.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (!!cell.depthTile(GW.gameObject.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GW.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (cell.hasDepthTile(GW.gameObject.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GW.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    isPassable(x, y) {\n        return !this.map.cellInfo(x, y).blocksMove();\n    }\n    tileBlocksMove(tile) {\n        return GW.tile.get(tile).blocksMove();\n    }\n    backup() {\n        return this.map.clone();\n    }\n    restore(backup) {\n        this.map = backup;\n    }\n    free() { }\n    getChokeCount(x, y) {\n        return this.map.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.map.cell(x, y).chokeCount = count;\n    }\n    analyze() {\n        GW.map.analyze(this.map);\n    }\n    fireEffect(effect, x, y) {\n        return GW.effect.fireSync(effect, this.map, x, y);\n    }\n    nextMachineId() {\n        return ++this.machineCount;\n    }\n    getMachine(x, y) {\n        return this.machineId[x][y];\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.machineId[x][y] = id;\n        if (id == 0) {\n            this.map.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.map.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n}\n","import * as GW from 'gw-utils';\n// import * as TYPES from './types';\nconst DIRS = GW.utils.DIRS;\n// export function attachRoom(\n//     map: GW.grid.NumGrid,\n//     roomGrid: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GW.utils.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GW.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GW.grid.NumGrid,\n//     roomGrid: GW.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GW.utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GW.utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GW.utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GW.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GW.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GW.utils.DIRS[dir][0];\n                    newY = j + GW.utils.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GW.utils.DIRS[dir][0];\n                        newY += GW.utils.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = GW.random.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GW.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GW.grid.NumGrid,\n//     xy: GW.utils.Loc,\n//     roomGrid: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GW.utils.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GW.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GW.grid.NumGrid,\n//     mapDoors: GW.utils.Loc[],\n//     roomGrid: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GW.utils.Loc[] {\n//     const doorIndexes = GW.random.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GW.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GW.utils.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = GW.random.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GW.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n//             //     return [x0, y0] as GW.utils.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GW.utils.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GW.path.OBSTRUCTION);\n}\nexport function siteDisruptedBy(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GW.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GW.utils.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GW.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GW.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GW.utils.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GW.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GW.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GW.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GW.grid.free(costGrid);\n}\n","import * as GW from 'gw-utils';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GW.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        // console.log('Hall', loc, d, length, width);\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        // console.log(' - ', [this.x2, this.y2]);\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room extends GW.utils.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GW.utils.Loc[] | null;\n//     door: number;\n// }\n","import * as GW from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GW.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = GW.random.item.bind(GW.random, choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = GW.random.weighted.bind(GW.random, choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom();\n        const room = rooms[id];\n        if (!room) {\n            GW.utils.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GW.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GW.blob.Blob({\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GW.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GW.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GW.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GW.utils.DOWN] = [\n            Math.floor(site.width / 2),\n            site.height - 2,\n        ];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * GW.random.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * GW.random.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX + GW.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            GW.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GW.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GW.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * GW.random.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * GW.random.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GW.utils.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GW.utils.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GW.utils.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GW.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const ringMinWidth = this.options.ringMinWidth.value();\n        const holeMinSize = this.options.holeMinSize.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GW.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            GW.random.chance(this.options.holeChance.value())) {\n            GW.utils.forCircle(x, y, GW.random.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value();\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GW.utils.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = GW.random.range(minX, maxX);\n            y = GW.random.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GW.utils.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\nconst DIRS = GW.utils.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(opts = {}) {\n    return GW.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GW.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GW.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GW.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths) {\n    if (dir == GW.utils.UP || dir == GW.utils.DOWN) {\n        return lengths[1].value();\n    }\n    else {\n        return lengths[0].value();\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GW.utils.NO_DIRECTION;\n    if (dir == GW.utils.NO_DIRECTION) {\n        const dirs = GW.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GW.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = GW.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: GW.range.make(1),\n            length: [GW.range.make('2-15'), GW.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = GW.range.make(options.width);\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GW.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n        if (!GW.random.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GW.utils.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = this.config.width.value();\n        const length = pickLength(dir, this.config.length);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = new TYPES.Hall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GW.utils.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = new TYPES.Hall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = GW.random.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GW.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GW.blob.Blob({\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = GW.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = GW.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GW.utils.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GW.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GW.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GW.utils.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GW.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GW.grid.alloc(site.width, site.height);\n        const costGrid = GW.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GW.path.OBSTRUCTION);\n        const seq = GW.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GW.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GW.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GW.grid.free(pathGrid);\n        GW.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc;\n        let downLoc;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = GW.random.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = GW.random.matchingLocNear(GW.utils.x(start), GW.utils.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GW.random.matchingLocNear(GW.utils.x(up), GW.utils.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = GW.random.matchingLocNear(GW.utils.x(down), GW.utils.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GW.random.matchingLocNear(GW.utils.x(up), GW.utils.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = GW.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GW.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = GW.random.matchingLocNear(GW.utils.x(down), GW.utils.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = GW.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GW.utils.distanceBetween(x, y, \n                    // @ts-ignore\n                    downLoc[0], \n                    // @ts-ignore\n                    downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = GW.random.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = GW.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GW.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = GW.random.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc !== undefined) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GW.utils.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = GW.random.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GW.utils.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GW.utils.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GW.utils.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GW.utils.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GW.utils.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n            doorChance: 50,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GW.grid.alloc(site.width, site.height);\n        const costGrid = GW.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = GW.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GW.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = GW.random.chance(this.options.doorChance)\n                                ? SITE.DOOR\n                                : SITE.FLOOR;\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GW.grid.free(pathGrid);\n        GW.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nexport class Level {\n    constructor(options = {}) {\n        var _a, _b;\n        this.seed = 0;\n        this.rooms = {};\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.seed = options.seed || 0;\n        GW.utils.setOptions(this.rooms, options.rooms);\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        }\n        else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GW.utils.setOptions(this.doors, options.doors);\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        }\n        else if (options.halls === true) {\n            options.halls = {};\n        }\n        GW.utils.setOptions(this.halls, options.halls);\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        }\n        else {\n            if (options.loops === true)\n                options.loops = {};\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                (_a = options.loops.doorChance) !== null && _a !== void 0 ? _a : (_b = options.doors) === null || _b === void 0 ? void 0 : _b.chance;\n            GW.utils.setOptions(this.loops, options.loops);\n        }\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        }\n        else {\n            if (options.lakes === true)\n                options.lakes = {};\n            GW.utils.setOptions(this.lakes, options.lakes);\n        }\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        }\n        else {\n            if (options.bridges === true)\n                options.bridges = {};\n            GW.utils.setOptions(this.bridges, options.bridges);\n        }\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        }\n        else {\n            if (options.stairs === true)\n                options.stairs = {};\n            GW.utils.setOptions(this.stairs, options.stairs);\n        }\n        this.startLoc = options.startLoc || [-1, -1];\n        this.endLoc = options.endLoc || [-1, -1];\n    }\n    _makeSite(width, height) {\n        return new SITE.GridSite(width, height);\n    }\n    create(...args) {\n        if (args.length == 1 && args[0] instanceof GW.map.Map) {\n            const map = args[0];\n            this.site = new SITE.MapSite(map);\n        }\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            this.site = new SITE.GridSite(width, height);\n        }\n        const result = this._create(this.site);\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            const cb = args[2];\n            GW.utils.forRect(width, height, (x, y) => {\n                const t = this.site.getTileIndex(x, y);\n                if (t)\n                    cb(x, y, t);\n            });\n        }\n        this.site.free();\n        return result;\n    }\n    _create(site) {\n        if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n            this.startLoc[0] = Math.floor(site.width / 2);\n            this.startLoc[1] = site.height - 2;\n        }\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        let fails = 0;\n        while (fails < 20) {\n            if (this.addRoom(site)) {\n                fails = 0;\n            }\n            else {\n                ++fails;\n            }\n        }\n        if (this.loops)\n            this.addLoops(site, this.loops);\n        if (this.lakes)\n            this.addLakes(site, this.lakes);\n        if (this.bridges)\n            this.addBridges(site, this.bridges);\n        if (this.stairs)\n            this.addStairs(site, this.stairs);\n        this.finish(site);\n        return true;\n    }\n    start(site) {\n        if (this.seed) {\n            GW.random.seed(this.seed);\n        }\n        site.clear();\n        this.seq = GW.random.sequence(site.width * site.height);\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        if (room && !this._attachRoom(site, roomSite, room)) {\n            room = null;\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (let i = 0; i < this.seq.length; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n            if (!site.isNothing(x, y))\n                continue;\n            const dir = SITE.directionOfDoorSite(site, x, y);\n            if (dir != GW.utils.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    SITE.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = GW.random.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                SITE.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n                //     return [x0, y0] as GW.utils.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n            for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.hasXY(i, j) ||\n                                map.isBoundaryXY(i, j) ||\n                                !map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(map, room, x, y, dir) {\n        const opts = this.doors;\n        let isDoor = false;\n        if (opts.chance && GW.random.chance(opts.chance)) {\n            isDoor = true;\n        }\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        map.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n            return;\n        }\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x - k, y)) {\n                    if (map.isSet(x - k, y - 1) && map.isSet(x - k, y + 1)) {\n                        map.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x + k, y)) {\n                    if (map.isSet(x + k, y - 1) && map.isSet(x + k, y + 1)) {\n                        map.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x, y - k)) {\n                    if (map.isSet(x - 1, y - k) && map.isSet(x + 1, y - k)) {\n                        map.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x, y + k)) {\n                    if (map.isSet(x - 1, y + k) && map.isSet(x + 1, y + k)) {\n                        map.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (GW.random.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GW.utils.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GW.utils.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from '../site';\nimport { Flags } from '.';\nconst Fl = GW.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    // BF_GENERATE_ITEM\t\t\t\t= Fl(0),\t// feature entails generating an item (overridden if the machine is adopting an item)\n    // BF_GENERATE_HORDE\t\t\t= Fl(5),\t// generate a monster horde that has all of the horde flags\n    // BF_NO_THROWING_WEAPONS\t    = Fl(4),\t// the generated item cannot be a throwing weapon\n    // BF_REQUIRE_GOOD_RUNIC\t\t= Fl(18),\t// generated item must be uncursed runic\n    StepFlags[StepFlags[\"BF_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BF_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BF_BUILD_VESTIBULE\"] = Fl(2)] = \"BF_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BF_ADOPT_ITEM\"] = Fl(3)] = \"BF_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BF_BUILD_AT_ORIGIN\"] = Fl(6)] = \"BF_BUILD_AT_ORIGIN\";\n    // unused                   = Fl(7),\t//\n    StepFlags[StepFlags[\"BF_PERMIT_BLOCKING\"] = Fl(8)] = \"BF_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BF_TREAT_AS_BLOCKING\"] = Fl(9)] = \"BF_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BF_NEAR_ORIGIN\"] = Fl(10)] = \"BF_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BF_FAR_FROM_ORIGIN\"] = Fl(11)] = \"BF_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_VIEW_OF_ORIGIN\"] = Fl(25)] = \"BF_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(26)] = \"BF_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_MONSTER_TAKE_ITEM\"] = Fl(12)] = \"BF_MONSTER_TAKE_ITEM\";\n    StepFlags[StepFlags[\"BF_MONSTER_SLEEPING\"] = Fl(13)] = \"BF_MONSTER_SLEEPING\";\n    StepFlags[StepFlags[\"BF_MONSTER_FLEEING\"] = Fl(14)] = \"BF_MONSTER_FLEEING\";\n    StepFlags[StepFlags[\"BF_MONSTERS_DORMANT\"] = Fl(19)] = \"BF_MONSTERS_DORMANT\";\n    StepFlags[StepFlags[\"BF_ITEM_IS_KEY\"] = Fl(0)] = \"BF_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BF_ITEM_IDENTIFIED\"] = Fl(5)] = \"BF_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BF_ITEM_PLAYER_AVOIDS\"] = Fl(4)] = \"BF_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BF_EVERYWHERE\"] = Fl(15)] = \"BF_EVERYWHERE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE\"] = Fl(16)] = \"BF_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE_2\"] = Fl(17)] = \"BF_ALTERNATIVE_2\";\n    // unused                       = Fl(20),\t//\n    StepFlags[StepFlags[\"BF_BUILD_IN_WALLS\"] = Fl(21)] = \"BF_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BF_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BF_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BF_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BF_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BF_IMPREGNABLE\"] = Fl(24)] = \"BF_IMPREGNABLE\";\n    StepFlags[StepFlags[\"BF_NOT_IN_HALLWAY\"] = Fl(27)] = \"BF_NOT_IN_HALLWAY\";\n    StepFlags[StepFlags[\"BF_NOT_ON_LEVEL_PERIMETER\"] = Fl(28)] = \"BF_NOT_ON_LEVEL_PERIMETER\";\n    StepFlags[StepFlags[\"BF_SKELETON_KEY\"] = Fl(29)] = \"BF_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BF_KEY_DISPOSABLE\"] = Fl(30)] = \"BF_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    constructor(cfg = {}) {\n        this.tile = 0;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        this.id = 'n/a';\n        if (cfg.tile) {\n            if (typeof cfg.tile === 'string') {\n                const t = GW.tile.tiles[cfg.tile];\n                if (!t) {\n                    throw new Error('Failed to find tile: ' + cfg.tile);\n                }\n                this.tile = t.index;\n            }\n            else {\n                this.tile = cfg.tile;\n            }\n        }\n        if (cfg.flags) {\n            this.flags = GW.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GW.range.make(cfg.count || 1);\n        this.item = cfg.item || null;\n        this.horde = cfg.horde || null;\n        if (cfg.effect) {\n            this.effect = GW.effect.make(cfg.effect);\n        }\n    }\n    cellIsCandidate(builder, blueprint, x, y, distanceBound) {\n        const site = builder.site;\n        // No building in the hallway if it's prohibited.\n        // This check comes before the origin check, so an area machine will fail altogether\n        // if its origin is in a hallway and the feature that must be built there does not permit as much.\n        if (this.flags & StepFlags.BF_NOT_IN_HALLWAY &&\n            GW.utils.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n            return false;\n        }\n        // No building along the perimeter of the level if it's prohibited.\n        if (this.flags & StepFlags.BF_NOT_ON_LEVEL_PERIMETER &&\n            (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1)) {\n            return false;\n        }\n        // The origin is a candidate if the feature is flagged to be built at the origin.\n        // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n        if (this.flags & StepFlags.BF_BUILD_AT_ORIGIN) {\n            return x == builder.originX && y == builder.originY ? true : false;\n        }\n        else if (blueprint.isRoom &&\n            x == builder.originX &&\n            y == builder.originY) {\n            return false;\n        }\n        // No building in another feature's personal space!\n        if (builder.occupied[x][y]) {\n            return false;\n        }\n        // Must be in the viewmap if the appropriate flag is set.\n        if (this.flags &\n            (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n                StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n            !builder.viewMap[x][y]) {\n            return false;\n        }\n        // Do a distance check if the feature requests it.\n        let distance = 10000;\n        if (site.isWall(x, y)) {\n            // Distance is calculated for walls too.\n            GW.utils.eachNeighbor(x, y, (i, j) => {\n                if (!builder.distanceMap.hasXY(i, j))\n                    return;\n                if (!site.blocksPathing(i, j) &&\n                    distance > builder.distanceMap[i][j] + 1) {\n                    distance = builder.distanceMap[i][j] + 1;\n                }\n            }, true);\n        }\n        else {\n            distance = builder.distanceMap[x][y];\n        }\n        if (distance > distanceBound[1] || // distance exceeds max\n            distance < distanceBound[0]) {\n            // distance falls short of min\n            return false;\n        }\n        if (this.flags & StepFlags.BF_BUILD_IN_WALLS) {\n            // If we're supposed to build in a wall...\n            const cellMachine = site.getMachine(x, y);\n            if (!builder.interior[x][y] &&\n                (!cellMachine || cellMachine == builder.machineNumber) &&\n                site.isWall(x, y)) {\n                let ok = false;\n                // ...and this location is a wall that's not already machined...\n                GW.utils.eachNeighbor(x, y, (newX, newY) => {\n                    if (site.hasXY(newX, newY) && // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                        ((builder.interior[newX][newY] &&\n                            !(newX == builder.originX &&\n                                newY == builder.originY)) ||\n                            (this.flags &\n                                StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL &&\n                                !site.blocksPathing(newX, newY) &&\n                                !site.getMachine(newX, newY)))) {\n                        ok = true;\n                    }\n                });\n                return ok;\n            }\n            return false;\n        }\n        else if (site.isWall(x, y)) {\n            // Can't build in a wall unless instructed to do so.\n            return false;\n        }\n        else if (this.flags & StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL) {\n            if ((this.item && site.blocksItems(x, y)) ||\n                site.hasCellFlag(x, y, GW.map.flags.Cell.IS_CHOKEPOINT |\n                    GW.map.flags.Cell.IS_IN_LOOP |\n                    GW.map.flags.Cell.IS_IN_MACHINE)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else if (builder.interior[x][y]) {\n            return true;\n        }\n        return false;\n    }\n    makePersonalSpace(builder, x, y, candidates) {\n        const personalSpace = this.pad;\n        let count = 0;\n        for (let i = x - personalSpace + 1; i <= x + personalSpace - 1; i++) {\n            for (let j = y - personalSpace + 1; j <= y + personalSpace - 1; j++) {\n                if (builder.site.hasXY(i, j)) {\n                    if (candidates[i][j]) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BF_EVERYWHERE &\n            ~StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    distanceBound(builder) {\n        const distanceBound = [0, 10000];\n        if (this.flags & StepFlags.BF_NEAR_ORIGIN) {\n            distanceBound[1] = builder.distance25;\n        }\n        if (this.flags & StepFlags.BF_FAR_FROM_ORIGIN) {\n            distanceBound[0] = builder.distance75;\n        }\n        return distanceBound;\n    }\n    updateViewMap(builder) {\n        if (this.flags &\n            (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n                StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n            const site = builder.site;\n            if (this.flags & StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) {\n                const fov = new GW.fov.FOV({\n                    isBlocked: (x, y) => {\n                        return site.blocksPathing(x, y);\n                    },\n                    hasXY: (x, y) => {\n                        return site.hasXY(x, y);\n                    },\n                });\n                fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                    builder.viewMap[x][y] = 1;\n                });\n            }\n            else {\n                const fov = new GW.fov.FOV({\n                    // TileFlags.T_OBSTRUCTS_PASSABILITY |\n                    //     TileFlags.T_OBSTRUCTS_VISION,\n                    isBlocked: (x, y) => {\n                        return (site.blocksPathing(x, y) || site.blocksVision(x, y));\n                    },\n                    hasXY: (x, y) => {\n                        return site.hasXY(x, y);\n                    },\n                });\n                fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                    builder.viewMap[x][y] = 1;\n                });\n            }\n            builder.viewMap[builder.originX][builder.originY] = 1;\n        }\n    }\n    markCandidates(candidates, builder, blueprint, distanceBound) {\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            if (this.cellIsCandidate(builder, blueprint, i, j, distanceBound)) {\n                count++;\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return count;\n    }\n    build(builder, blueprint) {\n        let instanceCount = 0;\n        let instance = 0;\n        const site = builder.site;\n        const candidates = GW.grid.alloc(site.width, site.height);\n        // Figure out the distance bounds.\n        const distanceBound = this.distanceBound(builder);\n        this.updateViewMap(builder);\n        do {\n            // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n            // Make a master map of candidate locations for this feature.\n            let qualifyingTileCount = this.markCandidates(candidates, builder, blueprint, distanceBound);\n            if (!this.generateEverywhere) {\n                instanceCount = this.count.value();\n            }\n            if (!qualifyingTileCount || qualifyingTileCount < this.count.lo) {\n                console.warn('Only %s qualifying tiles - want at least %s.', qualifyingTileCount, this.count.lo);\n                return 0; // ?? Failed ??\n            }\n            let x = 0, y = 0;\n            for (instance = 0; (this.generateEverywhere || instance < instanceCount) &&\n                qualifyingTileCount > 0;) {\n                // Find a location for the feature.\n                if (this.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = builder.originX;\n                    y = builder.originY;\n                }\n                else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = GW.random.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] > 0);\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n                let DFSucceeded = true;\n                let terrainSucceeded = true;\n                // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n                if (this.effect) {\n                    DFSucceeded = site.fireEffect(this.effect, x, y);\n                }\n                // Now try to place the terrain tile, if any.\n                if (DFSucceeded && this.tile) {\n                    let tile = GW.tile.get(this.tile).index;\n                    if (!tile) {\n                        terrainSucceeded = false;\n                        console.error('placing invalid tile', this.tile, x, y);\n                    }\n                    else if (!(this.flags & StepFlags.BF_PERMIT_BLOCKING) &&\n                        (site.tileBlocksMove(tile) ||\n                            this.flags & StepFlags.BF_TREAT_AS_BLOCKING)) {\n                        // Yes, check for blocking.\n                        const blockingMap = GW.grid.alloc(site.width, site.height);\n                        blockingMap[x][y] = 1;\n                        terrainSucceeded = !SITE.siteDisruptedBy(site, blockingMap);\n                        GW.grid.free(blockingMap);\n                    }\n                    if (terrainSucceeded) {\n                        site.setTile(x, y, tile);\n                    }\n                }\n                // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                // Personal space of 0 means nothing gets cleared, 1 means that only the tile itself gets cleared, and 2 means the 3x3 grid centered on it.\n                if (DFSucceeded && terrainSucceeded) {\n                    qualifyingTileCount -= this.makePersonalSpace(builder, x, y, candidates);\n                    instance++; // we've placed an instance\n                    //DEBUG printf(\"\\nPlaced instance #%i of feature %i at (%i, %i).\", instance, feat, featX, featY);\n                }\n                if (DFSucceeded && terrainSucceeded) {\n                    // Proceed only if the terrain stuff for this instance succeeded.\n                    // Mark the feature location as part of the machine, in case it is not already inside of it.\n                    if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n                        site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n                    }\n                    // Mark the feature location as impregnable if requested.\n                    if (this.flags & StepFlags.BF_IMPREGNABLE) {\n                        site.setCellFlag(x, y, GW.map.flags.Cell.IMPREGNABLE);\n                    }\n                    // let success = RUT.Component.generateAdoptItem(\n                    //     component,\n                    //     blueprint,\n                    //     map,\n                    //     xy.x,\n                    //     xy.y,\n                    //     context\n                    // );\n                    // if (!success) {\n                    //     GW.grid.free(candidates);\n                    //     return false;\n                    // }\n                    // // Generate a horde as necessary.\n                    // success = RUT.Component.generateMonsters(\n                    //     component,\n                    //     blueprint,\n                    //     map,\n                    //     xy.x,\n                    //     xy.y,\n                    //     context\n                    // );\n                    // if (!success) {\n                    //     GW.grid.free(candidates);\n                    //     return false;\n                    // }\n                }\n                // Finished with this instance!\n            }\n        } while (this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS &&\n            instance <= this.count.lo);\n        //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n        //DEBUG logBuffer(candidates);\n        GW.grid.free(candidates);\n        return instance;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nconst Fl = GW.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(10)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(7)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(0)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(2)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(3)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(4)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(5)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(6)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(8)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(9)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(14)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(11)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(12)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(13)] = \"BP_NO_INTERIOR_FLAG\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GW.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            if (typeof opts.size === 'string') {\n                const parts = opts.size\n                    .split(/-/)\n                    .map((v) => v.trim())\n                    .map((v) => Number.parseInt(v));\n                if (parts.length !== 2)\n                    throw new Error('Blueprint size must be of format: #-#');\n                this.size = GW.range.make([parts[0], parts[1]]);\n            }\n            else if (Array.isArray(opts.size)) {\n                if (opts.size.length !== 2)\n                    throw new Error('Blueprint size must be [min, max]');\n                this.size = GW.range.make([opts.size[0], opts.size[1]]);\n            }\n            else {\n                throw new Error('size must be string or array.');\n            }\n            if (this.size.lo > this.size.hi)\n                throw new Error('Blueprint size must be small to large.');\n        }\n        else {\n            this.size = GW.range.make([0, 999999]);\n        }\n        if (opts.flags) {\n            this.flags = GW.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n    }\n    getChance(level, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return 0;\n        }\n        return this.frequency(level);\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    qualifies(requiredFlags, depth) {\n        if (this.frequency(depth) <= 0 ||\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickLocation(site) {\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            site.analyze(); // Make sure the chokeMap is up to date.\n            const randSite = GW.random.matchingLoc(site.width, site.height, (x, y) => {\n                return (site.hasCellFlag(x, y, GW.map.flags.Cell.IS_GATE_SITE) && this.size.contains(site.getChokeCount(x, y)));\n            });\n            if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n                // If no suitable sites, abort.\n                console.log('Failed to build a machine; there was no eligible door candidate for the chosen room machine from blueprint.');\n                return false;\n            }\n            return randSite;\n        }\n        else if (this.isVestiblue) {\n            //  Door machines must have locations passed in. We can't pick one ourselves.\n            console.log('ERROR: Attempted to build a vestiblue without a location being provided.');\n            return false;\n        }\n        // Pick a random origin location.\n        const pos = GW.random.matchingLoc(site.width, site.height, (x, y) => site.isPassable(x, y));\n        if (!pos || pos[0] < 0 || pos[1] < 0)\n            return false;\n        return pos;\n    }\n    // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n    computeInterior(builder) {\n        let failsafe = this.isRoom ? 10 : 20;\n        let tryAgain;\n        const interior = builder.interior;\n        const site = builder.site;\n        do {\n            tryAgain = false;\n            if (--failsafe <= 0) {\n                console.log('Failed to build a machine; failed repeatedly to find a suitable blueprint location.');\n                return false;\n            }\n            interior.fill(0);\n            // Find a location and map out the machine interior.\n            if (this.isRoom) {\n                // If it's a room machine, count up the gates of appropriate\n                // choke size and remember where they are. The origin of the room will be the gate location.\n                // Now map out the interior into interior[][].\n                // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n                // same or lower choke value, ignoring any tiles that are already part of a machine.\n                // If we get false from this, try again. If we've tried too many times already, abort.\n                tryAgain = !this.addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n            }\n            else if (this.isVestiblue) {\n                if (!this.computeInteriorForVestibuleMachine(builder)) {\n                    // TODO - tryagain = true?\n                    console.error('ERROR: Attempted to build a door machine from blueprint: not enough room.');\n                    return false;\n                }\n                // success\n            }\n            else {\n                // Find a location and map out the interior for a non-room machine.\n                // The strategy here is simply to pick a random location on the map,\n                // expand it along a pathing map by one space in all directions until the size reaches\n                // the chosen size, and then make sure the resulting space qualifies.\n                // If not, try again. If we've tried too many times already, abort.\n                let distanceMap = GW.grid.alloc(interior.width, interior.height);\n                SITE.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, this.size.hi);\n                const seq = GW.random.sequence(site.width * site.height);\n                let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n                let totalFreq = this.size.value(); // Keeps track of the goal size.\n                for (let k = 0; k < 1000 && qualifyingTileCount < totalFreq; k++) {\n                    for (let n = 0; n < seq.length && qualifyingTileCount < totalFreq; n++) {\n                        const i = Math.floor(seq[n] / site.height);\n                        const j = seq[n] % site.height;\n                        if (distanceMap[i][j] == k) {\n                            interior[i][j] = 1;\n                            qualifyingTileCount++;\n                            if (site.isOccupied(i, j) ||\n                                site.hasCellFlag(i, j, GW.map.flags.Cell.IS_IN_MACHINE)) {\n                                // Abort if we've entered another machine or engulfed another machine's item or monster.\n                                tryAgain = true;\n                                qualifyingTileCount = totalFreq; // This is a hack to drop out of these three for-loops.\n                            }\n                        }\n                    }\n                }\n                // Now make sure the interior map satisfies the machine's qualifications.\n                if (qualifyingTileCount < totalFreq) {\n                    tryAgain = true;\n                    console.log('too small');\n                }\n                else if (this.treatAsBlocking &&\n                    SITE.siteDisruptedBy(site, interior)) {\n                    console.log('disconnected');\n                    tryAgain = true;\n                }\n                else if (this.requireBlocking &&\n                    SITE.siteDisruptedSize(site, interior) < 100) {\n                    console.log('not disconnected enough');\n                    tryAgain = true; // BP_REQUIRE_BLOCKING needs some work to make sure the disconnect is interesting.\n                }\n                // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n                // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n                GW.grid.free(distanceMap);\n            }\n            // Now loop if necessary.\n        } while (tryAgain);\n        // console.log(tryAgain, failsafe);\n        return true;\n    }\n    // Assumes (startX, startY) is in the machine.\n    // Returns true if everything went well, and false if we ran into a machine component\n    // that was already there, as we don't want to build a machine around it.\n    addTileToInteriorAndIterate(builder, startX, startY) {\n        let goodSoFar = true;\n        const interior = builder.interior;\n        const site = builder.site;\n        interior[startX][startY] = 1;\n        const startChokeCount = site.getChokeCount(startX, startY);\n        for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n            const newX = startX + GW.utils.DIRS[dir][0];\n            const newY = startY + GW.utils.DIRS[dir][1];\n            if (!site.hasXY(newX, newY))\n                continue;\n            if (interior[newX][newY])\n                continue; // already done\n            if (site.isOccupied(newX, newY) ||\n                (site.hasCellFlag(newX, newY, GW.map.flags.Cell.IS_IN_MACHINE) &&\n                    !site.hasCellFlag(newX, newY, GW.map.flags.Cell.IS_GATE_SITE))) {\n                // Abort if there's an item in the room.\n                // Items haven't been populated yet, so the only way this could happen is if another machine\n                // previously placed an item here.\n                // Also abort if we're touching another machine at any point other than a gate tile.\n                return false;\n            }\n            if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n                !site.hasCellFlag(newX, newY, GW.map.flags.Cell.IS_IN_MACHINE)) {\n                goodSoFar = this.addTileToInteriorAndIterate(builder, newX, newY);\n            }\n        }\n        return goodSoFar;\n    }\n    computeInteriorForVestibuleMachine(builder) {\n        let success = true;\n        const interior = builder.interior;\n        const site = builder.site;\n        interior.fill(0);\n        let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n        const totalFreq = this.size.value(); // Keeps track of the goal size.\n        const distMap = GW.grid.alloc(site.width, site.height);\n        SITE.computeDistanceMap(site, distMap, builder.originX, builder.originY, this.size.hi);\n        // console.log('DISTANCE MAP', originX, originY);\n        // RUT.Grid.dump(distMap);\n        const cells = GW.random.sequence(site.width * site.height);\n        for (let k = 0; k < 1000 && qualifyingTileCount < totalFreq; k++) {\n            for (let i = 0; i < cells.length && qualifyingTileCount < totalFreq; ++i) {\n                const x = Math.floor(cells[i] / site.height);\n                const y = cells[i] % site.height;\n                const dist = distMap[x][y];\n                if (dist != k)\n                    continue;\n                if (site.isOccupied(x, y)) {\n                    success = false;\n                    qualifyingTileCount = totalFreq;\n                }\n                interior[x][y] = 1;\n                qualifyingTileCount += 1;\n            }\n        }\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (this.treatAsBlocking && SITE.siteDisruptedBy(site, interior)) {\n            success = false;\n        }\n        else if (this.requireBlocking &&\n            SITE.siteDisruptedSize(site, interior) < 100) {\n            success = false;\n        }\n        GW.grid.free(distMap);\n        return success;\n    }\n    prepareInteriorWithMachineFlags(builder) {\n        const interior = builder.interior;\n        const site = builder.site;\n        // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n        if (this.maximizeInterior) {\n            this.expandMachineInterior(builder, 1);\n        }\n        else if (this.openInterior) {\n            this.expandMachineInterior(builder, 4);\n        }\n        // If requested, cleanse the interior -- no interesting terrain allowed.\n        if (this.purgeInterior) {\n            interior.forEach((v, x, y) => {\n                if (v)\n                    site.setTile(x, y, SITE.FLOOR);\n            });\n        }\n        // If requested, purge pathing blockers -- no traps allowed.\n        if (this.purgeBlockers) {\n            interior.forEach((v, x, y) => {\n                if (!v)\n                    return;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n            });\n        }\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (this.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n            });\n        }\n        // Surround with walls if requested.\n        if (this.surroundWithWalls) {\n            interior.forEach((v, x, y) => {\n                if (!v ||\n                    site.hasCellFlag(x, y, GW.map.flags.Cell.IS_GATE_SITE))\n                    return;\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // Not valid x,y\n                    if (interior[i][j])\n                        return; // is part of machine\n                    if (site.isWall(i, j))\n                        return; // is already a wall (of some sort)\n                    if (site.hasCellFlag(i, j, GW.map.flags.Cell.IS_GATE_SITE))\n                        return; // is a door site\n                    if (site.hasCellFlag(i, j, GW.map.flags.Cell.IS_IN_MACHINE))\n                        return; // is part of a machine\n                    if (!site.blocksPathing(i, j))\n                        return; // is not a blocker for the player (water?)\n                    site.setTile(i, j, SITE.WALL);\n                }, false);\n            });\n        }\n        // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n        // Then zero out any portion of the interior that is still wall.\n        // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n        //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n        // }\n        // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n        if (this.makeImpregnable) {\n            interior.forEach((v, x, y) => {\n                if (!v ||\n                    site.hasCellFlag(x, y, GW.map.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(x, y, GW.map.flags.Cell.IMPREGNABLE);\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return;\n                    if (interior[i][j])\n                        return;\n                    if (site.hasCellFlag(i, j, GW.map.flags.Cell.IS_GATE_SITE))\n                        return;\n                    site.setCellFlag(i, j, GW.map.flags.Cell.IMPREGNABLE);\n                }, false);\n            });\n        }\n        // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n        const machineNumber = builder.machineNumber;\n        interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            site.setMachine(x, y, machineNumber, this.isRoom);\n            // secret doors mess up machines\n            if (site.isSecretDoor(x, y)) {\n                site.setTile(x, y, SITE.DOOR);\n            }\n        });\n    }\n    expandMachineInterior(builder, minimumInteriorNeighbors = 1) {\n        let madeChange;\n        const interior = builder.interior;\n        const site = builder.site;\n        do {\n            madeChange = false;\n            interior.forEach((_v, x, y) => {\n                // if (v && site.isDoor(x, y)) {\n                //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n                //     return;\n                // }\n                if (site.hasCellFlag(x, y, GW.map.flags.Cell.IS_IN_MACHINE))\n                    return;\n                if (!site.blocksPathing(x, y))\n                    return;\n                let nbcount = 0;\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // Not in map\n                    if (interior[i][j] && !site.blocksPathing(i, j)) {\n                        ++nbcount; // in machine and open tile\n                    }\n                }, false);\n                if (nbcount < minimumInteriorNeighbors)\n                    return;\n                nbcount = 0;\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // not on map\n                    if (interior[i][j])\n                        return; // already part of machine\n                    if (!site.isWall(i, j) ||\n                        site.hasCellFlag(i, j, GW.map.flags.Cell.IS_IN_MACHINE)) {\n                        ++nbcount; // tile is not a wall or is in a machine\n                    }\n                }, false);\n                if (nbcount)\n                    return;\n                // Eliminate this obstruction; welcome its location into the machine.\n                madeChange = true;\n                interior[x][y] = 1;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return;\n                    if (site.isSet(i, j))\n                        return;\n                    site.setTile(i, j, SITE.WALL);\n                });\n            });\n        } while (madeChange);\n    }\n    calcDistances(builder) {\n        builder.distanceMap.fill(0);\n        SITE.computeDistanceMap(builder.site, builder.distanceMap, builder.originX, builder.originY, this.size.hi);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        builder.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = builder.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        builder.distance25 = distance25;\n        builder.distance75 = distance75;\n    }\n    pickComponents() {\n        const alternativeFlags = [\n            STEP.StepFlags.BF_ALTERNATIVE,\n            STEP.StepFlags.BF_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = GW.random.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n    clearInteriorFlag(builder) {\n        builder.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            if (!builder.site.hasCellFlag(x, y, GW.map.flags.Cell.IS_WIRED |\n                GW.map.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                builder.site.setMachine(x, y, 0);\n            }\n        });\n        // for (i = 0; i < map.width; i++) {\n        //     for (j = 0; j < map.height; j++) {\n        //         const cell = RUT.Map.getCell(map, i, j);\n        //         if (\n        //             cell.machineNumber == map.machineNumber &&\n        //             !RUT.Cell.hasMechFlag(\n        //                 cell,\n        //                 MechFlags.TM_IS_WIRED |\n        //                     MechFlags.TM_IS_CIRCUIT_BREAKER\n        //             )\n        //         ) {\n        //             cell.flags &= ~CellFlags.IS_IN_MACHINE;\n        //             cell.machineNumber = 0;\n        //         }\n        //     }\n        // }\n    }\n}\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags, depth));\n    return GW.random.item(matches);\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from '../site';\nimport * as BLUE from '.';\nimport { StepFlags } from './buildStep';\nexport class Builder {\n    constructor(map, depth) {\n        this.map = map;\n        this.depth = depth;\n        this.spawnedItems = [];\n        this.spawnedHordes = [];\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.site = new SITE.MapSite(map);\n        this.interior = GW.grid.alloc(map.width, map.height);\n        this.occupied = GW.grid.alloc(map.width, map.height);\n        this.viewMap = GW.grid.alloc(map.width, map.height);\n        this.distanceMap = GW.grid.alloc(map.width, map.height);\n    }\n    free() {\n        GW.grid.free(this.interior);\n        GW.grid.free(this.occupied);\n        GW.grid.free(this.viewMap);\n        GW.grid.free(this.distanceMap);\n    }\n    buildRandom(requiredMachineFlags = BLUE.Flags.BP_ROOM) {\n        let tries = 10;\n        while (tries--) {\n            const blueprint = BLUE.random(requiredMachineFlags, this.depth);\n            if (!blueprint) {\n                continue;\n            }\n            if (this.buildBlueprint(blueprint)) {\n                return true;\n            }\n        }\n        console.log('Failed to find blueprint matching flags: ' +\n            GW.flag.toString(BLUE.Flags, requiredMachineFlags));\n        return false;\n    }\n    buildBlueprint(blueprint) {\n        let tries = 10;\n        while (tries--) {\n            const loc = blueprint.pickLocation(this.site);\n            if (!loc) {\n                continue;\n            }\n            if (this.build(blueprint, loc[0], loc[1])) {\n                return true;\n            }\n        }\n        console.log('Failed to build blueprint.');\n        return false;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    build(blueprint, originX, originY) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        if (!blueprint.computeInterior(this)) {\n            return false;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const levelBackup = this.site.backup();\n        this.machineNumber = this.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        blueprint.prepareInteriorWithMachineFlags(this);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        blueprint.calcDistances(this);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = blueprint.pickComponents();\n        // Keep track of all monsters and items that we spawn -- if we abort, we have to go back and delete them all.\n        // let itemCount = 0, monsterCount = 0;\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            const count = component.build(this, blueprint);\n            if (count < component.count.lo &&\n                !(component.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS)) {\n                // failure! abort!\n                console.log('Failed to place blueprint because of feature; needed more instances.');\n                // Restore the map to how it was before we touched it.\n                this.site.restore(levelBackup);\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return false;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (blueprint.noInteriorFlag) {\n            blueprint.clearInteriorFlag(this);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return true;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as LEVEL from './level';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GW.utils.setOptions(this.config, options);\n        if (this.config.seed) {\n            GW.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GW.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GW.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GW.utils.distanceBetween(startLoc[0], startLoc[1], x, y) > minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        GW.random.seed(this.seeds[id]);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    makeLevel(id, opts, cb) {\n        const level = new LEVEL.Level(opts);\n        const result = level.create(this.config.width, this.config.height, cb);\n        if (!GW.utils.equalsXY(level.endLoc, opts.endLoc) ||\n            !GW.utils.equalsXY(level.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [level.startLoc, level.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["_a","_b","NOTHING","GW","tile","get","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","GridSite","width","height","this","tiles","grid","alloc","free","fill","x","y","hasXY","isBoundaryXY","isFloor","isDoor","isBridge","isStairs","isShallow","v","isNothing","isWall","isDeep","blocksPathing","Tile","obj","Error","Flags","map","flags","Cell","MapSite","machineCount","machineId","NumGrid","flag","cellInfo","hasCellFlag","cell","setCellFlag","clearCellFlag","hasTile","opts","setTile","highestPriorityTile","cells","forEach","c","clear","hasItem","hasActor","blocksMove","blocksVision","hasObjectFlag","gameObject","GameObject","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","hasTileFlag","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","isEmpty","isPassable","T_BRIDGE","T_IS_DOOR","L_SECRETLY_PASSABLE","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","clone","backup","chokeCount","count","analyze","effect","fireSync","id","isRoom","IS_IN_MACHINE","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","DIRS","utils","directionOfDoorSite","site","dir","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","w","isDiggable","isSet","push","doorSites","loc","random","item","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","getTileIndex","fillCostGrid","costGrid","update","_v","path","OBSTRUCTION","siteDisruptedBy","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","lakeX","lakeY","first","floodFill","siteDisruptedSize","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","Hall","length","doors","d","UP","DOWN","x2","y2","dx","dy","Room","Bounds","super","hall","cx","floor","cy","translate","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","make","RoomDigger","options","_setOptions","result","carve","every","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","bind","weighted","room","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickLength","lengths","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.Hall","lower","higher","actual","startX","startY","halls","clamp","Number","parseInt","_pickWidth","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","dirIndex","CLOCK_DIRS","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","SITE.DOOR","Level","seed","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","setOptions","SITE.GridSite","args","Map","SITE.MapSite","_create","cb","t","addFirstRoom","fails","addRoom","addLoops","addLakes","addBridges","addStairs","finish","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","roomSite","_makeSite","getDigger","_attachRoomAtLoc","HALL.dig","_attachRoom","SITE.directionOfDoorSite","oppDir","_roomFitsAt","SITE.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksDiagonal","boundaryTile","SITE.WALL","Fl","fl","StepFlags","BuildStep","cfg","pad","horde","from","builder","blueprint","distanceBound","BF_NOT_IN_HALLWAY","arcCount","BF_NOT_ON_LEVEL_PERIMETER","BF_BUILD_AT_ORIGIN","occupied","BF_IN_VIEW_OF_ORIGIN","BF_IN_PASSABLE_VIEW_OF_ORIGIN","viewMap","distance","eachNeighbor","BF_BUILD_IN_WALLS","cellMachine","getMachine","interior","machineNumber","ok","BF_BUILD_ANYWHERE_ON_LEVEL","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","candidates","personalSpace","generateEverywhere","BF_EVERYWHERE","buildAtOrigin","BF_NEAR_ORIGIN","distance25","BF_FAR_FROM_ORIGIN","distance75","fov","FOV","isBlocked","calculate","cellIsCandidate","instanceCount","instance","updateViewMap","qualifyingTileCount","markCandidates","lo","console","warn","DFSucceeded","terrainSucceeded","fireEffect","BF_PERMIT_BLOCKING","tileBlocksMove","BF_TREAT_AS_BLOCKING","blockingMap","SITE.siteDisruptedBy","error","makePersonalSpace","BP_NO_INTERIOR_FLAG","setMachine","BF_IMPREGNABLE","BF_REPEAT_UNTIL_NO_PROGRESS","Blueprint","tags","steps","split","trim","frequency","size","parts","STEP.BuildStep","level","want","includes","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_ADOPT_ITEM","treatAsBlocking","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","requiredFlags","depth","randSite","IS_GATE_SITE","contains","getChokeCount","log","pos","tryAgain","failsafe","addTileToInteriorAndIterate","computeInteriorForVestibuleMachine","SITE.computeDistanceMap","totalFreq","n","isOccupied","SITE.siteDisruptedSize","goodSoFar","startChokeCount","distMap","expandMachineInterior","isSecretDoor","minimumInteriorNeighbors","madeChange","nbcount","distances","dist","alternativeFlags","STEP.StepFlags","BF_ALTERNATIVE","BF_ALTERNATIVE_2","keepFeature","randIndex","filter","_f","IS_WIRED","IS_CIRCUIT_BREAKER","blueprints","matches","values","b","qualifies","spawnedItems","spawnedHordes","requiredMachineFlags","BLUE.Flags","BLUE.random","buildBlueprint","toString","pickLocation","build","computeInterior","levelBackup","nextMachineId","prepareInteriorWithMachineFlags","calcDistances","components","pickComponents","component","restore","clearInteriorFlag","levels","seeds","stairLocs","initSeeds","initStairLocs","number","stairDistance","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","LEVEL.Level","equalsXY"],"mappings":"sjBAAIA,EAAIC,SAED,MAAMC,EAAUC,EAAGC,KAAKC,IAAI,QAAQC,MAC9BC,EAAQJ,EAAGC,KAAKC,IAAI,SAASC,MAC7BE,EAAOL,EAAGC,KAAKC,IAAI,QAAQC,MAC3BG,EAAyG,QAA1FR,EAA2C,QAArCD,EAAKG,EAAGC,KAAKC,IAAI,sBAAmC,IAAPL,OAAgB,EAASA,EAAGM,aAA0B,IAAPL,EAAgBA,GAAM,EACvIS,EAAOP,EAAGC,KAAKC,IAAI,QAAQC,MAC3BK,EAAOR,EAAGC,KAAKC,IAAI,QAAQC,MAC3BM,EAAUT,EAAGC,KAAKC,IAAI,WAAWC,MACjCO,EAASV,EAAGC,KAAKC,IAAI,UAAUC,MAC/BQ,EAAYX,EAAGC,KAAKC,IAAI,aAAaC,MACrCS,EAAcZ,EAAGC,KAAKC,IAAI,eAAeC,MACzCU,EAAcb,EAAGC,KAAKC,IAAI,eAAeC,MACzCW,EAAU,CACnBC,CAAChB,GAAU,OACXgB,CAACX,GAAQ,QACTW,CAACV,GAAO,OACRU,CAACR,GAAO,OACRQ,CAACF,GAAc,cACfE,CAACP,GAAO,OACRO,CAACN,GAAU,UACXM,CAACL,GAAS,SACVK,CAACJ,GAAY,YACbI,CAACH,GAAc,eAEZ,MAAMI,EACTD,YAAYE,EAAOC,GACfC,KAAKC,MAAQpB,EAAGqB,KAAKC,MAAML,EAAOC,GAEtCH,OACIf,EAAGqB,KAAKE,KAAKJ,KAAKC,OAEtBL,QACII,KAAKC,MAAMI,KAAK,GAEpBP,YACI,OAAOE,KAAKC,MAAMH,MAEtBC,aACI,OAAOC,KAAKC,MAAMF,OAEtBH,MAAMU,EAAGC,GACL,OAAOP,KAAKC,MAAMO,MAAMF,EAAGC,GAE/BX,aAAaU,EAAGC,GACZ,OAAOP,KAAKC,MAAMQ,aAAaH,EAAGC,GAEtCX,WAAWU,EAAGC,GACV,OAAQP,KAAKU,QAAQJ,EAAGC,IACpBP,KAAKW,OAAOL,EAAGC,IACfP,KAAKY,SAASN,EAAGC,IACjBP,KAAKa,SAASP,EAAGC,IACjBP,KAAKc,UAAUR,EAAGC,GAE1BX,UAAUU,EAAGC,GAET,OADUP,KAAKC,MAAMlB,IAAIuB,EAAGC,KACf3B,EAEjBgB,WAAWU,EAAGC,GAEV,OADUP,KAAKC,MAAMlB,IAAIuB,EAAGC,KACf3B,EAEjBgB,QAAQU,EAAGC,GACP,OAAOP,KAAKC,MAAMlB,IAAIuB,EAAGC,IAAMtB,EAEnCW,OAAOU,EAAGC,GAEN,OADUP,KAAKC,MAAMlB,IAAIuB,EAAGC,KACfrB,EAEjBU,aAAaU,EAAGC,GAEZ,OADUP,KAAKC,MAAMlB,IAAIuB,EAAGC,KACfpB,EAEjBS,SAASU,EAAGC,GAER,OADUP,KAAKC,MAAMlB,IAAIuB,EAAGC,KACfhB,EAEjBK,OAAOU,EAAGC,GACN,MAAMQ,EAAIf,KAAKC,MAAMlB,IAAIuB,EAAGC,GAC5B,OAAOQ,IAAM3B,GAAQ2B,IAAMrB,EAE/BE,WAAWU,EAAGC,GACV,OAAOP,KAAKgB,UAAUV,EAAGC,IAAMP,KAAKiB,OAAOX,EAAGC,IAAMP,KAAKkB,OAAOZ,EAAGC,GAEvEX,eAAeU,EAAGC,GACd,OAAOP,KAAKgB,UAAUV,EAAGC,IAAMP,KAAKiB,OAAOX,EAAGC,GAElDX,cAAcU,EAAGC,GACb,OAAQP,KAAKgB,UAAUV,EAAGC,IACtBP,KAAKiB,OAAOX,EAAGC,IACfP,KAAKkB,OAAOZ,EAAGC,IACfP,KAAKa,SAASP,EAAGC,GAEzBX,aAAaU,EAAGC,GACZ,OAAOP,KAAKgB,UAAUV,EAAGC,IAAMP,KAAKiB,OAAOX,EAAGC,GAElDX,YAAYU,EAAGC,GACX,OAAOP,KAAKmB,cAAcb,EAAGC,IAAMP,KAAKmB,cAAcb,EAAGC,GAE7DX,cAAcU,EAAGC,GACb,OAAOP,KAAKiB,OAAOX,EAAGC,GAE1BX,SAASU,EAAGC,GACR,MAAMQ,EAAIf,KAAKC,MAAMlB,IAAIuB,EAAGC,GAC5B,OAAOQ,IAAMvB,GAAauB,IAAMtB,EAEpCG,OAAOU,EAAGC,GACN,OAAOP,KAAKC,MAAMlB,IAAIuB,EAAGC,KAAOlB,EAEpCO,UAAUU,EAAGC,GACT,OAAOP,KAAKC,MAAMlB,IAAIuB,EAAGC,KAAOjB,EAEpCM,YAAYU,EAAGC,GACX,OAAOP,KAAKkB,OAAOZ,EAAGC,IAAMP,KAAKc,UAAUR,EAAGC,GAElDX,MAAMU,EAAGC,GACL,OAAQP,KAAKC,MAAMlB,IAAIuB,EAAGC,IAAM,GAAK,EAEzCX,aAAaU,EAAGC,GACZ,OAAOP,KAAKC,MAAMlB,IAAIuB,EAAGC,IAAM,EAEnCX,QAAQU,EAAGC,EAAGzB,GAIV,GAHIA,aAAgBD,EAAGC,KAAKsC,OACxBtC,EAAOA,EAAKE,OAEI,iBAATF,EAAmB,CAC1B,MAAMuC,EAAMxC,EAAGC,KAAKmB,MAAMnB,GAC1B,IAAKuC,EACD,MAAM,IAAIC,MAAM,uBAAyBxC,GAC7CA,EAAOuC,EAAIrC,MAEf,QAAKgB,KAAKC,MAAMO,MAAMF,EAAGC,KAEzBP,KAAKC,MAAMK,GAAGC,GAAKzB,GACZ,GAEXc,QAAQU,EAAGC,EAAGzB,GAIV,GAHIA,aAAgBD,EAAGC,KAAKsC,OACxBtC,EAAOA,EAAKE,OAEI,iBAATF,EAAmB,CAC1B,MAAMuC,EAAMxC,EAAGC,KAAKmB,MAAMnB,GAC1B,IAAKuC,EACD,MAAM,IAAIC,MAAM,uBAAyBxC,GAC7CA,EAAOuC,EAAIrC,MAEf,OAAOgB,KAAKC,MAAMO,MAAMF,EAAGC,IAAMP,KAAKC,MAAMK,GAAGC,IAAMzB,EAEzDc,eAAed,GACX,OAAQA,IAASM,GACbN,IAASO,GACTP,IAASY,GACTZ,IAASF,GCvJrB,MAAM2C,EAAQ1C,EAAG2C,IAAIC,MAAMC,KACpB,MAAMC,EACT/B,YAAY4B,GACRxB,KAAK4B,aAAe,EACpB5B,KAAKwB,IAAMA,EACXxB,KAAK6B,UAAY,IAAIhD,EAAGqB,KAAK4B,QAAQN,EAAI1B,MAAO0B,EAAIzB,QAExDD,YACI,OAAOE,KAAKwB,IAAI1B,MAEpBC,aACI,OAAOC,KAAKwB,IAAIzB,OAEpBH,MAAMU,EAAGC,GACL,OAAOP,KAAKwB,IAAIhB,MAAMF,EAAGC,GAE7BX,aAAaU,EAAGC,GACZ,OAAOP,KAAKwB,IAAIf,aAAaH,EAAGC,GAEpCX,YAAYU,EAAGC,EAAGwB,GACd,OAAO/B,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAG0B,YAAYF,GAE/CnC,YAAYU,EAAGC,EAAGwB,GACd/B,KAAKwB,IAAIU,KAAK5B,EAAGC,GAAG4B,YAAYJ,GAEpCnC,cAAcU,EAAGC,EAAGwB,GAChB/B,KAAKwB,IAAIU,KAAK5B,EAAGC,GAAG6B,cAAcL,GAEtCnC,QAAQU,EAAGC,EAAGzB,GACV,OAAOkB,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAG8B,QAAQvD,GAE3Cc,QAAQU,EAAGC,EAAGzB,EAAMwD,GAChB,OAAOtC,KAAKwB,IAAIe,QAAQjC,EAAGC,EAAGzB,EAAMwD,GAExC1C,aAAaU,EAAGC,GACZ,IAAKP,KAAKQ,MAAMF,EAAGC,GACf,OAAO,EAGX,OAFaP,KAAKwB,IAAIU,KAAK5B,EAAGC,GACZiC,sBACNxD,MAEhBY,QACII,KAAKwB,IAAIiB,MAAMC,SAASC,GAAMA,EAAEC,UAEpChD,QAAQU,EAAGC,GACP,OAAOP,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAGsC,UAEnCjD,SAASU,EAAGC,GACR,OAAOP,KAAKwB,IAAIsB,SAASxC,EAAGC,GAEhCX,WAAWU,EAAGC,GACV,OAAOP,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAGwC,aAEnCnD,aAAaU,EAAGC,GACZ,OAAOP,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAGyC,eAEnCpD,eAAeU,EAAGC,GACd,OAAOP,KAAKwB,IACPQ,SAAS1B,EAAGC,GACZ0C,cAAcpE,EAAGqE,WAAWzB,MAAM0B,WAAWC,mBAEtDxD,cAAcU,EAAGC,GACb,MAAM8C,EAAOrD,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAClC,OAAQ8C,EAAKJ,cAAcpE,EAAGqE,WAAWzB,MAAM0B,WAAWG,gBACtDD,EAAKE,YAAY1E,EAAGC,KAAK2C,MAAML,KAAKoC,mBAE5C5D,YAAYU,EAAGC,GACX,OAAOP,KAAKwB,IACPQ,SAAS1B,EAAGC,GACZ0C,cAAcpE,EAAGqE,WAAWzB,MAAM0B,WAAWM,gBAEtD7D,cAAcU,EAAGC,GACb,OAAOP,KAAKwB,IACPQ,SAAS1B,EAAGC,GACZ0C,cAAcpE,EAAGqE,WAAWzB,MAAM0B,WAAWO,kBAEtD9D,OAAOU,EAAGC,GACN,OAAOP,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAGU,SAEnCrB,SAASU,EAAGC,GACR,OAAOP,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAGM,WAEnCjB,MAAMU,EAAGC,GACL,OAAOP,KAAKQ,MAAMF,EAAGC,KAAOP,KAAKwB,IAAIU,KAAK5B,EAAGC,GAAGoD,UAEpD/D,WAAWU,EAAGC,GACV,IAAKP,KAAKQ,MAAMF,EAAGC,GACf,OAAO,EACX,MAAM2B,EAAOlC,KAAKwB,IAAIU,KAAK5B,EAAGC,GAC9B,QAAI2B,EAAKyB,aAELzB,EAAKjB,SAIbrB,UAAUU,EAAGC,GACT,OAAOP,KAAKQ,MAAMF,EAAGC,IAAMP,KAAKwB,IAAIU,KAAK5B,EAAGC,GAAGoD,UAEnD/D,QAAQU,EAAGC,GACP,OAAOP,KAAK4D,WAAWtD,EAAGC,GAE9BX,SAASU,EAAGC,GACR,OAAOP,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAGgD,YAAY1E,EAAGC,KAAK2C,MAAML,KAAKyC,UAElEjE,OAAOU,EAAGC,GACN,OAAOP,KAAKwB,IACPQ,SAAS1B,EAAGC,GACZgD,YAAY1E,EAAGC,KAAK2C,MAAML,KAAK0C,WAExClE,aAAaU,EAAGC,GACZ,OAAOP,KAAKwB,IACPQ,SAAS1B,EAAGC,GACZ0C,cAAcpE,EAAGqE,WAAWzB,MAAM0B,WAAWY,qBAEtDnE,OAAOU,EAAGC,GACN,OAAOP,KAAKwB,IACPQ,SAAS1B,EAAGC,GACZgD,YAAY1E,EAAGC,KAAK2C,MAAML,KAAK4C,cAExCpE,UAAUU,EAAGC,GACT,IAAKP,KAAKQ,MAAMF,EAAGC,GACf,OAAO,EACX,MAAM2B,EAAOlC,KAAKwB,IAAIU,KAAK5B,EAAGC,GAC9B,QAAU2B,EAAK+B,UAAUpF,EAAGqE,WAAWzB,MAAMyC,MAAMC,UAC9CjC,EAAKqB,YAAY1E,EAAGC,KAAK2C,MAAML,KAAKgD,kBAE7CxE,YAAYU,EAAGC,GACX,IAAKP,KAAKQ,MAAMF,EAAGC,GACf,OAAO,EACX,MAAM2B,EAAOlC,KAAKwB,IAAIU,KAAK5B,EAAGC,GAC9B,OAAQ2B,EAAKmC,aAAaxF,EAAGqE,WAAWzB,MAAMyC,MAAMC,SAChDjC,EAAKqB,YAAY1E,EAAGC,KAAK2C,MAAML,KAAKgD,kBAE5CxE,WAAWU,EAAGC,GACV,OAAOP,KAAK6C,QAAQvC,EAAGC,IAAMP,KAAK8C,SAASxC,EAAGC,GAElDX,WAAWU,EAAGC,GACV,OAAQP,KAAKwB,IAAIQ,SAAS1B,EAAGC,GAAGwC,aAEpCnD,eAAed,GACX,OAAOD,EAAGC,KAAKC,IAAID,GAAMiE,aAE7BnD,SACI,OAAOI,KAAKwB,IAAI8C,QAEpB1E,QAAQ2E,GACJvE,KAAKwB,IAAM+C,EAEf3E,QACAA,cAAcU,EAAGC,GACb,OAAOP,KAAKwB,IAAIU,KAAK5B,EAAGC,GAAGiE,WAE/B5E,cAAcU,EAAGC,EAAGkE,GAChBzE,KAAKwB,IAAIU,KAAK5B,EAAGC,GAAGiE,WAAaC,EAErC7E,UACIf,EAAG2C,IAAIkD,QAAQ1E,KAAKwB,KAExB5B,WAAW+E,EAAQrE,EAAGC,GAClB,OAAO1B,EAAG8F,OAAOC,SAASD,EAAQ3E,KAAKwB,IAAKlB,EAAGC,GAEnDX,gBACI,QAASI,KAAK4B,aAElBhC,WAAWU,EAAGC,GACV,OAAOP,KAAK6B,UAAUvB,GAAGC,GAE7BX,WAAWU,EAAGC,EAAGsE,EAAIC,GAAS,GAC1B9E,KAAK6B,UAAUvB,GAAGC,GAAKsE,EACb,GAANA,EACA7E,KAAKwB,IAAIY,cAAc9B,EAAGC,EAAGgB,EAAMwD,eAGnC/E,KAAKwB,IAAIW,YAAY7B,EAAGC,EAAGuE,EAASvD,EAAMyD,mBAAqBzD,EAAM0D,qBC5KjF,MAAMC,EAAOrG,EAAGsG,MAAMD,KAoIf,SAASE,EAAoBC,EAAM/E,EAAGC,GACzC,IAAI+E,EAAKC,EACLC,EAAMC,EAAMC,EAAMC,EAEtB,IADAJ,EAAc1G,EAAGsG,MAAMS,aAClBN,EAAM,EAAGA,EAAM,EAAGA,IAKnB,GAJAE,EAAOlF,EAAI4E,EAAKI,GAAK,GACrBG,EAAOlF,EAAI2E,EAAKI,GAAK,GACrBI,EAAOpF,EAAI4E,EAAKI,GAAK,GACrBK,EAAOpF,EAAI2E,EAAKI,GAAK,GACjBD,EAAK7E,MAAMkF,EAAMC,IACjBN,EAAK7E,MAAMgF,EAAMC,IACjBJ,EAAK3E,QAAQgF,EAAMC,GAAO,CAE1B,GAAIJ,GAAe1G,EAAGsG,MAAMS,aAExB,OAAO/G,EAAGsG,MAAMS,aAEpBL,EAAcD,EAGtB,OAAOC,EAEJ,SAASM,EAAsBR,GAClC,IAAIS,EAAGC,EAAGC,EAAGR,EAAMC,EACfH,EACAW,EACJ,MAAMC,EAAQ,CAAC,GAAI,GAAI,GAAI,IAGrBC,EAAId,EAAKtF,OACTqG,EAAIf,EAAKvF,MACf,IAAKgG,EAAI,EAAGA,EAAIM,EAAGN,IACf,IAAKC,EAAI,EAAGA,EAAII,EAAGJ,IACf,GAAIV,EAAKgB,WAAWP,EAAGC,KACnBT,EAAMF,EAAoBC,EAAMS,EAAGC,GAC/BT,GAAOzG,EAAGsG,MAAMS,cAAc,CAM9B,IAHAJ,EAAOM,EAAIjH,EAAGsG,MAAMD,KAAKI,GAAK,GAC9BG,EAAOM,EAAIlH,EAAGsG,MAAMD,KAAKI,GAAK,GAC9BW,GAAiB,EACZD,EAAI,EAAGA,EAAI,IAAMX,EAAK7E,MAAMgF,EAAMC,KAAUQ,EAAgBD,IACzDX,EAAKiB,MAAMd,EAAMC,KACjBQ,GAAiB,GAErBT,GAAQ3G,EAAGsG,MAAMD,KAAKI,GAAK,GAC3BG,GAAQ5G,EAAGsG,MAAMD,KAAKI,GAAK,GAE1BW,GACDC,EAAMZ,GAAKiB,KAAK,CAACT,EAAGC,IAMxC,IAAIS,EAAY,GAEhB,IAAKlB,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC1B,MAAMmB,EAAM5H,EAAG6H,OAAOC,KAAKT,EAAMZ,KAAS,EAAE,GAAI,GAChDkB,EAAUlB,GAAO,CAACmB,EAAI,GAAIA,EAAI,IAGlC,OAAOD,EAoGJ,SAASI,EAASC,EAAMC,EAAQC,EAAU,EAAGC,EAAU,GAC1DnI,EAAGsG,MAAM8B,QAAQJ,EAAK/G,MAAO+G,EAAK9G,QAAQ,CAACO,EAAGC,KAC1C,MAAM2G,EAAS5G,EAAIyG,EACbI,EAAS5G,EAAIyG,EACbjG,EAAI+F,EAAOM,aAAaF,EAAQC,GACjCpG,GAEL8F,EAAKtE,QAAQjC,EAAGC,EAAGQ,MAGpB,SAASsG,EAAaP,EAAQQ,GACjCA,EAASC,QAAO,CAACC,EAAIlH,EAAGC,IAAMuG,EAAOlD,WAAWtD,EAAGC,GAAK,EAAI1B,EAAG4I,KAAKC,cAEjE,SAASC,EAAgBtC,EAAMuC,EAAcC,EAAiB,EAAGC,EAAiB,GACrF,MAAMC,EAAelJ,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QACpD,IAAIiI,GAAW,EAEfnJ,EAAGsG,MAAM8B,QAAQ5B,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAAC+F,EAAGC,KAC1C,MAAMkC,EAAQnC,EAAI+B,EACZK,EAAQnC,EAAI+B,EACdF,EAAa7I,IAAIkJ,EAAOC,GACpB7C,EAAKxE,SAASiF,EAAGC,KACjBiC,GAAW,GAGV3C,EAAKzB,WAAWkC,EAAGC,KACxBgC,EAAajC,GAAGC,GAAK,MAG7B,IAAIoC,GAAQ,EACZ,IAAK,IAAIrC,EAAI,EAAGA,EAAIiC,EAAajI,QAAUkI,IAAYlC,EACnD,IAAK,IAAIC,EAAI,EAAGA,EAAIgC,EAAahI,SAAWiI,IAAYjC,EAC1B,GAAtBgC,EAAajC,GAAGC,KACZoC,GACAJ,EAAaK,UAAUtC,EAAGC,EAAG,EAAG,GAChCoC,GAAQ,GAGRH,GAAW,GAQ3B,OADAnJ,EAAGqB,KAAKE,KAAK2H,GACNC,EAEJ,SAASK,EAAkBhD,EAAMuC,EAAcC,EAAiB,EAAGC,EAAiB,GACvF,MAAMC,EAAelJ,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QACpD,IAAIiI,EAAW,EAcf,GAZAnJ,EAAGsG,MAAM8B,QAAQ5B,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAAC+F,EAAGC,KAC1C,MAAMkC,EAAQnC,EAAI+B,EACZK,EAAQnC,EAAI+B,EACdF,EAAa7I,IAAIkJ,EAAOC,GACpB7C,EAAKxE,SAASiF,EAAGC,KACjBiC,EAAW3C,EAAKvF,MAAQuF,EAAKtF,QAG5BsF,EAAKzB,WAAWkC,EAAGC,KACxBgC,EAAajC,GAAGC,GAAK,MAGzBiC,EACA,OAAOA,EACX,IAAIG,GAAQ,EACRG,EAAS,EACTC,EAAUlD,EAAKvF,MAAQuF,EAAKtF,OAChC,IAAK,IAAI+F,EAAI,EAAGA,EAAIiC,EAAajI,QAASgG,EACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIgC,EAAahI,SAAUgG,EACvC,GAA0B,GAAtBgC,EAAajC,GAAGC,GAAS,CACzB,MAAMyC,EAAYT,EAAaK,UAAUtC,EAAGC,EAAG,EAAGuC,KAClDC,EAAUE,KAAKC,IAAIH,EAASC,GACxBL,EACAA,GAAQ,EAGRH,EAAWO,EAQ3B,OADA1J,EAAGqB,KAAKE,KAAK2H,GACNC,EAEJ,SAASW,EAAmBtD,EAAMuD,EAAaC,EAASC,EAASC,GACpE,MAAMzB,EAAWzI,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QAChDsH,EAAahC,EAAMiC,GACnBzI,EAAG4I,KAAKuB,mBAAmBJ,EAAaC,EAASC,EAASxB,GAAU,EAAOyB,EAAc,GAEzFlK,EAAGqB,KAAKE,KAAKkH,2TCpYV,MAAM2B,EACTrJ,YAAY6G,EAAKnB,EAAK4D,EAAQpJ,EAAQ,GAClCE,KAAKF,MAAQ,EACbE,KAAKmJ,MAAQ,GACbnJ,KAAKM,EAAImG,EAAI,GACbzG,KAAKO,EAAIkG,EAAI,GACb,MAAM2C,EAAIvK,EAAGsG,MAAMD,KAAKI,GACxBtF,KAAKkJ,OAASA,EACdlJ,KAAKF,MAAQA,EAETwF,IAAQzG,EAAGsG,MAAMkE,IAAM/D,IAAQzG,EAAGsG,MAAMmE,MACxCtJ,KAAKuJ,GAAKvJ,KAAKM,GAAKR,EAAQ,GAC5BE,KAAKwJ,GAAKxJ,KAAKO,GAAK2I,EAAS,GAAKE,EAAE,KAGpCpJ,KAAKuJ,GAAKvJ,KAAKM,GAAK4I,EAAS,GAAKE,EAAE,GACpCpJ,KAAKwJ,GAAKxJ,KAAKO,GAAKT,EAAQ,IAGhCE,KAAKsF,IAAMA,EAEf1F,UAAU6J,EAAIC,GACV1J,KAAKM,GAAKmJ,EACVzJ,KAAKO,GAAKmJ,EACV1J,KAAKuJ,IAAME,EACXzJ,KAAKwJ,IAAME,EACP1J,KAAKmJ,OACLnJ,KAAKmJ,MAAMzG,SAAS0G,IACXA,IAEDA,EAAE,GAAK,GAAKA,EAAE,GAAK,IAEvBA,EAAE,IAAMK,EACRL,EAAE,IAAMM,QAKjB,MAAMC,UAAa9K,EAAGsG,MAAMyE,OAC/BhK,YAAYU,EAAGC,EAAGT,EAAOC,GACrB8J,MAAMvJ,EAAGC,EAAGT,EAAOC,GACnBC,KAAKmJ,MAAQ,GACbnJ,KAAK8J,KAAO,KAEhBC,SACI,OAAO/J,KAAKM,EAAImI,KAAKuB,MAAMhK,KAAKF,MAAQ,GAE5CmK,SACI,OAAOjK,KAAKO,EAAIkI,KAAKuB,MAAMhK,KAAKD,OAAS,GAE7CH,UAAU6J,EAAIC,GACV1J,KAAKM,GAAKmJ,EACVzJ,KAAKO,GAAKmJ,EACN1J,KAAKmJ,OACLnJ,KAAKmJ,MAAMzG,SAAS0G,IACXA,IAEDA,EAAE,GAAK,GAAKA,EAAE,GAAK,IAEvBA,EAAE,IAAMK,EACRL,EAAE,IAAMM,OAGZ1J,KAAK8J,MACL9J,KAAK8J,KAAKI,UAAUT,EAAIC,IC9D7B,SAASS,EAAYC,EAAQC,EAAW,IA+B3C,OA9BAD,EAASA,GAAU,GACnBC,EAAWA,GAAY,GACvBC,OAAOC,QAAQF,GAAU3H,SAAQ,EAAE8H,EAAKC,MACpC,IAAIC,EAAON,EAAOI,GAClB,GAAY,SAARA,EAIA,iBAHaG,IAATD,IACAN,EAAOI,GAAOC,IAItB,IAAe,IAAXA,GAEA,IAAKC,EACD,MAAM,IAAIpJ,MAAM,4CAA8CkJ,QAKlEE,GAFuB,iBAAXD,GAIPG,MAAMC,QAAQJ,GAFZC,GAAQD,GASnB,MAAMK,EAAQjM,EAAGiM,MAAMC,KAAKL,GAC5BN,EAAOI,GAAOM,KAEXV,EAEJ,MAAMY,EACTpL,YAAYwK,EAAQC,EAAW,IAC3BrK,KAAKiL,QAAU,GACfjL,KAAKmJ,MAAQ,GACbnJ,KAAKkL,YAAYd,EAAQC,GAE7BzK,YAAYwK,EAAQC,EAAW,IAC3BrK,KAAKiL,QAAUd,EAAYC,EAAQC,GAEvCzK,OAAOyF,GACH,MAAM8F,EAASnL,KAAKoL,MAAM/F,GAQ1B,OAPI8F,IACKA,EAAOhC,OACe,GAAvBgC,EAAOhC,MAAMD,SACbiC,EAAOhC,MAAMkC,OAAO5E,IAASA,IAAkB,GAAXA,EAAI,OACxC0E,EAAOhC,MAAQmC,EAA2BjG,KAG3C8F,GAGR,IAAII,EAAQ,GACZ,MAAMC,UAAmBR,EAC5BpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CACVqB,QAAS,CAAC,aAGlB7L,YAAYwK,EAAQC,EAAW,IAC3B,MAAMoB,EAAUrB,EAAOqB,SAAWpB,EAASoB,QAC3C,GAAIb,MAAMC,QAAQY,GACdzL,KAAK0L,WAAa7M,EAAG6H,OAAOC,KAAKgF,KAAK9M,EAAG6H,OAAQ+E,OAEhD,CAAA,GAAsB,iBAAXA,EAIZ,MAAM,IAAInK,MAAM,6FAHhBtB,KAAK0L,WAAa7M,EAAG6H,OAAOkF,SAASD,KAAK9M,EAAG6H,OAAQ+E,IAM7D7L,MAAMyF,GACF,IAAIR,EAAK7E,KAAK0L,aACd,MAAMG,EAAON,EAAM1G,GAKnB,OAJKgH,GACDhN,EAAGsG,MAAM2G,MAAM,+BAAiCjH,GAG7CgH,EAAKE,OAAO1G,IAQpB,MAAM2G,UAAehB,EACxBpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CACVtK,MAAO,GACPC,OAAQ,IAGhBH,MAAMyF,GACF,MAAMvF,EAAQE,KAAKiL,QAAQnL,MAAMmM,QAC3BlM,EAASC,KAAKiL,QAAQlL,OAAOkM,QAC7BnN,EAAOkB,KAAKiL,QAAQnM,MAAQoN,EAC5BC,EAAWtN,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,OAAQ,GAClDqM,EAAW3D,KAAKuB,MAAM,GAAMlK,GAC5BuM,EAAWvM,EACXwM,EAAY7D,KAAKuB,MAAM,GAAMjK,GAC7BwM,EAAYxM,EAWZyM,EAVO,IAAI3N,EAAG4N,KAAKC,KAAK,CAC1BC,OAAQ,EACRP,SAAUA,EACVE,UAAWA,EACXD,SAAUA,EACVE,UAAWA,EACXK,cAAe,GACfC,gBAAiB,YACjBC,mBAAoB,cAEJ1B,MAAMe,EAASrM,MAAOqM,EAASpM,QAAQ,CAACO,EAAGC,IAAO4L,EAAS7L,GAAGC,GAAK,IAEjFwM,EAAQtE,KAAKuB,OAAO3E,EAAKvF,MAAQ0M,EAAO1M,OAAS,GACjD2J,EAAKsD,EAAQP,EAAOlM,EACpB0M,EAAQvE,KAAKuB,OAAO3E,EAAKtF,OAASyM,EAAOzM,QAAU,GACnD2J,EAAKsD,EAAQR,EAAOjM,EAO1B,OALA4L,EAASzJ,SAAQ,CAAC3B,EAAGT,EAAGC,KAChBQ,GACAsE,EAAK9C,QAAQjC,EAAImJ,EAAIlJ,EAAImJ,EAAI5K,MAErCD,EAAGqB,KAAKE,KAAK+L,GACN,IAAIc,EAAWF,EAAOC,EAAOR,EAAO1M,MAAO0M,EAAOzM,SAS1D,MAAMmN,UAAuBlC,EAChCpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CACVtK,MAAO,GACPC,OAAQ,KAGhBH,MAAMyF,GACF,MAAMvF,EAAQE,KAAKiL,QAAQnL,MAAMmM,QAC3BlM,EAASC,KAAKiL,QAAQlL,OAAOkM,QAC7BnN,EAAOkB,KAAKiL,QAAQnM,MAAQoN,EAC5BiB,EAAY1E,KAAKuB,MAAM,GAAMlK,GAC7BsN,EAAarN,EACbsN,EAAavN,EACbwN,EAAc7E,KAAKuB,MAAM,GAAMjK,GAE/BwN,EAAQ9E,KAAKuB,MAAM3E,EAAKvF,MAAQ,EAAIqN,EAAY,EAAI,GACpDK,EAAQnI,EAAKtF,OAASqN,EAAa,EACnCK,EAAShF,KAAKuB,MAAM3E,EAAKvF,MAAQ,EAAIuN,EAAa,EAAI,GACtDK,EAASrI,EAAKtF,OAASuN,EAAc,EAC3CzO,EAAGsG,MAAM8B,QAAQsG,EAAOC,EAAOL,EAAWC,GAAY,CAAC9M,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KACnFD,EAAGsG,MAAM8B,QAAQwG,EAAQC,EAAQL,EAAYC,GAAa,CAAChN,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KACvF,MAAM+M,EAAO,IAAIoB,EAAWxE,KAAKC,IAAI6E,EAAOE,GAAShF,KAAKC,IAAI8E,EAAOE,GAASjF,KAAKkF,IAAIR,EAAWE,GAAa5E,KAAKkF,IAAIP,EAAYE,IAKpI,OAJAzB,EAAK1C,MAAMtK,EAAGsG,MAAMmE,MAAQ,CACxBb,KAAKuB,MAAM3E,EAAKvF,MAAQ,GACxBuF,EAAKtF,OAAS,GAEX8L,GAQR,MAAM+B,UAAc5C,EACvBpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CAAEtK,MAAO,GAAIC,OAAQ,KAEvCH,MAAMyF,GACF,MAAMvF,EAAQE,KAAKiL,QAAQnL,MAAMmM,QAC3BlM,EAASC,KAAKiL,QAAQlL,OAAOkM,QAC7BnN,EAAOkB,KAAKiL,QAAQnM,MAAQoN,EAC5BiB,EAAYrN,EACZuN,EAAa5E,KAAKkF,IAAI,EAAGlF,KAAKuB,MAAOlK,EAAQjB,EAAG6H,OAAOoE,MAAM,GAAI,IAAO,MACxEsC,EAAa3E,KAAKkF,IAAI,EAAGlF,KAAKuB,MAAOjK,EAASlB,EAAG6H,OAAOoE,MAAM,GAAI,IAAO,MACzEwC,EAAcvN,EACdwN,EAAQ9E,KAAKuB,OAAO3E,EAAKvF,MAAQqN,GAAa,GAC9CM,EAASF,EAAQ1O,EAAG6H,OAAOoE,MAAM,EAAGrC,KAAKkF,IAAI,EAAGR,EAAYE,EAAa,IACzEK,EAASjF,KAAKuB,OAAO3E,EAAKtF,OAASuN,GAAe,GAClDE,EAAQE,EACV7O,EAAG6H,OAAOoE,MAAM,EAAGrC,KAAKkF,IAAI,EAAGL,EAAcF,EAAa,IAG9D,OAFAvO,EAAGsG,MAAM8B,QAAQsG,EAAOC,EAAOL,EAAWC,GAAY,CAAC9M,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KACnFD,EAAGsG,MAAM8B,QAAQwG,EAAQC,EAAQL,EAAYC,GAAa,CAAChN,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KAChF,IAAImO,EAAWM,EAAOG,EAAQjF,KAAKkF,IAAIR,EAAWE,GAAa5E,KAAKkF,IAAIP,EAAYE,KAQ5F,MAAMO,UAAyB7C,EAClCpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CAAEtK,MAAO,EAAGC,OAAQ,IAEtCH,MAAMyF,GACF,MAAMvF,EAAQE,KAAKiL,QAAQnL,MAAMmM,QAC3BlM,EAASC,KAAKiL,QAAQlL,OAAOkM,QAC7BnN,EAAOkB,KAAKiL,QAAQnM,MAAQoN,EAClC,IAAI4B,EAAarF,KAAKkF,IAAI,EAAGlF,KAAKuB,MAAOlK,EAAQjB,EAAG6H,OAAOoE,MAAM,GAAI,IAAO,MAIxEiD,EAActF,KAAKkF,IAAI,EAAGlF,KAAKuB,MAAOjK,EAASlB,EAAG6H,OAAOoE,MAAM,GAAI,IAAO,MAI9E,MAAMxK,EAAImI,KAAKuB,OAAO3E,EAAKvF,MAAQA,GAAS,GACtCS,EAAIkI,KAAKuB,OAAO3E,EAAKtF,OAASgO,GAAe,GACnDlP,EAAGsG,MAAM8B,QAAQ3G,EAAGC,EAAGT,EAAOiO,GAAa,CAACzN,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KACxE,MAAMyK,EAAKd,KAAKuB,OAAO3E,EAAKvF,MAAQgO,GAAc,GAC5CtE,EAAKf,KAAKuB,OAAO3E,EAAKtF,OAASA,GAAU,GAE/C,OADAlB,EAAGsG,MAAM8B,QAAQsC,EAAIC,EAAIsE,EAAY/N,GAAQ,CAACO,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KACnE,IAAImO,EAAWxE,KAAKC,IAAIpI,EAAGiJ,GAAKd,KAAKC,IAAInI,EAAGiJ,GAAKf,KAAKkF,IAAI7N,EAAOgO,GAAarF,KAAKkF,IAAI5N,EAAQgO,KAQvG,MAAMC,UAAoBhD,EAC7BpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CACVtK,MAAO,CAAC,EAAG,GACXC,OAAQ,CAAC,EAAG,KAGpBH,MAAMyF,GACF,MAAMvF,EAAQE,KAAKiL,QAAQnL,MAAMmM,QAC3BlM,EAASC,KAAKiL,QAAQlL,OAAOkM,QAC7BnN,EAAOkB,KAAKiL,QAAQnM,MAAQoN,EAC5B5L,EAAImI,KAAKuB,OAAO3E,EAAKvF,MAAQA,GAAS,GACtCS,EAAIkI,KAAKuB,OAAO3E,EAAKtF,OAASA,GAAU,GAE9C,OADAlB,EAAGsG,MAAM8B,QAAQ3G,EAAGC,EAAGT,EAAOC,GAAQ,CAACO,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KAC5D,IAAImO,EAAW3M,EAAGC,EAAGT,EAAOC,IAQpC,MAAMkO,UAAiBjD,EAC1BpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CACV8D,OAAQ,CAAC,EAAG,KAGpBtO,MAAMyF,GACF,MAAM6I,EAASlO,KAAKiL,QAAQiD,OAAOjC,QAC7BnN,EAAOkB,KAAKiL,QAAQnM,MAAQoN,EAC5B5L,EAAImI,KAAKuB,MAAM3E,EAAKvF,MAAQ,GAC5BS,EAAIkI,KAAKuB,MAAM3E,EAAKtF,OAAS,GAInC,OAHImO,EAAS,GACTrP,EAAGsG,MAAMgJ,UAAU7N,EAAGC,EAAG2N,GAAQ,CAAC5N,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KAE3D,IAAImO,EAAW3M,EAAI4N,EAAQ3N,EAAI2N,EAAiB,EAATA,EAAa,EAAY,EAATA,EAAa,IAQ5E,MAAME,UAAoBpD,EAC7BpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CACV8D,OAAQ,CAAC,EAAG,IACZG,aAAc,EACdC,YAAa,EACbC,WAAY,KAGpB3O,MAAMyF,GACF,MAAM6I,EAASlO,KAAKiL,QAAQiD,OAAOjC,QAC7BoC,EAAerO,KAAKiL,QAAQoD,aAAapC,QACzCqC,EAActO,KAAKiL,QAAQqD,YAAYrC,QACvCnN,EAAOkB,KAAKiL,QAAQnM,MAAQoN,EAC5B5L,EAAImI,KAAKuB,MAAM3E,EAAKvF,MAAQ,GAC5BS,EAAIkI,KAAKuB,MAAM3E,EAAKtF,OAAS,GAMnC,OALAlB,EAAGsG,MAAMgJ,UAAU7N,EAAGC,EAAG2N,GAAQ,CAAC5N,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KAC1DoP,EAASG,EAAeC,GACxBzP,EAAG6H,OAAO8H,OAAOxO,KAAKiL,QAAQsD,WAAWtC,UACzCpN,EAAGsG,MAAMgJ,UAAU7N,EAAGC,EAAG1B,EAAG6H,OAAOoE,MAAMwD,EAAaJ,EAASI,IAAc,CAAChO,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAG,KAEvG,IAAI0M,EAAW3M,EAAI4N,EAAQ3N,EAAI2N,EAAiB,EAATA,EAAa,EAAY,EAATA,EAAa,IAQ5E,MAAMO,UAAmBzD,EAC5BpL,YAAYwK,EAAS,IACjBP,MAAMO,EAAQ,CACV3F,MAAO,CAAC,EAAG,IACX3E,MAAO,CAAC,EAAG,IACXC,OAAQ,CAAC,EAAG,MAGpBH,MAAMyF,GACF,IAAIS,EAAGxF,EAAGC,EACNmO,EAAa1O,KAAKiL,QAAQxG,MAAMwH,QACpC,MAAMnM,EAAQE,KAAKiL,QAAQnL,MAAMmM,QAC3BlM,EAASC,KAAKiL,QAAQlL,OAAOkM,QAC7BnN,EAAOkB,KAAKiL,QAAQnM,MAAQoN,EAC5ByC,EAAOlG,KAAKuB,MAAM3E,EAAKvF,MAAQ,GAAK2I,KAAKuB,MAAMlK,EAAQ,GACvD8O,EAAOnG,KAAKuB,MAAM3E,EAAKvF,MAAQ,GAAK2I,KAAKuB,MAAMlK,EAAQ,GACvD+O,EAAOpG,KAAKuB,MAAM3E,EAAKtF,OAAS,GAAK0I,KAAKuB,MAAMjK,EAAS,GACzD+O,EAAOrG,KAAKuB,MAAM3E,EAAKtF,OAAS,GAAK0I,KAAKuB,MAAMjK,EAAS,GAC/D,IAAIgP,EAAOtG,KAAKuB,MAAM3E,EAAKvF,MAAQ,GAC/BkP,EAAQD,EACRE,EAAMxG,KAAKuB,MAAM3E,EAAKtF,OAAS,GAC/BmP,EAASD,EAMb,IALApQ,EAAGsG,MAAMgJ,UAAUY,EAAME,EAAK,GAAG,CAAC3O,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KAC9DiQ,GAAQ,EACRC,GAAS,EACTC,GAAO,EACPC,GAAU,EACLpJ,EAAI,EAAGA,EAAI4I,GAGZ,GAFApO,EAAIzB,EAAG6H,OAAOoE,MAAM6D,EAAMC,GAC1BrO,EAAI1B,EAAG6H,OAAOoE,MAAM+D,EAAMC,GACtBzJ,EAAKiB,MAAMhG,EAAGC,GAAI,CAClB,GAAID,EAAI,EAAIqO,EACR,SACJ,GAAIrO,EAAI,EAAIsO,EACR,SACJ,GAAIrO,EAAI,EAAIsO,EACR,SACJ,GAAItO,EAAI,EAAIuO,EACR,SACJC,EAAOtG,KAAKC,IAAIpI,EAAI,EAAGyO,GACvBC,EAAQvG,KAAKkF,IAAIrN,EAAI,EAAG0O,GACxBC,EAAMxG,KAAKC,IAAInI,EAAI,EAAG0O,GACtBC,EAASzG,KAAKkF,IAAIpN,EAAI,EAAG2O,GACzBrQ,EAAGsG,MAAMgJ,UAAU7N,EAAGC,EAAG,GAAG,CAACD,EAAGC,IAAM8E,EAAK9C,QAAQjC,EAAGC,EAAGzB,KACzDgH,IAGR,OAAO,IAAImH,EAAW8B,EAAME,EAAKD,EAAQD,EAAO,EAAGG,EAASD,EAAM,IAQnE,SAASE,EAAQtK,EAAIgH,GAExB,OADAN,EAAM1G,GAAMgH,EACLA,IAEH,UAAW,IAAImC,kGApRhB,SAAoB5D,EAAQ/E,GAG/B,OADe,IAAImG,EAAWpB,GAChB2B,OAAO1G,oBA2ClB,SAAgB+E,EAAQ/E,GAG3B,OADe,IAAI2G,EAAO5B,GACZ2B,OAAO1G,oCAiClB,SAAwB+E,EAAQ/E,GAGnC,OADe,IAAI6H,EAAe9C,GACpB2B,OAAO1G,kBAwBlB,SAAe+E,EAAQ/E,GAG1B,OADe,IAAIuI,EAAMxD,GACX2B,OAAO1G,wCA2BlB,SAA0B+E,EAAQ/E,GAGrC,OADe,IAAIwI,EAAiBzD,GACtB2B,OAAO1G,8BAmBlB,SAAqB+E,EAAQ/E,GAGhC,OADe,IAAI2I,EAAY5D,GACjB2B,OAAO1G,wBAmBlB,SAAkB+E,EAAQ/E,GAG7B,OADe,IAAI4I,EAAS7D,GACd2B,OAAO1G,8BA0BlB,SAAqB+E,EAAQ/E,GAGhC,OADe,IAAI+I,EAAYhE,GACjB2B,OAAO1G,4BAoDlB,SAAoB+E,EAAQ/E,GAG/B,OADe,IAAIoJ,EAAWrE,GAChB2B,OAAO1G,gBCjWzB,MAAMH,EAAOrG,EAAGsG,MAAMD,KACf,SAASkK,EAAU/J,EAAMoB,EAAKnB,GACjC,IAAKD,EAAK7E,MAAMiG,EAAI,GAAIA,EAAI,IACxB,OAAO,EAEX,IAAKpB,EAAKgB,WAAWI,EAAI,GAAIA,EAAI,IAC7B,OAAO,EACX,MAAMoF,EAAO,CAACpF,EAAI,GAAKnB,EAAI,GAAImB,EAAI,GAAKnB,EAAI,IAC5C,QAAKD,EAAK7E,MAAMqL,EAAK,GAAIA,EAAK,OAGzBxG,EAAK3E,QAAQmL,EAAK,GAAIA,EAAK,IA6B7B,SAASwD,EAAW/J,EAAKgK,GAC5B,OAAIhK,GAAOzG,EAAGsG,MAAMkE,IAAM/D,GAAOzG,EAAGsG,MAAMmE,KAC/BgG,EAAQ,GAAGrD,QAGXqD,EAAQ,GAAGrD,QAGnB,SAASsD,EAAkBlK,EAAM8D,EAAOmG,GAE3C,IAAIhK,EAAMzG,EAAGsG,MAAMS,aACnB,GAAIN,GAAOzG,EAAGsG,MAAMS,aAAc,CAC9B,MAAM4J,EAAO3Q,EAAG6H,OAAO+I,SAAS,GAChC,IAAK,IAAI3J,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxBR,EAAMkK,EAAK1J,GACX,MAAMoD,EAASoG,GAASxJ,EAAI,GAAK,GAAG4J,GAC9BC,EAAOxG,EAAM7D,GACnB,GAAIqK,IAAoB,GAAZA,EAAK,KAAwB,GAAZA,EAAK,GAAU,CACxC,MAAMlG,EAAKkG,EAAK,GAAKlH,KAAKuB,MAAM9E,EAAKI,GAAK,GAAK4D,GACzCQ,EAAKiG,EAAK,GAAKlH,KAAKuB,MAAM9E,EAAKI,GAAK,GAAK4D,GAC/C,GAAI7D,EAAK7E,MAAMiJ,EAAIC,GACf,MAGRpE,EAAMzG,EAAGsG,MAAMS,cAGvB,OAAON,EAEJ,SAASsK,EAAcvK,EAAM/E,EAAGC,EAAG+E,EAAKuK,GAC3C,IAAIrK,EAAMC,EACV,MAAMqK,EAA0BjR,EAAG6H,OAAO8H,OAAOqB,GAC3CE,EAAY,GAMlB,IAAK,IAAIC,EAAO,EAAGA,EAAO,EAAGA,IACzBxK,EAAOlF,EAAI4E,EAAK8K,GAAM,GACtBvK,EAAOlF,EAAI2E,EAAK8K,GAAM,GACjBA,GAAQ1K,IAAQwK,IAChBzK,EAAK7E,MAAMgF,EAAMC,IAClBJ,EAAKiB,MAAMd,EAAMC,KAIjBsK,EAAUC,GAAQ,CAACxK,EAAMC,IAGjC,OAAOsK,EAEJ,MAAME,EACTrQ,YAAYqL,EAAU,IAClBjL,KAAKoK,OAAS,CACVtK,MAAOjB,EAAGiM,MAAMC,KAAK,GACrB7B,OAAQ,CAACrK,EAAGiM,MAAMC,KAAK,QAASlM,EAAGiM,MAAMC,KAAK,QAC9CjM,KAAMoN,EACN2D,cAAe,GACfrB,OAAQ,KAEZxO,KAAKkL,YAAYD,GAErBrL,YAAYqL,EAAU,IAIlB,GAHIA,EAAQnL,QACRE,KAAKoK,OAAOtK,MAAQjB,EAAGiM,MAAMC,KAAKE,EAAQnL,QAE1CmL,EAAQ/B,QACsB,iBAAnB+B,EAAQ/B,OAAqB,CACpC,MAAMgH,EAAIrR,EAAGiM,MAAMC,KAAKE,EAAQ/B,QAChClJ,KAAKoK,OAAOlB,OAAS,CAACgH,EAAGA,GAG7BjF,EAAQnM,OACRkB,KAAKoK,OAAOtL,KAAOmM,EAAQnM,MAE3BmM,EAAQuD,SACRxO,KAAKoK,OAAOoE,OAASvD,EAAQuD,QAGrC5O,OAAOyF,EAAM8D,EAAQ,IAEjB,GADAA,EAAQA,GAASmC,EAA2BjG,IACvCxG,EAAG6H,OAAO8H,OAAOxO,KAAKoK,OAAOoE,QAC9B,OAAO,KACX,MAAMlJ,EAAMiK,EAAkBlK,EAAM8D,EAAOnJ,KAAKoK,OAAOlB,QACvD,GAAI5D,IAAQzG,EAAGsG,MAAMS,aACjB,OAAO,KACX,IAAKuD,EAAM7D,GACP,OAAO,KACX,MAAMxF,EAAQE,KAAKoK,OAAOtK,MAAMmM,QAC1B/C,EAASmG,EAAW/J,EAAKtF,KAAKoK,OAAOlB,QACrCiH,EAAUhH,EAAM7D,GACtB,OAAa,GAATxF,EACOE,KAAKoQ,IAAI/K,EAAMC,EAAK6K,EAASjH,GAG7BlJ,KAAKqQ,QAAQhL,EAAMC,EAAK6K,EAASjH,EAAQpJ,GAGxDF,SAASyF,EAAMsK,EAAMrK,EAAK4D,GACtB,IAAI5I,EAAIqP,EAAK,GACTpP,EAAIoP,EAAK,GACb,MAAM7Q,EAAOkB,KAAKoK,OAAOtL,KACzB,IAAK,IAAIgH,EAAI,EAAGA,EAAIoD,EAAQpD,IACxBT,EAAK9C,QAAQjC,EAAGC,EAAGzB,GACnBwB,GAAKgF,EAAI,GACT/E,GAAK+E,EAAI,GAIb,OAFAhF,GAAKgF,EAAI,GACT/E,GAAK+E,EAAI,GACF,CAAChF,EAAGC,GAEfX,IAAIyF,EAAMC,EAAKqK,EAAMzG,GACjB,MAAMoH,EAAMpL,EAAKI,IACVhF,EAAGC,GAAKP,KAAKuQ,SAASlL,EAAMsK,EAAMW,EAAKpH,GACxCY,EAAO,IAAI0G,EAAWb,EAAMrK,EAAK4D,GAEvC,OADAY,EAAKX,MAAQyG,EAAcvK,EAAM/E,EAAGC,EAAG+E,EAAKtF,KAAKoK,OAAOyF,eACjD/F,EAEXlK,QAAQyF,EAAMC,EAAKqK,EAAMzG,EAAQpJ,GAC7B,MAAMwQ,EAAMzR,EAAGsG,MAAMD,KAAKI,GACpBmL,EAAQ,CAACd,EAAK,GAAKW,EAAI,GAAIX,EAAK,GAAKW,EAAI,IACzCI,EAAS,CAACf,EAAK,GAAKW,EAAI,GAAIX,EAAK,GAAKW,EAAI,IAChDtQ,KAAKuQ,SAASlL,EAAMsK,EAAMW,EAAKpH,GAC/B,IAAIyH,EAAS,EACTC,EAASjB,EAAK,GACdkB,EAASlB,EAAK,GACdgB,EAAS7Q,GAASsP,EAAU/J,EAAMoL,EAAOH,KACzCtQ,KAAKuQ,SAASlL,EAAMoL,EAAOH,EAAKpH,GAChC0H,EAASnI,KAAKC,IAAI+H,EAAM,GAAIG,GAC5BC,EAASpI,KAAKC,IAAI+H,EAAM,GAAII,KAC1BF,GAEFA,EAAS7Q,GAASsP,EAAU/J,EAAMqL,EAAQJ,KAC1CtQ,KAAKuQ,SAASlL,EAAMqL,EAAQJ,EAAKpH,GACjC0H,EAASnI,KAAKC,IAAIgI,EAAO,GAAIE,GAC7BC,EAASpI,KAAKC,IAAIgI,EAAO,GAAIG,KAC3BF,GAEN,MAAM7G,EAAO,IAAI0G,EAAW,CAACI,EAAQC,GAASvL,EAAK4D,EAAQpJ,GAO3D,OANAgK,EAAKX,MAAQ,GACbW,EAAKX,MAAM7D,GAAO,CACdqK,EAAK,GAAKzG,EAASoH,EAAI,GACvBX,EAAK,GAAKzG,EAASoH,EAAI,IAE3BxG,EAAKhK,MAAQA,EACNgK,GAGR,SAASsG,EAAIhG,EAAQ/E,EAAM8D,GAE9B,OADe,IAAI8G,EAAW7F,GAChB2B,OAAO1G,EAAM8D,GAExB,IAAI2H,EAAQ,GACZ,SAAS3B,GAAQtK,EAAIiF,GAGxB,OADAgH,EAAMjM,GAAMiF,EACLA,KAEH,UAAW,IAAImG,EAAW,CAAEzB,OAAQ,iEAxLrC,SAAmBlM,EAAO,IAC7B,OAAOzD,EAAGsG,MAAM4L,MAEpB,SAAoBzO,GAChB,IAAKA,EACD,OAAO,EACX,GAAoB,iBAATA,EACP,OAAOA,EACX,QAAmBqI,IAAfrI,EAAKxC,MACL,OAAO,EACX,IAAIA,EAAQwC,EAAKxC,MACjB,GAAqB,iBAAVA,EACP,OAAOA,EAGPA,EAFK8K,MAAMC,QAAQ/K,GAEXjB,EAAG6H,OAAOkF,SAAS9L,GAAS,EAEd,iBAAVA,EACJjB,EAAGiM,MAAMC,KAAKjL,GAAOmM,QAGrB+E,OAAOC,SAASpS,EAAG6H,OAAOkF,SAAS9L,IAE/C,OAAOA,EAtBeoR,CAAW5O,GAAO,EAAG,6FCjBxC,MAAM6O,GACTvR,YAAYqL,EAAU,IAClBjL,KAAKiL,QAAU,CACXlL,OAAQ,GACRD,MAAO,GACPyI,QAAS,EACT6I,MAAO,GACP3M,MAAO,EACP4M,YAAY,EACZC,WAAYC,EACZC,aAAc,GACdC,WAAY,EACZ3S,KAAM4S,GAEVpH,OAAOqH,OAAO3R,KAAKiL,QAASA,GAEhCrL,OAAOyF,GACH,IAAIS,EAAGC,EAAGC,EACN1F,EAAGC,EACHqR,EAAeC,EAAcC,EAAaV,EAAOW,EAAUV,EAC3D5M,EAAQ,EACZmN,EAAgB5R,KAAKiL,QAAQlL,QAAU,GACvC8R,EAAe7R,KAAKiL,QAAQnL,OAAS,GACrCgS,EAAc9R,KAAKiL,QAAQ1C,SAAW,EACtC6I,EAAQpR,KAAKiL,QAAQmG,OAAS,GAC9BW,EAAW/R,KAAKiL,QAAQxG,OAAS,EACjC4M,EAAarR,KAAKiL,QAAQoG,aAAc,EACxC,MAAMW,IAAYnT,EAAG6H,OAAO8H,OAAOxO,KAAKiL,QAAQuG,cAG1CF,EAAatR,KAAKiL,QAAQqG,YAAcC,EACxCE,EAAazR,KAAKiL,QAAQwG,YAAc,EACxC3S,EAAOkB,KAAKiL,QAAQnM,MAAQ4S,EAC5BO,EAAWpT,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,OAAQ,GACxD,IAAImS,EAAW,EACf,KAAOA,EAAWH,GAAYtN,EAAQsN,GAAU,CAE5C,MAAMjS,EAAQ2I,KAAK0J,OAAQN,EAAeC,IAAgBC,EAAWG,GACjEH,GAAYD,EACV/R,EAAS0I,KAAK0J,OAAQP,EAAgBE,IAAgBC,EAAWG,GACnEH,GAAYD,EAWVtF,EAVO,IAAI3N,EAAG4N,KAAKC,KAAK,CAC1BC,OAAQ,EACRP,SAAU,EACVE,UAAW,EACXD,SAAUvM,EACVyM,UAAWxM,EACX6M,cAAe,GACfC,gBAAiB,YACjBC,mBAAoB,cAEJ1B,MAAM6G,EAASnS,MAAOmS,EAASlS,QAAQ,CAACO,EAAGC,IAAO0R,EAAS3R,GAAGC,GAAK,IAEvF,IAAI6R,GAAU,EACd,IAAKpM,EAAI,EAAGA,EAAIoL,IAAUgB,EAASpM,IAK/B,GAFA1F,EAAIzB,EAAG6H,OAAOoE,MAAM,EAAI0B,EAAOlM,EAAG2R,EAASnS,MAAQ0M,EAAO1M,MAAQ0M,EAAOlM,EAAI,GAC7EC,EAAI1B,EAAG6H,OAAOoE,MAAM,EAAI0B,EAAOjM,EAAG0R,EAASlS,OAASyM,EAAOzM,OAASyM,EAAOjM,EAAI,GAC3E8Q,IAAerR,KAAKqS,cAAchN,EAAM4M,GAAW3R,GAAIC,GAAI,CAK3D,IAFA6R,GAAU,EAELtM,EAAI,EAAGA,EAAI0G,EAAO1M,MAAOgG,IAE1B,IAAKC,EAAI,EAAGA,EAAIyG,EAAOzM,OAAQgG,IAE3B,GAAIkM,EAASnM,EAAI0G,EAAOlM,GAAGyF,EAAIyG,EAAOjM,GAAI,CACtC,MAAM+R,EAAKxM,EAAI0G,EAAOlM,EAAIA,EACpBiS,EAAKxM,EAAIyG,EAAOjM,EAAIA,EAC1B8E,EAAK9C,QAAQ+P,EAAIC,EAAIzT,GACjBkT,GACAnT,EAAGsG,MAAMgJ,UAAUmE,EAAIC,EAAId,GAAY,CAAC3L,EAAGC,KACnCV,EAAKzB,WAAWkC,EAAGC,IAInBV,EAAK9C,QAAQuD,EAAGC,EAAGuL,MAO3C,MAGJc,IACE3N,IAGAyN,EAIV,OADArT,EAAGqB,KAAKE,KAAK6R,GACNxN,EAEX7E,cAAcyF,EAAM4M,EAAUO,EAAa,EAAGC,EAAa,GACvD,MAAM1K,EAAelJ,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QACpD,IAAIiI,GAAW,EAEfnJ,EAAGsG,MAAM8B,QAAQ5B,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAAC+F,EAAGC,KAC1C,MAAMkC,EAAQnC,EAAI0M,EACZtK,EAAQnC,EAAI0M,EACdR,EAASlT,IAAIkJ,EAAOC,GAChB7C,EAAKxE,SAASiF,EAAGC,KACjBiC,GAAW,GAGV3C,EAAKzB,WAAWkC,EAAGC,KACxBgC,EAAajC,GAAGC,GAAK,MAG7B,IAAIoC,GAAQ,EACZ,IAAK,IAAIrC,EAAI,EAAGA,EAAIiC,EAAajI,QAAUkI,IAAYlC,EACnD,IAAK,IAAIC,EAAI,EAAGA,EAAIgC,EAAahI,SAAWiI,IAAYjC,EAC1B,GAAtBgC,EAAajC,GAAGC,KACZoC,GACAJ,EAAaK,UAAUtC,EAAGC,EAAG,EAAG,GAChCoC,GAAQ,GAGRH,GAAW,GAQ3B,OADAnJ,EAAGqB,KAAKE,KAAK2H,GACNC,mDCnIR,MAAM0K,GACT9S,YAAYqL,EAAU,IAClBjL,KAAKiL,QAAU,CACX0H,YAAa,GACbC,UAAW,GAEftI,OAAOqH,OAAO3R,KAAKiL,QAASA,GAEhCrL,OAAOyF,GACH,IACIG,EAAMC,EACNK,EAAGC,EAAGqD,EAAG9I,EAAGC,EAFZkE,EAAQ,EAGZ,MAAMmO,EAAY5S,KAAKiL,QAAQ2H,UACzBD,EAAc3S,KAAKiL,QAAQ0H,YAC3BE,EAAWhU,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QAC1CuH,EAAWzI,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QAC1C+S,EAAY,CACd,CAAC,EAAG,GACJ,CAAC,EAAG,IAERxL,EAASC,QAAO,CAACC,EAAIlH,EAAGC,IAAM8E,EAAKzB,WAAWtD,EAAGC,GAAK,EAAI1B,EAAG4I,KAAKC,cAClE,MAAMqL,EAAMlU,EAAG6H,OAAO+I,SAASpK,EAAKvF,MAAQuF,EAAKtF,QACjD,IAAK+F,EAAI,EAAGA,EAAIiN,EAAI7J,OAAQpD,IAGxB,GAFAxF,EAAImI,KAAKuB,MAAM+I,EAAIjN,GAAKT,EAAKtF,QAC7BQ,EAAIwS,EAAIjN,GAAKT,EAAKtF,OAIlBsF,EAAKzB,WAAWtD,EAAGC,KACd8E,EAAK2N,YAAY1S,EAAGC,GACrB,IAAK6I,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAErB,MAAM6J,EAAYH,EAAU1J,GAO5B,GANA5D,EAAOlF,EAAI2S,EAAU,GACrBxN,EAAOlF,EAAI0S,EAAU,GACrBlN,EAAI6M,EAIAvN,EAAK2N,YAAYxN,EAAMC,GACvB,IAAKM,EAAI,EAAGA,EAAI6M,IACZpN,GAAQyN,EAAU,GAClBxN,GAAQwN,EAAU,GAEb5N,EAAK2N,YAAYxN,EAAMC,MAJHM,GASjC,GAEAV,EAAKzB,WAAW4B,EAAMC,IAClBM,EAAI6M,IACJ/T,EAAG4I,KAAKuB,mBAAmB6J,EAAUrN,EAAMC,EAAM6B,GAAU,GAIvDuL,EAASvS,GAAGC,GAAKoS,GACjBE,EAASvS,GAAGC,GAAK1B,EAAG4I,KAAKyL,SAAS,CAUlC,KAAO5S,IAAMkF,GAAQjF,IAAMkF,GACnBzF,KAAKmT,kBAAkB9N,EAAM/E,EAAGC,EAAG0S,IACnC5N,EAAK9C,QAAQjC,EAAGC,EAAG6S,GACnB9L,EAAShH,GAAGC,GAAK,IAGjB8E,EAAK9C,QAAQjC,EAAGC,EAAG2L,GACnB5E,EAAShH,GAAGC,GAAK,GAErBD,GAAK2S,EAAU,GACf1S,GAAK0S,EAAU,KAEjBxO,EACF,OAQpB,OAFA5F,EAAGqB,KAAKE,KAAKyS,GACbhU,EAAGqB,KAAKE,KAAKkH,GACN7C,EAEX7E,kBAAkByF,EAAM/E,EAAGC,EAAG0S,GAC1B,QAAI5N,EAAKzE,SAASN,EAAGC,MAEhB8E,EAAK2N,YAAY1S,EAAGC,OAEpB8E,EAAK2N,YAAY1S,EAAI2S,EAAU,GAAI1S,EAAI0S,EAAU,OAEjD5N,EAAK2N,YAAY1S,EAAI2S,EAAU,GAAI1S,EAAI0S,EAAU,wDClGvD,MAAMI,GACTzT,YAAYqL,EAAU,IAClBjL,KAAKiL,QAAU,CACXqI,IAAI,EACJC,MAAM,EACNZ,YAAa,GACba,OAAO,EACPC,OAAQC,EACRC,SAAUC,EACVC,KAAMC,GAEVxJ,OAAOqH,OAAO3R,KAAKiL,QAASA,GAEhCrL,OAAOyF,GACH,IAAI0O,GAA6B,IAApB/T,KAAKiL,QAAQqI,GACtBU,GAAiC,IAAtBhU,KAAKiL,QAAQsI,KAC5B,MAAMZ,EAAc3S,KAAKiL,QAAQ0H,aAC7BlK,KAAKuB,MAAMvB,KAAKkF,IAAItI,EAAKvF,MAAOuF,EAAKtF,QAAU,GAC7CkU,EAAY,GAClB,IAAIC,EACAC,EACJ,MAAMC,EAAapU,KAAKqU,UAAU1I,KAAK3L,KAAMqF,GAC7C,GAAIrF,KAAKiL,QAAQuI,OAAuC,iBAAvBxT,KAAKiL,QAAQuI,MAAoB,CAC9D,IAAIA,EAAQxT,KAAKiL,QAAQuI,MAErBA,GADU,IAAVA,EACQ3U,EAAG6H,OAAO4N,YAAYjP,EAAKvF,MAAOuF,EAAKtF,OAAQqU,GAG/CvV,EAAG6H,OAAO6N,gBAAgB1V,EAAGsG,MAAM7E,EAAEkT,GAAQ3U,EAAGsG,MAAM5E,EAAEiT,GAAQY,GAE5EH,EAAUT,MAAQA,EAEtB,GAAI5I,MAAMC,QAAQ7K,KAAKiL,QAAQqI,KAC3B1I,MAAMC,QAAQ7K,KAAKiL,QAAQsI,MAAO,CAClC,MAAMD,EAAKtT,KAAKiL,QAAQqI,GACxBY,EAAQrV,EAAG6H,OAAO6N,gBAAgB1V,EAAGsG,MAAM7E,EAAEgT,GAAKzU,EAAGsG,MAAM5E,EAAE+S,GAAKc,GAClE,MAAMb,EAAOvT,KAAKiL,QAAQsI,KAC1BY,EAAUtV,EAAG6H,OAAO6N,gBAAgB1V,EAAGsG,MAAM7E,EAAEiT,GAAO1U,EAAGsG,MAAM5E,EAAEgT,GAAOa,QAEvE,GAAIxJ,MAAMC,QAAQ7K,KAAKiL,QAAQqI,MAC/B1I,MAAMC,QAAQ7K,KAAKiL,QAAQsI,MAAO,CACnC,MAAMD,EAAKtT,KAAKiL,QAAQqI,GACxBY,EAAQrV,EAAG6H,OAAO6N,gBAAgB1V,EAAGsG,MAAM7E,EAAEgT,GAAKzU,EAAGsG,MAAM5E,EAAE+S,GAAKc,GAC9DJ,IACAG,EAAUtV,EAAG6H,OAAO4N,YAAYjP,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAACO,EAAGC,MAGzD1B,EAAGsG,MAAMqP,gBAAgBlU,EAAGC,EAAG2T,EAAM,GAAIA,EAAM,IAC3CvB,IAEGyB,EAAW9T,EAAGC,WAI5B,GAAIqK,MAAMC,QAAQ7K,KAAKiL,QAAQsI,QAC/B3I,MAAMC,QAAQ7K,KAAKiL,QAAQqI,IAAK,CACjC,MAAMC,EAAOvT,KAAKiL,QAAQsI,KAC1BY,EAAUtV,EAAG6H,OAAO6N,gBAAgB1V,EAAGsG,MAAM7E,EAAEiT,GAAO1U,EAAGsG,MAAM5E,EAAEgT,GAAOa,GACpEL,IACAG,EAAQrV,EAAG6H,OAAO4N,YAAYjP,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAACO,EAAGC,MACnD1B,EAAGsG,MAAMqP,gBAAgBlU,EAAGC,EAEhC4T,EAAQ,GAERA,EAAQ,IAAMxB,IAEPyB,EAAW9T,EAAGC,WAIxBwT,GACLG,EAAQrV,EAAG6H,OAAO4N,YAAYjP,EAAKvF,MAAOuF,EAAKtF,OAAQqU,GACnDJ,IACAG,EAAUtV,EAAG6H,OAAO4N,YAAYjP,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAACO,EAAGC,MAGzD1B,EAAGsG,MAAMqP,gBAAgBlU,EAAGC,EAAG2T,EAAM,GAAIA,EAAM,IAC3CvB,IAEGyB,EAAW9T,EAAGC,OAIxByT,IACLG,EAAUtV,EAAG6H,OAAO4N,YAAYjP,EAAKvF,MAAOuF,EAAKtF,OAAQqU,IAc7D,OAZIF,IACAD,EAAUX,GAAKY,EAAMO,QACrBzU,KAAK0U,YAAYrP,EAAM6O,EAAM,GAAIA,EAAM,GAAIlU,KAAKiL,QAAQwI,QAC7B,OAAvBzT,KAAKiL,QAAQuI,QACbS,EAAUT,MAAQS,EAAUX,UAEpB3I,IAAZwJ,IACAF,EAAUV,KAAOY,EAAQM,QACzBzU,KAAK0U,YAAYrP,EAAM8O,EAAQ,GAAIA,EAAQ,GAAInU,KAAKiL,QAAQ0I,UACjC,SAAvB3T,KAAKiL,QAAQuI,QACbS,EAAUT,MAAQS,EAAUV,OAE7BW,GAASC,EAAUF,EAAY,KAE1CrU,MAAMyF,EAAM/E,EAAGC,GACX,QAAID,EAAI,GAAKC,EAAI,MAEbD,GAAK+E,EAAKvF,OAASS,GAAK8E,EAAKtF,QAIrCH,UAAUyF,EAAM/E,EAAGC,GACf,IAAIkE,EAAQ,EACZ,IAAKzE,KAAKQ,MAAM6E,EAAM/E,EAAGC,KAAO8E,EAAKgB,WAAW/F,EAAGC,GAC/C,OAAO,EACX,IAAK,IAAIuF,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,MAAMR,EAAMzG,EAAGsG,MAAMD,KAAKY,GAC1B,IAAK9F,KAAKQ,MAAM6E,EAAM/E,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,IACtC,OAAO,EACX,IAAKtF,KAAKQ,MAAM6E,EAAM/E,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,IACtC,OAAO,EACX,GAAID,EAAK3E,QAAQJ,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,IAAK,CAEtC,GADAb,GAAS,GACJY,EAAKgB,WAAW/F,EAAIgF,EAAI,GAAKA,EAAI,GAAI/E,EAAI+E,EAAI,GAAKA,EAAI,IACvD,OAAO,EACX,IAAKD,EAAKgB,WAAW/F,EAAIgF,EAAI,GAAKA,EAAI,GAAI/E,EAAI+E,EAAI,GAAKA,EAAI,IACvD,OAAO,OAEV,IAAKD,EAAKgB,WAAW/F,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,IAC1C,OAAO,EAGf,OAAgB,GAATb,EAEX7E,YAAYyF,EAAM/E,EAAGC,EAAGzB,GACpB,MAAM6V,EAAU9V,EAAG6H,OAAO+I,SAAS,GACnC,IAAInK,EAAM,KACV,IAAK,IAAIQ,EAAI,EAAGA,EAAI6O,EAAQzL,SAAUpD,EAAG,CACrCR,EAAMzG,EAAGsG,MAAMD,KAAKY,GACpB,MAAM8O,EAAKtU,EAAIgF,EAAI,GACbuP,EAAKtU,EAAI+E,EAAI,GACnB,GAAID,EAAK3E,QAAQkU,EAAIC,IACbxP,EAAKgB,WAAW/F,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,IACpC,MAERA,EAAM,KAELA,GACDzG,EAAGsG,MAAM2G,MAAM,6BACnBzG,EAAK9C,QAAQjC,EAAGC,EAAGzB,GACnB,MAAMgW,EAAWjW,EAAGsG,MAAM4P,WAAWC,WAEpC5L,GAAMA,EAAE,IAAM9D,EAAI,IAAM8D,EAAE,IAAM9D,EAAI,KAC/BuO,EAAO7T,KAAKiL,QAAQ4I,KAC1B,IAAK,IAAI/N,EAAI,EAAGA,EAAIjH,EAAGsG,MAAM4P,WAAW7L,SAAUpD,EAAG,CACjD,MAAMoK,EAAIpK,EAAIA,EAAI,EAAI,EAChBmP,GAAKnP,EAAI,GAAK,EACpB,GAAIA,GAAKgP,GAAY5E,GAAK4E,GAAYG,GAAKH,EACvC,SACJ,MAAM1L,EAAIvK,EAAGsG,MAAM4P,WAAWjP,GAC9BT,EAAK9C,QAAQjC,EAAI8I,EAAE,GAAI7I,EAAI6I,EAAE,GAAIyK,GAIrC,OAAO,oDChKR,MAAMqB,GACTtV,YAAYqL,EAAU,IAClBjL,KAAKiL,QAAU,CACX0H,YAAa,IACbC,UAAW,EACXuC,WAAY,IAEhB7K,OAAOqH,OAAO3R,KAAKiL,QAASA,GAEhCrL,OAAOyF,GACH,IAAIuL,EAAQC,EAAQuE,EAAMC,EACtBvP,EAAGC,EAAGqD,EAAG9I,EAAGC,EAChB,MAAMoS,EAAclK,KAAKC,IAAI1I,KAAKiL,QAAQ0H,YAAalK,KAAKuB,MAAMvB,KAAKkF,IAAItI,EAAKvF,MAAOuF,EAAKtF,QAAU,IAChG6S,EAAY5S,KAAKiL,QAAQ2H,UACzBC,EAAWhU,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QAC1CuH,EAAWzI,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QAC1C+S,EAAY,CACd,CAAC,EAAG,GACJ,CAAC,EAAG,IAGR,SAASwC,EAAmBhV,EAAGC,EAAG+E,GAC9B,QAAKD,EAAK7E,MAAMF,EAAGC,OAEd8E,EAAK7E,MAAMF,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,QAE/BD,EAAK7E,MAAMF,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,OAEhCD,EAAKiB,MAAMhG,EAAGC,MAEd8E,EAAKiB,MAAMhG,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,MAE/BD,EAAKiB,MAAMhG,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,QAIvC,SAASiQ,EAAiBjV,EAAGC,EAAG+E,GAC5B,QAAKD,EAAK7E,MAAMF,EAAGC,OAEd8E,EAAK7E,MAAMF,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,QAE/BD,EAAK7E,MAAMF,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,QAEhCD,EAAKiB,MAAMhG,EAAGC,OAEd8E,EAAKiB,MAAMhG,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,OAE/BD,EAAKiB,MAAMhG,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,QA3BvCkQ,EAAkBnQ,EAAMiC,GA+BxB,IAAI7C,EAAQ,EACZ,MAAMsO,EAAMlU,EAAG6H,OAAO+I,SAASpK,EAAKvF,MAAQuF,EAAKtF,QACjD,IAAK+F,EAAI,EAAGA,EAAIiN,EAAI7J,OAAQpD,IAGxB,GAFAxF,EAAImI,KAAKuB,MAAM+I,EAAIjN,GAAKT,EAAKtF,QAC7BQ,EAAIwS,EAAIjN,GAAKT,EAAKtF,QACbsF,EAAKiB,MAAMhG,EAAGC,GACf,IAAK6I,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAErB,IAAI9D,EAAMwN,EAAU1J,GACpB,GAAKkM,EAAmBhV,EAAGC,EAAG+E,GAA9B,CAIA,GAFAS,EAAI6M,EAEAvN,EAAK7E,MAAMF,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,KAC/BD,EAAKzB,WAAWtD,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,KAEpC,IAAKD,EAAK7E,MAAMF,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,KAChCD,EAAK1E,OAAOL,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,IAChC,aAGH,CAAA,IAAID,EAAK7E,MAAMF,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,MACpCD,EAAKzB,WAAWtD,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,IAQpC,SAPA,IAAKD,EAAK7E,MAAMF,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,KAChCD,EAAK1E,OAAOL,EAAIgF,EAAI,GAAI/E,EAAI+E,EAAI,IAChC,SAEJA,EAAMA,EAAI9D,KAAKT,IAAO,EAAIA,IAS9B,IAJA6P,EAAStQ,EAAIgF,EAAI,GACjBuL,EAAStQ,EAAI+E,EAAI,GACjB8P,EAAO9U,EACP+U,EAAO9U,EACFwF,EAAI,EAAGA,EAAI6M,IACZwC,GAAQ9P,EAAI,GACZ+P,GAAQ/P,EAAI,IAERiQ,EAAiBH,EAAMC,EAAM/P,MAJRS,GAQ7B,GAAIA,EAAI6M,IACJ/T,EAAG4I,KAAKuB,mBAAmB6J,EAAUjC,EAAQC,EAAQvJ,GAAU,GAI3DuL,EAASuC,GAAMC,GAAQ1C,GACvBE,EAASuC,GAAMC,GAAQ,KAAO,CAY9B,KAAOD,IAASxE,GAAUyE,IAASxE,GAC3BxL,EAAKrE,UAAUoU,EAAMC,KACrBhQ,EAAK9C,QAAQ6S,EAAMC,EAAMnJ,GACzB5E,EAAS8N,GAAMC,GAAQ,GAE3BD,GAAQ9P,EAAI,GACZ+P,GAAQ/P,EAAI,GAGhB,MAAMxG,EAAOD,EAAG6H,OAAO8H,OAAOxO,KAAKiL,QAAQkK,YACrCM,EACAvJ,EACN7G,EAAK9C,QAAQjC,EAAGC,EAAGzB,KACjB2F,EACF,QAQpB,OAFA5F,EAAGqB,KAAKE,KAAKyS,GACbhU,EAAGqB,KAAKE,KAAKkH,GACN7C,+DAIR,SAAkBY,EAAM/C,EAAO,IAElC,OADe,IAAI4S,GAAW5S,GAChByJ,OAAO1G,MCvIlB,MAAMqQ,GACT9V,YAAYqL,EAAU,IAClB,IAAIvM,EAAIC,EACRqB,KAAK2V,KAAO,EACZ3V,KAAKuL,MAAQ,GACbvL,KAAKmJ,MAAQ,CAAEqF,OAAQ,IACvBxO,KAAK8Q,MAAQ,CAAEtC,OAAQ,IACvBxO,KAAK4V,MAAQ,GACb5V,KAAK6V,MAAQ,GACb7V,KAAK8V,QAAU,GACf9V,KAAK+V,OAAS,GACd/V,KAAKgW,UAAW,EAChBhW,KAAKiW,SAAW,EAAE,GAAI,GACtBjW,KAAKkW,OAAS,EAAE,GAAI,GACpBlW,KAAK2V,KAAO1K,EAAQ0K,MAAQ,EAC5B9W,EAAGsG,MAAMgR,WAAWnW,KAAKuL,MAAON,EAAQM,QAElB,IAAlBN,EAAQ9B,MACR8B,EAAQ9B,MAAQ,CAAEqF,OAAQ,IAEH,IAAlBvD,EAAQ9B,QACb8B,EAAQ9B,MAAQ,CAAEqF,OAAQ,MAE9B3P,EAAGsG,MAAMgR,WAAWnW,KAAKmJ,MAAO8B,EAAQ9B,QAElB,IAAlB8B,EAAQ6F,MACR7F,EAAQ6F,MAAQ,CAAEtC,OAAQ,IAEH,IAAlBvD,EAAQ6F,QACb7F,EAAQ6F,MAAQ,IAEpBjS,EAAGsG,MAAMgR,WAAWnW,KAAK8Q,MAAO7F,EAAQ6F,QAElB,IAAlB7F,EAAQ2K,MACR5V,KAAK4V,MAAQ,OAGS,IAAlB3K,EAAQ2K,QACR3K,EAAQ2K,MAAQ,IACpB3K,EAAQ2K,MAAQ3K,EAAQ2K,OAAS,GACjC3K,EAAQ2K,MAAMT,WAC0B,QAAnCzW,EAAKuM,EAAQ2K,MAAMT,kBAA+B,IAAPzW,EAAgBA,EAA8B,QAAxBC,EAAKsM,EAAQ9B,aAA0B,IAAPxK,OAAgB,EAASA,EAAG6P,OAClI3P,EAAGsG,MAAMgR,WAAWnW,KAAK4V,MAAO3K,EAAQ2K,SAGtB,IAAlB3K,EAAQ4K,MACR7V,KAAK6V,MAAQ,OAGS,IAAlB5K,EAAQ4K,QACR5K,EAAQ4K,MAAQ,IACpBhX,EAAGsG,MAAMgR,WAAWnW,KAAK6V,MAAO5K,EAAQ4K,SAGpB,IAApB5K,EAAQ6K,QACR9V,KAAK8V,QAAU,OAGS,IAApB7K,EAAQ6K,UACR7K,EAAQ6K,QAAU,IACtBjX,EAAGsG,MAAMgR,WAAWnW,KAAK8V,QAAS7K,EAAQ6K,WAGvB,IAAnB7K,EAAQ8K,OACR/V,KAAK+V,OAAS,OAGS,IAAnB9K,EAAQ8K,SACR9K,EAAQ8K,OAAS,IACrBlX,EAAGsG,MAAMgR,WAAWnW,KAAK+V,OAAQ9K,EAAQ8K,SAE7C/V,KAAKiW,SAAWhL,EAAQgL,UAAY,EAAE,GAAI,GAC1CjW,KAAKkW,OAASjL,EAAQiL,QAAU,EAAE,GAAI,GAE1CtW,UAAUE,EAAOC,GACb,OAAO,IAAIqW,EAActW,EAAOC,GAEpCH,UAAUyW,GACN,GAAmB,GAAfA,EAAKnN,QAAemN,EAAK,aAAcxX,EAAG2C,IAAI8U,IAAK,CACnD,MAAM9U,EAAM6U,EAAK,GACjBrW,KAAKqF,KAAO,IAAIkR,EAAa/U,GAEjC,GAAI6U,EAAKnN,OAAS,EAAG,CACjB,MAAMpJ,EAAQuW,EAAK,GACbtW,EAASsW,EAAK,GACpBrW,KAAKqF,KAAO,IAAI+Q,EAActW,EAAOC,GAEzC,MAAMoL,EAASnL,KAAKwW,QAAQxW,KAAKqF,MACjC,GAAIgR,EAAKnN,OAAS,EAAG,CACjB,MAAMpJ,EAAQuW,EAAK,GACbtW,EAASsW,EAAK,GACdI,EAAKJ,EAAK,GAChBxX,EAAGsG,MAAM8B,QAAQnH,EAAOC,GAAQ,CAACO,EAAGC,KAChC,MAAMmW,EAAI1W,KAAKqF,KAAK+B,aAAa9G,EAAGC,GAChCmW,GACAD,EAAGnW,EAAGC,EAAGmW,MAIrB,OADA1W,KAAKqF,KAAKjF,OACH+K,EAEXvL,QAAQyF,GACArF,KAAKiW,SAAS,GAAK,GAAKjW,KAAKiW,SAAS,GAAK,IAC3CjW,KAAKiW,SAAS,GAAKxN,KAAKuB,MAAM3E,EAAKvF,MAAQ,GAC3CE,KAAKiW,SAAS,GAAK5Q,EAAKtF,OAAS,GAErCC,KAAKwT,MAAMnO,GACX,IAAI+L,EAAQ,GACZ,OAASA,IACDpR,KAAK2W,aAAatR,KAG1B,IAAK+L,EACD,MAAM,IAAI9P,MAAM,+BACpB,IAAIsV,EAAQ,EACZ,KAAOA,EAAQ,IACP5W,KAAK6W,QAAQxR,GACbuR,EAAQ,IAGNA,EAYV,OATI5W,KAAK4V,OACL5V,KAAK8W,SAASzR,EAAMrF,KAAK4V,OACzB5V,KAAK6V,OACL7V,KAAK+W,SAAS1R,EAAMrF,KAAK6V,OACzB7V,KAAK8V,SACL9V,KAAKgX,WAAW3R,EAAMrF,KAAK8V,SAC3B9V,KAAK+V,QACL/V,KAAKiX,UAAU5R,EAAMrF,KAAK+V,QAC9B/V,KAAKkX,OAAO7R,IACL,EAEXzF,MAAMyF,GACErF,KAAK2V,MACL9W,EAAG6H,OAAOiP,KAAK3V,KAAK2V,MAExBtQ,EAAKzC,QACL5C,KAAK+S,IAAMlU,EAAG6H,OAAO+I,SAASpK,EAAKvF,MAAQuF,EAAKtF,QAEpDH,UAAUiF,GACN,IAAKA,EACD,MAAM,IAAIvD,MAAM,mBACpB,GAAIuD,aAAcsS,EACd,OAAOtS,EACX,GAAkB,iBAAPA,EAAiB,CACxB,MAAMuS,EAASC,EAAWxS,GAC1B,IAAKuS,EACD,MAAM,IAAI9V,MAAM,2BAA6BuD,GAEjD,OAAOuS,EAEX,OAAO,IAAIE,EAAgBzS,GAE/BjF,aAAayF,GACT,MAAMkS,EAAWvX,KAAKwX,UAAUnS,EAAKvF,MAAOuF,EAAKtF,QACjD,IACI8L,EADS7L,KAAKyX,UAAUzX,KAAKuL,MAAMpD,OAASnI,KAAKuL,MAAM6L,QAAU,WACnDrL,OAAOwL,GAOzB,OANI1L,IACC7L,KAAK0X,iBAAiBrS,EAAMkS,EAAU1L,EAAM7L,KAAKiW,YAClDpK,EAAO,MAEX0L,EAASnX,OAEFyL,EAEXjM,QAAQyF,GACJ,MAAMkS,EAAWvX,KAAKwX,UAAUnS,EAAKvF,MAAOuF,EAAKtF,QACjD,IACI8L,EADS7L,KAAKyX,UAAUzX,KAAKuL,MAAM6L,QAAU,WAC/BrL,OAAOwL,GAEzB,GAAIvX,KAAK8Q,MAAMtC,OAAQ,CACnB,IAAI1E,EAAO6N,EAAS3X,KAAK8Q,MAAOyG,EAAU1L,EAAK1C,OAC3CW,IACA+B,EAAK/B,KAAOA,GAOpB,OAJI+B,IAAS7L,KAAK4X,YAAYvS,EAAMkS,EAAU1L,KAC1CA,EAAO,MAEX0L,EAASnX,OACFyL,EAEXjM,YAAYyF,EAAMkS,EAAU1L,GAExB,MAAMrF,EAAYqF,EAAK/B,KAAO+B,EAAK/B,KAAKX,MAAQ0C,EAAK1C,MAErD,IAAK,IAAIrD,EAAI,EAAGA,EAAI9F,KAAK+S,IAAI7J,OAAQpD,IAAK,CACtC,MAAMxF,EAAImI,KAAKuB,MAAMhK,KAAK+S,IAAIjN,GAAKT,EAAKtF,QAClCQ,EAAIP,KAAK+S,IAAIjN,GAAKT,EAAKtF,OAC7B,IAAKsF,EAAKrE,UAAUV,EAAGC,GACnB,SACJ,MAAM+E,EAAMuS,EAAyBxS,EAAM/E,EAAGC,GAC9C,GAAI+E,GAAOzG,EAAGsG,MAAMS,aAAc,CAC9B,MAAMkS,GAAUxS,EAAM,GAAK,EACrBqK,EAAOnJ,EAAUsR,GACvB,IAAKnI,EACD,SACJ,MAAM5I,EAAUzG,EAAIqP,EAAK,GACnB3I,EAAUzG,EAAIoP,EAAK,GACzB,IAAgB,GAAZA,EAAK,IACL3P,KAAK+X,YAAY1S,EAAMkS,EAAUxQ,EAASC,GAO1C,OALAgR,EAAc3S,EAAMkS,EAAUxQ,EAASC,GACvChH,KAAKiY,YAAY5S,EAAMwG,EAAMvL,EAAGC,EAAGuX,GAGnCjM,EAAK3B,UAAUnD,EAASC,IACjB,GAInB,OAAO,EAEXpH,iBAAiByF,EAAMkS,EAAU1L,EAAMqM,GACnC,MAAO5X,EAAGC,GAAK2X,EACT1R,EAAYqF,EAAK/B,KAAO+B,EAAK/B,KAAKX,MAAQ0C,EAAK1C,MAC/CqG,EAAO3Q,EAAG6H,OAAO+I,SAAS,GAEhC,IAAK,IAAInK,KAAOkK,EAAM,CAClB,MACMG,EAAOnJ,GADGlB,EAAM,GAAK,GAE3B,IAAKqK,IAAoB,GAAZA,EAAK,GACd,SACJ,MAAMwI,EAAO7X,EAAIqP,EAAK,GAChByI,EAAO7X,EAAIoP,EAAK,GACtB,GAAI3P,KAAK+X,YAAY1S,EAAMkS,EAAUY,EAAMC,GAYvC,OATAJ,EAAc3S,EAAMkS,EAAUY,EAAMC,GAEpCvM,EAAK3B,UAAUiO,EAAMC,IAOd,EAGf,OAAO,EAEXxY,YAAY4B,EAAK6W,EAAUC,EAAaC,GACpC,IAAIC,EAAOC,EAAOC,EAAOC,EAAO7S,EAAGC,EAEnC,IAAKyS,EAAQ,EAAGA,EAAQH,EAASvY,MAAO0Y,IACpC,IAAKC,EAAQ,EAAGA,EAAQJ,EAAStY,OAAQ0Y,IACrC,GAAIJ,EAAS/R,MAAMkS,EAAOC,GAGtB,IAFAC,EAAQF,EAAQF,EAChBK,EAAQF,EAAQF,EACXzS,EAAI4S,EAAQ,EAAG5S,GAAK4S,EAAQ,EAAG5S,IAChC,IAAKC,EAAI4S,EAAQ,EAAG5S,GAAK4S,EAAQ,EAAG5S,IAChC,IAAKvE,EAAIhB,MAAMsF,EAAGC,IACdvE,EAAIf,aAAaqF,EAAGC,KACnBvE,EAAIR,UAAU8E,EAAGC,GAElB,OAAO,EAQ/B,OAAO,EAEXnG,YAAY4B,EAAKqK,EAAMvL,EAAGC,EAAG+E,GACzB,MAAMhD,EAAOtC,KAAKmJ,MAClB,IAAIxI,GAAS,EACT2B,EAAKkM,QAAU3P,EAAG6H,OAAO8H,OAAOlM,EAAKkM,UACrC7N,GAAS,GAEb,MAAM7B,EAAO6B,EAAS2B,EAAKxD,MAAQ2W,EAAYvJ,EAG/C,GAFA1K,EAAIe,QAAQjC,EAAGC,EAAGzB,GAEb+M,EAAK/B,MAAU+B,EAAK/B,KAAKhK,MAAQ,GAAM+L,EAAK/B,KAAKxE,MAAQA,EAG9D,GAAIA,IAAQzG,EAAGsG,MAAMkE,IAAM/D,IAAQzG,EAAGsG,MAAMmE,KAAM,CAC9C,IAAIsP,GAAe,EACf5S,EAAI,EACR,KAAO4S,GACHA,GAAe,EACXpX,EAAIR,UAAUV,EAAI0F,EAAGzF,IACjBiB,EAAI8E,MAAMhG,EAAI0F,EAAGzF,EAAI,IAAMiB,EAAI8E,MAAMhG,EAAI0F,EAAGzF,EAAI,KAChDiB,EAAIe,QAAQjC,EAAI0F,EAAGzF,EAAGzB,GACtB8Z,GAAe,GAGnBpX,EAAIR,UAAUV,EAAI0F,EAAGzF,IACjBiB,EAAI8E,MAAMhG,EAAI0F,EAAGzF,EAAI,IAAMiB,EAAI8E,MAAMhG,EAAI0F,EAAGzF,EAAI,KAChDiB,EAAIe,QAAQjC,EAAI0F,EAAGzF,EAAGzB,GACtB8Z,GAAe,KAGrB5S,MAGL,CACD,IAAI4S,GAAe,EACf5S,EAAI,EACR,KAAO4S,GACHA,GAAe,EACXpX,EAAIR,UAAUV,EAAGC,EAAIyF,IACjBxE,EAAI8E,MAAMhG,EAAI,EAAGC,EAAIyF,IAAMxE,EAAI8E,MAAMhG,EAAI,EAAGC,EAAIyF,KAChDxE,EAAIe,QAAQjC,EAAGC,EAAIyF,EAAGlH,GACtB8Z,GAAe,GAGnBpX,EAAIR,UAAUV,EAAGC,EAAIyF,IACjBxE,EAAI8E,MAAMhG,EAAI,EAAGC,EAAIyF,IAAMxE,EAAI8E,MAAMhG,EAAI,EAAGC,EAAIyF,KAChDxE,EAAIe,QAAQjC,EAAGC,EAAIyF,EAAGlH,GACtB8Z,GAAe,KAGrB5S,GAIdpG,SAASyF,EAAM/C,GAEX,OADe,IAAIuW,GAAgBvW,GACrByJ,OAAO1G,GAEzBzF,SAASyF,EAAM/C,GAEX,OADe,IAAIwW,GAAWxW,GAChByJ,OAAO1G,GAEzBzF,WAAWyF,EAAM/C,GAEb,OADe,IAAIyW,GAAezW,GACpByJ,OAAO1G,GAEzBzF,UAAUyF,EAAM/C,GAEZ,OADe,IAAI0W,GAAc1W,GACnByJ,OAAO1G,GAEzBzF,OAAOyF,GACHrF,KAAKiZ,wBAAwB5T,GAC7BrF,KAAKkZ,aAAa7T,GAClBrF,KAAKmZ,aAAa9T,GAEtBzF,wBAAwByF,GACpB,IAAIS,EAAGC,EAAGC,EAAGoT,EAAIC,EACbC,EACJ,GAEI,IADAA,GAAwB,EACnBxT,EAAI,EAAGA,EAAIT,EAAKvF,MAAQ,EAAGgG,IAC5B,IAAKC,EAAI,EAAGA,EAAIV,EAAKtF,OAAS,EAAGgG,IAC7B,IAAKC,EAAI,EAAGA,GAAK,EAAGA,KACXX,EAAKtC,WAAW+C,EAAIE,EAAGD,IACxBV,EAAKtC,WAAW+C,GAAK,EAAIE,GAAID,IAC7BV,EAAKkU,eAAezT,GAAK,EAAIE,GAAID,IACjCV,EAAKtC,WAAW+C,EAAIE,EAAGD,EAAI,IAC3BV,EAAKkU,eAAezT,EAAIE,EAAGD,EAAI,KAC9BV,EAAKtC,WAAW+C,GAAK,EAAIE,GAAID,EAAI,KAC9BlH,EAAG6H,OAAO8H,OAAO,KACjB4K,EAAKtT,GAAK,EAAIE,GACdqT,EAAKtT,IAGLqT,EAAKtT,EAAIE,EACTqT,EAAKtT,EAAI,GAEbuT,GAAwB,EACxBjU,EAAK9C,QAAQ6W,EAAIC,EAAInN,UAKP,GAAzBoN,GAEb1Z,aAAayF,GACTxG,EAAGsG,MAAM8B,QAAQ5B,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAACO,EAAGC,KACtC8E,EAAK5E,aAAaH,EAAGC,IAGrB8E,EAAK1E,OAAOL,EAAGC,MAGd8E,EAAK3E,QAAQJ,EAAI,EAAGC,IAAM8E,EAAK3E,QAAQJ,EAAI,EAAGC,MAC1C8E,EAAK3E,QAAQJ,EAAGC,EAAI,IAAM8E,EAAK3E,QAAQJ,EAAGC,EAAI,MAKzC8E,EAAKlE,cAAcb,EAAI,EAAGC,GAAK,EAAI,IACxC8E,EAAKlE,cAAcb,EAAI,EAAGC,GAAK,EAAI,IACnC8E,EAAKlE,cAAcb,EAAGC,EAAI,GAAK,EAAI,IACnC8E,EAAKlE,cAAcb,EAAGC,EAAI,GAAK,EAAI,IACpC,IANA8E,EAAK9C,QAAQjC,EAAGC,EAAG2L,MAcnCtM,aAAayF,GACT,MAAMmU,EAAexZ,KAAKgW,SAAWlC,EAAmB2F,EACxD5a,EAAGsG,MAAM8B,QAAQ5B,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAACO,EAAGC,KACtC8E,EAAKrE,UAAUV,EAAGC,KACd8E,EAAK5E,aAAaH,EAAGC,GACrB8E,EAAK9C,QAAQjC,EAAGC,EAAGiZ,GAGnBnU,EAAK9C,QAAQjC,EAAGC,EAAGkZ,QC3ZvC,MAAMC,GAAK7a,EAAGkD,KAAK4X,GACZ,IAAIC,IACX,SAAWA,GAKPA,EAAUA,EAAwC,6BAAIF,GAAG,IAAM,+BAC/DE,EAAUA,EAA8B,mBAAIF,GAAG,IAAM,qBACrDE,EAAUA,EAAyB,cAAIF,GAAG,IAAM,gBAChDE,EAAUA,EAA8B,mBAAIF,GAAG,IAAM,qBAErDE,EAAUA,EAA8B,mBAAIF,GAAG,IAAM,qBACrDE,EAAUA,EAAgC,qBAAIF,GAAG,IAAM,uBACvDE,EAAUA,EAA0B,eAAIF,GAAG,KAAO,iBAClDE,EAAUA,EAA8B,mBAAIF,GAAG,KAAO,qBACtDE,EAAUA,EAAgC,qBAAIF,GAAG,KAAO,uBACxDE,EAAUA,EAAyC,8BAAIF,GAAG,KAAO,gCACjEE,EAAUA,EAAgC,qBAAIF,GAAG,KAAO,uBACxDE,EAAUA,EAA+B,oBAAIF,GAAG,KAAO,sBACvDE,EAAUA,EAA8B,mBAAIF,GAAG,KAAO,qBACtDE,EAAUA,EAA+B,oBAAIF,GAAG,KAAO,sBACvDE,EAAUA,EAA0B,eAAIF,GAAG,IAAM,iBACjDE,EAAUA,EAA8B,mBAAIF,GAAG,IAAM,qBACrDE,EAAUA,EAAiC,sBAAIF,GAAG,IAAM,wBACxDE,EAAUA,EAAyB,cAAIF,GAAG,KAAO,gBACjDE,EAAUA,EAA0B,eAAIF,GAAG,KAAO,iBAClDE,EAAUA,EAA4B,iBAAIF,GAAG,KAAO,mBAEpDE,EAAUA,EAA6B,kBAAIF,GAAG,KAAO,oBACrDE,EAAUA,EAAsC,2BAAIF,GAAG,KAAO,6BAC9DE,EAAUA,EAAuC,4BAAIF,GAAG,KAAO,8BAC/DE,EAAUA,EAA0B,eAAIF,GAAG,KAAO,iBAClDE,EAAUA,EAA6B,kBAAIF,GAAG,KAAO,oBACrDE,EAAUA,EAAqC,0BAAIF,GAAG,KAAO,4BAC7DE,EAAUA,EAA2B,gBAAIF,GAAG,KAAO,kBACnDE,EAAUA,EAA6B,kBAAIF,GAAG,KAAO,oBAlCzD,CAmCGE,KAAcA,GAAY,KACtB,MAAMC,GACTja,YAAYka,EAAM,IASd,GARA9Z,KAAKlB,KAAO,EACZkB,KAAKyB,MAAQ,EACbzB,KAAK+Z,IAAM,EACX/Z,KAAK2G,KAAO,KACZ3G,KAAKga,MAAQ,KACbha,KAAK2E,OAAS,KACd3E,KAAKwO,OAAS,EACdxO,KAAK6E,GAAK,MACNiV,EAAIhb,KACJ,GAAwB,iBAAbgb,EAAIhb,KAAmB,CAC9B,MAAM4X,EAAI7X,EAAGC,KAAKmB,MAAM6Z,EAAIhb,MAC5B,IAAK4X,EACD,MAAM,IAAIpV,MAAM,wBAA0BwY,EAAIhb,MAElDkB,KAAKlB,KAAO4X,EAAE1X,WAGdgB,KAAKlB,KAAOgb,EAAIhb,KAGpBgb,EAAIrY,QACJzB,KAAKyB,MAAQ5C,EAAGkD,KAAKkY,KAAKL,GAAWE,EAAIrY,QAEzCqY,EAAIC,MACJ/Z,KAAK+Z,IAAMD,EAAIC,KAEnB/Z,KAAKyE,MAAQ5F,EAAGiM,MAAMC,KAAK+O,EAAIrV,OAAS,GACxCzE,KAAK2G,KAAOmT,EAAInT,MAAQ,KACxB3G,KAAKga,MAAQF,EAAIE,OAAS,KACtBF,EAAInV,SACJ3E,KAAK2E,OAAS9F,EAAG8F,OAAOoG,KAAK+O,EAAInV,SAGzC/E,gBAAgBsa,EAASC,EAAW7Z,EAAGC,EAAG6Z,GACtC,MAAM/U,EAAO6U,EAAQ7U,KAIrB,GAAIrF,KAAKyB,MAAQmY,GAAUS,mBACvBxb,EAAGsG,MAAMmV,SAASha,EAAGC,GAAG,CAACuF,EAAGC,IAAMV,EAAK7E,MAAMsF,EAAGC,IAAMV,EAAKzB,WAAWkC,EAAGC,KAAM,EAC/E,OAAO,EAGX,GAAI/F,KAAKyB,MAAQmY,GAAUW,4BACjB,GAALja,GAAUA,GAAK+E,EAAKvF,MAAQ,GAAU,GAALS,GAAUA,GAAK8E,EAAKtF,OAAS,GAC/D,OAAO,EAIX,GAAIC,KAAKyB,MAAQmY,GAAUY,mBACvB,OAAOla,GAAK4Z,EAAQrR,SAAWtI,GAAK2Z,EAAQpR,QAE3C,GAAIqR,EAAUrV,QACfxE,GAAK4Z,EAAQrR,SACbtI,GAAK2Z,EAAQpR,QACb,OAAO,EAGX,GAAIoR,EAAQO,SAASna,GAAGC,GACpB,OAAO,EAGX,GAAIP,KAAKyB,OACJmY,GAAUc,qBACPd,GAAUe,iCACbT,EAAQU,QAAQta,GAAGC,GACpB,OAAO,EAGX,IAAIsa,EAAW,IAef,GAdIxV,EAAKpE,OAAOX,EAAGC,GAEf1B,EAAGsG,MAAM2V,aAAaxa,EAAGC,GAAG,CAACuF,EAAGC,KACvBmU,EAAQtR,YAAYpI,MAAMsF,EAAGC,KAE7BV,EAAKlE,cAAc2E,EAAGC,IACvB8U,EAAWX,EAAQtR,YAAY9C,GAAGC,GAAK,IACvC8U,EAAWX,EAAQtR,YAAY9C,GAAGC,GAAK,MAE5C,GAGH8U,EAAWX,EAAQtR,YAAYtI,GAAGC,GAElCsa,EAAWT,EAAc,IACzBS,EAAWT,EAAc,GAEzB,OAAO,EAEX,GAAIpa,KAAKyB,MAAQmY,GAAUmB,kBAAmB,CAE1C,MAAMC,EAAc3V,EAAK4V,WAAW3a,EAAGC,GACvC,IAAK2Z,EAAQgB,SAAS5a,GAAGC,MACnBya,GAAeA,GAAed,EAAQiB,gBACxC9V,EAAKpE,OAAOX,EAAGC,GAAI,CACnB,IAAI6a,GAAK,EAcT,OAZAvc,EAAGsG,MAAM2V,aAAaxa,EAAGC,GAAG,CAACiF,EAAMC,KAC3BJ,EAAK7E,MAAMgF,EAAMC,KACfyU,EAAQgB,SAAS1V,GAAMC,KACnBD,GAAQ0U,EAAQrR,SACdpD,GAAQyU,EAAQpR,UACnB9I,KAAKyB,MACFmY,GAAUyB,6BACThW,EAAKlE,cAAcqE,EAAMC,KACzBJ,EAAK4V,WAAWzV,EAAMC,MAC/B2V,GAAK,MAGNA,EAEX,OAAO,EAEN,OAAI/V,EAAKpE,OAAOX,EAAGC,KAIfP,KAAKyB,MAAQmY,GAAUyB,6BACvBrb,KAAK2G,MAAQtB,EAAKiW,YAAYhb,EAAGC,IAClC8E,EAAKpD,YAAY3B,EAAGC,EAAG1B,EAAG2C,IAAIC,MAAMC,KAAK6Z,cACrC1c,EAAG2C,IAAIC,MAAMC,KAAK8Z,WAClB3c,EAAG2C,IAAIC,MAAMC,KAAKqD,kBAOrBmV,EAAQgB,SAAS5a,GAAGC,IAKjCX,kBAAkBsa,EAAS5Z,EAAGC,EAAGkb,GAC7B,MAAMC,EAAgB1b,KAAK+Z,IAC3B,IAAItV,EAAQ,EACZ,IAAK,IAAIqB,EAAIxF,EAAIob,EAAgB,EAAG5V,GAAKxF,EAAIob,EAAgB,EAAG5V,IAC5D,IAAK,IAAIC,EAAIxF,EAAImb,EAAgB,EAAG3V,GAAKxF,EAAImb,EAAgB,EAAG3V,IACxDmU,EAAQ7U,KAAK7E,MAAMsF,EAAGC,KAClB0V,EAAW3V,GAAGC,KACd0V,EAAW3V,GAAGC,GAAK,IACjBtB,GAENyV,EAAQO,SAAS3U,GAAGC,GAAK,GAIrC,OAAOtB,EAEXkX,yBACI,SAAU3b,KAAKyB,MACXmY,GAAUgC,eACThC,GAAUY,oBAEnBqB,oBACI,SAAU7b,KAAKyB,MAAQmY,GAAUY,oBAErC5a,cAAcsa,GACV,MAAME,EAAgB,CAAC,EAAG,KAO1B,OANIpa,KAAKyB,MAAQmY,GAAUkC,iBACvB1B,EAAc,GAAKF,EAAQ6B,YAE3B/b,KAAKyB,MAAQmY,GAAUoC,qBACvB5B,EAAc,GAAKF,EAAQ+B,YAExB7B,EAEXxa,cAAcsa,GACV,GAAIla,KAAKyB,OACJmY,GAAUc,qBACPd,GAAUe,+BAAgC,CAC9C,MAAMtV,EAAO6U,EAAQ7U,KACrB,GAAIrF,KAAKyB,MAAQmY,GAAUe,8BAA+B,CAC1C,IAAI9b,EAAGqd,IAAIC,IAAI,CACvBC,UAAW,CAAC9b,EAAGC,IACJ8E,EAAKlE,cAAcb,EAAGC,GAEjCC,MAAO,CAACF,EAAGC,IACA8E,EAAK7E,MAAMF,EAAGC,KAGzB8b,UAAUnC,EAAQrR,QAASqR,EAAQpR,QAAS,IAAI,CAACxI,EAAGC,KACpD2Z,EAAQU,QAAQta,GAAGC,GAAK,SAG3B,CACW,IAAI1B,EAAGqd,IAAIC,IAAI,CAGvBC,UAAW,CAAC9b,EAAGC,IACH8E,EAAKlE,cAAcb,EAAGC,IAAM8E,EAAKrC,aAAa1C,EAAGC,GAE7DC,MAAO,CAACF,EAAGC,IACA8E,EAAK7E,MAAMF,EAAGC,KAGzB8b,UAAUnC,EAAQrR,QAASqR,EAAQpR,QAAS,IAAI,CAACxI,EAAGC,KACpD2Z,EAAQU,QAAQta,GAAGC,GAAK,KAGhC2Z,EAAQU,QAAQV,EAAQrR,SAASqR,EAAQpR,SAAW,GAG5DlJ,eAAe6b,EAAYvB,EAASC,EAAWC,GAC3C,IAAI3V,EAAQ,EAUZ,OATAgX,EAAWlU,QAAO,CAACC,EAAI1B,EAAGC,IAClB/F,KAAKsc,gBAAgBpC,EAASC,EAAWrU,EAAGC,EAAGqU,IAC/C3V,IACO,GAGA,IAGRA,EAEX7E,MAAMsa,EAASC,GACX,IAAIoC,EAAgB,EAChBC,EAAW,EACf,MAAMnX,EAAO6U,EAAQ7U,KACfoW,EAAa5c,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QAE5Cqa,EAAgBpa,KAAKoa,cAAcF,GACzCla,KAAKyc,cAAcvC,GACnB,EAAG,CAGC,IAAIwC,EAAsB1c,KAAK2c,eAAelB,EAAYvB,EAASC,EAAWC,GAI9E,GAHKpa,KAAK2b,qBACNY,EAAgBvc,KAAKyE,MAAMwH,UAE1ByQ,GAAuBA,EAAsB1c,KAAKyE,MAAMmY,GAEzD,OADAC,QAAQC,KAAK,+CAAgDJ,EAAqB1c,KAAKyE,MAAMmY,IACtF,EAEX,IAAItc,EAAI,EAAGC,EAAI,EACf,IAAKic,EAAW,GAAIxc,KAAK2b,oBAAsBa,EAAWD,IACtDG,EAAsB,GAAI,CAEtB1c,KAAK6b,eAELvb,EAAI4Z,EAAQrR,QACZtI,EAAI2Z,EAAQpR,UAKXxI,EAAGC,GAAK1B,EAAG6H,OAAO4N,YAAYmH,EAAW3b,MAAO2b,EAAW1b,QAAQ,CAACO,EAAGC,IAAMkb,EAAWnb,GAAGC,GAAK,IAGrGkb,EAAWnb,GAAGC,GAAK,EACnBmc,IACA,IAAIK,GAAc,EACdC,GAAmB,EAMvB,GAJIhd,KAAK2E,SACLoY,EAAc1X,EAAK4X,WAAWjd,KAAK2E,OAAQrE,EAAGC,IAG9Cwc,GAAe/c,KAAKlB,KAAM,CAC1B,IAAIA,EAAOD,EAAGC,KAAKC,IAAIiB,KAAKlB,MAAME,MAClC,GAAKF,GAIA,KAAMkB,KAAKyB,MAAQmY,GAAUsD,sBAC7B7X,EAAK8X,eAAere,IACjBkB,KAAKyB,MAAQmY,GAAUwD,sBAAuB,CAElD,MAAMC,EAAcxe,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QACnDsd,EAAY/c,GAAGC,GAAK,EACpByc,GAAoBM,EAAqBjY,EAAMgY,GAC/Cxe,EAAGqB,KAAKE,KAAKid,SAVbL,GAAmB,EACnBH,QAAQU,MAAM,uBAAwBvd,KAAKlB,KAAMwB,EAAGC,GAWpDyc,GACA3X,EAAK9C,QAAQjC,EAAGC,EAAGzB,GAKvBie,GAAeC,IACfN,GAAuB1c,KAAKwd,kBAAkBtD,EAAS5Z,EAAGC,EAAGkb,GAC7De,KAGAO,GAAeC,IAGT7C,EAAU1Y,MAAQF,GAAMkc,qBAC1BpY,EAAKqY,WAAWpd,EAAGC,EAAG2Z,EAAQiB,cAAehB,EAAUrV,QAGvD9E,KAAKyB,MAAQmY,GAAU+D,gBACvBtY,EAAKlD,YAAY7B,EAAGC,EAAG1B,EAAG2C,IAAIC,MAAMC,KAAKhC,qBA8BhDM,KAAKyB,MAAQmY,GAAUgE,6BAC5BpB,GAAYxc,KAAKyE,MAAMmY,IAI3B,OADA/d,EAAGqB,KAAKE,KAAKqb,GACNe,GChXf,MAAM9C,GAAK7a,EAAGkD,KAAK4X,GACZ,IAAIpY,IACX,SAAWA,GACPA,EAAMA,EAAe,QAAImY,GAAG,KAAO,UACnCnY,EAAMA,EAAoB,aAAImY,GAAG,IAAM,eACvCnY,EAAMA,EAAiB,UAAImY,GAAG,IAAM,YACpCnY,EAAMA,EAAqB,cAAImY,GAAG,IAAM,gBACxCnY,EAAMA,EAAiC,0BAAImY,GAAG,IAAM,4BACpDnY,EAAMA,EAAyB,kBAAImY,GAAG,IAAM,oBAC5CnY,EAAMA,EAAwB,iBAAImY,GAAG,IAAM,mBAC3CnY,EAAMA,EAA8B,uBAAImY,GAAG,IAAM,yBACjDnY,EAAMA,EAAsB,eAAImY,GAAG,IAAM,iBACzCnY,EAAMA,EAAwB,iBAAImY,GAAG,IAAM,mBAC3CnY,EAAMA,EAA4B,qBAAImY,GAAG,IAAM,uBAC/CnY,EAAMA,EAA4B,qBAAImY,GAAG,KAAO,uBAChDnY,EAAMA,EAA4B,qBAAImY,GAAG,KAAO,uBAChDnY,EAAMA,EAA2B,oBAAImY,GAAG,KAAO,sBAC/CnY,EAAMA,EAA2B,oBAAImY,GAAG,KAAO,sBAfnD,CAgBGnY,KAAUA,GAAQ,KACd,MAAMsc,GACTje,YAAY0C,EAAO,IAYf,GAXAtC,KAAK8d,KAAO,GACZ9d,KAAKyB,MAAQ,EACbzB,KAAK+d,MAAQ,GACb/d,KAAK6E,GAAK,MACNvC,EAAKwb,OACoB,iBAAdxb,EAAKwb,OACZxb,EAAKwb,KAAOxb,EAAKwb,KAAKE,MAAM,QAAQxc,KAAKT,GAAMA,EAAEkd,UAErDje,KAAK8d,KAAOxb,EAAKwb,MAErB9d,KAAKke,UAAYrf,EAAGqf,UAAUnT,KAAKzI,EAAK4b,WAAa,KACjD5b,EAAK6b,KAAM,CACX,GAAyB,iBAAd7b,EAAK6b,KAAmB,CAC/B,MAAMC,EAAQ9b,EAAK6b,KACdH,MAAM,KACNxc,KAAKT,GAAMA,EAAEkd,SACbzc,KAAKT,GAAMiQ,OAAOC,SAASlQ,KAChC,GAAqB,IAAjBqd,EAAMlV,OACN,MAAM,IAAI5H,MAAM,yCACpBtB,KAAKme,KAAOtf,EAAGiM,MAAMC,KAAK,CAACqT,EAAM,GAAIA,EAAM,SAE1C,CAAA,IAAIxT,MAAMC,QAAQvI,EAAK6b,MAMxB,MAAM,IAAI7c,MAAM,iCALhB,GAAyB,IAArBgB,EAAK6b,KAAKjV,OACV,MAAM,IAAI5H,MAAM,qCACpBtB,KAAKme,KAAOtf,EAAGiM,MAAMC,KAAK,CAACzI,EAAK6b,KAAK,GAAI7b,EAAK6b,KAAK,KAKvD,GAAIne,KAAKme,KAAKvB,GAAK5c,KAAKme,KAAKzO,GACzB,MAAM,IAAIpO,MAAM,+CAGpBtB,KAAKme,KAAOtf,EAAGiM,MAAMC,KAAK,CAAC,EAAG,SAE9BzI,EAAKb,QACLzB,KAAKyB,MAAQ5C,EAAGkD,KAAKkY,KAAK1Y,GAAOe,EAAKb,QAEtCa,EAAKyb,QACL/d,KAAK+d,MAAQzb,EAAKyb,MAAMvc,KAAKsY,GAAQ,IAAIuE,GAAevE,MAGhEla,UAAU0e,EAAOR,GACb,OAAIA,GAAQA,EAAK5U,SACO,iBAAT4U,IACPA,EAAOA,EAAKE,MAAM,QAAQxc,KAAKT,GAAMA,EAAEkd,WAGtCH,EAAKzS,OAAOkT,GAASve,KAAK8d,KAAKU,SAASD,MAClC,EAERve,KAAKke,UAAUI,GAE1BxZ,aACI,SAAU9E,KAAKyB,MAAQF,GAAMkd,SAEjCC,eACI,SAAU1e,KAAKyB,MAAQF,GAAMod,WAEjCC,kBACI,SAAU5e,KAAKyB,MAAQF,GAAMsd,cAEjCC,iBACI,SAAU9e,KAAKyB,MAAQF,GAAMwd,eAEjCC,sBACI,SAAUhf,KAAKyB,MAAQF,GAAM0d,sBAEjCC,sBACI,SAAUlf,KAAKyB,MAAQF,GAAM4d,qBAEjCC,oBACI,SAAUpf,KAAKyB,MAAQF,GAAM8d,mBAEjCC,oBACI,SAAUtf,KAAKyB,MAAQF,GAAMge,2BAEjCC,mBACI,SAAUxf,KAAKyB,MAAQF,GAAMke,kBAEjCC,wBACI,SAAU1f,KAAKyB,MAAQF,GAAMoe,wBAEjCC,sBACI,SAAU5f,KAAKyB,MAAQF,GAAMse,gBAEjCC,uBACI,SAAU9f,KAAKyB,MAAQF,GAAMwe,sBAEjCC,mBACI,SAAUhgB,KAAKyB,MAAQF,GAAM0e,kBAEjCC,qBACI,SAAUlgB,KAAKyB,MAAQF,GAAMkc,qBAEjC7d,UAAUugB,EAAeC,GACrB,QAAIpgB,KAAKke,UAAUkC,IAAU,IAExBpgB,KAAKyB,MAAQ0e,GAEdngB,KAAKyB,MAAQF,GAAMwd,eAAiBoB,GAEpCngB,KAAKyB,MAAQF,GAAMsd,cAAgBsB,GAK3CvgB,aAAayF,GAET,GAAIrF,KAAK8E,OAAQ,CAGbO,EAAKX,UACL,MAAM2b,EAAWxhB,EAAG6H,OAAO4N,YAAYjP,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAACO,EAAGC,IACxD8E,EAAKpD,YAAY3B,EAAGC,EAAG1B,EAAG2C,IAAIC,MAAMC,KAAK4e,eAAiBtgB,KAAKme,KAAKoC,SAASlb,EAAKmb,cAAclgB,EAAGC,MAE/G,OAAK8f,GAAYA,EAAS,GAAK,GAAKA,EAAS,GAAK,GAE9CxD,QAAQ4D,IAAI,gHACL,GAEJJ,EAEN,GAAIrgB,KAAK4e,YAGV,OADA/B,QAAQ4D,IAAI,6EACL,EAGX,MAAMC,EAAM7hB,EAAG6H,OAAO4N,YAAYjP,EAAKvF,MAAOuF,EAAKtF,QAAQ,CAACO,EAAGC,IAAM8E,EAAKzB,WAAWtD,EAAGC,KACxF,SAAKmgB,GAAOA,EAAI,GAAK,GAAKA,EAAI,GAAK,IAE5BA,EAGX9gB,gBAAgBsa,GACZ,IACIyG,EADAC,EAAW5gB,KAAK8E,OAAS,GAAK,GAElC,MAAMoW,EAAWhB,EAAQgB,SACnB7V,EAAO6U,EAAQ7U,KACrB,EAAG,CAEC,GADAsb,GAAW,IACLC,GAAY,EAEd,OADA/D,QAAQ4D,IAAI,wFACL,EAIX,GAFAvF,EAAS7a,KAAK,GAEVL,KAAK8E,OAOL6b,GAAY3gB,KAAK6gB,4BAA4B3G,EAASA,EAAQrR,QAASqR,EAAQpR,cAE9E,GAAI9I,KAAK4e,aACV,IAAK5e,KAAK8gB,mCAAmC5G,GAGzC,OADA2C,QAAQU,MAAM,8EACP,MAIV,CAMD,IAAI3U,EAAc/J,EAAGqB,KAAKC,MAAM+a,EAASpb,MAAOob,EAASnb,QACzDghB,EAAwB1b,EAAMuD,EAAasR,EAAQrR,QAASqR,EAAQpR,QAAS9I,KAAKme,KAAKzO,IACvF,MAAMqD,EAAMlU,EAAG6H,OAAO+I,SAASpK,EAAKvF,MAAQuF,EAAKtF,QACjD,IAAI2c,EAAsB,EACtBsE,EAAYhhB,KAAKme,KAAKlS,QAC1B,IAAK,IAAIjG,EAAI,EAAGA,EAAI,KAAQ0W,EAAsBsE,EAAWhb,IACzD,IAAK,IAAIib,EAAI,EAAGA,EAAIlO,EAAI7J,QAAUwT,EAAsBsE,EAAWC,IAAK,CACpE,MAAMnb,EAAI2C,KAAKuB,MAAM+I,EAAIkO,GAAK5b,EAAKtF,QAC7BgG,EAAIgN,EAAIkO,GAAK5b,EAAKtF,OACpB6I,EAAY9C,GAAGC,IAAMC,IACrBkV,EAASpV,GAAGC,GAAK,EACjB2W,KACIrX,EAAK6b,WAAWpb,EAAGC,IACnBV,EAAKpD,YAAY6D,EAAGC,EAAGlH,EAAG2C,IAAIC,MAAMC,KAAKqD,kBAEzC4b,GAAW,EACXjE,EAAsBsE,IAMlCtE,EAAsBsE,GACtBL,GAAW,EACX9D,QAAQ4D,IAAI,cAEPzgB,KAAKgf,iBACV1B,EAAqBjY,EAAM6V,IAC3B2B,QAAQ4D,IAAI,gBACZE,GAAW,GAEN3gB,KAAKkf,iBACViC,EAAuB9b,EAAM6V,GAAY,MACzC2B,QAAQ4D,IAAI,2BACZE,GAAW,GAIf9hB,EAAGqB,KAAKE,KAAKwI,UAGZ+X,GAET,OAAO,EAKX/gB,4BAA4Bsa,EAAStJ,EAAQC,GACzC,IAAIuQ,GAAY,EAChB,MAAMlG,EAAWhB,EAAQgB,SACnB7V,EAAO6U,EAAQ7U,KACrB6V,EAAStK,GAAQC,GAAU,EAC3B,MAAMwQ,EAAkBhc,EAAKmb,cAAc5P,EAAQC,GACnD,IAAK,IAAIvL,EAAM,EAAGA,EAAM,GAAK8b,EAAW9b,IAAO,CAC3C,MAAME,EAAOoL,EAAS/R,EAAGsG,MAAMD,KAAKI,GAAK,GACnCG,EAAOoL,EAAShS,EAAGsG,MAAMD,KAAKI,GAAK,GACzC,GAAKD,EAAK7E,MAAMgF,EAAMC,KAElByV,EAAS1V,GAAMC,GAAnB,CAEA,GAAIJ,EAAK6b,WAAW1b,EAAMC,IACrBJ,EAAKpD,YAAYuD,EAAMC,EAAM5G,EAAG2C,IAAIC,MAAMC,KAAKqD,iBAC3CM,EAAKpD,YAAYuD,EAAMC,EAAM5G,EAAG2C,IAAIC,MAAMC,KAAK4e,cAKpD,OAAO,EAEPjb,EAAKmb,cAAchb,EAAMC,IAAS4b,IACjChc,EAAKpD,YAAYuD,EAAMC,EAAM5G,EAAG2C,IAAIC,MAAMC,KAAKqD,iBAChDqc,EAAYphB,KAAK6gB,4BAA4B3G,EAAS1U,EAAMC,KAGpE,OAAO2b,EAEXxhB,mCAAmCsa,GAC/B,IAAI9H,GAAU,EACd,MAAM8I,EAAWhB,EAAQgB,SACnB7V,EAAO6U,EAAQ7U,KACrB6V,EAAS7a,KAAK,GACd,IAAIqc,EAAsB,EAC1B,MAAMsE,EAAYhhB,KAAKme,KAAKlS,QACtBqV,EAAUziB,EAAGqB,KAAKC,MAAMkF,EAAKvF,MAAOuF,EAAKtF,QAC/CghB,EAAwB1b,EAAMic,EAASpH,EAAQrR,QAASqR,EAAQpR,QAAS9I,KAAKme,KAAKzO,IAGnF,MAAMjN,EAAQ5D,EAAG6H,OAAO+I,SAASpK,EAAKvF,MAAQuF,EAAKtF,QACnD,IAAK,IAAIiG,EAAI,EAAGA,EAAI,KAAQ0W,EAAsBsE,EAAWhb,IACzD,IAAK,IAAIF,EAAI,EAAGA,EAAIrD,EAAMyG,QAAUwT,EAAsBsE,IAAalb,EAAG,CACtE,MAAMxF,EAAImI,KAAKuB,MAAMvH,EAAMqD,GAAKT,EAAKtF,QAC/BQ,EAAIkC,EAAMqD,GAAKT,EAAKtF,OACbuhB,EAAQhhB,GAAGC,IACZyF,IAERX,EAAK6b,WAAW5gB,EAAGC,KACnB6R,GAAU,EACVsK,EAAsBsE,GAE1B9F,EAAS5a,GAAGC,GAAK,EACjBmc,GAAuB,GAY/B,OARI1c,KAAKgf,iBAAmB1B,EAAqBjY,EAAM6V,IAG9Clb,KAAKkf,iBACViC,EAAuB9b,EAAM6V,GAAY,OAHzC9I,GAAU,GAMdvT,EAAGqB,KAAKE,KAAKkhB,GACNlP,EAEXxS,gCAAgCsa,GAC5B,MAAMgB,EAAWhB,EAAQgB,SACnB7V,EAAO6U,EAAQ7U,KAEjBrF,KAAK8f,iBACL9f,KAAKuhB,sBAAsBrH,EAAS,GAE/Bla,KAAKggB,cACVhgB,KAAKuhB,sBAAsBrH,EAAS,GAGpCla,KAAKof,eACLlE,EAASxY,SAAQ,CAAC3B,EAAGT,EAAGC,KAChBQ,GACAsE,EAAK9C,QAAQjC,EAAGC,EAAG2L,MAI3BlM,KAAKsf,eACLpE,EAASxY,SAAQ,CAAC3B,EAAGT,EAAGC,KACfQ,GAEDsE,EAAKlE,cAAcb,EAAGC,IACtB8E,EAAK9C,QAAQjC,EAAGC,EAAG2L,MAK3BlM,KAAKwf,cACLtE,EAASxY,SAAQ,CAAC3B,EAAGT,EAAGC,KAChBQ,GAAKsE,EAAK2N,YAAY1S,EAAGC,IACzB8E,EAAK9C,QAAQjC,EAAGC,EAAG2L,MAK3BlM,KAAK0f,mBACLxE,EAASxY,SAAQ,CAAC3B,EAAGT,EAAGC,KACfQ,IACDsE,EAAKpD,YAAY3B,EAAGC,EAAG1B,EAAG2C,IAAIC,MAAMC,KAAK4e,eAE7CzhB,EAAGsG,MAAM2V,aAAaxa,EAAGC,GAAG,CAACuF,EAAGC,KACvBmV,EAAS1a,MAAMsF,EAAGC,KAEnBmV,EAASpV,GAAGC,IAEZV,EAAKpE,OAAO6E,EAAGC,IAEfV,EAAKpD,YAAY6D,EAAGC,EAAGlH,EAAG2C,IAAIC,MAAMC,KAAK4e,eAEzCjb,EAAKpD,YAAY6D,EAAGC,EAAGlH,EAAG2C,IAAIC,MAAMC,KAAKqD,gBAExCM,EAAKlE,cAAc2E,EAAGC,IAE3BV,EAAK9C,QAAQuD,EAAGC,EAAG0T,OACpB,MASPzZ,KAAK4f,iBACL1E,EAASxY,SAAQ,CAAC3B,EAAGT,EAAGC,KACfQ,IACDsE,EAAKpD,YAAY3B,EAAGC,EAAG1B,EAAG2C,IAAIC,MAAMC,KAAK4e,gBAE7Cjb,EAAKlD,YAAY7B,EAAGC,EAAG1B,EAAG2C,IAAIC,MAAMC,KAAKhC,aACzCb,EAAGsG,MAAM2V,aAAaxa,EAAGC,GAAG,CAACuF,EAAGC,KACvBmV,EAAS1a,MAAMsF,EAAGC,KAEnBmV,EAASpV,GAAGC,IAEZV,EAAKpD,YAAY6D,EAAGC,EAAGlH,EAAG2C,IAAIC,MAAMC,KAAK4e,eAE7Cjb,EAAKlD,YAAY2D,EAAGC,EAAGlH,EAAG2C,IAAIC,MAAMC,KAAKhC,iBAC1C,OAIX,MAAMyb,EAAgBjB,EAAQiB,cAC9BD,EAASxY,SAAQ,CAAC3B,EAAGT,EAAGC,KACfQ,IAELsE,EAAKqY,WAAWpd,EAAGC,EAAG4a,EAAenb,KAAK8E,QAEtCO,EAAKmc,aAAalhB,EAAGC,IACrB8E,EAAK9C,QAAQjC,EAAGC,EAAGkV,OAI/B7V,sBAAsBsa,EAASuH,EAA2B,GACtD,IAAIC,EACJ,MAAMxG,EAAWhB,EAAQgB,SACnB7V,EAAO6U,EAAQ7U,KACrB,GACIqc,GAAa,EACbxG,EAASxY,SAAQ,CAAC8E,EAAIlH,EAAGC,KAKrB,GAAI8E,EAAKpD,YAAY3B,EAAGC,EAAG1B,EAAG2C,IAAIC,MAAMC,KAAKqD,eACzC,OACJ,IAAKM,EAAKlE,cAAcb,EAAGC,GACvB,OACJ,IAAIohB,EAAU,EACd9iB,EAAGsG,MAAM2V,aAAaxa,EAAGC,GAAG,CAACuF,EAAGC,KACvBmV,EAAS1a,MAAMsF,EAAGC,IAEnBmV,EAASpV,GAAGC,KAAOV,EAAKlE,cAAc2E,EAAGC,MACvC4b,KAEP,GACCA,EAAUF,IAEdE,EAAU,EACV9iB,EAAGsG,MAAM2V,aAAaxa,EAAGC,GAAG,CAACuF,EAAGC,KACvBmV,EAAS1a,MAAMsF,EAAGC,KAEnBmV,EAASpV,GAAGC,IAEXV,EAAKpE,OAAO6E,EAAGC,KAChBV,EAAKpD,YAAY6D,EAAGC,EAAGlH,EAAG2C,IAAIC,MAAMC,KAAKqD,kBACvC4c,MAEP,GACCA,IAGJD,GAAa,EACbxG,EAAS5a,GAAGC,GAAK,EACb8E,EAAKlE,cAAcb,EAAGC,IACtB8E,EAAK9C,QAAQjC,EAAGC,EAAG2L,GAEvBrN,EAAGsG,MAAM2V,aAAaxa,EAAGC,GAAG,CAACuF,EAAGC,KACvBmV,EAAS1a,MAAMsF,EAAGC,KAEnBV,EAAKiB,MAAMR,EAAGC,IAElBV,EAAK9C,QAAQuD,EAAGC,EAAG0T,kBAGtBiI,GAEb9hB,cAAcsa,GACVA,EAAQtR,YAAYvI,KAAK,GACzB0gB,EAAwB7G,EAAQ7U,KAAM6U,EAAQtR,YAAasR,EAAQrR,QAASqR,EAAQpR,QAAS9I,KAAKme,KAAKzO,IACvG,IAAIgN,EAAsB,EAC1B,MAAMkF,EAAY,IAAIhX,MAAM,KAAKvK,KAAK,GACtC6Z,EAAQgB,SAASxY,SAAQ,CAAC3B,EAAGT,EAAGC,KAC5B,IAAKQ,EACD,OACJ,MAAM8gB,EAAO3H,EAAQtR,YAAYtI,GAAGC,GAChCshB,EAAO,MACPD,EAAUC,KACVnF,QAGR,IAAIX,EAAatT,KAAK0J,MAAMuK,EAAsB,GAC9CT,EAAaxT,KAAK0J,MAAO,EAAIuK,EAAuB,GACxD,IAAK,IAAI5W,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,GAAIiW,GAAc6F,EAAU9b,GAAI,CAC5BiW,EAAajW,EACb,MAGAiW,GAAc6F,EAAU9b,GAGhC,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,GAAImW,GAAc2F,EAAU9b,GAAI,CAC5BmW,EAAanW,EACb,MAGAmW,GAAc2F,EAAU9b,GAGhCoU,EAAQ6B,WAAaA,EACrB7B,EAAQ+B,WAAaA,EAEzBrc,iBACI,MAAMkiB,EAAmB,CACrBC,GAAeC,eACfD,GAAeE,kBAEbC,EAAc,IAAItX,MAAM5K,KAAK+d,MAAM7U,QAAQ7I,MAAK,GACtD,IAAK,IAAI0F,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzB,IAAIib,EAAY,EAChB,IAAK,IAAIlb,EAAI,EAAGA,EAAIoc,EAAYhZ,OAAQpD,IAChC9F,KAAK+d,MAAMjY,GAAGrE,MAAQqgB,EAAiB/b,KACvCmc,EAAYpc,IAAK,EACjBkb,KAGR,GAAIA,EAAY,EAAG,CACf,IAAImB,EAAYtjB,EAAG6H,OAAOoE,MAAM,EAAGkW,GACnC,IAAK,IAAIlb,EAAI,EAAGA,EAAIoc,EAAYhZ,OAAQpD,IACpC,GAAI9F,KAAK+d,MAAMjY,GAAGrE,MAAQqgB,EAAiB/b,GAAI,CAC3C,GAAiB,GAAboc,EAAgB,CAChBD,EAAYpc,IAAK,EACjB,MAGAqc,MAMpB,OAAOniB,KAAK+d,MAAMqE,QAAO,CAACC,EAAIvc,IAAMoc,EAAYpc,KAEpDlG,kBAAkBsa,GACdA,EAAQgB,SAASxY,SAAQ,CAAC3B,EAAGT,EAAGC,KACvBQ,IAEAmZ,EAAQ7U,KAAKpD,YAAY3B,EAAGC,EAAG1B,EAAG2C,IAAIC,MAAMC,KAAK4gB,SAClDzjB,EAAG2C,IAAIC,MAAMC,KAAK6gB,qBAClBrI,EAAQ7U,KAAKqY,WAAWpd,EAAGC,EAAG,QAqBvC,MAAMiiB,GAAa,GASnB,SAAS9b,GAAOyZ,EAAeC,GAClC,MAAMqC,EAAUnY,OAAOoY,OAAOF,IAAYJ,QAAQO,GAAMA,EAAEC,UAAUzC,EAAeC,KACnF,OAAOvhB,EAAG6H,OAAOC,KAAK8b,wFC/iBnB,MACH7iB,YAAY4B,EAAK4e,GACbpgB,KAAKwB,IAAMA,EACXxB,KAAKogB,MAAQA,EACbpgB,KAAK6iB,aAAe,GACpB7iB,KAAK8iB,cAAgB,GACrB9iB,KAAK6I,SAAW,EAChB7I,KAAK8I,SAAW,EAChB9I,KAAK+b,YAAc,EACnB/b,KAAKic,YAAc,EACnBjc,KAAKmb,cAAgB,EACrBnb,KAAKqF,KAAO,IAAIkR,EAAa/U,GAC7BxB,KAAKkb,SAAWrc,EAAGqB,KAAKC,MAAMqB,EAAI1B,MAAO0B,EAAIzB,QAC7CC,KAAKya,SAAW5b,EAAGqB,KAAKC,MAAMqB,EAAI1B,MAAO0B,EAAIzB,QAC7CC,KAAK4a,QAAU/b,EAAGqB,KAAKC,MAAMqB,EAAI1B,MAAO0B,EAAIzB,QAC5CC,KAAK4I,YAAc/J,EAAGqB,KAAKC,MAAMqB,EAAI1B,MAAO0B,EAAIzB,QAEpDH,OACIf,EAAGqB,KAAKE,KAAKJ,KAAKkb,UAClBrc,EAAGqB,KAAKE,KAAKJ,KAAKya,UAClB5b,EAAGqB,KAAKE,KAAKJ,KAAK4a,SAClB/b,EAAGqB,KAAKE,KAAKJ,KAAK4I,aAEtBhJ,YAAYmjB,EAAuBC,GAAWvE,SAC1C,IAAIrN,EAAQ,GACZ,KAAOA,KAAS,CACZ,MAAM+I,EAAY8I,GAAYF,EAAsB/iB,KAAKogB,OACzD,GAAKjG,GAGDna,KAAKkjB,eAAe/I,GACpB,OAAO,EAKf,OAFA0C,QAAQ4D,IAAI,4CACR5hB,EAAGkD,KAAKohB,SAASH,GAAYD,KAC1B,EAEXnjB,eAAeua,GACX,IAAI/I,EAAQ,GACZ,KAAOA,KAAS,CACZ,MAAM3K,EAAM0T,EAAUiJ,aAAapjB,KAAKqF,MACxC,GAAKoB,GAGDzG,KAAKqjB,MAAMlJ,EAAW1T,EAAI,GAAIA,EAAI,IAClC,OAAO,EAIf,OADAoW,QAAQ4D,IAAI,+BACL,EAKX7gB,MAAMua,EAAWtR,EAASC,GAOtB,GANA9I,KAAKkb,SAAS7a,KAAK,GACnBL,KAAKya,SAASpa,KAAK,GACnBL,KAAK4a,QAAQva,KAAK,GAClBL,KAAK4I,YAAYvI,KAAK,GACtBL,KAAK6I,QAAUA,EACf7I,KAAK8I,QAAUA,GACVqR,EAAUmJ,gBAAgBtjB,MAC3B,OAAO,EAGX,MAAMujB,EAAcvjB,KAAKqF,KAAKd,SAC9BvE,KAAKmb,cAAgBnb,KAAKqF,KAAKme,gBAE/BrJ,EAAUsJ,gCAAgCzjB,MAG1Cma,EAAUuJ,cAAc1jB,MAGxB,MAAM2jB,EAAaxJ,EAAUyJ,iBAK7B,IAAK,IAAI5kB,EAAQ,EAAGA,EAAQ2kB,EAAWza,OAAQlK,IAAS,CACpD,MAAM6kB,EAAYF,EAAW3kB,GAG7B,GADc6kB,EAAUR,MAAMrjB,KAAMma,GACxB0J,EAAUpf,MAAMmY,MACtBiH,EAAUpiB,MAAQmY,GAAUgE,6BAM9B,OAJAf,QAAQ4D,IAAI,wEAEZzgB,KAAKqF,KAAKye,QAAQP,IAEX,EAef,OAXIpJ,EAAU+F,gBACV/F,EAAU4J,kBAAkB/jB,OAUzB,8DD2bR,SAAiB6E,EAAIsV,GAMxB,OALMA,aAAqB0D,KACvB1D,EAAY,IAAI0D,GAAU1D,IAE9BqI,GAAW3d,GAAMsV,EACjBA,EAAUtV,GAAKA,EACRsV,yBE7iBJ,MACHva,YAAYqL,EAAU,IAClBjL,KAAKoK,OAAS,CACV4Z,OAAQ,EACRlkB,MAAO,GACPC,OAAQ,GACRwL,MAAO,CAAE9G,MAAO,GAAI2S,OAAQ,WAC5BtG,MAAO,GACP8E,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,OAAQ,GACRC,UAAU,GAEdhW,KAAKikB,MAAQ,GACbjkB,KAAKkkB,UAAY,GACjBrlB,EAAGsG,MAAMgR,WAAWnW,KAAKoK,OAAQa,GAC7BjL,KAAKoK,OAAOuL,MACZ9W,EAAG6H,OAAOiP,KAAK3V,KAAKoK,OAAOuL,MAE/B3V,KAAKmkB,YACLnkB,KAAKokB,gBAETJ,aACI,OAAOhkB,KAAKoK,OAAO4Z,OAEvBpkB,YACI,IAAK,IAAIkG,EAAI,EAAGA,EAAI9F,KAAKoK,OAAO4Z,SAAUle,EACtC9F,KAAKikB,MAAMne,GAAKjH,EAAG6H,OAAO2d,OAAO,GAAK,IAG9CzkB,gBACI,IAAIqW,EAAWjW,KAAKoK,OAAO6L,UAAY,CACnCxN,KAAKuB,MAAMhK,KAAKoK,OAAOtK,MAAQ,GAC/BE,KAAKoK,OAAOrK,OAAS,GAEzB,MAAM4S,EAAc3S,KAAKoK,OAAOka,eAC5B7b,KAAKuB,MAAMvB,KAAKkF,IAAI3N,KAAKoK,OAAOtK,MAAQ,EAAGE,KAAKoK,OAAOrK,OAAS,IACpE,IAAK,IAAI+F,EAAI,EAAGA,EAAI9F,KAAKoK,OAAO4Z,SAAUle,EAAG,CACzC,MAAMoQ,EAASrX,EAAG6H,OAAO4N,YAAYtU,KAAKoK,OAAOtK,MAAOE,KAAKoK,OAAOrK,QAAQ,CAACO,EAAGC,IACpE1B,EAAGsG,MAAMqP,gBAAgByB,EAAS,GAAIA,EAAS,GAAI3V,EAAGC,GAAKoS,IAEvE3S,KAAKkkB,UAAU3d,KAAK,CAChB,CAAC0P,EAAS,GAAIA,EAAS,IACvB,CAACC,EAAO,GAAIA,EAAO,MAEvBD,EAAWC,GAGnBtW,SAASiF,EAAI4R,GACT,GAAI5R,EAAK,GAAKA,EAAK7E,KAAKoK,OAAO4Z,OAC3B,MAAM,IAAI1iB,MAAM,qBAAuBuD,GAC3ChG,EAAG6H,OAAOiP,KAAK3V,KAAKikB,MAAMpf,IAE1B,MAAOoR,EAAUC,GAAUlW,KAAKkkB,UAAUrf,GACpC0f,EAAYja,OAAOqH,OAAO,GAAI3R,KAAKoK,OAAO2L,QAC5C/V,KAAKoK,OAAOoa,QACZD,EAAUhR,KAAO0C,EACjBsO,EAAUjR,GAAK4C,EACL,GAANrR,GAAW7E,KAAKoK,OAAOqa,YACvBF,EAAU5Q,SAAW3T,KAAKoK,OAAOqa,WAEjC5f,GAAM7E,KAAKoK,OAAO4Z,OAAS,GAAKhkB,KAAKoK,OAAOsa,UAC5CH,EAAU9Q,OAASzT,KAAKoK,OAAOsa,WAInCH,EAAUhR,KAAO2C,EACjBqO,EAAUjR,GAAK2C,EACL,GAANpR,GAAW7E,KAAKoK,OAAOqa,YACvBF,EAAU9Q,OAASzT,KAAKoK,OAAOqa,WAE/B5f,GAAM7E,KAAKoK,OAAO4Z,OAAS,GAAKhkB,KAAKoK,OAAOsa,UAC5CH,EAAU5Q,SAAW3T,KAAKoK,OAAOsa,UAGzC,MAAMnZ,EAAQjB,OAAOqH,OAAO,GAAI3R,KAAKoK,OAAOmB,OACjC,IAAP1G,GAAY0G,EAAMoZ,WAClBpZ,EAAMpD,MAAQoD,EAAMoZ,UAExB,MAAMC,EAAY,CACdhP,MAAO5V,KAAKoK,OAAOwL,MACnBC,MAAO7V,KAAKoK,OAAOyL,MACnBC,QAAS9V,KAAKoK,OAAO0L,QACrBvK,MAAOA,EACPwK,OAAQwO,EACRvO,SAAUhW,KAAKoK,OAAO4L,SACtBlW,MAAOE,KAAKoK,OAAOtK,MACnBC,OAAQC,KAAKoK,OAAOrK,QAExB,OAAOC,KAAK6kB,UAAUhgB,EAAI+f,EAAWnO,GAGzC7W,UAAUiF,EAAIvC,EAAMmU,GAChB,MAAM6H,EAAQ,IAAIwG,GAAYxiB,GACxB6I,EAASmT,EAAMvS,OAAO/L,KAAKoK,OAAOtK,MAAOE,KAAKoK,OAAOrK,OAAQ0W,GAKnE,OAJK5X,EAAGsG,MAAM4f,SAASzG,EAAMpI,OAAQ5T,EAAK4T,SACrCrX,EAAGsG,MAAM4f,SAASzG,EAAMrI,SAAU3T,EAAK2T,YACxCjW,KAAKkkB,UAAUrf,GAAM,CAACyZ,EAAMrI,SAAUqI,EAAMpI,SAEzC/K"}