{"version":3,"file":"gw-dig.min.js","sources":["../ts/site/tile.ts","../ts/feature/feature.ts","../ts/feature/tile.ts","../ts/feature/chance.ts","../ts/feature/spread.ts","../ts/site/horde.ts","../ts/site/item.ts","../ts/site/utils.ts","../ts/site/analyze.ts","../ts/site/site.ts","../ts/site/log/logger.ts","../ts/build/buildStep.ts","../ts/site/log/consoleLogger.ts","../ts/types.ts","../ts/room.ts","../ts/hall.ts","../ts/lake.ts","../ts/bridge.ts","../ts/stairs.ts","../ts/loop.ts","../ts/digger.ts","../ts/build/data.ts","../ts/build/blueprint.ts","../ts/build/builder.ts","../ts/dungeon.ts"],"sourcesContent":["import * as GWU from 'gw-utils';\n\nexport { TileId } from '../types';\n// export type ToTileId = (name: TileId) => number;\n\nexport interface TileConfig {\n    blocksMove?: boolean;\n    blocksVision?: boolean;\n    blocksPathing?: boolean;\n\n    connectsLevel?: boolean;\n    secretDoor?: boolean;\n    door?: boolean;\n\n    stairs?: boolean;\n    liquid?: boolean;\n    impregnable?: boolean;\n\n    tags?: string | string[];\n    priority?: number | string;\n    ch?: string;\n\n    extends?: string;\n}\n\nexport interface TileOptions extends TileConfig {\n    id: string;\n}\n\nexport interface TileInfo extends TileOptions {\n    id: string;\n    index: number;\n    priority: number;\n    tags: string[];\n}\n\nexport class TileFactory {\n    tileIds: Record<string, number> = {};\n    allTiles: TileInfo[] = [];\n\n    constructor(withDefaults = true) {\n        if (withDefaults) {\n            installDefaults(this);\n        }\n    }\n\n    getTile(name: string | number): TileInfo | null {\n        let id: number;\n        if (typeof name === 'string') {\n            id = this.tileIds[name];\n            if (id === undefined) {\n                // TODO - Log?  Will hit this during default installs.\n                return null;\n            }\n        } else {\n            id = name;\n        }\n        return this.allTiles[id] || null;\n    }\n\n    hasTile(name: string | number): boolean {\n        return this.getTile(name) !== null;\n    }\n\n    tileId(name: string | number): number {\n        if (typeof name === 'number') return name;\n        return this.tileIds[name] ?? -1; // TODO: -1 vs 0?\n    }\n\n    // TODO - Remove?\n    blocksMove(name: string | number): boolean {\n        const info = this.getTile(name);\n        return (!!info && info.blocksMove) || false;\n    }\n\n    installTile(cfg: TileOptions): TileInfo;\n    installTile(id: string, opts?: TileConfig): TileInfo;\n    installTile(id: string | TileOptions, opts: TileConfig = {}): TileInfo {\n        if (typeof id !== 'string') {\n            opts = id;\n            id = id.id;\n        }\n        const base = { id, index: this.allTiles.length, priority: 0, tags: [] };\n\n        opts.extends = opts.extends || id;\n\n        if (opts.extends) {\n            const root = this.getTile(opts.extends);\n            if (root) {\n                Object.assign(base, root);\n            } else if (opts.extends !== id) {\n                throw new Error('Cannot extend tile: ' + opts.extends);\n            }\n        }\n\n        const info: TileInfo = GWU.object.assignOmitting(\n            'priority, extends',\n            base,\n            opts\n        ) as TileInfo;\n\n        info.id = id;\n        info.index = this.allTiles.length;\n\n        if (opts.tags) {\n            info.tags = GWU.tags.make(opts.tags);\n        }\n\n        if (typeof opts.priority === 'string') {\n            let text = opts.priority.replace(/ /g, '');\n            let index = text.search(/[+-]/);\n            if (index == 0) {\n                info.priority = info.priority + Number.parseInt(text);\n            } else if (index == -1) {\n                if (text.search(/[a-zA-Z]/) == 0) {\n                    const tile = getTile(text);\n                    if (!tile)\n                        throw new Error(\n                            'Failed to find tile for priority - ' + text + '.'\n                        );\n                    info.priority = tile.priority;\n                } else {\n                    info.priority = Number.parseInt(text);\n                }\n            } else {\n                const id = text.substring(0, index);\n                const delta = Number.parseInt(text.substring(index));\n                const tile = getTile(id);\n                if (!tile)\n                    throw new Error(\n                        'Failed to find tile for priority - ' + id + '.'\n                    );\n\n                info.priority = tile.priority + delta;\n            }\n        } else if (opts.priority !== undefined) {\n            info.priority = opts.priority;\n        }\n\n        if (info.blocksPathing === undefined) {\n            if (info.blocksMove) {\n                info.blocksPathing = true;\n            }\n        }\n\n        if (this.tileIds[id]) {\n            info.index = this.tileIds[id];\n            this.allTiles[info.index] = info;\n        } else {\n            this.allTiles.push(info);\n            this.tileIds[id] = info.index;\n        }\n\n        return info;\n    }\n}\n\n// export const tileIds: Record<string, number> = {};\n// export const allTiles: TileInfo[] = [];\n\nexport const tileFactory = new TileFactory(true);\n\nexport function installTile(cfg: TileOptions): TileInfo;\nexport function installTile(id: string, opts?: TileConfig): TileInfo;\nexport function installTile(...args: any[]): TileInfo {\n    if (args.length == 1) {\n        return tileFactory.installTile(args[0]);\n    }\n    return tileFactory.installTile(args[0], args[1]);\n}\n\nexport function getTile(name: string | number): TileInfo | null {\n    return tileFactory.getTile(name);\n}\n\nexport function tileId(name: string | number): number {\n    return tileFactory.tileId(name);\n}\n\nexport function blocksMove(name: string | number): boolean {\n    return tileFactory.blocksMove(name);\n}\n\nfunction installDefaults(factory: TileFactory) {\n    factory.tileIds['NOTHING'] = factory.tileIds['NULL'] = factory.installTile(\n        'NONE',\n        {\n            priority: 0,\n            ch: '',\n        }\n    ).index;\n\n    factory.installTile('FLOOR', { priority: 10, ch: '.' });\n    factory.installTile('WALL', {\n        blocksMove: true,\n        blocksVision: true,\n        priority: 50,\n        ch: '#',\n    });\n    factory.installTile('DOOR', {\n        blocksVision: true,\n        door: true,\n        priority: 60,\n        ch: '+',\n    });\n    factory.installTile('SECRET_DOOR', {\n        blocksMove: true,\n        secretDoor: true,\n        priority: 70,\n        ch: '%',\n    });\n    factory.installTile('UP_STAIRS', {\n        stairs: true,\n        priority: 80,\n        ch: '>',\n    });\n    factory.installTile('DOWN_STAIRS', {\n        stairs: true,\n        priority: 80,\n        ch: '<',\n    });\n    factory.tileIds['DEEP'] = factory.installTile('LAKE', {\n        priority: 40,\n        liquid: true,\n        ch: '~',\n    }).index;\n    factory.installTile('SHALLOW', { priority: 30, ch: '`' });\n    factory.installTile('BRIDGE', { priority: 45, ch: '=' }); // layers help here\n    factory.installTile('IMPREGNABLE', {\n        priority: 200,\n        ch: '%',\n        impregnable: true,\n        blocksMove: true,\n        blocksVision: true,\n    });\n}\n","import * as GWU from 'gw-utils';\nimport { Site } from '../site';\n\nexport interface FeatureObj {\n    [key: string]: any;\n}\nexport type FeatureConfig = string | FeatureObj;\n\nexport type FeatureFn = (site: Site, x: number, y: number) => boolean;\nexport type MakeFn = (cfg: any) => FeatureFn;\n\nexport const features: Record<string, FeatureFn> = {};\n\nexport function install(name: string, fn: FeatureFn | FeatureConfig) {\n    if (typeof fn !== 'function') {\n        fn = make(fn);\n    }\n    features[name] = fn as FeatureFn;\n}\n\nexport const types: Record<string, MakeFn> = {};\n\nexport function installType(name: string, fn: MakeFn) {\n    types[name] = fn;\n}\n\n// FEATURE TYPE\n\nexport function feature(id: string | string[] | { id: string }): FeatureFn {\n    if (Array.isArray(id)) id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length) throw new Error('Feature effect needs ID');\n\n    return featureFeature.bind(undefined, id);\n}\n\nexport function featureFeature(\n    id: string,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    const feat = features[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n\n    return feat(site, x, y);\n}\n\ninstallType('feature', feature);\ninstallType('effect', feature);\ninstallType('id', feature);\n\nexport function make(obj: FeatureConfig): FeatureFn;\nexport function make(id: string, config: FeatureConfig): FeatureFn;\nexport function make(\n    id: string | FeatureConfig,\n    config?: FeatureConfig\n): FeatureFn {\n    if (!id) return GWU.FALSE;\n    if (typeof id === 'string') {\n        if (!id.length)\n            throw new Error('Cannot create effect from empty string.');\n\n        if (!config) {\n            const parts = id.split(':');\n            id = parts.shift()!.toLowerCase();\n            config = parts;\n        }\n        // string with no parameters is interpreted as id of registered feature\n        if (config.length === 0) {\n            config = id;\n            id = 'feature';\n        }\n        const handler = types[id];\n        if (!handler) throw new Error('Failed to find effect - ' + id);\n        return handler(config || {});\n    }\n    let steps: FeatureFn[];\n\n    if (Array.isArray(id)) {\n        steps = id\n            .map((config) => make(config))\n            .filter((a) => a !== null) as FeatureFn[];\n    } else if (typeof id === 'function') {\n        return id as FeatureFn;\n    } else {\n        steps = Object.entries(id)\n            .map(([key, config]) => make(key, config))\n            .filter((a) => a !== null) as FeatureFn[];\n    }\n    if (steps.length === 1) {\n        return steps[0];\n    }\n\n    return (site, x, y) => {\n        return steps.every((step) => step(site, x, y));\n    };\n}\n\nexport function makeArray(cfg: string): FeatureFn[];\nexport function makeArray(obj: FeatureObj): FeatureFn[];\nexport function makeArray(arr: FeatureFn[]): FeatureFn[];\nexport function makeArray(\n    cfg: string | FeatureFn | FeatureObj | FeatureFn[]\n): FeatureFn[] {\n    if (!cfg) return [];\n    if (Array.isArray(cfg)) {\n        return cfg\n            .map((c) => make(c))\n            .filter((fn) => fn !== null) as FeatureFn[];\n    }\n    if (typeof cfg === 'string') {\n        if (!cfg.length)\n            throw new Error('Cannot create effect from empty string.');\n\n        const parts = cfg.split(':');\n        cfg = parts.shift()!.toLowerCase();\n\n        const handler = types[cfg];\n        if (!handler) return [];\n        return [handler(parts)];\n    } else if (typeof cfg === 'function') {\n        return [cfg] as FeatureFn[];\n    }\n\n    const steps = Object.entries(cfg).map(([key, config]) => make(key, config));\n    return steps.filter((s) => s !== null) as FeatureFn[];\n}\n","import { SetTileOptions, Site } from '../site';\nimport { FeatureFn, installType } from './feature';\n\n//////////////////////////////////////////////\n// TILE\n\nexport interface TileOptions extends SetTileOptions {\n    id: string;\n    protected?: boolean;\n}\n\nexport function tile(src: string | TileOptions): FeatureFn {\n    if (!src) throw new Error('Tile effect needs configuration.');\n\n    if (typeof src === 'string') {\n        src = { id: src };\n    } else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    } else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n\n    const opts: TileOptions = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    // if (opts.id.includes('+')) {\n    //     opts.protected = true;\n    // }\n    opts.id = opts.id.replace(/[!~+]*/g, '');\n\n    return tileAction.bind(undefined, opts);\n}\n\nexport function tileAction(\n    cfg: TileOptions,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    cfg.machine = 0; // >???<\n    if (site.setTile(x, y, cfg.id, cfg)) {\n        return true;\n    }\n    return false;\n}\n\ninstallType('tile', tile);\n","import { Site } from '../site';\nimport { installType, FeatureFn } from './feature';\n\n//////////////////////////////////////////////\n// chance\n\nexport function chance(opts: any): FeatureFn {\n    if (Array.isArray(opts)) {\n        opts = opts[0];\n    }\n    if (typeof opts === 'object') {\n        opts = opts.chance;\n    }\n    if (typeof opts === 'string') {\n        if (opts.endsWith('%')) {\n            opts = Number.parseFloat(opts) * 100;\n        } else {\n            opts = Number.parseInt(opts || '10000');\n        }\n    }\n    if (typeof opts !== 'number') {\n        throw new Error(\n            'Chance effect config must be number or string that can be a number.'\n        );\n    }\n    return chanceAction.bind(undefined, opts);\n}\n\nexport function chanceAction(cfg: number, site: Site): boolean {\n    return site.rng.chance(cfg, 10000);\n}\n\ninstallType('chance', chance);\n","import * as GWU from 'gw-utils';\nimport { Site, tileId } from '../site';\nimport { FeatureFn, FeatureConfig, installType, makeArray } from './feature';\n\nconst Fl = GWU.flag.fl;\n\n///////////////////////////////////////////////////////\n// TILE EVENT\n\nexport enum Flags {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    // E_NEXT_ALWAYS = Fl(0), // Always fire the next effect, even if no tiles changed.\n    // E_NEXT_EVERYWHERE = Fl(1), // next effect spawns in every cell that this effect spawns in, instead of only the origin\n\n    // E_FIRED = Fl(2), // has already been fired once\n\n    // E_NO_MARK_FIRED = Fl(3), // Do not mark this cell as having fired an effect (so can log messages multiple times)\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    // E_PROTECTED = Fl(4),\n\n    // E_NO_REDRAW_CELL = Fl(),\n    E_TREAT_AS_BLOCKING = Fl(5), // If filling the footprint of this effect with walls would disrupt level connectivity, then abort.\n    E_PERMIT_BLOCKING = Fl(6), // Generate this effect without regard to level connectivity.\n    E_ABORT_IF_BLOCKS_MAP = Fl(7),\n    E_BLOCKED_BY_ITEMS = Fl(8), // Do not fire this effect in a cell that has an item.\n    E_BLOCKED_BY_ACTORS = Fl(9), // Do not fire this effect in a cell that has an item.\n    E_BLOCKED_BY_OTHER_LAYERS = Fl(10), // Will not propagate into a cell if any layer in that cell has a superior priority.\n    E_SUPERPRIORITY = Fl(11), // Will overwrite terrain of a superior priority.\n\n    E_IGNORE_FOV = Fl(12),\n\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n\n    E_EVACUATE_CREATURES = Fl(15), // Creatures in the effect area get moved outside of it\n    E_EVACUATE_ITEMS = Fl(16), // Creatures in the effect area get moved outside of it\n\n    E_BUILD_IN_WALLS = Fl(17),\n    E_MUST_TOUCH_WALLS = Fl(18),\n    E_NO_TOUCH_WALLS = Fl(19),\n\n    E_CLEAR_GROUND = Fl(21), // clear all existing tiles\n    E_CLEAR_SURFACE = Fl(22),\n    E_CLEAR_LIQUID = Fl(23),\n    E_CLEAR_GAS = Fl(24),\n\n    E_CLEAR_TILE = Fl(25), // Clear this tile\n\n    E_CLEAR_CELL = E_CLEAR_GROUND |\n        E_CLEAR_SURFACE |\n        E_CLEAR_LIQUID |\n        E_CLEAR_GAS,\n\n    E_ONLY_IF_EMPTY = E_BLOCKED_BY_ITEMS | E_BLOCKED_BY_ACTORS,\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n\n    // These should be effect types\n    // E_ACTIVATE_DORMANT_MONSTER = Fl(27), // Dormant monsters on this tile will appear -- e.g. when a statue bursts to reveal a monster.\n    // E_AGGRAVATES_MONSTERS = Fl(28), // Will act as though an aggravate monster scroll of effectRadius radius had been read at that point.\n    // E_RESURRECT_ALLY = Fl(29), // Will bring back to life your most recently deceased ally.\n}\n\nexport interface SpreadInfo {\n    grow: number;\n    decrement: number;\n    matchTile: string;\n    features: FeatureFn[];\n    flags: number;\n}\n\nexport interface SpreadConfig\n    extends Partial<Omit<SpreadInfo, 'flags' | 'features'>> {\n    features?: FeatureConfig;\n    flags?: GWU.flag.FlagBase;\n}\n\nexport interface SpreadFn extends FeatureFn {\n    config: SpreadInfo;\n}\n\nexport type SpreadArgs = [number, number, FeatureConfig, SpreadConfig?];\n\nexport function spread(config: SpreadArgs | SpreadConfig): SpreadFn;\nexport function spread(\n    grow: number,\n    decrement: number,\n    action: FeatureConfig,\n    opts?: SpreadConfig\n): SpreadFn;\nexport function spread(...args: any[]): SpreadFn {\n    let config = {} as SpreadInfo;\n    if (!args.length) {\n        throw new Error('Must have config to create spread.');\n    }\n    if (args.length === 1) {\n        if (typeof args[0] === 'string') {\n            args = args[0].split(':').map((t) => t.trim());\n        } else if (Array.isArray(args[0])) {\n            args = args[0];\n        } else {\n            Object.assign(config, args[0]);\n            args = [config];\n        }\n    }\n    if (args.length >= 3) {\n        Object.assign(config, args[3] || {});\n        config.grow = Number.parseInt(args[0]);\n        config.decrement = Number.parseInt(args[1]);\n        config.features = args[2];\n    } else if (args.length === 2) {\n        throw new Error('Must have actions to run for spread.');\n    }\n\n    if (typeof config.grow !== 'number')\n        config.grow = Number.parseInt(config.grow || 0);\n    if (typeof config.decrement !== 'number')\n        config.decrement = Number.parseInt(config.decrement || 100);\n    config.flags = GWU.flag.from(Flags, config.flags || 0);\n    config.matchTile = config.matchTile || '';\n\n    if (\n        typeof config.features === 'string' &&\n        // @ts-ignore\n        config.features.indexOf(':') < 0\n    ) {\n        if (tileId(config.features) >= 0) {\n            // @ts-ignore\n            config.features = 'TILE:' + config.features;\n        }\n    }\n\n    const action = makeArray(config.features);\n    if (!action) throw new Error('Failed to make action for spread.');\n    config.features = action;\n\n    const fn = spreadFeature.bind(undefined, config) as SpreadFn;\n    fn.config = config;\n    return fn;\n}\n\ninstallType('spread', spread);\n\nexport function spreadFeature(\n    cfg: SpreadInfo,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    const abortIfBlocking = !!(cfg.flags & Flags.E_ABORT_IF_BLOCKS_MAP);\n\n    const map = site;\n    let didSomething = false;\n\n    const spawnMap = GWU.grid.alloc(map.width, map.height);\n\n    if (!computeSpawnMap(cfg, spawnMap, site, x, y)) {\n        GWU.grid.free(spawnMap);\n        return false;\n    }\n\n    if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n        GWU.grid.free(spawnMap);\n        return false;\n    }\n\n    if (cfg.flags & Flags.E_EVACUATE_CREATURES) {\n        // first, evacuate creatures, so that they do not re-trigger the tile.\n        if (evacuateCreatures(map, spawnMap)) {\n            didSomething = true;\n        }\n    }\n\n    if (cfg.flags & Flags.E_EVACUATE_ITEMS) {\n        // first, evacuate items, so that they do not re-trigger the tile.\n        if (evacuateItems(map, spawnMap)) {\n            didSomething = true;\n        }\n    }\n\n    if (cfg.flags & Flags.E_CLEAR_CELL) {\n        // first, clear other tiles (not base/ground)\n        if (clearCells(map, spawnMap, cfg.flags)) {\n            didSomething = true;\n        }\n    }\n\n    spawnMap.update((v) => {\n        if (!v) return 0;\n        return 1;\n    });\n\n    cfg.features.forEach((fn, i) => {\n        spawnMap.forEach((v, x, y) => {\n            if (v !== i + 1) return;\n\n            if (fn(site, x, y)) {\n                didSomething = true;\n                spawnMap[x][y] += 1;\n            }\n        });\n    });\n\n    if (didSomething) {\n        didSomething = true;\n    }\n    GWU.grid.free(spawnMap);\n    return didSomething;\n}\n\nexport function mapDisruptedBy(\n    map: Site,\n    blockingGrid: GWU.grid.NumGrid,\n    blockingToMapX = 0,\n    blockingToMapY = 0\n) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.isStairs(i, j)) {\n                disrupts = true;\n            }\n        } else if (!map.blocksMove(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                } else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\n// Spread\n\nfunction cellIsOk(\n    effect: SpreadInfo,\n    map: Site,\n    x: number,\n    y: number,\n    isStart: boolean\n) {\n    if (!map.hasXY(x, y)) return false;\n    if (map.isProtected(x, y)) return false;\n\n    if (map.blocksEffects(x, y) && !effect.matchTile && !isStart) {\n        return false;\n    }\n\n    if (effect.flags & Flags.E_BUILD_IN_WALLS) {\n        if (!map.isWall(x, y)) return false;\n    } else if (effect.flags & Flags.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (map.isWall(i, j)) {\n                    ok = true;\n                }\n            },\n            true\n        );\n        if (!ok) return false;\n    } else if (effect.flags & Flags.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.isWall(x, y)) return false; // or on wall\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (map.isWall(i, j)) {\n                    ok = false;\n                }\n            },\n            true\n        );\n        if (!ok) return false;\n    }\n\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !map.hasTile(x, y, effect.matchTile)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function computeSpawnMap(\n    effect: SpreadInfo,\n    spawnMap: GWU.grid.NumGrid,\n    site: Site,\n    x: number,\n    y: number\n) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n\n    const map = site;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n\n    spawnMap.fill(0);\n\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (\n                                spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)\n                            ) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n\n    return count > 0;\n}\n\nexport function clearCells(map: Site, spawnMap: GWU.grid.NumGrid, _flags = 0) {\n    let didSomething = false;\n    // const clearAll = (flags & Flags.E_CLEAR_CELL) === Flags.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v) return;\n\n        // if (clearAll) {\n        map.clearTile(i, j);\n        // } else {\n        //     if (flags & Flags.E_CLEAR_GAS) {\n        //         cell.clearDepth(Flags.Depth.GAS);\n        //     }\n        //     if (flags & Flags.E_CLEAR_LIQUID) {\n        //         cell.clearDepth(Flags.Depth.LIQUID);\n        //     }\n        //     if (flags & Flags.E_CLEAR_SURFACE) {\n        //         cell.clearDepth(Flags.Depth.SURFACE);\n        //     }\n        //     if (flags & Flags.E_CLEAR_GROUND) {\n        //         cell.clearDepth(Flags.Depth.GROUND);\n        //     }\n        // }\n        didSomething = true;\n    });\n    return didSomething;\n}\n\nexport function evacuateCreatures(map: Site, blockingMap: GWU.grid.NumGrid) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y]) return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y)) return false;\n            if (blockingMap[x][y]) return false;\n            return !map.forbidsActor(x, y, a);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            a.y = loc[0];\n            a.y = loc[1];\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n\nexport function evacuateItems(map: Site, blockingMap: GWU.grid.NumGrid) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y]) return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y)) return false;\n            if (blockingMap[x][y]) return false;\n            return !map.forbidsItem(x, y, i);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            i.x = loc[0];\n            i.y = loc[1];\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { ItemInstance } from './item';\nimport * as FEATURE from '../feature';\nimport { Site } from '../site';\n\nexport type HordeId = string;\n\nexport interface ActorInstance {\n    id: string;\n    make: Record<string, any>;\n    x: number;\n    y: number;\n    machine: number;\n    leader?: ActorInstance; // number??\n    item?: ItemInstance;\n}\n\nexport interface MemberConfig {\n    count?: GWU.range.RangeBase;\n    make?: Record<string, any>;\n}\n\nexport interface HordeConfig {\n    id?: string;\n    leader: HordeId;\n    make?: Record<string, any>;\n    members?: Record<HordeId, GWU.range.RangeBase | MemberConfig>;\n\n    tags?: GWU.tags.TagBase;\n    frequency?: GWU.frequency.FrequencyConfig;\n\n    // flags?: GWU.flag.FlagBase;\n    requiredTile?: string; // ID\n    feature?: string; // ID\n    blueprint?: string; // ID\n}\n\nexport interface MemberInfo {\n    count: GWU.range.Range;\n    make: Record<string, any>;\n}\n\nexport interface HordeInfo {\n    id?: string;\n    leader: HordeId;\n    make: Record<string, any>;\n    members: Record<HordeId, MemberInfo>;\n\n    tags: string[];\n    frequency: GWU.frequency.FrequencyFn;\n\n    flags: number;\n    requiredTile: string | null;\n    feature: FEATURE.FeatureFn | null;\n    blueprint: string | null;\n}\n\nexport const hordes: HordeInfo[] = [];\n\nexport function installHorde(config: HordeConfig): HordeInfo {\n    const info = {} as HordeInfo;\n    info.id = config.id || config.leader;\n    info.leader = config.leader;\n    info.make = config.make || {};\n    info.members = {};\n    if (config.members) {\n        Object.entries(config.members).forEach(([key, value]) => {\n            let member = {} as MemberInfo;\n            if (\n                typeof value === 'object' &&\n                ('count' in value || 'make' in value)\n            ) {\n                member.count = GWU.range.make(value.count || 1);\n                member.make = value.make || {};\n            } else {\n                // @ts-ignore\n                member.count = GWU.range.make(value);\n            }\n            info.members[key] = member;\n        });\n    }\n\n    info.tags = [];\n    if (config.tags) {\n        if (typeof config.tags === 'string') {\n            config.tags = config.tags.split(/[:|,]/g).map((t) => t.trim());\n        }\n        info.tags = config.tags;\n    }\n\n    info.frequency = GWU.frequency.make(config.frequency);\n    info.flags = 0;\n\n    info.requiredTile = config.requiredTile || null;\n    info.feature = config.feature ? FEATURE.make(config.feature) : null;\n    info.blueprint = config.blueprint || null;\n\n    hordes.push(info);\n\n    return info;\n}\n\nexport function pickHorde(\n    depth: number,\n    rules: string | { id: string } | { tags: string | string[] },\n    rng?: GWU.rng.Random\n): HordeInfo | null {\n    rng = rng || GWU.random;\n    let tagMatch: GWU.tags.TagMatchFn;\n    if (typeof rules === 'string') {\n        tagMatch = GWU.tags.makeMatch(rules);\n    } else if ('id' in rules) {\n        return hordes.find((h) => h.id === rules.id) || null;\n    } else {\n        tagMatch = GWU.tags.makeMatch(rules);\n    }\n\n    const choices = hordes.filter((horde) => tagMatch(horde.tags));\n    if (choices.length == 0) return null;\n\n    const freq = choices.map((info) => info.frequency(depth));\n    const choice = rng.weighted(freq);\n    return choices[choice] || null;\n}\n\nexport interface HordeFlagsType {\n    horde: number;\n}\n\nexport interface SpawnOptions {\n    canSpawn: GWU.xy.XYMatchFunc;\n    rng: GWU.rng.Random;\n    machine: number;\n}\n\nexport function spawnHorde(\n    info: HordeInfo,\n    map: Site,\n    x = -1,\n    y = -1,\n    opts: Partial<SpawnOptions> = {}\n): ActorInstance | null {\n    // Leader info\n    opts.canSpawn = opts.canSpawn || GWU.TRUE;\n    opts.rng = opts.rng || map.rng;\n    opts.machine = opts.machine || 0;\n\n    const leader = _spawnLeader(info, map, x, y, opts as SpawnOptions);\n    if (!leader) return null;\n\n    _spawnMembers(info, leader, map, opts as SpawnOptions);\n    return leader;\n}\n\nfunction _spawnLeader(\n    info: HordeInfo,\n    map: Site,\n    x: number,\n    y: number,\n    opts: SpawnOptions\n): ActorInstance | null {\n    const leader: ActorInstance = {\n        id: info.leader,\n        make: info.make,\n        x,\n        y,\n        machine: opts.machine || 0,\n    };\n\n    if (x >= 0 && y >= 0) {\n        if (!map.canSpawnActor(x, y, leader)) return null;\n    } else {\n        [x, y] = _pickLeaderLoc(leader, map, opts) || [-1, -1];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n    }\n\n    // pre-placement stuff?  machine? effect?\n\n    if (!_addLeader(leader, map, x, y, opts)) {\n        return null;\n    }\n\n    return leader;\n}\n\nfunction _addLeader(\n    leader: ActorInstance,\n    map: Site,\n    x: number,\n    y: number,\n    _opts: SpawnOptions\n): number {\n    return map.addActor(x, y, leader);\n}\n\nfunction _addMember(\n    member: ActorInstance,\n    map: Site,\n    x: number,\n    y: number,\n    leader: ActorInstance,\n    _opts: SpawnOptions\n): number {\n    member.leader = leader;\n    return map.addActor(x, y, member);\n}\n\nfunction _spawnMembers(\n    horde: HordeInfo,\n    leader: ActorInstance,\n    map: Site,\n    opts: SpawnOptions\n): number {\n    const entries = Object.entries(horde.members);\n\n    if (entries.length == 0) return 0;\n\n    let count = 0;\n    entries.forEach(([kindId, config]) => {\n        const count = config.count.value(opts.rng);\n        for (let i = 0; i < count; ++i) {\n            _spawnMember(kindId, config, map, leader, opts);\n        }\n    });\n\n    return count;\n}\n\nfunction _spawnMember(\n    id: string,\n    member: MemberInfo,\n    map: Site,\n    leader: ActorInstance,\n    opts: SpawnOptions\n): ActorInstance | null {\n    const instance = {\n        id,\n        make: member.make,\n        x: -1,\n        y: -1,\n        machine: leader.machine,\n    };\n\n    const [x, y] = _pickMemberLoc(instance, map, leader, opts) || [-1, -1];\n    if (x < 0 || y < 0) {\n        return null;\n    }\n\n    // pre-placement stuff?  machine? effect?\n\n    if (!_addMember(instance, map, x, y, leader, opts)) {\n        return null;\n    }\n\n    return instance;\n}\n\nfunction _pickLeaderLoc(\n    leader: ActorInstance,\n    map: Site,\n    opts: SpawnOptions\n): GWU.xy.Loc | null {\n    let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n        if (!map.hasXY(x, y)) return false;\n\n        if (map.hasActor(x, y)) return false; // Brogue kills existing actors, but lets do this instead\n\n        if (!opts.canSpawn(x, y)) return false;\n        if (!map.canSpawnActor(x, y, leader)) return false;\n        // const cell = map.cell(x, y);\n\n        // if (leader.avoidsCell(cell)) return false;\n\n        // if (Map.isHallway(map, x, y)) {\n        //     return false;\n        // }\n        return true;\n    });\n    return loc;\n}\n\nfunction _pickMemberLoc(\n    actor: ActorInstance,\n    map: Site,\n    leader: ActorInstance,\n    opts: SpawnOptions\n): GWU.xy.Loc | null {\n    let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n        if (!map.hasXY(x, y)) return false;\n        if (map.hasActor(x, y)) return false;\n        // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n\n        if (!map.canSpawnActor(x, y, actor)) return false;\n        if (!opts.canSpawn(x, y)) return false;\n        return true;\n    });\n    return loc;\n}\n","import * as GWU from 'gw-utils';\n\nexport type ItemId = string;\n\nexport interface ItemInstance {\n    id: string;\n    make?: Record<string, any>;\n    key?: { x: number; y: number; disposable?: boolean };\n    x: number; // -1 means not on map (carried)\n    y: number; // -1 means not on map\n}\n\nexport interface ItemConfig {\n    id: ItemId;\n    make?: Record<string, any>;\n\n    tags?: GWU.tags.TagBase;\n    frequency?: GWU.frequency.FrequencyConfig;\n\n    // flags?: GWU.flag.FlagBase;\n    requiredTile?: string;\n    feature?: string;\n    blueprint?: string;\n}\n\nexport interface ItemMatchOptions {\n    tags: string | string[];\n    forbidTags: string | string[];\n    rng?: GWU.rng.Random;\n}\n\nexport interface ItemInfo {\n    id: ItemId;\n    make: Record<string, any>;\n\n    tags: string[];\n    frequency: GWU.frequency.FrequencyFn;\n\n    flags: number;\n    requiredTile: string | null;\n    feature: string | null;\n    blueprint: string | null;\n}\n\nexport const items: ItemInfo[] = [];\n\nexport function installItem(config: ItemConfig): ItemInfo;\nexport function installItem(id: string, cfg: Omit<ItemConfig, 'id'>): ItemInfo;\nexport function installItem(\n    config: ItemConfig | string,\n    cfg?: Omit<ItemConfig, 'id'>\n): ItemInfo {\n    const info = {} as ItemInfo;\n    if (typeof config === 'string') {\n        info.id = config;\n        if (!cfg) throw new Error('Need a configuration.');\n        config = cfg as ItemConfig;\n    } else {\n        info.id = config.id;\n    }\n\n    info.make = config.make || {};\n\n    info.tags = [];\n    if (config.tags) {\n        if (typeof config.tags === 'string') {\n            config.tags = config.tags.split(/[:|,]/g).map((t) => t.trim());\n        }\n        info.tags = config.tags;\n    }\n\n    info.frequency = GWU.frequency.make(config.frequency || 100);\n    info.flags = 0;\n\n    info.requiredTile = config.requiredTile || null;\n    info.feature = config.feature || null;\n    info.blueprint = config.blueprint || null;\n\n    items.push(info);\n\n    return info;\n}\n\nexport function pickItem(\n    depth: number,\n    tagRules: string | { tags: string } | { id: string },\n    rng?: GWU.rng.Random\n): ItemInfo | null {\n    rng = rng || GWU.random;\n    if (typeof tagRules !== 'string' && 'id' in tagRules) {\n        // @ts-ignore\n        return items.find((i) => i.id === tagRules.id) || null;\n    }\n    tagRules = typeof tagRules === 'string' ? tagRules : tagRules.tags;\n    const tagMatch = GWU.tags.makeMatch(tagRules);\n    const choices = items.filter((item) => tagMatch(item.tags));\n    if (choices.length == 0) return null;\n\n    const freq = choices.map((info) => info.frequency(depth));\n    const choice = rng.weighted(freq);\n    return choices[choice] || null;\n}\n\nexport function makeItem(info: ItemInfo): ItemInstance {\n    return {\n        id: info.id,\n        make: info.make,\n        x: -1,\n        y: -1,\n    };\n}\n\nexport function getItemInfo(id: string): ItemInfo | undefined {\n    return items.find((i) => i.id === id);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\nimport * as DIG from './site';\n\nconst DIRS = GWU.xy.DIRS;\n\nexport function loadSite(\n    site: DIG.Site,\n    cells: string[],\n    tiles: Record<string, string>\n) {\n    const w = site.width;\n    const h = site.height;\n\n    cells.forEach((line, j) => {\n        if (j >= h) return;\n        for (let i = 0; i < w && i < line.length; ++i) {\n            const ch = line[i];\n            const tile = tiles[ch] || 'FLOOR';\n\n            site.setTile(i, j, tile);\n        }\n    });\n}\n\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n\n//                 attachDoor(map, room, opts, x, y, oppDir);\n\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n\n//     return false;\n// }\n\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(\n    site: DIG.Site,\n    x: number,\n    y: number\n): number {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (\n            site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)\n        ) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\n\nexport function chooseRandomDoorSites(site: DIG.Site): GWU.xy.Loc[] {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n\n    const DOORS: GWU.xy.Loc[][] = [[], [], [], []];\n\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n\n    const h = site.height;\n    const w = site.width;\n\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (\n                        k = 0;\n                        k < 10 && site.hasXY(newX, newY) && !doorSiteFailed;\n                        k++\n                    ) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n\n    let doorSites: GWU.xy.Loc[] = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = site.rng.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n\n//     const site = new SITE.GridSite(map);\n\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n\n//         if (roomGrid[x][y]) continue;\n\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n\n//     return false;\n// }\n\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = site.rng.sequence(mapDoors.length);\n\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n\n//     return false;\n// }\n\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = site.rng.sequence(4);\n\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n\nexport function fillCostGrid(source: DIG.Site, costGrid: GWU.grid.NumGrid) {\n    costGrid.update((_v, x, y) =>\n        source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION\n    );\n}\n\nexport interface DisruptOptions {\n    offsetX: number; // blockingGridOffsetX\n    offsetY: number; // blockingGridOffsetY\n    machine: number;\n    updateWalkable: (grid: GWU.grid.NumGrid) => boolean; // true = ok to proceed, false = disrupts\n}\n\nexport function siteDisruptedByXY(\n    site: DIG.Site,\n    x: number,\n    y: number,\n    options: Partial<DisruptOptions> = {}\n) {\n    options.offsetX ??= 0;\n    options.offsetY ??= 0;\n    options.machine ??= 0;\n\n    if (\n        GWU.xy.arcCount(x, y, (i, j) => {\n            return site.isPassable(i, j);\n        }) <= 1\n    )\n        return false;\n\n    const blockingGrid = GWU.grid.alloc(site.width, site.height);\n    blockingGrid[x][y] = 1;\n    const result = siteDisruptedBy(site, blockingGrid, options);\n    GWU.grid.free(blockingGrid);\n    return result;\n}\n\nexport function siteDisruptedBy(\n    site: DIG.Site,\n    blockingGrid: GWU.grid.NumGrid,\n    options: Partial<DisruptOptions> = {}\n) {\n    options.offsetX ??= 0;\n    options.offsetY ??= 0;\n    options.machine ??= 0;\n\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const blockingX = i + options.offsetX!;\n        const blockingY = j + options.offsetY!;\n        if (blockingGrid.get(blockingX, blockingY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        } else if (\n            site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)\n        ) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    if (options.updateWalkable) {\n        if (!options.updateWalkable(walkableGrid)) {\n            return true;\n        }\n    }\n\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                } else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\nexport function siteDisruptedSize(\n    site: DIG.Site,\n    blockingGrid: GWU.grid.NumGrid,\n    blockingToMapX = 0,\n    blockingToMapY = 0\n) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        } else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    if (disrupts) return disrupts;\n\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                } else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\nexport function computeDistanceMap(\n    site: DIG.Site,\n    distanceMap: GWU.path.DijkstraMap,\n    originX: number,\n    originY: number,\n    _maxDistance: number\n) {\n    distanceMap.reset(site.width, site.height);\n    distanceMap.setGoal(originX, originY);\n    distanceMap.calculate((x, y) => {\n        if (!site.hasXY(x, y)) return GWU.path.OBSTRUCTION;\n        if (site.isPassable(x, y)) return GWU.path.OK;\n        if (site.blocksDiagonal(x, y)) return GWU.path.OBSTRUCTION;\n        return GWU.path.BLOCKED;\n    }, false);\n}\n\nexport function clearInteriorFlag(site: DIG.Site, machine: number) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine && !site.needsMachine(i, j)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\n\nexport interface AnalysisBase {\n    readonly height: number;\n    readonly width: number;\n\n    hasXY: GWU.xy.XYMatchFunc;\n\n    blocksPathing: GWU.xy.XYMatchFunc;\n    blocksMove: GWU.xy.XYMatchFunc;\n    blocksDiagonal: GWU.xy.XYMatchFunc;\n    isSecretDoor: GWU.xy.XYMatchFunc;\n}\n\nexport interface LoopSite extends AnalysisBase {\n    setInLoop: GWU.xy.XYFunc;\n    clearInLoop: GWU.xy.XYFunc;\n    isInLoop: GWU.xy.XYMatchFunc;\n}\n\nexport interface ChokeSite extends AnalysisBase {\n    clearChokepoint: GWU.xy.XYFunc;\n    setChokepoint: GWU.xy.XYFunc;\n    isChokepoint: GWU.xy.XYMatchFunc;\n    setChokeCount(x: number, y: number, count: number): void;\n    getChokeCount(x: number, y: number): number;\n\n    setGateSite: GWU.xy.XYFunc;\n    clearGateSite: GWU.xy.XYFunc;\n    isGateSite: GWU.xy.XYMatchFunc;\n\n    isAreaMachine: GWU.xy.XYMatchFunc;\n    isInLoop: GWU.xy.XYMatchFunc;\n}\n\nexport type AnalysisSite = LoopSite & ChokeSite;\n\nexport function analyze(map: AnalysisSite, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\n\nexport function updateChokepoints(map: ChokeSite, updateCounts: boolean) {\n    const blockMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            if (map.blocksDiagonal(i, j)) {\n                blockMap[i][j] = 2;\n            } else if (\n                (map.blocksPathing(i, j) || map.blocksMove(i, j)) &&\n                !map.isSecretDoor(i, j)\n            ) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                blockMap[i][j] = 1;\n            } else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                blockMap[i][j] = 0;\n            }\n        }\n    }\n\n    let passableArcCount;\n\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < blockMap.width - 1; i++) {\n        for (let j = 1; j < blockMap.height - 1; j++) {\n            map.clearChokepoint(i, j);\n            if (!blockMap[i][j]) {\n                if (!map.isInLoop(i, j)) {\n                    passableArcCount = 0;\n                    for (let dir = 0; dir < 8; dir++) {\n                        const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                        const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                        const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                        const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                        if (\n                            (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                                blockMap[newX][newY] > 0) !=\n                            (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                                blockMap[oldX][oldY] > 0)\n                        ) {\n                            if (++passableArcCount > 2) {\n                                if (\n                                    (blockMap[i - 1][j] &&\n                                        blockMap[i + 1][j]) ||\n                                    (blockMap[i][j - 1] && blockMap[i][j + 1])\n                                ) {\n                                    map.setChokepoint(i, j);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                const left = i - 1;\n                const right = i + 1;\n                const up = j - 1;\n                const down = j + 1;\n\n                if (blockMap[i][up] && blockMap[i][down]) {\n                    if (!blockMap[left][j] && !blockMap[right][j]) {\n                        if (\n                            !blockMap[left][up] ||\n                            !blockMap[left][down] ||\n                            !blockMap[right][up] ||\n                            !blockMap[right][down]\n                        ) {\n                            map.setGateSite(i, j);\n                        }\n                    }\n                } else if (blockMap[left][j] && blockMap[right][j]) {\n                    if (!blockMap[i][up] && !blockMap[i][down]) {\n                        if (\n                            !blockMap[left][up] ||\n                            !blockMap[left][down] ||\n                            !blockMap[right][up] ||\n                            !blockMap[right][down]\n                        ) {\n                            map.setGateSite(i, j);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.setChokeCount(i, j, 30000);\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n\n        // Scan through and find a chokepoint next to an open point.\n\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                if (!blockMap[i][j] && map.isChokepoint(i, j)) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (\n                            map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            !blockMap[newX][newY] &&\n                            !map.isChokepoint(newX, newY)\n                        ) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            blockMap[i][j] = 1;\n                            let cellCount = floodFillCount(\n                                map,\n                                grid,\n                                blockMap,\n                                newX,\n                                newY\n                            );\n                            blockMap[i][j] = 0;\n\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (\n                                            grid[i2][j2] &&\n                                            cellCount <\n                                                map.getChokeCount(i2, j2)\n                                        ) {\n                                            map.setChokeCount(\n                                                i2,\n                                                j2,\n                                                cellCount\n                                            );\n                                            // map.clearGateSite(i2, j2);\n                                        }\n                                    }\n                                }\n\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < map.getChokeCount(i, j)) {\n                                    map.setChokeCount(i, j, cellCount);\n                                    // map.setGateSite(i, j);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    GWU.grid.free(blockMap);\n    GWU.grid.free(grid);\n}\n\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(\n    map: ChokeSite,\n    results: GWU.grid.NumGrid,\n    blockMap: GWU.grid.NumGrid,\n    startX: number,\n    startY: number\n) {\n    function getCount(x: number, y: number): number {\n        let count = 1;\n\n        if (map.isAreaMachine(x, y)) {\n            // huh?\n            count = 10000;\n        }\n        return count;\n    }\n\n    let count = 0;\n    const todo: GWU.xy.Loc[] = [[startX, startY]];\n    const free: GWU.xy.Loc[] = [];\n\n    while (todo.length) {\n        const item = todo.pop()!;\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y]) continue;\n\n        results[x][y] = 1;\n        count += getCount(x, y);\n\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n\n            if (\n                map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                !blockMap[newX][newY] &&\n                !results[newX][newY]\n            ) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n\n    return Math.min(count, 10000);\n}\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n\nexport function updateLoopiness(map: LoopSite) {\n    resetLoopiness(map);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\n\nexport function resetLoopiness(map: LoopSite) {\n    GWU.xy.forRect(map.width, map.height, (x, y) => {\n        if (\n            (map.blocksPathing(x, y) || map.blocksMove(x, y)) &&\n            !map.isSecretDoor(x, y)\n        ) {\n            map.clearInLoop(x, y);\n            // cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n            // passMap[i][j] = false;\n        } else {\n            map.setInLoop(x, y);\n            // cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n            // passMap[i][j] = true;\n        }\n    });\n}\n\nexport function checkLoopiness(map: LoopSite) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v) return;\n            // const cell = map.cell(x, y);\n\n            todo[x][y] = 0;\n\n            if (!map.isInLoop(x, y)) {\n                return;\n            }\n\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n\n                if (!map.hasXY(newX, newY)) continue;\n\n                // const cell = map.cell(newX, newY);\n                if (!map.isInLoop(newX, newY)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY)) continue;\n\n                // const newCell = map.cell(newX, newY);\n                if (map.isInLoop(newX, newY)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                } else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                map.clearInLoop(x, y);\n                // cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && map.isInLoop(newX, newY)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\n\nexport function fillInnerLoopGrid(map: LoopSite, grid: GWU.grid.NumGrid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            // const cell = map.cell(x, y);\n            if (map.isInLoop(x, y)) {\n                grid[x][y] = 1;\n            } else if (x > 0 && y > 0) {\n                // const up = map.cell(x, y - 1);\n                // const left = map.cell(x - 1, y);\n                if (\n                    map.isInLoop(x, y - 1) &&\n                    map.isInLoop(x - 1, y)\n                    // up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    // left.flags.cell & Flags.Cell.IS_IN_LOOP\n                ) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\n\nexport function cleanLoopiness(map: LoopSite) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            // const cell = map.cell(i, j);\n            if (map.isInLoop(i, j)) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n\n                    if (\n                        map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !map.isInLoop(newX, newY)\n                    ) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.clearInLoop(i, j);\n                    // map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport * as Utils from './utils';\n\nimport { TileFactory, tileFactory, TileInfo } from './tile';\nimport * as ITEM from './item';\nimport * as HORDE from './horde';\nimport * as ANALYZE from './analyze';\n\nexport interface SetTileOptions {\n    superpriority?: boolean;\n    blockedByOtherLayers?: boolean;\n    blockedByActors?: boolean;\n    blockedByItems?: boolean;\n    volume?: number;\n    machine?: number;\n}\n\nexport const Flags = GWU.flag.make([\n    'CHOKEPOINT',\n    'GATE_SITE',\n    'IN_LOOP',\n    'IN_MACHINE',\n    'IN_AREA_MACHINE',\n    'IMPREGNABLE',\n]);\n\nexport interface SiteOptions {\n    rng?: GWU.rng.Random;\n    tiles?: TileFactory;\n}\n\nexport class Site implements ANALYZE.AnalysisSite {\n    _tiles: GWU.grid.NumGrid;\n    _doors: GWU.grid.NumGrid;\n    _flags: GWU.grid.NumGrid;\n    _machine: GWU.grid.NumGrid;\n    _chokeCounts: GWU.grid.NumGrid;\n\n    rng: GWU.rng.Random = GWU.rng.random;\n    tileFactory: TileFactory;\n\n    items: ITEM.ItemInstance[] = [];\n    actors: HORDE.ActorInstance[] = [];\n\n    depth: number;\n    machineCount: number;\n\n    constructor(width: number, height: number, opts: SiteOptions = {}) {\n        this.depth = 0;\n        this.machineCount = 0;\n        this.tileFactory = opts.tiles || tileFactory;\n\n        this._tiles = GWU.grid.alloc(width, height);\n        this._doors = GWU.grid.alloc(width, height);\n        this._flags = GWU.grid.alloc(width, height);\n        this._machine = GWU.grid.alloc(width, height);\n        this._chokeCounts = GWU.grid.alloc(width, height);\n\n        if (opts.rng) {\n            this.rng = opts.rng;\n        }\n    }\n\n    free() {\n        GWU.grid.free(this._tiles);\n        GWU.grid.free(this._doors);\n        GWU.grid.free(this._flags);\n        GWU.grid.free(this._machine);\n        GWU.grid.free(this._chokeCounts);\n    }\n    clear() {\n        this._tiles.fill(0);\n        this._doors.fill(0);\n        this._flags.fill(0);\n        this._machine.fill(0);\n        this._chokeCounts.fill(0);\n        // this.depth = 0;\n        this.machineCount = 0;\n    }\n    dump(fmt?: GWU.grid.GridFormat<number>) {\n        if (fmt) {\n            return this._tiles.dump(fmt);\n        }\n\n        this._tiles.dump((c) => this.tileFactory.getTile(c)!.ch || '?');\n    }\n    // drawInto(buffer: GWU.canvas.Buffer): void {\n    //     buffer.blackOut();\n    //     this.tiles.forEach((t, x, y) => {\n    //         const tile = GWM.tile.get(t);\n    //         buffer.drawSprite(x, y, tile.sprite);\n    //     });\n    // }\n\n    copy(other: Site) {\n        this.depth = other.depth;\n        this.machineCount = other.machineCount;\n\n        this._tiles.copy(other._tiles);\n        this._doors.copy(other._doors);\n        this._machine.copy(other._machine);\n        this._flags.copy(other._flags);\n        this._chokeCounts.copy(other._chokeCounts);\n\n        this.rng = other.rng;\n\n        this.items = other.items.slice();\n        this.actors = other.actors.slice();\n    }\n\n    copyTiles(other: Site, offsetX = 0, offsetY = 0) {\n        GWU.xy.forRect(this.width, this.height, (x, y) => {\n            const otherX = x - offsetX;\n            const otherY = y - offsetY;\n\n            const v = other._tiles.get(otherX, otherY);\n            if (!v) return;\n            this._tiles[x][y] = v;\n        });\n    }\n\n    setSeed(seed: number) {\n        this.rng.seed(seed);\n    }\n\n    get width() {\n        return this._tiles.width;\n    }\n    get height() {\n        return this._tiles.height;\n    }\n\n    hasXY(x: number, y: number) {\n        return this._tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x: number, y: number) {\n        return this._tiles.isBoundaryXY(x, y);\n    }\n\n    isPassable(x: number, y: number) {\n        return (\n            this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y)\n        );\n    }\n\n    isNothing(x: number, y: number) {\n        return this.hasTile(x, y, 'NOTHING');\n    }\n\n    isDiggable(x: number, y: number) {\n        return this.hasTile(x, y, 'NOTHING') || this.hasTile(x, y, 'WALL');\n    }\n\n    isProtected(_x: number, _y: number): boolean {\n        return false;\n    }\n\n    isFloor(x: number, y: number) {\n        return this.hasTile(x, y, 'FLOOR');\n    }\n\n    isDoor(x: number, y: number) {\n        return this.hasTile(x, y, 'DOOR');\n    }\n\n    isSecretDoor(x: number, y: number) {\n        return this.hasTile(x, y, 'SECRET_DOOR');\n    }\n\n    isBridge(x: number, y: number) {\n        return this.hasTile(x, y, 'BRIDGE');\n    }\n\n    isWall(x: number, y: number): boolean {\n        return this.blocksMove(x, y) && this.blocksVision(x, y);\n    }\n\n    blocksMove(x: number, y: number): boolean {\n        return this.tileFactory.getTile(this._tiles[x][y])!.blocksMove || false;\n    }\n\n    blocksDiagonal(x: number, y: number) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n\n    blocksPathing(x: number, y: number) {\n        return (\n            this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y)\n        );\n    }\n\n    blocksVision(x: number, y: number) {\n        return (\n            this.tileFactory.getTile(this._tiles[x][y])!.blocksVision || false\n        );\n    }\n\n    blocksItems(x: number, y: number) {\n        return (\n            this.blocksPathing(x, y) ||\n            this.isChokepoint(x, y) ||\n            this.isInLoop(x, y) ||\n            this.isInMachine(x, y)\n        );\n        // site.hasCellFlag(\n        //     x,\n        //     y,\n        //     GWM.flags.Cell.IS_CHOKEPOINT |\n        //         GWM.flags.Cell.IS_IN_LOOP |\n        //         GWM.flags.Cell.IS_IN_MACHINE\n        // );\n    }\n\n    blocksEffects(x: number, y: number) {\n        return this.isWall(x, y);\n    }\n\n    isStairs(x: number, y: number) {\n        return (\n            this.hasTile(x, y, 'UP_STAIRS') || this.hasTile(x, y, 'DOWN_STAIRS')\n        );\n    }\n\n    isDeep(x: number, y: number) {\n        return this.hasTile(x, y, 'DEEP');\n    }\n\n    isShallow(x: number, y: number) {\n        return this.hasTile(x, y, 'SHALLOW');\n    }\n\n    isAnyLiquid(x: number, y: number) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n\n    isSet(x: number, y: number) {\n        return (this._tiles.get(x, y) || 0) > 0;\n    }\n\n    tileBlocksMove(tile: string): boolean {\n        return this.tileFactory.blocksMove(tile);\n    }\n\n    setTile(\n        x: number,\n        y: number,\n        tile: string | number,\n        _opts: SetTileOptions = {}\n    ) {\n        // if (tile instanceof GWM.tile.Tile) {\n        //     tile = tile.index;\n        // }\n        if (!this._tiles.hasXY(x, y)) return false;\n\n        if (typeof tile === 'string') {\n            tile = this.tileFactory.tileId(tile);\n        }\n\n        // priority checks...\n\n        this._tiles[x][y] = tile;\n        return true;\n    }\n    clearTile(x: number, y: number) {\n        if (this.hasXY(x, y)) {\n            this._tiles[x][y] = 0;\n        }\n    }\n    getTile(x: number, y: number): TileInfo {\n        const id = this._tiles[x][y];\n        return this.tileFactory.getTile(id)!;\n    }\n\n    makeImpregnable(x: number, y: number): void {\n        this._flags[x][y] |= Flags.IMPREGNABLE;\n        // site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n    }\n\n    isImpregnable(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.IMPREGNABLE);\n    }\n\n    hasTile(x: number, y: number, tile: string | number): boolean {\n        if (typeof tile === 'string') {\n            tile = this.tileFactory.tileId(tile);\n        }\n        return this.hasXY(x, y) && this._tiles[x][y] == tile;\n    }\n\n    getChokeCount(x: number, y: number): number {\n        return this._chokeCounts[x][y];\n    }\n    setChokeCount(x: number, y: number, count: number): void {\n        this._chokeCounts[x][y] = count;\n    }\n\n    getFlags(x: number, y: number): number {\n        return this._flags[x][y];\n    }\n\n    setChokepoint(x: number, y: number): void {\n        this._flags[x][y] |= Flags.CHOKEPOINT;\n    }\n    isChokepoint(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.CHOKEPOINT);\n    }\n    clearChokepoint(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.CHOKEPOINT;\n    }\n\n    setGateSite(x: number, y: number): void {\n        this._flags[x][y] |= Flags.GATE_SITE;\n    }\n    isGateSite(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.GATE_SITE);\n    }\n\n    clearGateSite(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.GATE_SITE;\n    }\n\n    setInLoop(x: number, y: number): void {\n        this._flags[x][y] |= Flags.IN_LOOP;\n    }\n    isInLoop(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.IN_LOOP);\n    }\n    clearInLoop(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.IN_LOOP;\n    }\n\n    analyze(updateChokeCounts = true): void {\n        ANALYZE.analyze(this, updateChokeCounts);\n    }\n\n    snapshot(): Site {\n        const other = new Site(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    restore(snapshot: Site) {\n        this.copy(snapshot);\n    }\n\n    nextMachineId(): number {\n        this.machineCount += 1;\n        return this.machineCount;\n    }\n    setMachine(x: number, y: number, id: number, isRoom?: boolean): void {\n        this._machine[x][y] = id;\n        const flag = isRoom ? Flags.IN_MACHINE : Flags.IN_AREA_MACHINE;\n        this._flags[x][y] |= flag;\n    }\n    isAreaMachine(x: number, y: number): boolean {\n        return !!(this._machine[x][y] & Flags.IN_AREA_MACHINE);\n    }\n    isInMachine(x: number, y: number): boolean {\n        return this._machine[x][y] > 0;\n    }\n    getMachine(x: number, y: number): number {\n        return this._machine[x][y];\n    }\n\n    needsMachine(_x: number, _y: number): boolean {\n        // site.hasCellFlag(\n        //     i,\n        //     j,\n        //     GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER\n        // );\n        return false;\n    }\n\n    updateDoorDirs(): void {\n        this._doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x: number, y: number): number {\n        return this._doors[x][y];\n    }\n\n    // tileBlocksMove(tile: number): boolean {\n    //     return (\n    //         tile === WALL ||\n    //         tile === DEEP ||\n    //         tile === IMPREGNABLE ||\n    //         tile === DIG.NOTHING\n    //     );\n    // }\n\n    isOccupied(x: number, y: number): boolean {\n        return this.hasActor(x, y) || this.hasItem(x, y);\n    }\n\n    canSpawnActor(x: number, y: number, _actor: HORDE.ActorInstance): boolean {\n        // const cell = map.cell(x, y);\n        // if (actor.avoidsCell(cell)) return false;\n\n        // if (Map.isHallway(map, x, y)) {\n        //     return false;\n        // }\n        return this.isFloor(x, y);\n    }\n\n    eachActor(cb: (a: HORDE.ActorInstance) => void): void {\n        this.actors.forEach(cb);\n    }\n    addActor(x: number, y: number, a: HORDE.ActorInstance): number {\n        a.x = x;\n        a.y = y;\n        this.actors.push(a);\n        return this.actors.length;\n    }\n    getActor(i: number): HORDE.ActorInstance {\n        return this.actors[i];\n    }\n    // removeActor(a: HORDE.ActorInstance): void {\n    //     GWU.arrayDelete(this.actors, a);\n    // }\n    forbidsActor(x: number, y: number, _a: HORDE.ActorInstance): boolean {\n        return !this.isFloor(x, y);\n    }\n    hasActor(x: number, y: number): boolean {\n        return this.actors.some((a) => a.x === x && a.y === y);\n    }\n\n    eachItem(cb: (i: ITEM.ItemInstance) => void): void {\n        this.items.forEach(cb);\n    }\n    addItem(x: number, y: number, i: ITEM.ItemInstance): number {\n        i.x = x;\n        i.y = y;\n        this.items.push(i);\n        return this.items.length;\n    }\n    getItem(i: number): ITEM.ItemInstance {\n        return this.items[i];\n    }\n    // removeItem(i: ITEM.ItemInstance): void {\n    //     GWU.arrayDelete(this.items, i);\n    // }\n    forbidsItem(x: number, y: number, _i: ITEM.ItemInstance): boolean {\n        return !this.isFloor(x, y);\n    }\n    hasItem(x: number, y: number): boolean {\n        return this.items.some((i) => i.x === x && i.y === y);\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport { Site } from '../site';\nimport { Room } from '../../types';\nimport { BuildData } from '../../build/data';\nimport { BuildStep } from '../../build/buildStep';\nimport * as ITEM from '../item';\n\nexport interface Logger {\n    onDigFirstRoom(site: Site): void;\n    onRoomCandidate(room: Room, roomSite: Site): void;\n    onRoomFailed(site: Site, room: Room, roomSite: Site, error: string): void;\n    onRoomSuccess(site: Site, room: Room): void;\n\n    onLoopsAdded(site: Site): void;\n    onLakesAdded(site: Site): void;\n    onBridgesAdded(site: Site): void;\n    onStairsAdded(site: Site): void;\n\n    //\n\n    onBuildError(error: string): void;\n\n    onBlueprintPick(data: BuildData, flags: number, depth: number): void;\n\n    onBlueprintCandidates(data: BuildData): void;\n\n    onBlueprintStart(\n        data: BuildData,\n        adoptedItem: ITEM.ItemInstance | null\n    ): void;\n\n    onBlueprintInterior(data: BuildData): void;\n\n    onBlueprintFail(data: BuildData, error: string): void;\n\n    onBlueprintSuccess(data: BuildData): void;\n\n    onStepStart(\n        data: BuildData,\n        step: BuildStep,\n        item: ITEM.ItemInstance | null\n    ): void;\n\n    onStepCandidates(\n        data: BuildData,\n        step: BuildStep,\n        candidates: GWU.grid.NumGrid,\n        wantCount: number\n    ): void;\n\n    onStepInstanceSuccess(\n        data: BuildData,\n        step: BuildStep,\n        x: number,\n        y: number\n    ): void;\n\n    onStepInstanceFail(\n        data: BuildData,\n        step: BuildStep,\n        x: number,\n        y: number,\n        error: string\n    ): void;\n\n    onStepSuccess(data: BuildData, step: BuildStep): void;\n\n    onStepFail(data: BuildData, step: BuildStep, error: string): void;\n}\n\nexport class NullLogger implements Logger {\n    onDigFirstRoom(): void {}\n    onRoomCandidate(): void {}\n    onRoomFailed(): void {}\n    onRoomSuccess(): void {}\n    onLoopsAdded(): void {}\n    onLakesAdded(): void {}\n    onBridgesAdded(): void {}\n    onStairsAdded(): void {}\n\n    onBuildError(): void {}\n    onBlueprintPick(): void {}\n    onBlueprintCandidates(): void {}\n    onBlueprintStart(): void {}\n    onBlueprintInterior(): void {}\n    onBlueprintFail(): void {}\n    onBlueprintSuccess(): void {}\n    onStepStart(): void {}\n    onStepCandidates(): void {}\n    onStepInstanceSuccess(): void {}\n    onStepInstanceFail(): void {}\n    onStepSuccess(): void {}\n    onStepFail(): void {}\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport { BuildData } from './data';\nimport { Blueprint } from './blueprint';\nimport * as FEATURE from '../feature';\n// import * as ITEM from '../item';\n\nexport interface HordeStepOptions {\n    id?: string;\n    tags?: string;\n    feature?: FEATURE.FeatureConfig;\n    make?: Record<string, any>;\n}\n\nexport interface ItemStepOptions {\n    id?: string;\n    tags?: string;\n    make?: Record<string, any>;\n    feature?: FEATURE.FeatureConfig;\n}\n\nexport interface StepOptions {\n    tile: string;\n    flags: GWU.flag.FlagBase;\n    pad: number;\n    count: GWU.range.RangeBase;\n    item: string | ItemStepOptions;\n    horde: string | boolean | HordeStepOptions;\n    feature: FEATURE.FeatureConfig;\n}\n\nexport interface HordeStepInfo extends HordeStepOptions {\n    tags: string;\n    feature?: FEATURE.FeatureFn;\n}\n\nexport interface ItemStepInfo extends ItemStepOptions {\n    tags: string;\n    feature?: FEATURE.FeatureFn;\n}\n\nconst Fl = GWU.flag.fl;\n\nexport enum StepFlags {\n    BS_OUTSOURCE_ITEM_TO_MACHINE = Fl(1), // item must be adopted by another machine\n    BS_BUILD_VESTIBULE = Fl(2), // call this at the origin of a door room to create a new door guard machine there\n    BS_ADOPT_ITEM = Fl(3), // this feature will take the adopted item (be it from another machine or a previous feature)\n    BS_BUILD_AT_ORIGIN = Fl(4), // generate this feature at the room entrance\n\n    BS_PERMIT_BLOCKING = Fl(5), // permit the feature to block the map's passability (e.g. to add a locked door)\n    BS_TREAT_AS_BLOCKING = Fl(6), // treat this terrain as though it blocks, for purposes of deciding whether it can be placed there\n\n    BS_NEAR_ORIGIN = Fl(7), // feature must spawn in the rough quarter of tiles closest to the origin\n    BS_FAR_FROM_ORIGIN = Fl(8), // feature must spawn in the rough quarter of tiles farthest from the origin\n    BS_IN_VIEW_OF_ORIGIN = Fl(9), // this feature must be in view of the origin\n    BS_IN_PASSABLE_VIEW_OF_ORIGIN = Fl(10), // this feature must be in view of the origin, where \"view\" is blocked by pathing blockers\n\n    BS_HORDE_TAKES_ITEM = Fl(11), // the item associated with this feature (including if adopted) will be in possession of the horde leader that's generated\n    BS_HORDE_SLEEPING = Fl(12), // the monsters should be asleep when generated\n    BS_HORDE_FLEEING = Fl(13), // the monsters should be permanently fleeing when generated\n    BS_HORDES_DORMANT = Fl(14), // monsters are dormant, and appear when a dungeon feature with DFF_ACTIVATE_DORMANT_MONSTER spawns on their tile\n\n    BS_ITEM_IS_KEY = Fl(15),\n    BS_ITEM_IDENTIFIED = Fl(16),\n    BS_ITEM_PLAYER_AVOIDS = Fl(17),\n\n    BS_EVERYWHERE = Fl(18), // generate the feature on every tile of the machine (e.g. carpeting)\n    BS_ALTERNATIVE = Fl(19), // build only one feature that has this flag per machine; the rest are skipped\n    BS_ALTERNATIVE_2 = Fl(20), // same as BS_ALTERNATIVE, but provides for a second set of alternatives of which only one will be chosen\n\n    BS_BUILD_IN_WALLS = Fl(21), // build in an impassable tile that is adjacent to the interior\n    BS_BUILD_ANYWHERE_ON_LEVEL = Fl(22), // build anywhere on the level that is not inside the machine\n    BS_REPEAT_UNTIL_NO_PROGRESS = Fl(23), // keep trying to build this feature set until no changes are made\n    BS_IMPREGNABLE = Fl(24), // this feature's location will be immune to tunneling\n\n    BS_NO_BLOCK_ORIGIN = Fl(25), // Treat as blocking, but do not block the path to the origin\n\n    // TODO - BS_ALLOW_IN_HALLWAY instead?\n    BS_NOT_IN_HALLWAY = Fl(27), // the feature location must have a passableArcCount of <= 1\n\n    BS_ALLOW_BOUNDARY = Fl(28), // allow build it in the outermost walls of the level\n\n    BS_SKELETON_KEY = Fl(29), // if a key is generated or adopted by this feature, it will open all locks in this machine.\n    BS_KEY_DISPOSABLE = Fl(30), // if a key is generated or adopted, it will self-destruct after being used at this current location.\n}\n\nexport class BuildStep {\n    tile: string | null = null;\n    flags: number = 0;\n    pad: number = 0;\n    count: GWU.range.Range;\n    item: ItemStepInfo | null = null;\n    horde: HordeStepInfo | null = null;\n    feature: FEATURE.FeatureFn | null = null;\n    chance = 0;\n    index = -1;\n    // next: null = null;\n    // id = 'n/a';\n\n    constructor(cfg: Partial<StepOptions> = {}) {\n        this.tile = cfg.tile || null;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        if (typeof cfg.item === 'string') {\n            this.item = { tags: cfg.item };\n        } else if (cfg.item) {\n            // @ts-ignore\n            this.item = Object.assign({ tags: '' }, cfg.item);\n            if (this.item!.feature) {\n                this.item!.feature = FEATURE.make(this.item!.feature);\n            }\n        } else {\n            this.item = null;\n        }\n        if (cfg.horde) {\n            if (cfg.horde === true) {\n                this.horde = { tags: '' };\n            } else if (typeof cfg.horde === 'string') {\n                this.horde = { tags: cfg.horde };\n            } else {\n                // @ts-ignore\n                this.horde = Object.assign({ tags: '' }, cfg.horde);\n                if (this.horde!.feature) {\n                    this.horde!.feature = FEATURE.make(this.horde!.feature);\n                }\n            }\n        } else {\n            this.horde = null;\n        }\n\n        if (cfg.feature) {\n            this.feature = FEATURE.make(cfg.feature);\n        } else {\n            this.feature = null;\n        }\n\n        if (this.item && this.flags & StepFlags.BS_ADOPT_ITEM) {\n            throw new Error(\n                'Cannot have blueprint step with item and BS_ADOPT_ITEM.'\n            );\n        }\n\n        if (this.buildAtOrigin && this.count.hi > 1) {\n            throw new Error(\n                'Cannot have count > 1 for step with BS_BUILD_AT_ORIGIN.'\n            );\n        }\n        if (this.buildAtOrigin && this.repeatUntilNoProgress) {\n            throw new Error(\n                'Cannot have BS_BUILD_AT_ORIGIN and BS_REPEAT_UNTIL_NO_PROGRESS together in a build step.'\n            );\n        }\n        if (this.hordeTakesItem && !this.horde) {\n            throw new Error(\n                'Cannot have BS_HORDE_TAKES_ITEM without a horde configured.'\n            );\n        }\n    }\n\n    get allowBoundary(): boolean {\n        return !!(this.flags & StepFlags.BS_ALLOW_BOUNDARY);\n    }\n\n    get notInHallway(): boolean {\n        return !!(this.flags & StepFlags.BS_NOT_IN_HALLWAY);\n    }\n\n    get buildInWalls(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_IN_WALLS);\n    }\n\n    get buildAnywhere(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_ANYWHERE_ON_LEVEL);\n    }\n\n    get repeatUntilNoProgress(): boolean {\n        return !!(this.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS);\n    }\n\n    get permitBlocking(): boolean {\n        return !!(this.flags & StepFlags.BS_PERMIT_BLOCKING);\n    }\n\n    get treatAsBlocking(): boolean {\n        return !!(\n            this.flags &\n            (StepFlags.BS_TREAT_AS_BLOCKING | StepFlags.BS_NO_BLOCK_ORIGIN)\n        );\n    }\n\n    get noBlockOrigin(): boolean {\n        return !!(this.flags & StepFlags.BS_NO_BLOCK_ORIGIN);\n    }\n\n    get adoptItem(): boolean {\n        return !!(this.flags & StepFlags.BS_ADOPT_ITEM);\n    }\n\n    get itemIsKey(): boolean {\n        return !!(this.flags & StepFlags.BS_ITEM_IS_KEY);\n    }\n\n    get keyIsDisposable(): boolean {\n        return !!(this.flags & StepFlags.BS_KEY_DISPOSABLE);\n    }\n\n    get outsourceItem(): boolean {\n        return !!(this.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE);\n    }\n\n    get impregnable(): boolean {\n        return !!(this.flags & StepFlags.BS_IMPREGNABLE);\n    }\n\n    get buildVestibule(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_VESTIBULE);\n    }\n\n    get hordeTakesItem(): boolean {\n        return !!(this.flags & StepFlags.BS_HORDE_TAKES_ITEM);\n    }\n\n    get generateEverywhere(): boolean {\n        return !!(\n            this.flags &\n            StepFlags.BS_EVERYWHERE &\n            ~StepFlags.BS_BUILD_AT_ORIGIN\n        );\n    }\n\n    get buildAtOrigin(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_AT_ORIGIN);\n    }\n\n    get buildsInstances(): boolean {\n        return !!(\n            this.feature ||\n            this.tile ||\n            this.item ||\n            this.horde ||\n            this.adoptItem\n        );\n    }\n\n    // makeItem(data: BuildData): ITEM.ItemInfo | null {\n    //     if (!this.item) return null;\n    //     return ITEM.pick(data.depth, this.item);\n    // }\n\n    // cellIsCandidate(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     x: number,\n    //     y: number,\n    //     distanceBound: [number, number]\n    // ) {\n    //     return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    // }\n\n    // distanceBound(builder: BuildData): [number, number] {\n    //     return calcDistanceBound(builder, this);\n    // }\n\n    // updateViewMap(builder: BuildData): void {\n    //     updateViewMap(builder, this);\n    // }\n\n    // build(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     adoptedItem: GWM.item.Item | null\n    // ): boolean {\n    //     return buildStep(builder, blueprint, this, adoptedItem);\n    // }\n\n    markCandidates(\n        data: BuildData,\n        candidates: GWU.grid.NumGrid,\n        distanceBound: [number, number] = [0, 10000]\n    ): number {\n        updateViewMap(data, this);\n        const blueprint = data.blueprint;\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            const candidateType = cellIsCandidate(\n                data,\n                blueprint,\n                this,\n                i,\n                j,\n                distanceBound\n            );\n            if (candidateType === CandidateType.OK) {\n                count++;\n            }\n            return candidateType;\n        });\n        return count;\n    }\n\n    makePersonalSpace(\n        _data: BuildData,\n        x: number,\n        y: number,\n        candidates: GWU.grid.NumGrid\n    ) {\n        let count = 0;\n\n        if (this.pad < 1) return 0; // do not mark occupied\n        // or...\n        // if (this.buildEverywhere) return 0;  // do not mark occupied\n\n        for (let i = x - this.pad; i <= x + this.pad; i++) {\n            for (let j = y - this.pad; j <= y + this.pad; j++) {\n                if (candidates.hasXY(i, j)) {\n                    if (candidates[i][j] == 1) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    // builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n\n    toString() {\n        let parts = [];\n        if (this.tile) {\n            parts.push('tile: ' + this.tile);\n        }\n        if (this.feature) {\n            parts.push('effect: ' + JSON.stringify(this.feature));\n        }\n        if (this.item) {\n            parts.push('item: ' + JSON.stringify(this.item));\n        }\n        if (this.horde) {\n            parts.push('horde: ' + JSON.stringify(this.horde));\n        }\n        if (this.pad > 1) {\n            parts.push('pad: ' + this.pad);\n        }\n        if (this.count.lo > 1 || this.count.hi > 1) {\n            parts.push('count: ' + this.count.toString());\n        }\n        if (this.chance) {\n            parts.push('chance: ' + this.chance);\n        }\n        if (this.flags) {\n            parts.push('flags: ' + GWU.flag.toString(StepFlags, this.flags));\n        }\n        return '{ ' + parts.join(', ') + ' }';\n    }\n}\n\nexport function updateViewMap(builder: BuildData, buildStep: BuildStep): void {\n    if (\n        buildStep.flags &\n        (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n            StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN)\n    ) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        } else {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\n\nexport function calcDistanceBound(\n    builder: BuildData,\n    buildStep: BuildStep\n): [number, number] {\n    const distanceBound: [number, number] = [0, 10000];\n    if (buildStep.flags & StepFlags.BS_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BS_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\n\nexport enum CandidateType {\n    NOT_CANDIDATE = 0,\n    OK = 1,\n    IN_HALLWAY,\n    ON_BOUNDARY,\n    MUST_BE_ORIGIN,\n    NOT_ORIGIN,\n    OCCUPIED,\n    NOT_IN_VIEW,\n    TOO_FAR,\n    TOO_CLOSE,\n    INVALID_WALL,\n    BLOCKED,\n    FAILED,\n}\n\nexport function cellIsCandidate(\n    builder: BuildData,\n    blueprint: Blueprint,\n    buildStep: BuildStep,\n    x: number,\n    y: number,\n    distanceBound: [number, number]\n): CandidateType {\n    const site = builder.site;\n\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (\n        buildStep.notInHallway &&\n        GWU.xy.arcCount(\n            x,\n            y,\n            (i, j) => site.hasXY(i, j) && site.isPassable(i, j)\n        ) > 1\n    ) {\n        return CandidateType.IN_HALLWAY;\n    }\n\n    // if (buildStep.noBlockOrigin) {\n    //     let ok = true;\n    //     GWU.xy.eachNeighbor(\n    //         x,\n    //         y,\n    //         (nx, ny) => {\n    //             if (nx === builder.originX && ny === builder.originY) {\n    //                 ok = false;\n    //             }\n    //         },\n    //         true\n    //     );\n    //     if (!ok) return false;\n    // }\n\n    // No building along the perimeter of the level if it's prohibited.\n    if (\n        (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1) &&\n        !buildStep.allowBoundary\n    ) {\n        return CandidateType.ON_BOUNDARY;\n    }\n\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.buildAtOrigin) {\n        if (x == builder.originX && y == builder.originY)\n            return CandidateType.OK;\n        return CandidateType.MUST_BE_ORIGIN;\n    } else if (\n        blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY\n    ) {\n        return CandidateType.NOT_ORIGIN;\n    }\n\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return CandidateType.OCCUPIED;\n    }\n\n    // Must be in the viewmap if the appropriate flag is set.\n    if (\n        buildStep.flags &\n            (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n                StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]\n    ) {\n        return CandidateType.NOT_IN_VIEW;\n    }\n\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (!builder.distanceMap.hasXY(i, j)) return;\n                if (\n                    !site.blocksPathing(i, j) &&\n                    distance > builder.distanceMap.getDistance(i, j) + 1\n                ) {\n                    distance = builder.distanceMap.getDistance(i, j) + 1;\n                }\n            },\n            true\n        );\n    } else {\n        distance = builder.distanceMap.getDistance(x, y);\n    }\n\n    if (distance > distanceBound[1]) return CandidateType.TOO_FAR; // distance exceeds max\n    if (distance < distanceBound[0]) return CandidateType.TOO_CLOSE;\n\n    if (buildStep.buildInWalls) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (\n            !builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)\n        ) {\n            let ok = false;\n            let failed = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (newX, newY) => {\n                    if (failed) return;\n                    if (!site.hasXY(newX, newY)) return;\n                    if (\n                        !builder.interior[newX][newY] &&\n                        !buildStep.buildAnywhere\n                    ) {\n                        return;\n                    }\n                    // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                    const neighborMachine = site.getMachine(newX, newY);\n                    if (\n                        !site.blocksPathing(newX, newY) &&\n                        (!neighborMachine ||\n                            neighborMachine == builder.machineNumber) &&\n                        !(newX == builder.originX && newY == builder.originY)\n                    ) {\n                        if (\n                            buildStep.notInHallway &&\n                            GWU.xy.arcCount(\n                                newX,\n                                newY,\n                                (i, j) =>\n                                    site.hasXY(i, j) && site.isPassable(i, j)\n                            ) > 1\n                        ) {\n                            // return CandidateType.IN_HALLWAY;\n                            failed = true;\n                            ok = false;\n                        } else {\n                            ok = true;\n                        }\n                    }\n                },\n                true\n            );\n            return ok ? CandidateType.OK : CandidateType.INVALID_WALL;\n        }\n        return CandidateType.NOT_CANDIDATE;\n    } else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return CandidateType.INVALID_WALL;\n    } else if (buildStep.buildAnywhere) {\n        if (buildStep.item && site.blocksItems(x, y)) {\n            return CandidateType.BLOCKED;\n        } else {\n            return CandidateType.OK;\n        }\n    } else if (builder.interior[x][y]) {\n        return CandidateType.OK;\n    }\n    return CandidateType.FAILED;\n}\n\n// export function buildStep(\n//     builder: BuildData,\n//     blueprint: Blueprint,\n//     buildStep: BuildStep,\n//     adoptedItem: GWM.item.Item | null\n// ): boolean {\n//     let wantCount = 0;\n//     let builtCount = 0;\n\n//     const site = builder.site;\n\n//     const candidates = GWU.grid.alloc(site.width, site.height);\n\n//     // Figure out the distance bounds.\n//     const distanceBound = calcDistanceBound(builder, buildStep);\n//     buildStep.updateViewMap(builder);\n\n//     // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n\n//     // Make a master map of candidate locations for this feature.\n//     let qualifyingTileCount = markCandidates(\n//         candidates,\n//         builder,\n//         blueprint,\n//         buildStep,\n//         distanceBound\n//     );\n\n//     if (!buildStep.generateEverywhere) {\n//         wantCount = buildStep.count.value();\n//     }\n\n//     if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n//         console.log(\n//             ' - Only %s qualifying tiles - want at least %s.',\n//             qualifyingTileCount,\n//             buildStep.count.lo\n//         );\n//         GWU.grid.free(candidates);\n//         return false;\n//     }\n\n//     let x = 0,\n//         y = 0;\n\n//     let success = true;\n//     let didSomething = false;\n\n//     do {\n//         success = true;\n//         // Find a location for the feature.\n//         if (buildStep.buildAtOrigin) {\n//             // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n//             x = builder.originX;\n//             y = builder.originY;\n//         } else {\n//             // Pick our candidate location randomly, and also strike it from\n//             // the candidates map so that subsequent instances of this same feature can't choose it.\n//             [x, y] = site.rng.matchingLoc(\n//                 candidates.width,\n//                 candidates.height,\n//                 (x, y) => candidates[x][y] > 0\n//             );\n//         }\n//         // Don't waste time trying the same place again whether or not this attempt succeeds.\n//         candidates[x][y] = 0;\n//         qualifyingTileCount--;\n\n//         // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n//         if (buildStep.effect) {\n//             success = site.fireEffect(buildStep.effect, x, y);\n//             didSomething = success;\n//         }\n\n//         // Now try to place the terrain tile, if any.\n//         if (success && buildStep.tile !== -1) {\n//             const tile = GWM.tile.get(buildStep.tile);\n//             if (\n//                 !(buildStep.flags & StepFlags.BS_PERMIT_BLOCKING) &&\n//                 (tile.blocksMove() ||\n//                     buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING)\n//             ) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y, {\n//                     machine: site.machineCount,\n//                 });\n//             }\n//             if (success) {\n//                 success = site.setTile(x, y, tile);\n//                 didSomething = didSomething || success;\n//             }\n//         }\n\n//         // Generate an actor, if necessary\n\n//         // Generate an item, if necessary\n//         if (success && buildStep.item) {\n//             const item = site.makeRandomItem(buildStep.item);\n//             if (!item) {\n//                 success = false;\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_ITEM_IS_KEY) {\n//                 item.key = GWM.entity.makeKeyInfo(\n//                     x,\n//                     y,\n//                     !!(buildStep.flags & StepFlags.BS_KEY_DISPOSABLE)\n//                 );\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE) {\n//                 success = builder.buildRandom(\n//                     Flags.BP_ADOPT_ITEM,\n//                     -1,\n//                     -1,\n//                     item\n//                 );\n//                 if (success) {\n//                     didSomething = true;\n//                 }\n//             } else {\n//                 success = site.addItem(x, y, item);\n//                 didSomething = didSomething || success;\n//             }\n//         } else if (success && buildStep.flags & StepFlags.BS_ADOPT_ITEM) {\n//             // adopt item if necessary\n//             if (!adoptedItem) {\n//                 GWU.grid.free(candidates);\n//                 throw new Error(\n//                     'Failed to build blueprint because there is no adopted item.'\n//                 );\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y);\n//             }\n\n//             if (success) {\n//                 success = site.addItem(x, y, adoptedItem);\n//                 if (success) {\n//                     didSomething = true;\n//                 } else {\n//                     console.log('- failed to add item', x, y);\n//                 }\n//             } else {\n//                 // console.log('- blocks map', x, y);\n//             }\n//         }\n\n//         if (success && didSomething) {\n//             // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n//             qualifyingTileCount -= makePersonalSpace(\n//                 builder,\n//                 x,\n//                 y,\n//                 candidates,\n//                 buildStep.pad\n//             );\n//             builtCount++; // we've placed an instance\n\n//             // Mark the feature location as part of the machine, in case it is not already inside of it.\n//             if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n//                 site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n//             }\n\n//             // Mark the feature location as impregnable if requested.\n//             if (buildStep.flags & StepFlags.BS_IMPREGNABLE) {\n//                 site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n//             }\n//         }\n\n//         // Finished with this instance!\n//     } while (\n//         qualifyingTileCount > 0 &&\n//         (buildStep.generateEverywhere ||\n//             builtCount < wantCount ||\n//             buildStep.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS)\n//     );\n\n//     if (success && buildStep.flags & StepFlags.BS_BUILD_VESTIBULE) {\n//         // Generate a door guard machine.\n//         // Try to create a sub-machine that qualifies.\n\n//         success = builder.buildRandom(\n//             Flags.BP_VESTIBULE,\n//             builder.originX,\n//             builder.originY\n//         );\n\n//         if (!success) {\n//             // console.log(\n//             //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n//             // );\n//             // failure! abort!\n//             GWU.grid.free(candidates);\n//             return false;\n//         }\n//         ++builtCount;\n//     }\n\n//     //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n//     //DEBUG logBuffer(candidates);\n\n//     success = builtCount > 0;\n\n//     GWU.grid.free(candidates);\n//     return success;\n// }\n","import * as GWU from 'gw-utils';\nimport { Room } from '../../types';\nimport { Site } from '../site';\nimport { Logger } from './logger';\nimport { BuildData } from '../../build/data';\nimport { BuildStep, StepFlags } from '../../build/buildStep';\n\nexport class ConsoleLogger implements Logger {\n    onDigFirstRoom(site: Site) {\n        console.group('dig first room');\n        site.dump();\n        console.groupEnd();\n    }\n\n    onRoomCandidate(room: Room, roomSite: Site): void {\n        console.group('room candidate: ' + room.toString());\n        roomSite.dump();\n        console.groupEnd();\n    }\n\n    onRoomFailed(\n        _site: Site,\n        _room: Room,\n        _roomSite: Site,\n        error: string\n    ): void {\n        console.log('Room Failed - ', error);\n    }\n\n    onRoomSuccess(site: Site, room: Room): void {\n        console.group('Added Room - ' + room.toString());\n        site.dump();\n        console.groupEnd();\n    }\n\n    onLoopsAdded(_site: Site): void {\n        console.log('loops added');\n    }\n    onLakesAdded(_site: Site): void {\n        console.log('lakes added');\n    }\n    onBridgesAdded(_site: Site): void {\n        console.log('bridges added');\n    }\n    onStairsAdded(_site: Site): void {\n        console.log('stairs added');\n    }\n\n    //\n\n    onBuildError(error: string) {\n        console.log(`onBuildError - error: ${error}`);\n    }\n\n    onBlueprintPick(data: BuildData, flags: number, depth: number) {\n        console.log(\n            `onBlueprintPick - ${\n                data.blueprint.id\n            }, depth = ${depth}, matchingFlags = ${GWU.flag.toString(\n                StepFlags,\n                flags\n            )}`\n        );\n    }\n\n    onBlueprintCandidates(data: BuildData) {\n        const label = `onBlueprintCandidates - ${data.blueprint.id}`;\n        console.group(label);\n        data.candidates.dump();\n        console.groupEnd();\n    }\n\n    onBlueprintStart(data: BuildData) {\n        console.group(\n            `onBlueprintStart - ${data.blueprint.id} @ ${data.originX},${\n                data.originY\n            } : stepCount: ${\n                data.blueprint.steps.length\n            }, size: [${data.blueprint.size.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                data.blueprint.flags\n            )}`\n        );\n    }\n\n    onBlueprintInterior(data: BuildData) {\n        console.group(`onBlueprintInterior - ${data.blueprint.id}`);\n        data.interior.dump();\n        console.groupEnd();\n    }\n\n    onBlueprintFail(data: BuildData, error: string) {\n        console.log(\n            `onBlueprintFail - ${data.blueprint.id} @ ${data.originX},${data.originY} : error: ${error}`\n        );\n        console.groupEnd();\n    }\n\n    onBlueprintSuccess(data: BuildData) {\n        console.log(\n            `onBlueprintSuccess - ${data.blueprint.id} @ ${data.originX},${data.originY}`\n        );\n        console.groupEnd();\n    }\n\n    onStepStart(data: BuildData, step: BuildStep) {\n        console.group(\n            `onStepStart - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : count: [${step.count.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                step.flags\n            )}`\n        );\n        console.log(step.toString());\n    }\n\n    onStepCandidates(\n        data: BuildData,\n        step: BuildStep,\n        candidates: GWU.grid.NumGrid,\n        wantCount: number\n    ) {\n        const haveCount = candidates.count((v) => v == 1);\n        console.log(\n            `onStepCandidates - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : wantCount: ${wantCount}, have: ${haveCount}`\n        );\n        candidates.dump();\n        if (haveCount == 0) {\n            console.log('No candidates - check interior');\n            data.interior.dump();\n        }\n    }\n\n    onStepInstanceSuccess(\n        _data: BuildData,\n        _step: BuildStep,\n        x: number,\n        y: number\n    ) {\n        console.log(`onStepInstance @ ${x},${y}`);\n    }\n\n    onStepInstanceFail(\n        _data: BuildData,\n        _step: BuildStep,\n        x: number,\n        y: number,\n        error: string\n    ) {\n        console.log(`onStepInstanceFail @ ${x},${y} - error: ${error}`);\n    }\n\n    onStepSuccess(data: BuildData, step: BuildStep) {\n        console.log(\n            `onStepSuccess - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : count: [${step.count.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                step.flags\n            )}`\n        );\n        console.groupEnd();\n    }\n\n    onStepFail(data: BuildData, step: BuildStep, error: string) {\n        console.log(\n            `onStepFail - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : error : ${error}`\n        );\n        console.groupEnd();\n    }\n}\n","import * as GWU from 'gw-utils';\n\nexport type TileId = string;\n\nexport interface RoomConfig {\n    // fn?: RoomFn;\n    // door?: boolean | number;\n    // doorChance?: number;\n    tile?: TileId;\n    [x: string]: any;\n}\n\n// export type RoomFn = (\n//     config: RoomConfig,\n//     grid: GWU.grid.NumGrid\n// ) => Room | RoomConfig | null;\n\n// export interface RoomData extends RoomConfig {\n//     fn: RoomFn;\n//     id: string;\n// }\n\n// export type HallFn = (\n//     opts: HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: Room\n// ) => Hall | any | null;\n// export interface HallConfig {\n//     fn?: HallFn;\n//     chance?: number;\n//     length?: GWU.range.RangeBase | [GWU.range.RangeBase, GWU.range.RangeBase];\n//     width?: GWU.range.RangeBase;\n//     tile?: number;\n//     [x: string]: any;\n// }\n\n// export interface HallData extends HallConfig {\n//     fn: HallFn;\n//     id: string;\n// }\n\n// export interface DigConfig {\n//     room: string | any;\n//     hall?: string | HallConfig | boolean;\n//     tries?: number;\n//     locs?: GWU.xy.Loc[];\n//     loc?: GWU.xy.Loc;\n//     door?: number | boolean;\n// }\n\nexport type DigFn = (x: number, y: number, tile: number) => any;\n\nexport class Hall extends GWU.xy.Bounds {\n    public doors: GWU.xy.Loc[] = [];\n\n    constructor(x: number, y: number, width: number, height: number) {\n        super(x, y, width, height);\n    }\n\n    translate(dx: number, dy: number) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d) return;\n                if (d[0] < 0 || d[1] < 0) return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\n\nexport function makeHall(\n    loc: GWU.xy.Loc,\n    dirIndex: number,\n    hallLength: number,\n    hallWidth = 1\n) {\n    const dir = GWU.xy.DIRS[dirIndex];\n    const x = Math.min(loc[0], loc[0] + dir[0] * (hallLength - 1));\n    const y = Math.min(loc[1], loc[1] + dir[1] * (hallLength - 1));\n    const width = Math.abs(dir[0] * hallLength) || hallWidth;\n    const height = Math.abs(dir[1] * hallLength) || hallWidth;\n    return new Hall(x, y, width, height);\n}\n\nexport class Room extends GWU.xy.Bounds {\n    public doors: GWU.xy.Loc[] = [];\n    public hall: Hall | null = null;\n\n    constructor(x: number, y: number, width: number, height: number) {\n        super(x, y, width, height);\n    }\n\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n\n    translate(dx: number, dy: number) {\n        this.x += dx;\n        this.y += dy;\n\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d) return;\n                if (d[0] < 0 || d[1] < 0) return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\n\nexport function checkConfig(\n    config: TYPES.RoomConfig,\n    expected: TYPES.RoomConfig = {}\n) {\n    config = config || {};\n    expected = expected || {};\n\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect as TYPES.TileId;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error(\n                    'Missing required config for room digger: ' + key\n                );\n            }\n        } else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        } else if (Array.isArray(expect)) {\n            have = have || expect;\n        } else {\n            // just set the value\n            have = have || expect;\n        }\n\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n\n    return config;\n}\n\nexport abstract class RoomDigger {\n    public options: TYPES.RoomConfig = {};\n    public doors: GWU.xy.Loc[] = [];\n\n    constructor(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        this._setOptions(config, expected);\n    }\n\n    _setOptions(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        this.options = checkConfig(config, expected);\n    }\n\n    create(site: SITE.Site): TYPES.Room {\n        const result = this.carve(site);\n        if (result) {\n            if (\n                !result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)\n            ) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n\n    abstract carve(site: SITE.Site): TYPES.Room;\n}\n\nexport var rooms: Record<string, RoomDigger> = {};\n\nexport class ChoiceRoom extends RoomDigger {\n    // @ts-ignore\n    public randomRoom: (rng: GWU.rng.Random) => string;\n\n    constructor(config: TYPES.RoomConfig = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n\n    _setOptions(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = (rng) => rng.item(choices);\n        } else if (typeof choices == 'object') {\n            this.randomRoom = (rng) =>\n                rng.weighted(choices as GWU.rng.WeightedObject);\n        } else {\n            throw new Error(\n                'Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }'\n            );\n        }\n    }\n\n    carve(site: SITE.Site) {\n        let id = this.randomRoom(site.rng);\n        const room = rooms[id];\n        if (!room) {\n            GWU.ERROR('Missing room digger choice: ' + id);\n        }\n\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\n\nexport function choiceRoom(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\n\nexport class Cavern extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n\n        const blob = new GWU.blob.Blob({\n            rng: site.rng,\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n\n        const bounds = blob.carve(\n            blobGrid.width,\n            blobGrid.height,\n            (x, y) => (blobGrid[x][y] = 1)\n        );\n\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v) site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\n\nexport function cavern(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        const room = new TYPES.Room(\n            Math.min(roomX, roomX2),\n            Math.min(roomY, roomY2),\n            Math.max(roomWidth, roomWidth2),\n            Math.max(roomHeight, roomHeight2)\n        );\n\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\n\nexport function brogueEntrance(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\n\nexport class Cross extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const roomWidth = width;\n        const roomWidth2 = Math.max(\n            3,\n            Math.floor((width * site.rng.range(25, 75)) / 100)\n        ); // [4,20]\n        const roomHeight = Math.max(\n            3,\n            Math.floor((height * site.rng.range(25, 75)) / 100)\n        ); // [2,5]\n        const roomHeight2 = height;\n\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 =\n            roomX + site.rng.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY =\n            roomY2 +\n            site.rng.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        return new TYPES.Room(\n            roomX,\n            roomY2,\n            Math.max(roomWidth, roomWidth2),\n            Math.max(roomHeight, roomHeight2)\n        );\n    }\n}\n\nexport function cross(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\n\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        let minorWidth = Math.max(\n            3,\n            Math.floor((width * site.rng.range(25, 50)) / 100)\n        ); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(\n            3,\n            Math.floor((height * site.rng.range(25, 50)) / 100)\n        ); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        return new TYPES.Room(\n            Math.min(x, x2),\n            Math.min(y, y2),\n            Math.max(width, minorWidth),\n            Math.max(height, minorHeight)\n        );\n    }\n}\n\nexport function symmetricalCross(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\n\nexport class Rectangular extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\n\nexport function rectangular(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\n\nexport class Circular extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const radius = this.options.radius.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n\n        return new TYPES.Room(\n            x - radius,\n            y - radius,\n            radius * 2 + 1,\n            radius * 2 + 1\n        );\n    }\n}\n\nexport function circular(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\n\nexport class BrogueDonut extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const radius = this.options.radius.value(site.rng);\n        const ringMinWidth = this.options.ringMinWidth.value(site.rng);\n        const holeMinSize = this.options.holeMinSize.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n\n        if (\n            radius > ringMinWidth + holeMinSize &&\n            site.rng.chance(this.options.holeChance.value(site.rng))\n        ) {\n            GWU.xy.forCircle(\n                x,\n                y,\n                site.rng.range(holeMinSize, radius - holeMinSize),\n                (x, y) => site.clearTile(x, y)\n            );\n        }\n\n        return new TYPES.Room(\n            x - radius,\n            y - radius,\n            radius * 2 + 1,\n            radius * 2 + 1\n        );\n    }\n}\n\nexport function brogueDonut(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\n\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value(site.rng);\n\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n\n        for (i = 0; i < chunkCount; ) {\n            x = site.rng.range(minX, maxX);\n            y = site.rng.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX) continue;\n                if (x + 2 > maxX) continue;\n                if (y - 2 < minY) continue;\n                if (y + 2 > maxY) continue;\n\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\n\nexport function chunkyRoom(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\n\nexport function install(id: string, room: RoomDigger) {\n    rooms[id] = room;\n    return room;\n}\n\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\n\nconst DIRS = GWU.xy.DIRS;\n\nexport function isDoorLoc(site: SITE.Site, loc: GWU.xy.Loc, dir: GWU.xy.Loc) {\n    if (!site.hasXY(loc[0], loc[1])) return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1])) return false; // must be a wall/diggable space\n\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1])) return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1])) return false; // must have floor in opposite direction\n\n    return true;\n}\n\nexport type WidthBase = number | string | number[] | { [key: number]: number };\n\nexport function pickWidth(width: WidthBase, rng?: GWU.rng.Random): number {\n    return GWU.utils.clamp(_pickWidth(width, rng), 1, 3);\n}\n\nfunction _pickWidth(width: WidthBase, rng?: GWU.rng.Random): number {\n    if (!width) return 1;\n    if (typeof width === 'number') return width;\n\n    rng = rng ?? GWU.rng.random;\n\n    if (Array.isArray(width)) {\n        width = rng.weighted(width) + 1;\n    } else if (typeof width === 'string') {\n        width = GWU.range.make(width).value(rng);\n    } else if (width instanceof GWU.range.Range) {\n        width = width.value(rng);\n    } else {\n        const weights = width as GWU.types.WeightedObject;\n        width = Number.parseInt(rng.weighted(weights) as string);\n    }\n    return width;\n}\n\nexport function pickLength(\n    dir: number,\n    lengths: [GWU.range.Range, GWU.range.Range],\n    rng?: GWU.rng.Random\n): number {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value(rng);\n    } else {\n        return lengths[0].value(rng);\n    }\n}\n\nexport function pickHallDirection(\n    site: SITE.Site,\n    doors: GWU.xy.Loc[],\n    lengths: [GWU.range.Range, GWU.range.Range]\n): number {\n    // Pick a direction.\n    let dir: number = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = site.rng.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\n\nexport function pickHallExits(\n    site: SITE.Site,\n    x: number,\n    y: number,\n    dir: number,\n    obliqueChance: number\n) {\n    let newX: number, newY: number;\n    const allowObliqueHallwayExit = site.rng.chance(obliqueChance);\n    const hallDoors: GWU.xy.Loc[] = [\n        // [-1, -1],\n        // [-1, -1],\n        // [-1, -1],\n        // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n\n        if (\n            (dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)\n        ) {\n            // do nothing\n        } else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\n\n// export function digWide(\n//     opts: TYPES.HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: TYPES.Room\n// ): TYPES.Hall | TYPES.HallConfig | null {\n//     opts = opts || {};\n//     if (!opts.width) {\n//         opts.width = 2;\n//     }\n//     if (!grid) {\n//         return opts;\n//     }\n\n//     const dir = pickHallDirection(grid, room, opts);\n//     if (dir === GWU.xy.NO_DIRECTION) return null;\n\n//     const length = pickLength(dir, opts.lengths);\n//     const width = pickWidth(opts) || 2;\n\n//     const door = room.doors[dir];\n//     const tile = opts.tile || SITE.FLOOR;\n//     const hallDoors: GWU.xy.Loc[] = [];\n\n//     let x0: number, y0: number;\n//     let hall;\n//     if (dir === GWU.utils.UP) {\n//         x0 = GWU.clamp(door[0], room.x, room.x + room.width - width);\n//         y0 = door[1] - length + 1;\n\n//         for (let x = x0; x < x0 + width; ++x) {\n//             for (let y = y0; y < y0 + length; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0, y0 - 1];\n//         hall = new TYPES.Hall([x0, door[1]], dir, length, 2);\n//     } else if (dir === GWU.utils.DOWN) {\n//         x0 = GWU.clamp(door[0], room.x, room.x + room.width - width);\n//         y0 = door[1] + length - 1;\n\n//         for (let x = x0; x < x0 + width; ++x) {\n//             for (let y = y0; y > y0 - length; --y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0, y0 + 1];\n//         hall = new TYPES.Hall([x0, door[1]], dir, length, 2);\n//     } else if (dir === GWU.utils.LEFT) {\n//         x0 = door[0] - length + 1;\n//         y0 = GWU.clamp(door[1], room.y, room.y + room.height - width);\n\n//         for (let x = x0; x < x0 + length; ++x) {\n//             for (let y = y0; y < y0 + width; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0 - 1, y0];\n//         hall = new TYPES.Hall([door[0], y0], dir, length, 2);\n//     } else {\n//         //if (dir === GWU.utils.RIGHT) {\n//         x0 = door[0] + length - 1;\n//         y0 = GWU.clamp(door[1], room.y, room.y + room.height - width);\n\n//         for (let x = x0; x > x0 - length; --x) {\n//             for (let y = y0; y < y0 + width; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0 + 1, y0];\n//         hall = new TYPES.Hall([door[0], y0], dir, length, width);\n//     }\n\n//     hall.doors = hallDoors;\n//     hall.width = width;\n//     return hall;\n// }\n\n// export function dig(\n//     opts: TYPES.HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: TYPES.Room\n// ): TYPES.Hall | TYPES.HallConfig | null {\n//     opts = opts || {};\n//     opts.width = 1;\n//     if (!grid) {\n//         return opts;\n//     }\n\n//     const dir = pickHallDirection(grid, room, opts);\n//     if (dir === GWU.xy.NO_DIRECTION) return null;\n\n//     const length = pickLength(dir, opts.length);\n\n//     const door = room.doors[dir];\n//     const DIR = DIRS[dir];\n\n//     let x = door[0];\n//     let y = door[1];\n\n//     const tile = opts.tile || SITE.FLOOR;\n//     for (let i = 0; i < length; i++) {\n//         grid[x][y] = tile;\n//         x += DIR[0];\n//         y += DIR[1];\n//     }\n\n//     x -= DIR[0];\n//     y -= DIR[1];\n\n//     const hall = new TYPES.Hall(door, dir, length);\n//     hall.doors = pickHallExits(grid, x, y, dir, opts);\n//     return hall;\n// }\n\nexport interface HallOptions {\n    width: number | string;\n    length: number | string | number[] | string[];\n    tile: TYPES.TileId;\n    obliqueChance: number;\n    chance: number;\n}\n\nexport interface HallConfig {\n    width: WidthBase;\n    length: [GWU.range.Range, GWU.range.Range];\n    tile: string;\n    obliqueChance: number;\n    chance: number;\n}\n\nexport class HallDigger {\n    public config: HallConfig = {\n        width: 1,\n        length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n        tile: 'FLOOR',\n        obliqueChance: 15,\n        chance: 100,\n    };\n\n    constructor(options: Partial<HallOptions> = {}) {\n        this._setOptions(options);\n    }\n\n    _setOptions(options: Partial<HallOptions> = {}) {\n        if (options.width) {\n            this.config.width = options.width;\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n\n    create(site: SITE.Site, doors: GWU.xy.Loc[] = []): TYPES.Hall | null {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n\n        if (!site.rng.chance(this.config.chance)) return null;\n\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION) return null;\n        if (!doors[dir]) return null;\n\n        const width = pickWidth(this.config.width, site.rng);\n        const length = pickLength(dir, this.config.length, site.rng);\n        const doorLoc = doors[dir];\n\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        } else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n\n    _digLine(\n        site: SITE.Site,\n        door: GWU.xy.Loc,\n        dir: GWU.xy.Loc,\n        length: number\n    ) {\n        let x = door[0];\n        let y = door[1];\n\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n\n        x -= dir[0];\n        y -= dir[1];\n\n        return [x, y];\n    }\n\n    dig(site: SITE.Site, dir: number, door: GWU.xy.Loc, length: number) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = TYPES.makeHall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n\n    digWide(\n        site: SITE.Site,\n        dir: number,\n        door: GWU.xy.Loc,\n        length: number,\n        width: number\n    ) {\n        const DIR = GWU.xy.DIRS[dir];\n\n        const lower: GWU.xy.Loc = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher: GWU.xy.Loc = [door[0] + DIR[1], door[1] + DIR[0]];\n\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n\n        const hall = TYPES.makeHall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        // hall.width = width;\n        return hall;\n    }\n}\n\nexport function dig(\n    config: Partial<HallOptions>,\n    site: SITE.Site,\n    doors: GWU.xy.Loc[]\n) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\n\nexport var halls: Record<string, HallDigger> = {};\n\nexport function install(id: string, hall: HallDigger) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\n\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nimport * as TYPES from './types';\n\nexport interface LakeOpts {\n    height: number;\n    width: number;\n    minSize: number;\n    tries: number;\n    count: number;\n    canDisrupt: boolean;\n    wreathTile: TYPES.TileId;\n    wreathChance: number;\n    wreathSize: number;\n    tile: TYPES.TileId;\n}\n\nexport class Lakes {\n    options: LakeOpts = {\n        height: 15,\n        width: 30,\n        minSize: 5,\n        tries: 20,\n        count: 1,\n        canDisrupt: false,\n        wreathTile: 'SHALLOW',\n        wreathChance: 50,\n        wreathSize: 1,\n        tile: 'DEEP',\n    };\n\n    constructor(options: Partial<LakeOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site): number {\n        let i, j, k;\n        let x: number, y: number;\n        let lakeMaxHeight,\n            lakeMaxWidth,\n            lakeMinSize,\n            tries,\n            maxCount,\n            canDisrupt;\n        let count = 0;\n\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = site.rng.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || 'SHALLOW';\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || 'DEEP';\n\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n\n            const width =\n                Math.round(\n                    ((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                        maxCount\n                ) + lakeMinSize;\n            const height =\n                Math.round(\n                    ((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                        maxCount\n                ) + lakeMinSize;\n\n            const blob = new GWU.blob.Blob({\n                rng: site.rng,\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                // birthParameters: 'ffffftttt',\n                // survivalParameters: 'ffffttttt',\n            });\n\n            lakeGrid.fill(0);\n            const bounds = blob.carve(\n                lakeGrid.width,\n                lakeGrid.height,\n                (x, y) => (lakeGrid[x][y] = 1)\n            );\n\n            // console.log('LAKE ATTEMPT');\n            // lakeGrid.dump();\n\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = site.rng.range(\n                    1 - bounds.x,\n                    lakeGrid.width - bounds.width - bounds.x - 2\n                );\n                y = site.rng.range(\n                    1 - bounds.y,\n                    lakeGrid.height - bounds.height - bounds.y - 2\n                );\n\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n\n                                if (hasWreath) {\n                                    // if (site.hasTile(sx, sy, wreathTile)) {\n                                    //     site.clearTile(sx, sy, wreathTile);\n                                    // }\n                                    GWU.xy.forCircle(\n                                        sx,\n                                        sy,\n                                        wreathSize,\n                                        (i2, j2) => {\n                                            if (\n                                                site.isPassable(i2, j2) &&\n                                                !lakeGrid[i2 - x][j2 - y]\n                                                // SITE.isFloor(map, i, j) ||\n                                                // SITE.isDoor(map, i, j)\n                                            ) {\n                                                site.setTile(\n                                                    i2,\n                                                    j2,\n                                                    wreathTile\n                                                );\n                                            }\n                                        }\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n\n            if (success) {\n                ++count;\n                attempts = 0;\n            } else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n\n    isDisruptedBy(\n        site: SITE.Site,\n        lakeGrid: GWU.grid.NumGrid,\n        lakeToMapX = 0,\n        lakeToMapY = 0\n    ) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            } else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    } else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nexport interface BridgeOpts {\n    minDistance: number;\n    maxLength: number;\n}\n\nexport class Bridges {\n    public options: BridgeOpts = {\n        minDistance: 20,\n        maxLength: 5,\n    };\n\n    constructor(options: Partial<BridgeOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site): number {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n\n        const pathGrid = new GWU.path.DijkstraMap();\n        // const costGrid = GWU.grid.alloc(site.width, site.height);\n\n        const dirCoords: [number, number][] = [\n            [1, 0],\n            [0, 1],\n        ];\n\n        const seq = site.rng.sequence(site.width * site.height);\n\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n\n            if (\n                // map.hasXY(x, y) &&\n                // map.get(x, y) &&\n                site.isPassable(x, y) &&\n                (site.isBridge(x, y) || !site.isAnyLiquid(x, y))\n            ) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n\n                    // if (!map.hasXY(newX, newY)) continue;\n\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (\n                        site.isAnyLiquid(newX, newY) &&\n                        !site.isBridge(newX, newY)\n                    ) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (\n                                site.isBridge(newX, newY) ||\n                                !site.isAnyLiquid(newX, newY)\n                            ) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (\n                        // map.get(newX, newY) &&\n                        site.isPassable(newX, newY) &&\n                        j < maxLength\n                    ) {\n                        SITE.computeDistanceMap(\n                            site,\n                            pathGrid,\n                            newX,\n                            newY,\n                            999\n                        );\n\n                        if (\n                            pathGrid.getDistance(x, y) > minDistance &&\n                            pathGrid.getDistance(x, y) < GWU.path.BLOCKED\n                        ) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n\n                            while (x !== newX || y !== newY) {\n                                if (\n                                    this.isBridgeCandidate(\n                                        site,\n                                        x,\n                                        y,\n                                        bridgeDir\n                                    )\n                                ) {\n                                    site.setTile(x, y, 'BRIDGE'); // map[x][y] = SITE.BRIDGE;\n                                    // costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                } else {\n                                    site.setTile(x, y, 'FLOOR'); // map[x][y] = SITE.FLOOR;\n                                    // costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // GWU.grid.free(costGrid);\n        return count;\n    }\n\n    isBridgeCandidate(\n        site: SITE.Site,\n        x: number,\n        y: number,\n        _bridgeDir: [number, number]\n    ) {\n        if (site.isBridge(x, y)) return true;\n        if (!site.isAnyLiquid(x, y)) return false;\n        // if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0])) return false;\n        // if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0])) return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as TYPES from './types';\nimport * as SITE from './site';\n\nexport interface StairOpts {\n    up: boolean | GWU.xy.Loc;\n    down: boolean | GWU.xy.Loc;\n    minDistance: number;\n\n    start: boolean | string | GWU.xy.Loc;\n\n    upTile: TYPES.TileId;\n    downTile: TYPES.TileId;\n    wall: TYPES.TileId;\n}\n\nexport class Stairs {\n    public options: StairOpts = {\n        up: true,\n        down: true,\n        minDistance: 10,\n        start: false,\n        upTile: 'UP_STAIRS',\n        downTile: 'DOWN_STAIRS',\n        wall: 'IMPREGNABLE',\n    };\n\n    constructor(options: Partial<StairOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance =\n            this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n\n        const locations: Record<string, GWU.xy.Loc> = {};\n        let upLoc: GWU.xy.Loc | null = null;\n        let downLoc: GWU.xy.Loc | null = null;\n\n        const isValidLoc = this.isStairXY.bind(this, site);\n\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    isValidLoc\n                );\n            } else {\n                start = site.rng.matchingLocNear(\n                    GWU.xy.x(start),\n                    GWU.xy.y(start),\n                    isValidLoc\n                );\n            }\n            locations.start = start;\n        }\n\n        if (\n            Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)\n        ) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(\n                GWU.xy.x(up),\n                GWU.xy.y(up),\n                isValidLoc\n            );\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(\n                GWU.xy.x(down),\n                GWU.xy.y(down),\n                isValidLoc\n            );\n        } else if (\n            Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)\n        ) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(\n                GWU.xy.x(up),\n                GWU.xy.y(up),\n                isValidLoc\n            );\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            // @ts-ignore\n                            GWU.xy.distanceBetween(x, y, upLoc![0], upLoc![1]) <\n                            minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (\n            Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)\n        ) {\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(\n                GWU.xy.x(down),\n                GWU.xy.y(down),\n                isValidLoc\n            );\n            if (needUp) {\n                upLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            GWU.xy.distanceBetween(\n                                x,\n                                y,\n                                downLoc![0],\n                                downLoc![1]\n                            ) < minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (needUp) {\n            upLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            // @ts-ignore\n                            GWU.xy.distanceBetween(x, y, upLoc![0], upLoc![1]) <\n                            minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (needDown) {\n            downLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n        }\n\n        if (upLoc) {\n            locations.up = upLoc.slice() as GWU.xy.Loc;\n            this.setupStairs(\n                site,\n                upLoc[0],\n                upLoc[1],\n                this.options.upTile,\n                this.options.wall\n            );\n            if (this.options.start === 'up') {\n                locations.start = locations.up;\n            } else {\n                locations.end = locations.up;\n            }\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice() as GWU.xy.Loc;\n            this.setupStairs(\n                site,\n                downLoc[0],\n                downLoc[1],\n                this.options.downTile,\n                this.options.wall\n            );\n            if (this.options.start === 'down') {\n                locations.start = locations.down;\n            } else {\n                locations.end = locations.down;\n            }\n        }\n\n        return upLoc || downLoc ? locations : null;\n    }\n\n    hasXY(site: SITE.Site, x: number, y: number) {\n        if (x < 0 || y < 0) return false;\n        if (x >= site.width || y >= site.height) return false;\n        return true;\n    }\n\n    isStairXY(site: SITE.Site, x: number, y: number) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y)) return false;\n\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1])) return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1])) return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            } else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n\n    setupStairs(\n        site: SITE.Site,\n        x: number,\n        y: number,\n        tile: TYPES.TileId,\n        wallTile: TYPES.TileId\n    ) {\n        const indexes = site.rng.sequence(4);\n\n        let dir: GWU.xy.Loc | null = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1])) break;\n            }\n\n            dir = null;\n        }\n\n        if (!dir) GWU.ERROR('No stair direction found!');\n\n        site.setTile(x, y, tile);\n\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n            // @ts-ignore\n            (d) => d[0] == dir[0] && d[1] == dir[1]\n        );\n\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex) continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wallTile);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nexport interface LoopOptions {\n    minDistance: number;\n    maxLength: number;\n    doorChance: number;\n}\n\nexport interface LoopConfig {\n    minDistance: number;\n    maxLength: number;\n    doorChance: number;\n}\n\nexport class LoopDigger {\n    public options: LoopConfig = {\n        minDistance: 100,\n        maxLength: 1,\n        doorChance: 50,\n    };\n\n    constructor(options: Partial<LoopOptions> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n\n        const minDistance = Math.min(\n            this.options.minDistance,\n            Math.floor(Math.max(site.width, site.height) / 2)\n        );\n        const maxLength = this.options.maxLength;\n\n        const pathGrid = new GWU.path.DijkstraMap();\n        // const costGrid = GWU.grid.alloc(site.width, site.height);\n\n        const dirCoords: [number, number][] = [\n            [1, 0],\n            [0, 1],\n        ];\n\n        // SITE.fillCostGrid(site, costGrid);\n\n        function isValidTunnelStart(\n            x: number,\n            y: number,\n            dir: [number, number]\n        ) {\n            if (!site.hasXY(x, y)) return false;\n            if (!site.hasXY(x + dir[1], y + dir[0])) return false;\n            if (!site.hasXY(x - dir[1], y - dir[0])) return false;\n            if (site.isSet(x, y)) return false;\n            if (site.isSet(x + dir[1], y + dir[0])) return false;\n            if (site.isSet(x - dir[1], y - dir[0])) return false;\n            return true;\n        }\n\n        function isValidTunnelEnd(x: number, y: number, dir: [number, number]) {\n            if (!site.hasXY(x, y)) return false;\n            if (!site.hasXY(x + dir[1], y + dir[0])) return false;\n            if (!site.hasXY(x - dir[1], y - dir[0])) return false;\n            if (site.isSet(x, y)) return true;\n            if (site.isSet(x + dir[1], y + dir[0])) return true;\n            if (site.isSet(x - dir[1], y - dir[0])) return true;\n            return false;\n        }\n\n        let count = 0;\n        const seq = site.rng.sequence(site.width * site.height);\n\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir)) continue;\n                    j = maxLength;\n\n                    // check up/left\n                    if (\n                        site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])\n                    ) {\n                        // just can't build directly into a door\n                        if (\n                            !site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])\n                        ) {\n                            continue;\n                        }\n                    } else if (\n                        site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])\n                    ) {\n                        if (\n                            !site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])\n                        ) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v) as [number, number];\n                    } else {\n                        continue; // not valid start for tunnel\n                    }\n\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n\n                    if (j < maxLength) {\n                        SITE.computeDistanceMap(\n                            site,\n                            pathGrid,\n                            startX,\n                            startY,\n                            888\n                        );\n\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (\n                            pathGrid.getDistance(endX, endY) > minDistance &&\n                            pathGrid.getDistance(endX, endY) < GWU.path.BLOCKED\n                        ) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, 'FLOOR');\n                                    // costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = site.rng.chance(\n                                this.options.doorChance\n                            )\n                                ? 'DOOR'\n                                : 'FLOOR';\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // pathGrid.free();\n        // GWU.grid.free(costGrid);\n\n        return count;\n    }\n}\n\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site: SITE.Site, opts: Partial<LoopOptions> = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as TYPES from './types';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\n\nimport * as LOGGER from './site/log/logger';\nimport { ConsoleLogger } from './site/log/consoleLogger';\n\nexport interface DoorOpts {\n    chance: number;\n    tile: string;\n}\n\nexport interface RoomOptions {\n    count: number;\n    fails: number;\n    first: string | string[] | Record<string, number> | ROOM.RoomDigger;\n    digger: string | string[] | Record<string, number> | ROOM.RoomDigger;\n}\n\nexport interface DiggerOptions {\n    halls?: Partial<HALL.HallOptions> | boolean;\n    loops?: Partial<LOOP.LoopOptions> | boolean;\n    lakes?: Partial<LAKE.LakeOpts> | boolean | number;\n    bridges?: Partial<BRIDGE.BridgeOpts> | boolean | number;\n    stairs?: Partial<STAIRS.StairOpts> | boolean;\n    doors?: Partial<DoorOpts> | boolean;\n\n    rooms?: number | Partial<RoomOptions>;\n\n    startLoc?: GWU.xy.Loc;\n    endLoc?: GWU.xy.Loc;\n    goesUp?: boolean;\n\n    seed?: number;\n    boundary?: boolean;\n\n    log?: LOGGER.Logger | boolean;\n}\n\nexport class Digger {\n    site!: SITE.Site;\n\n    seed = 0;\n    rooms: Partial<RoomOptions> = { fails: 20 };\n    doors: Partial<DoorOpts> = { chance: 15 };\n    halls: Partial<HALL.HallOptions> = { chance: 15 };\n    loops: Partial<LOOP.LoopOptions> | null = {};\n    lakes: Partial<LAKE.LakeOpts> | null = {};\n    bridges: Partial<BRIDGE.BridgeOpts> | null = {};\n    stairs: Partial<STAIRS.StairOpts> | null = {};\n    boundary: boolean = true;\n\n    // startLoc: GWU.xy.Loc = [-1, -1];\n    // endLoc: GWU.xy.Loc = [-1, -1];\n\n    locations: Record<string, GWU.xy.Loc> = {};\n    _locs: Record<string, GWU.xy.Loc> = {};\n    goesUp = false;\n\n    seq!: number[];\n    log: LOGGER.Logger;\n    tiles: SITE.TileFactory;\n\n    constructor(options: DiggerOptions = {}, tiles?: SITE.TileFactory) {\n        this.seed = options.seed || 0;\n        this.tiles = tiles || SITE.tileFactory;\n\n        if (typeof options.rooms === 'number') {\n            options.rooms = { count: options.rooms };\n        }\n        GWU.object.setOptions(this.rooms, options.rooms);\n\n        this.goesUp = options.goesUp || false;\n        if (options.startLoc) {\n            this._locs.start = options.startLoc;\n        }\n        if (options.endLoc) {\n            this._locs.end = options.endLoc;\n        }\n\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        } else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        } else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        } else {\n            if (options.loops === true) options.loops = {};\n            else if (typeof options.loops === 'number') {\n                options.loops = { maxLength: options.loops };\n            }\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                options.loops.doorChance ?? options.doors?.chance;\n            // @ts-ignore\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        } else {\n            if (options.lakes === true) options.lakes = {};\n            else if (typeof options.lakes === 'number') {\n                options.lakes = { count: options.lakes };\n            }\n            options.lakes = options.lakes || {};\n            // @ts-ignore\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        } else {\n            if (typeof options.bridges === 'number') {\n                options.bridges = { maxLength: options.bridges };\n            }\n            if (options.bridges === true) options.bridges = {};\n            // @ts-ignore\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        } else {\n            if (typeof options.stairs !== 'object') options.stairs = {};\n            // @ts-ignore\n            GWU.object.setOptions(this.stairs, options.stairs);\n            this.stairs!.start = this.goesUp ? 'down' : 'up';\n        }\n\n        // this.startLoc = options.startLoc || [-1, -1];\n        // this.endLoc = options.endLoc || [-1, -1];\n\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        } else if (options.log) {\n            this.log = options.log;\n        } else {\n            this.log = new LOGGER.NullLogger();\n        }\n    }\n\n    _makeRoomSite(width: number, height: number) {\n        const site = new SITE.Site(width, height);\n        site.rng = this.site.rng;\n        return site;\n    }\n\n    _createSite(width: number, height: number): void {\n        this.site = new SITE.Site(width, height);\n    }\n\n    create(width: number, height: number, cb: TYPES.DigFn): boolean;\n    create(map: GWU.grid.NumGrid): boolean;\n    create(map: SITE.Site): boolean;\n    create(...args: any[]): boolean {\n        let needsFree = true;\n        if (args.length == 1) {\n            const dest = args[0];\n            if (dest instanceof SITE.Site) {\n                this.site = dest;\n                needsFree = false;\n            } else {\n                this._createSite(dest.width, dest.height);\n            }\n        } else {\n            this._createSite(args[0], args[1]);\n        }\n\n        const result = this._create(this.site);\n\n        const cb = args[2] || null;\n        if (cb) {\n            GWU.xy.forRect(this.site.width, this.site.height, (x, y) => {\n                const t = this.site._tiles[x][y];\n                if (t) cb(x, y, t);\n            });\n        } else if (args.length == 1 && needsFree) {\n            const dest = args[0];\n            dest.copy(this.site._tiles);\n        }\n\n        needsFree && this.site.free();\n        return result;\n    }\n\n    _create(site: SITE.Site): boolean {\n        this.start(site);\n\n        this.addRooms(site);\n\n        if (this.loops) {\n            this.addLoops(site, this.loops);\n            this.log.onLoopsAdded(site);\n        }\n        if (this.lakes) {\n            this.addLakes(site, this.lakes);\n            this.log.onLakesAdded(site);\n        }\n        if (this.bridges) {\n            this.addBridges(site, this.bridges);\n            this.log.onBridgesAdded(site);\n        }\n        if (this.stairs) {\n            this.addStairs(site, this.stairs);\n            this.log.onStairsAdded(site);\n        }\n\n        this.finish(site);\n\n        return true;\n    }\n\n    start(site: SITE.Site) {\n        this.site = site;\n\n        const seed = this.seed || GWU.rng.random.number();\n        site.setSeed(seed);\n\n        site.clear();\n        this.seq = site.rng.sequence(site.width * site.height);\n\n        this.locations = Object.assign({}, this._locs);\n\n        if (!this.locations.start || this.locations.start[0] < 0) {\n            const stair = this.goesUp ? 'down' : 'up';\n            if (this.stairs && Array.isArray(this.stairs[stair])) {\n                this.locations.start = this.stairs[stair] as GWU.xy.Loc;\n            } else {\n                this.locations.start = [\n                    Math.floor(site.width / 2),\n                    site.height - 2,\n                ];\n                if (this.stairs && this.stairs[stair]) {\n                    this.stairs[stair] = this.locations.start;\n                }\n            }\n        }\n\n        if (!this.locations.end || this.locations.end[0] < 0) {\n            const stair = this.goesUp ? 'up' : 'down';\n            if (this.stairs && Array.isArray(this.stairs[stair])) {\n                this.locations.end = this.stairs[stair] as GWU.xy.Loc;\n            }\n        }\n\n        // if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n        //     this.startLoc[0] = Math.floor(site.width / 2);\n        //     this.startLoc[1] = site.height - 2;\n        // }\n    }\n\n    getDigger(\n        id: string | string[] | Record<string, number> | ROOM.RoomDigger\n    ) {\n        if (!id) throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger) return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n\n    addRooms(site: SITE.Site) {\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site)) break;\n        }\n        if (!tries) throw new Error('Failed to place first room!');\n        site.updateDoorDirs();\n\n        this.log.onDigFirstRoom(site);\n\n        // site.dump();\n        // console.log('- rng.number', site.rng.number());\n\n        let fails = 0;\n        let count = 1;\n        const maxFails = this.rooms.fails || 20;\n        while (fails < maxFails) {\n            if (this.addRoom(site)) {\n                fails = 0;\n                site.updateDoorDirs();\n                site.rng.shuffle(this.seq);\n\n                // site.dump();\n                // console.log('- rng.number', site.rng.number());\n\n                if (this.rooms.count && ++count >= this.rooms.count) {\n                    break; // we are done\n                }\n            } else {\n                ++fails;\n            }\n        }\n    }\n\n    addFirstRoom(site: SITE.Site): TYPES.Room | null {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n\n        let digger: ROOM.RoomDigger = this.getDigger(\n            this.rooms.first || this.rooms.digger || 'DEFAULT'\n        );\n        let room: TYPES.Room | null = digger.create(roomSite);\n\n        if (\n            room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.locations.start)\n        ) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n\n    addRoom(site: SITE.Site): TYPES.Room | null {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger: ROOM.RoomDigger = this.getDigger(\n            this.rooms.digger || 'DEFAULT'\n        );\n\n        let room: TYPES.Room | null = digger.create(roomSite);\n\n        // attach hall?\n        if (room && this.halls.chance) {\n            let hall: TYPES.Hall | null = HALL.dig(\n                this.halls,\n                roomSite,\n                room.doors\n            );\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n\n        // console.log('potential room');\n        // roomSite.dump();\n\n        if (room) {\n            this.log.onRoomCandidate(room, roomSite);\n\n            if (this._attachRoom(site, roomSite, room)) {\n                this.log.onRoomSuccess(site, room);\n            } else {\n                this.log.onRoomFailed(site, room, roomSite, 'Did not fit.');\n                room = null;\n            }\n        }\n\n        roomSite.free();\n        return room;\n    }\n\n    _attachRoom(\n        site: SITE.Site,\n        roomSite: SITE.Site,\n        room: TYPES.Room\n    ): boolean {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        let i = 0;\n        const len = this.seq.length;\n\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (i = 0; i < len; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n\n            const dir = site.getDoorDir(x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door) continue;\n\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n\n                if (\n                    door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, room, offsetX, offsetY)\n                ) {\n                    // TYPES.Room fits here.\n                    site.copyTiles(roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _attachRoomAtLoc(\n        site: SITE.Site,\n        roomSite: SITE.Site,\n        room: TYPES.Room,\n        attachLoc: GWU.xy.Loc\n    ): boolean {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = site.rng.sequence(4);\n\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1) continue;\n\n            const offX = x - door[0];\n            const offY = y - door[1];\n\n            if (this._roomFitsAt(site, roomSite, room, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n\n                // TYPES.Room fits here.\n                site.copyTiles(roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _roomFitsAt(\n        map: SITE.Site,\n        roomGrid: SITE.Site,\n        room: TYPES.Room,\n        roomToSiteX: number,\n        roomToSiteY: number\n    ) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n\n        const hall = room.hall || room;\n        const left = Math.min(room.left, hall.left);\n        const top = Math.min(room.top, hall.top);\n        const right = Math.max(room.right, hall.right);\n        const bottom = Math.max(room.bottom, hall.bottom);\n\n        for (xRoom = left; xRoom <= right; xRoom++) {\n            for (yRoom = top; yRoom <= bottom; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    if (\n                        !map.hasXY(xSite, ySite) ||\n                        map.isBoundaryXY(xSite, ySite)\n                    ) {\n                        return false;\n                    }\n\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n\n    _attachDoor(\n        site: SITE.Site,\n        room: TYPES.Room,\n        x: number,\n        y: number,\n        dir: number\n    ) {\n        const opts = this.doors;\n        let isDoor = false;\n\n        if (opts.chance && site.rng.chance(opts.chance)) {\n            isDoor = true;\n        }\n\n        const tile = isDoor ? opts.tile || 'DOOR' : 'FLOOR';\n        site.setTile(x, y, tile); // Door site.\n\n        // most cases...\n        if (!room.hall || room.hall.width == 1 || room.hall.height == 1) {\n            return;\n        }\n\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n\n                if (site.isNothing(x - k, y)) {\n                    if (site.isSet(x - k, y - 1) && site.isSet(x - k, y + 1)) {\n                        site.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x + k, y)) {\n                    if (site.isSet(x + k, y - 1) && site.isSet(x + k, y + 1)) {\n                        site.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        } else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n\n                if (site.isNothing(x, y - k)) {\n                    if (site.isSet(x - 1, y - k) && site.isSet(x + 1, y - k)) {\n                        site.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x, y + k)) {\n                    if (site.isSet(x - 1, y + k) && site.isSet(x + 1, y + k)) {\n                        site.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n\n    addLoops(site: SITE.Site, opts: Partial<LOOP.LoopOptions>) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n\n    addLakes(site: SITE.Site, opts: Partial<LAKE.LakeOpts>) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n\n    addBridges(site: SITE.Site, opts: Partial<BRIDGE.BridgeOpts>) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n\n    addStairs(site: SITE.Site, opts: Partial<STAIRS.StairOpts>) {\n        const digger = new STAIRS.Stairs(opts);\n        const locs = digger.create(site);\n        if (locs) Object.assign(this.locations, locs);\n        return !!locs;\n    }\n\n    finish(site: SITE.Site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n\n    _removeDiagonalOpenings(site: SITE.Site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (\n                            !site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)\n                        ) {\n                            if (site.rng.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            } else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, 'FLOOR'); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n\n    _finishDoors(site: SITE.Site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y)) return;\n\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                // if (\n                //     // TODO - isPassable\n                //     (site.isPassable(x + 1, y) || site.isPassable(x - 1, y)) &&\n                //     (site.isPassable(x, y + 1) || site.isPassable(x, y - 1))\n                // ) {\n                //     // If there's passable terrain to the left or right, and there's passable terrain\n                //     // above or below, then the door is orphaned and must be removed.\n                //     site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                // } else\n                if (\n                    (site.isWall(x + 1, y) ? 1 : 0) +\n                        (site.isWall(x - 1, y) ? 1 : 0) +\n                        (site.isWall(x, y + 1) ? 1 : 0) +\n                        (site.isWall(x, y - 1) ? 1 : 0) !=\n                    2\n                ) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, 'FLOOR', { superpriority: true }); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n\n    _finishWalls(site: SITE.Site) {\n        const boundaryTile = this.boundary ? 'IMPREGNABLE' : 'WALL';\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                } else {\n                    site.setTile(x, y, 'WALL');\n                }\n            }\n        });\n    }\n}\n\n// export function digMap(map: GWM.map.Map, options: Partial<DiggerOptions> = {}) {\n//     const digger = new Digger(options);\n//     return digger.create(map);\n// }\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nimport { Blueprint } from './blueprint';\n\nexport class BuildData {\n    site: SITE.Site;\n    blueprint: Blueprint;\n    interior: GWU.grid.NumGrid;\n    occupied: GWU.grid.NumGrid;\n    candidates: GWU.grid.NumGrid;\n    viewMap: GWU.grid.NumGrid;\n    distanceMap: GWU.path.DijkstraMap;\n    originX: number = -1;\n    originY: number = -1;\n    distance25: number = -1;\n    distance75: number = -1;\n    machineNumber: number;\n    // depth = 0;\n    // seed = 0;\n\n    constructor(site: SITE.Site, blueprint: Blueprint, machine = 0) {\n        this.site = site;\n        this.blueprint = blueprint;\n        this.interior = GWU.grid.alloc(site.width, site.height);\n        this.occupied = GWU.grid.alloc(site.width, site.height);\n        this.viewMap = GWU.grid.alloc(site.width, site.height);\n        this.distanceMap = new GWU.path.DijkstraMap(site.width, site.height);\n        this.candidates = GWU.grid.alloc(site.width, site.height);\n        this.machineNumber = machine;\n    }\n\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.candidates);\n    }\n\n    get rng(): GWU.rng.Random {\n        return this.site.rng;\n    }\n\n    reset(originX: number, originY: number) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.reset(this.site.width, this.site.height);\n        // this.candidates.fill(0);\n\n        this.originX = originX;\n        this.originY = originY;\n        this.distance25 = 0;\n        this.distance75 = 0;\n\n        // if (this.seed) {\n        //     this.site.setSeed(this.seed);\n        // }\n    }\n\n    calcDistances(maxDistance: number) {\n        SITE.computeDistanceMap(\n            this.site,\n            this.distanceMap,\n            this.originX,\n            this.originY,\n            maxDistance\n        );\n\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n\n        this.interior.forEach((v, x, y) => {\n            if (!v) return;\n            const dist = Math.round(this.distanceMap.getDistance(x, y));\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            } else {\n                distance25 -= distances[i];\n            }\n        }\n\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            } else {\n                distance75 -= distances[i];\n            }\n        }\n\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nimport { BuildData } from './data';\n\nconst Fl = GWU.flag.fl;\n\nexport enum Flags {\n    BP_ROOM = Fl(0), // spawns in a dead-end room that is dominated by a chokepoint of the given size (as opposed to a random place of the given size)\n    BP_VESTIBULE = Fl(1), // spawns in a doorway (location must be given) and expands outward, to guard the room\n    BP_REWARD = Fl(2), // metered reward machines\n    BP_ADOPT_ITEM = Fl(3), // the machine must adopt an item (e.g. a door key)\n\n    BP_PURGE_PATHING_BLOCKERS = Fl(4), // clean out traps and other T_PATHING_BLOCKERs\n    BP_PURGE_INTERIOR = Fl(5), // clean out all of the terrain in the interior before generating the machine\n    BP_PURGE_LIQUIDS = Fl(6), // clean out all of the liquids in the interior before generating the machine\n\n    BP_SURROUND_WITH_WALLS = Fl(7), // fill in any impassable gaps in the perimeter (e.g. water, lava, brimstone, traps) with wall\n    BP_IMPREGNABLE = Fl(8), // impassable perimeter and interior tiles are locked; tunneling bolts will bounce off harmlessly\n\n    BP_OPEN_INTERIOR = Fl(9), // clear out walls in the interior, widen the interior until convex or bumps into surrounding areas\n    BP_MAXIMIZE_INTERIOR = Fl(10), // same as BP_OPEN_INTERIOR but expands the room as far as it can go, potentially surrounding the whole level.\n    BP_REDESIGN_INTERIOR = Fl(11), // nuke and pave -- delete all terrain in the interior and build entirely new rooms within the bounds\n\n    BP_TREAT_AS_BLOCKING = Fl(12), // abort the machine if, were it filled with wall tiles, it would disrupt the level connectivity\n    BP_REQUIRE_BLOCKING = Fl(13), // abort the machine unless, were it filled with wall tiles, it would disrupt the level connectivity\n\n    BP_NO_INTERIOR_FLAG = Fl(14), // don't flag the area as being part of a machine\n    BP_NOT_IN_HALLWAY = Fl(15), // Do not allow building in hallways (for !ROOM, !VESTIBULE)\n}\n\nexport interface BlueprintOptions {\n    id: string;\n    tags: string | string[];\n    frequency: GWU.frequency.FrequencyConfig;\n    size: string | number[] | number;\n    flags: GWU.flag.FlagBase;\n    steps: Partial<STEP.StepOptions>[];\n}\n\nexport class Blueprint {\n    public tags: string[] = [];\n    public frequency: GWU.frequency.FrequencyFn;\n    public size: GWU.range.Range;\n    public flags: number = 0;\n    public steps: STEP.BuildStep[] = [];\n    public id: string = 'n/a';\n\n    constructor(opts: Partial<BlueprintOptions> = {}) {\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo <= 0) this.size.lo = 1;\n            if (this.size.hi < this.size.lo) this.size.hi = this.size.lo;\n        } else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n            this.steps.forEach((s, i) => (s.index = i));\n        }\n        if (opts.id) {\n            this.id = opts.id;\n        }\n\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (\n                !this.steps.some((step) => {\n                    if (step.adoptItem) return true;\n                    if (step.hordeTakesItem && !step.item) return true;\n                    return false;\n                })\n            ) {\n                throw new Error(\n                    'Blueprint calls for BP_ADOPT_ITEM, but has no adoptive step.'\n                );\n            }\n        }\n    }\n\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n\n    get notInHallway() {\n        return !!(this.flags & Flags.BP_NOT_IN_HALLWAY);\n    }\n\n    qualifies(requiredFlags: number, tags?: string | string[]) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want))) return false;\n        }\n\n        if (\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    pickComponents(rng: GWU.rng.Random) {\n        const alternativeFlags = [\n            STEP.StepFlags.BS_ALTERNATIVE,\n            STEP.StepFlags.BS_ALTERNATIVE_2,\n        ];\n\n        const keepFeature = new Array(this.steps.length).fill(true);\n\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = rng.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        } else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n\n    fillInterior(builder: BuildData): number {\n        const interior = builder.interior;\n        const site = builder.site;\n\n        interior.fill(0);\n\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            return addTileToInteriorAndIterate(\n                builder,\n                builder.originX,\n                builder.originY\n            );\n        } else if (this.isVestiblue) {\n            return computeVestibuleInterior(builder, this);\n            // success\n        } else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n\n            let distanceMap = builder.distanceMap;\n\n            SITE.computeDistanceMap(\n                site,\n                distanceMap,\n                builder.originX,\n                builder.originY,\n                this.size.hi\n            );\n\n            const seq = site.rng.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = this.size.value(); // Keeps track of the goal size.\n\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (\n                    let n = 0;\n                    n < seq.length && qualifyingTileCount < goalSize;\n                    n++\n                ) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n\n                    if (Math.round(distanceMap.getDistance(i, j)) == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n\n                        const machine = site.getMachine(i, j);\n                        if (\n                            site.isOccupied(i, j) ||\n                            (machine > 0 && machine !== builder.machineNumber) // in different machine\n                        ) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            return 0;\n                        }\n                    }\n                }\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            return qualifyingTileCount;\n        }\n    }\n\n    //  function redesignInterior( interior, originX, originY, theDungeonProfileIndex) {\n    //     let i, j, n, newX, newY;\n    //     let dir;\n    //     let orphanList = [];\n    //     let orphanCount = 0;\n\n    //     let grid, pathingGrid, costGrid;\n    //     grid = allocGrid();\n\n    //     for (i=0; i<DCOLS; i++) {\n    //         for (j=0; j<DROWS; j++) {\n    //             if (interior[i][j]) {\n    //                 if (i == originX && j == originY) {\n    //                     grid[i][j] = 1; // All rooms must grow from this space.\n    //                 } else {\n    //                     grid[i][j] = 0; // Other interior squares are fair game for placing rooms.\n    //                 }\n    //             } else if (cellIsPassableOrDoor(i, j)) {\n    //                 grid[i][j] = 1; // Treat existing level as already built (though shielded by a film of -1s).\n    //                 for (dir = 0; dir < 4; dir++) {\n    //                     newX = i + nbDirs[dir][0];\n    //                     newY = j + nbDirs[dir][1];\n    //                     if (coordinatesAreInMap(newX, newY)\n    //                         && interior[newX][newY]\n    //                         && (newX != originX || newY != originY)) {\n\n    //                         orphanList[orphanCount] = [newX, newY];\n    //                         orphanCount++;\n    //                         grid[i][j] = -1; // Treat the orphaned door as off limits.\n\n    //                         break;\n    //                     }\n    //                 }\n    //             } else {\n    //                 grid[i][j] = -1; // Exterior spaces are off limits.\n    //             }\n    //         }\n    //     }\n    //     await attachRooms(grid, dungeonProfileCatalog[theDungeonProfileIndex], 40, 40);\n\n    //     // Connect to preexisting rooms that were orphaned (mostly preexisting machine rooms).\n    //     if (orphanCount > 0) {\n    //         pathingGrid = allocGrid();\n    //         costGrid = allocGrid();\n    //         for (n = 0; n < orphanCount; n++) {\n\n    //             if (D_INSPECT_MACHINES) {\n    //                 dumpLevelToScreen();\n    //                 copyGrid(pathingGrid, grid);\n    //                 findReplaceGrid(pathingGrid, -1, -1, 0);\n    //                 hiliteGrid(pathingGrid, /* Color. */green, 50);\n    //                 plotCharWithColor('X', mapToWindowX(orphanList[n][0]), mapToWindowY(orphanList[n][1]), /* Color. */black, /* Color. */orange);\n    //                 await temporaryMessage(\"Orphan detected:\", true);\n    //             }\n\n    //             for (i=0; i<DCOLS; i++) {\n    //                 for (j=0; j<DROWS; j++) {\n    //                     if (interior[i][j]) {\n    //                         if (grid[i][j] > 0) {\n    //                             pathingGrid[i][j] = 0;\n    //                             costGrid[i][j] = 1;\n    //                         } else {\n    //                             pathingGrid[i][j] = 30000;\n    //                             costGrid[i][j] = 1;\n    //                         }\n    //                     } else {\n    //                         pathingGrid[i][j] = 30000;\n    //                         costGrid[i][j] = PDS_OBSTRUCTION;\n    //                     }\n    //                 }\n    //             }\n    //             dijkstraScan(pathingGrid, costGrid, false);\n\n    //             i = orphanList[n][0];\n    //             j = orphanList[n][1];\n    //             while (pathingGrid[i][j] > 0) {\n    //                 for (dir = 0; dir < 4; dir++) {\n    //                     newX = i + nbDirs[dir][0];\n    //                     newY = j + nbDirs[dir][1];\n\n    //                     if (coordinatesAreInMap(newX, newY)\n    //                         && pathingGrid[newX][newY] < pathingGrid[i][j]) {\n\n    //                         grid[i][j] = 1;\n    //                         i = newX;\n    //                         j = newY;\n    //                         break;\n    //                     }\n    //                 }\n    //                 brogueAssert(dir < 4);\n    //                 if (D_INSPECT_MACHINES) {\n    //                     dumpLevelToScreen();\n    //                     displayGrid(pathingGrid);\n    //                     plotCharWithColor('X', mapToWindowX(i), mapToWindowY(j), /* Color. */black, /* Color. */orange);\n    //                     await temporaryMessage(\"Orphan connecting:\", true);\n    //                 }\n    //             }\n    //         }\n    //         freeGrid(pathingGrid);\n    //         freeGrid(costGrid);\n    //     }\n\n    //     await addLoops(grid, 10);\n    //     for(i=0; i<DCOLS; i++) {\n    //         for(j=0; j<DROWS; j++) {\n    //             if (interior[i][j]) {\n    //                 if (grid[i][j] >= 0) {\n    //                     pmap[i][j].layers[SURFACE] = pmap[i][j].layers[GAS] = NOTHING;\n    //                 }\n    //                 if (grid[i][j] == 0) {\n    //                     pmap[i][j].layers[DUNGEON] = GRANITE;\n    //                     interior[i][j] = false;\n    //                 }\n    //                 if (grid[i][j] >= 1) {\n    //                     pmap[i][j].layers[DUNGEON] = FLOOR;\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     freeGrid(grid);\n    // }\n}\n\nexport function markCandidates(buildData: BuildData): number {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const blueprint = buildData.blueprint;\n    candidates.fill(0);\n\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n\n        candidates.update((_v, x, y) => {\n            return site.isGateSite(x, y) &&\n                blueprint.size.contains(site.getChokeCount(x, y))\n                ? 1\n                : 0;\n        });\n    } else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        throw new Error(\n            'ERROR: Attempted to build a vestiblue without a location being provided.'\n        );\n    } else {\n        candidates.update((_v, x, y) => {\n            if (!site.isPassable(x, y)) return 0;\n            if (blueprint.notInHallway) {\n                const count = GWU.xy.arcCount(x, y, (i, j) =>\n                    site.isPassable(i, j)\n                );\n                return count <= 1 ? 1 : 0;\n            }\n            return 1;\n        });\n    }\n    return candidates.count((v) => v == 1);\n}\n\nexport function pickCandidateLoc(buildData: BuildData): GWU.xy.Loc | null {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n\n    const randSite = site.rng.matchingLoc(\n        site.width,\n        site.height,\n        (x, y) => candidates[x][y] == 1\n    );\n\n    if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n        // If no suitable sites, abort.\n        return null;\n    }\n    return randSite;\n}\n\n// // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n// export function computeInterior(\n//     builder: BuildData,\n//     blueprint: Blueprint\n// ): boolean {\n//     let failsafe = blueprint.isRoom ? 10 : 20;\n//     let tryAgain;\n//     const interior = builder.interior;\n//     const site = builder.site;\n\n//     do {\n//         tryAgain = false;\n//         if (--failsafe <= 0) {\n//             // console.log(\n//             //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n//             // );\n//             return false;\n//         }\n\n//         let count = fillInterior(builder, blueprint);\n\n//         // Now make sure the interior map satisfies the machine's qualifications.\n//         if (!count) {\n//             console.debug('- no interior');\n//             tryAgain = true;\n//         } else if (!blueprint.size.contains(count)) {\n//             console.debug('- too small');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.treatAsBlocking &&\n//             SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })\n//         ) {\n//             console.debug('- blocks');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.requireBlocking &&\n//             SITE.siteDisruptedSize(site, interior) < 100\n//         ) {\n//             console.debug('- does not block');\n//             tryAgain = true;\n//         }\n\n//         // Now loop if necessary.\n//     } while (tryAgain);\n\n//     // console.log(tryAgain, failsafe);\n\n//     return true;\n// }\n\nexport function computeVestibuleInterior(\n    builder: BuildData,\n    blueprint: Blueprint\n): number {\n    let success = true;\n\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n\n    if (blueprint.size.hi == 1) {\n        interior[builder.originX][builder.originY] = 1;\n        return 1;\n    }\n\n    // If this is a wall - it is really an error (maybe manually trying a build location?)\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    if (doorChokeCount > 10000) {\n        return 0;\n    }\n\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(\n        builder.originX,\n        builder.originY,\n        (x, y) => {\n            const count = site.getChokeCount(x, y);\n            if (count == doorChokeCount) return;\n            if (count > 10000) return;\n            if (count < 0) return;\n            vestibuleLoc[0] = x;\n            vestibuleLoc[1] = y;\n            vestibuleChokeCount = count;\n        },\n        true\n    );\n\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(\n            vestibuleLoc[0],\n            vestibuleLoc[1],\n            (_v, i, j) => {\n                if (site.isOccupied(i, j)) {\n                    success = false;\n                }\n                return site.getChokeCount(i, j) === vestibuleChokeCount;\n            },\n            1\n        );\n        if (success && blueprint.size.contains(count)) return roomSize;\n    }\n\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(site.rng); // Keeps track of the goal size.\n\n    const distMap = builder.distanceMap;\n    SITE.computeDistanceMap(\n        site,\n        distMap,\n        builder.originX,\n        builder.originY,\n        blueprint.size.hi\n    );\n\n    const cells = site.rng.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (\n            let i = 0;\n            i < cells.length && qualifyingTileCount < wantSize;\n            ++i\n        ) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n\n            const dist = Math.round(distMap.getDistance(x, y));\n\n            if (dist != k) continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount) continue;\n\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n\n    return qualifyingTileCount;\n}\n\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(\n    builder: BuildData,\n    startX: number,\n    startY: number\n): number {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n\n    let count = 1;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY)) continue;\n        if (interior[newX][newY]) continue; // already done\n\n        if (\n            site.isOccupied(newX, newY) ||\n            (site.getMachine(newX, newY) && !site.isGateSite(newX, newY))\n        ) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return 0;\n        }\n        if (\n            site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.getMachine(newX, newY)\n        ) {\n            let additional = addTileToInteriorAndIterate(builder, newX, newY);\n            if (additional <= 0) return 0;\n            count += additional;\n        }\n    }\n    return count;\n}\n\nexport function maximizeInterior(\n    data: BuildData,\n    minimumInteriorNeighbors = 1\n) {\n    const interior = data.interior;\n    const site = data.site;\n    let interiorNeighborCount = 0;\n    // let openNeighborCount = 0;\n\n    let madeChange = true;\n    let interiorCount = 0;\n    let maxInteriorCount = data.blueprint.size.hi;\n    let gen = 0;\n\n    while (madeChange && interiorCount < maxInteriorCount) {\n        madeChange = false;\n        interiorCount = 0;\n        ++gen;\n        interior.forEach((i, x, y) => {\n            if (!i) return;\n            ++interiorCount;\n\n            if (i != gen) return;\n\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j) || interior[i][j]) return;\n                    if (interior.isBoundaryXY(i, j)) return;\n\n                    interiorNeighborCount = 0;\n                    let ok = true;\n                    GWU.xy.eachNeighbor(\n                        i,\n                        j,\n                        (x2, y2) => {\n                            if (interior[x2][y2]) {\n                                ++interiorNeighborCount;\n                            } else if (!site.isWall(x2, y2)) {\n                                ok = false; // non-interior and not wall\n                            } else if (site.getMachine(x2, y2)) {\n                                ok = false; // in another machine\n                            }\n                        },\n                        false // 8 dirs\n                    );\n\n                    if (!ok || interiorNeighborCount < minimumInteriorNeighbors)\n                        return;\n\n                    interior[i][j] = gen + 1;\n                    ++interiorCount;\n                    if (site.blocksPathing(i, j)) {\n                        site.setTile(i, j, 'FLOOR');\n                    }\n                    madeChange = true;\n                },\n                true // 4 dirs\n            );\n        });\n    }\n    interior.update((v) => (v > 0 ? 1 : 0));\n}\n\nexport function prepareInterior(builder: BuildData) {\n    const interior = builder.interior;\n    const site = builder.site;\n    const blueprint = builder.blueprint;\n\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        maximizeInterior(builder, 1);\n    } else if (blueprint.openInterior) {\n        maximizeInterior(builder, 4);\n    }\n\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v) site.setTile(x, y, 'FLOOR');\n        });\n    } else {\n        if (blueprint.purgeBlockers) {\n            // If requested, purge pathing blockers -- no traps allowed.\n            interior.forEach((v, x, y) => {\n                if (!v) return;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, 'FLOOR');\n                }\n            });\n        }\n\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (blueprint.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.setTile(x, y, 'FLOOR');\n                }\n            });\n        }\n    }\n\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.isGateSite(x, y)) return;\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j)) return; // Not valid x,y\n                    if (interior[i][j]) return; // is part of machine\n                    if (site.isWall(i, j)) return; // is already a wall (of some sort)\n\n                    if (site.isGateSite(i, j)) return; // is a door site\n                    if (site.getMachine(i, j)) return; // is part of a machine\n\n                    if (site.blocksPathing(i, j)) return; // is a blocker for the player (water?)\n                    site.setTile(i, j, 'WALL');\n                },\n                false // all 8 directions\n            );\n        });\n    }\n\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.isGateSite(x, y)) return;\n            site.makeImpregnable(x, y);\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j)) return;\n                    if (interior[i][j]) return;\n                    if (site.isGateSite(i, j)) return;\n                    site.makeImpregnable(i, j);\n                },\n                false\n            );\n        });\n    }\n\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v) return;\n\n        if (!blueprint.noInteriorFlag) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, 'DOOR');\n        }\n    });\n}\n\n// export function expandMachineInterior(\n//     builder: BuildData,\n//     minimumInteriorNeighbors = 1\n// ) {\n//     let madeChange;\n//     const interior = builder.interior;\n//     const site = builder.site;\n\n//     do {\n//         madeChange = false;\n//         interior.forEach((_v, x, y) => {\n//             // if (v && site.isDoor(x, y)) {\n//             //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n//             //     return;\n//             // }\n//             if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE)) return;\n//             if (!site.blocksPathing(x, y)) return;\n\n//             let nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // Not in map\n//                     if (interior.isBoundaryXY(i, j)) return; // Not on boundary\n\n//                     if (interior[i][j] && !site.blocksPathing(i, j)) {\n//                         ++nbcount; // in machine and open tile\n//                     }\n//                 },\n//                 false\n//             );\n\n//             if (nbcount < minimumInteriorNeighbors) return;\n\n//             nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // not on map\n//                     if (interior[i][j]) return; // already part of machine\n//                     if (\n//                         !site.isWall(i, j) ||\n//                         site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)\n//                     ) {\n//                         ++nbcount; // tile is not a wall or is in a machine\n//                     }\n//                 },\n//                 false\n//             );\n\n//             if (nbcount) return;\n\n//             // Eliminate this obstruction; welcome its location into the machine.\n//             madeChange = true;\n//             interior[x][y] = 1;\n//             if (site.blocksPathing(x, y)) {\n//                 site.setTile(x, y, SITE.FLOOR);\n//             }\n//             GWU.xy.eachNeighbor(x, y, (i, j) => {\n//                 if (!interior.hasXY(i, j)) return;\n//                 if (site.isSet(i, j)) return;\n//                 site.setTile(i, j, SITE.WALL);\n//             });\n//         });\n//     } while (madeChange);\n// }\n\n///////////////////////////\n// INSTALL\n\nexport const blueprints: Record<string, Blueprint> = {};\n\nexport function install(\n    id: string,\n    blueprint: Blueprint | Partial<BlueprintOptions>\n) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\n\nexport function random(\n    requiredFlags: number,\n    depth: number,\n    rng?: GWU.rng.Random\n): Blueprint {\n    const matches = Object.values(blueprints).filter(\n        (b) => b.qualifies(requiredFlags) && b.frequency(depth)\n    );\n    rng = rng || GWU.rng.random;\n    return rng.item(matches);\n}\n\nexport function get(id: string | Blueprint): Blueprint {\n    if (id instanceof Blueprint) return id;\n    return blueprints[id];\n}\n\nexport function make(config: Partial<BlueprintOptions>): Blueprint {\n    // if (!config.id) throw new Error('id is required to make Blueprint.');\n    return new Blueprint(config);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\nimport * as STEP from './buildStep';\nimport * as ITEM from '../site/item';\nimport * as HORDE from '../site/horde';\n\nimport { BuildData } from './data';\nimport { NullLogger, Logger } from '../site/log/logger';\nimport { ConsoleLogger } from '../site/log/consoleLogger';\nimport { DisruptOptions, Site } from '../site';\n\nexport type BlueType = BLUE.Blueprint | string;\n\nexport interface BuilderOptions {\n    blueprints: BlueType[] | { [key: string]: BlueType };\n    log: Logger | boolean;\n    seed: number;\n}\n\nexport interface BuildInfo {\n    x: number;\n    y: number;\n}\n\nexport type BuildResult = BuildInfo | null;\n\nexport class Builder {\n    blueprints: BLUE.Blueprint[] | null = null;\n    log: Logger;\n    seed: number;\n\n    constructor(options: Partial<BuilderOptions> = {}) {\n        if (options.blueprints) {\n            if (!Array.isArray(options.blueprints)) {\n                options.blueprints = Object.values(options.blueprints);\n            }\n            this.blueprints = options.blueprints.map((v) => BLUE.get(v));\n        }\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        } else {\n            this.log = options.log || new NullLogger();\n        }\n        if (options.seed) {\n            this.seed = options.seed;\n        } else {\n            this.seed = 0;\n        }\n    }\n\n    _pickRandom(\n        requiredFlags: number,\n        depth: number,\n        rng?: GWU.rng.Random\n    ): BLUE.Blueprint | null {\n        rng = rng || GWU.rng.random;\n        const blueprints = this.blueprints || Object.values(BLUE.blueprints);\n        const weights = blueprints.map((b) => {\n            if (!b.qualifies(requiredFlags)) return 0;\n            return b.frequency(depth);\n        });\n\n        const index = rng.weighted(weights) as number;\n        return blueprints[index] || null;\n    }\n\n    buildRandom(\n        site: Site,\n        requiredMachineFlags = BLUE.Flags.BP_ROOM,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        const depth = site.depth;\n\n        let tries = 0;\n        while (tries < 10) {\n            const blueprint = this._pickRandom(\n                requiredMachineFlags,\n                depth,\n                site.rng\n            );\n            if (!blueprint) {\n                this.log.onBuildError(\n                    `Failed to find matching blueprint: requiredMachineFlags : ${GWU.flag.toString(\n                        BLUE.Flags,\n                        requiredMachineFlags\n                    )}, depth: ${depth}`\n                );\n                return null;\n            }\n\n            const data = new BuildData(site, blueprint);\n            site.analyze();\n\n            this.log.onBlueprintPick(data, requiredMachineFlags, depth);\n\n            if (this._buildAt(data, x, y, adoptedItem)) {\n                return { x, y };\n            }\n            ++tries;\n        }\n\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return null;\n    }\n\n    build(\n        site: Site,\n        blueprint: BLUE.Blueprint | string,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        if (typeof blueprint === 'string') {\n            const id = blueprint;\n            blueprint = BLUE.blueprints[id];\n            if (!blueprint) throw new Error('Failed to find blueprint - ' + id);\n        }\n\n        if (this.seed) {\n            site.rng.seed(this.seed);\n        }\n\n        const data = new BuildData(site, blueprint);\n        site.analyze();\n\n        return this._buildAt(data, x, y, adoptedItem);\n    }\n\n    _buildAt(\n        data: BuildData,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        if (x >= 0 && y >= 0) {\n            return this._build(data, x, y, adoptedItem);\n        }\n\n        let count = this._markCandidates(data);\n        if (!count) {\n            return null;\n        }\n\n        let tries = 20; // TODO - Make property of Blueprint\n        while (count-- && tries--) {\n            const loc = BLUE.pickCandidateLoc(data) || false;\n            if (loc) {\n                if (this._build(data, loc[0], loc[1], adoptedItem)) {\n                    return { x: loc[0], y: loc[1] };\n                }\n            }\n        }\n\n        this.log.onBlueprintFail(\n            data,\n            'No suitable locations found to build blueprint.'\n        );\n        return null;\n    }\n\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    _build(\n        data: BuildData,\n        originX: number,\n        originY: number,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        data.reset(originX, originY);\n        this.log.onBlueprintStart(data, adoptedItem);\n\n        if (!this._computeInterior(data)) {\n            return null;\n        }\n\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const snapshot = data.site.snapshot();\n        data.machineNumber = data.site.nextMachineId(); // Reserve this machine number, starting with 1.\n\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        BLUE.prepareInterior(data);\n\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        data.calcDistances(data.blueprint.size.hi);\n\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n\n        const components = data.blueprint.pickComponents(data.site.rng);\n\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n\n            if (!this._buildStep(data, component, adoptedItem)) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                this.log.onBlueprintFail(\n                    data,\n                    `Failed to build step ${component.index + 1}/${\n                        data.blueprint.steps.length\n                    }.`\n                );\n                data.site.restore(snapshot);\n                snapshot.free();\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return null;\n            }\n        }\n\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (data.blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(data.site, data.machineNumber);\n        }\n\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n\n        this.log.onBlueprintSuccess(data);\n\n        snapshot.free();\n\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return { x: originX, y: originY };\n    }\n\n    _markCandidates(data: BuildData): number {\n        const count = BLUE.markCandidates(data);\n\n        if (count <= 0) {\n            this.log.onBlueprintFail(\n                data,\n                'No suitable candidate locations found.'\n            );\n            return 0;\n        }\n\n        this.log.onBlueprintCandidates(data);\n\n        return count;\n    }\n\n    _computeInterior(data: BuildData): boolean {\n        let fail = null;\n        let count = data.blueprint.fillInterior(data);\n\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (!count) {\n            fail = 'Interior error.';\n        } else if (!data.blueprint.size.contains(count)) {\n            fail = `Interior wrong size - have: ${count}, want: ${data.blueprint.size.toString()}`;\n        } else if (\n            data.blueprint.treatAsBlocking &&\n            SITE.siteDisruptedBy(data.site, data.interior, {\n                machine: data.site.machineCount,\n            })\n        ) {\n            fail = 'Interior blocks map.';\n        } else if (\n            data.blueprint.requireBlocking &&\n            SITE.siteDisruptedSize(data.site, data.interior) < 100\n        ) {\n            fail = 'Interior does not block enough cells.';\n        }\n\n        if (!fail) {\n            this.log.onBlueprintInterior(data);\n\n            return true;\n        }\n\n        this.log.onBlueprintFail(data, fail);\n        return false;\n    }\n\n    _buildStep(\n        data: BuildData,\n        buildStep: STEP.BuildStep,\n        adoptedItem: ITEM.ItemInstance | null\n    ) {\n        let wantCount = 0;\n        let builtCount = 0;\n\n        const site = data.site;\n\n        this.log.onStepStart(data, buildStep, adoptedItem);\n\n        // console.log(\n        //     'buildComponent',\n        //     blueprint.id,\n        //     blueprint.steps.indexOf(buildStep)\n        // );\n\n        // Figure out the distance bounds.\n        const distanceBound = STEP.calcDistanceBound(data, buildStep);\n\n        // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n\n        // Make a master map of candidate locations for this feature.\n        let qualifyingTileCount = 0;\n\n        if (buildStep.buildVestibule) {\n            // Generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n\n            let success = this.buildRandom(\n                data.site,\n                BLUE.Flags.BP_VESTIBULE,\n                data.originX,\n                data.originY\n            );\n\n            if (!success) {\n                this.log.onStepFail(\n                    data,\n                    buildStep,\n                    'Failed to build vestibule'\n                );\n                return false;\n            }\n        }\n\n        // If we are just building a vestibule, then we can exit here...\n        if (!buildStep.buildsInstances) {\n            this.log.onStepSuccess(data, buildStep);\n            return true;\n        }\n\n        const candidates = GWU.grid.alloc(site.width, site.height);\n\n        let didSomething = false;\n\n        do {\n            didSomething = false;\n\n            if (buildStep.buildAtOrigin) {\n                candidates[data.originX][data.originY] = 1;\n                qualifyingTileCount = 1;\n                wantCount = 1;\n            } else {\n                qualifyingTileCount = buildStep.markCandidates(\n                    data,\n                    candidates,\n                    distanceBound\n                );\n\n                if (\n                    buildStep.generateEverywhere ||\n                    buildStep.repeatUntilNoProgress\n                ) {\n                    wantCount = qualifyingTileCount;\n                } else {\n                    wantCount = buildStep.count.value(site.rng);\n                }\n\n                this.log.onStepCandidates(\n                    data,\n                    buildStep,\n                    candidates,\n                    wantCount\n                );\n\n                // get rid of all error/invalid codes\n                candidates.update((v) => (v == 1 ? 1 : 0));\n\n                if (\n                    !qualifyingTileCount ||\n                    qualifyingTileCount < buildStep.count.lo\n                ) {\n                    this.log.onStepFail(\n                        data,\n                        buildStep,\n                        `Only ${qualifyingTileCount} qualifying tiles - want ${buildStep.count.toString()}.`\n                    );\n                    return false;\n                }\n            }\n\n            let x = 0,\n                y = 0;\n\n            while (qualifyingTileCount > 0 && builtCount < wantCount) {\n                // Find a location for the feature.\n                if (buildStep.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = data.originX;\n                    y = data.originY;\n                } else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = data.rng.matchingLoc(\n                        candidates.width,\n                        candidates.height,\n                        (x, y) => candidates[x][y] == 1\n                    );\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n\n                const snapshot = data.site.snapshot();\n\n                if (\n                    this._buildStepInstance(data, buildStep, x, y, adoptedItem)\n                ) {\n                    // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                    qualifyingTileCount -= buildStep.makePersonalSpace(\n                        data,\n                        x,\n                        y,\n                        candidates\n                    );\n                    builtCount++; // we've placed an instance\n                    didSomething = true;\n                    snapshot.free(); // This snapshot is useless b/c we made changes...\n                } else {\n                    data.site.restore(snapshot); // need to undo any changes...\n                    snapshot.free();\n                }\n\n                // Finished with this instance!\n            }\n        } while (didSomething && buildStep.repeatUntilNoProgress);\n\n        GWU.grid.free(candidates);\n\n        if (\n            !buildStep.count.contains(builtCount) &&\n            !buildStep.generateEverywhere &&\n            !buildStep.repeatUntilNoProgress\n        ) {\n            this.log.onStepFail(\n                data,\n                buildStep,\n                `Failed to build enough instances - want: ${buildStep.count.toString()}, built: ${builtCount}`\n            );\n            return false;\n        }\n\n        this.log.onStepSuccess(data, buildStep);\n\n        return true;\n    }\n\n    _buildStepInstance(\n        data: BuildData,\n        buildStep: STEP.BuildStep,\n        x: number,\n        y: number,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): boolean {\n        let success = true;\n        let didSomething = true;\n\n        const site = data.site;\n\n        if (success && buildStep.treatAsBlocking) {\n            // Yes, check for blocking.\n            const options: Partial<DisruptOptions> = {\n                machine: site.machineCount,\n            };\n            if (buildStep.noBlockOrigin) {\n                options.updateWalkable = (g) => {\n                    g[data.originX][data.originY] = 1;\n                    return true;\n                };\n            }\n            if (SITE.siteDisruptedByXY(site, x, y, options)) {\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'instance blocks map'\n                );\n                success = false;\n            }\n        }\n\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (success && buildStep.feature) {\n            success = buildStep.feature(site, x, y);\n            didSomething = success;\n            if (!success) {\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to build effect - ' +\n                        JSON.stringify(buildStep.feature)\n                );\n            }\n        }\n\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile) {\n            if (\n                !buildStep.permitBlocking &&\n                site.tileBlocksMove(buildStep.tile) &&\n                !buildStep.treatAsBlocking // already did treatAsBlocking\n            ) {\n                if (\n                    SITE.siteDisruptedByXY(site, x, y, {\n                        machine: site.machineCount,\n                    })\n                ) {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'tile blocks site'\n                    );\n                    success = false;\n                }\n            }\n\n            if (success) {\n                success = site.setTile(x, y, buildStep.tile);\n                didSomething = didSomething || success;\n                if (!success) {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'failed to set tile - ' + buildStep.tile\n                    );\n                }\n            }\n        }\n\n        let torch: ITEM.ItemInstance | null = adoptedItem;\n\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const itemInfo = ITEM.pickItem(data.site.depth, buildStep.item);\n\n            if (!itemInfo) {\n                success = false;\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to make random item - ' +\n                        JSON.stringify(buildStep.item)\n                );\n            } else {\n                const item = ITEM.makeItem(itemInfo);\n                if (buildStep.itemIsKey) {\n                    item.key = {\n                        x,\n                        y,\n                        disposable: !!buildStep.keyIsDisposable,\n                    };\n                }\n\n                if (buildStep.outsourceItem) {\n                    const result = this.buildRandom(\n                        data.site,\n                        BLUE.Flags.BP_ADOPT_ITEM,\n                        -1,\n                        -1,\n                        item\n                    );\n                    if (result) {\n                        didSomething = true;\n                    } else {\n                        this.log.onStepInstanceFail(\n                            data,\n                            buildStep,\n                            x,\n                            y,\n                            'Failed to build machine to adopt item - ' + item.id\n                        );\n                        success = false;\n                    }\n                } else if (buildStep.hordeTakesItem) {\n                    torch = item;\n                } else {\n                    success = site.addItem(x, y, item) > 0;\n                    didSomething = didSomething || success;\n                    if (!success) {\n                        this.log.onStepInstanceFail(\n                            data,\n                            buildStep,\n                            x,\n                            y,\n                            'Failed to add item to site - ' + item.id\n                        );\n                    }\n                }\n            }\n        } else if (success && buildStep.adoptItem) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error(\n                    'Failed to build blueprint because there is no adopted item.'\n                );\n            }\n\n            if (success) {\n                success = site.addItem(x, y, adoptedItem) > 0;\n                if (success) {\n                    didSomething = true;\n                } else {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'Failed to add adopted item to site - ' + adoptedItem.id\n                    );\n                }\n            }\n        }\n\n        let torchBearer: HORDE.ActorInstance | null = null;\n\n        if (success && buildStep.horde) {\n            let horde = HORDE.pickHorde(\n                data.site.depth,\n                buildStep.horde,\n                site.rng\n            );\n            // if (buildStep.horde.random) {\n            //     horde = GWM.horde.random({ rng: site.rng });\n            // } else if (buildStep.horde.id) {\n            //     horde = GWM.horde.from(buildStep.horde.id);\n            // } else {\n            //     buildStep.horde.rng = site.rng;\n            //     horde = GWM.horde.random(buildStep.horde);\n            // }\n            if (!horde) {\n                success = false;\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to pick horde - ' + JSON.stringify(buildStep.horde)\n                );\n            } else {\n                if (horde.blueprint) {\n                    const blueprint = BLUE.get(horde.blueprint);\n                    const newData = new BuildData(\n                        data.site,\n                        blueprint,\n                        data.machineNumber\n                    );\n                    const result = this._build(newData, x, y, null);\n                    newData.free();\n                    if (!result) {\n                        return false;\n                    }\n                }\n\n                const leader = HORDE.spawnHorde(horde, site, x, y, {\n                    machine: site.machineCount,\n                });\n                if (!leader) {\n                    success = false;\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'Failed to build horde - ' + horde\n                    );\n                } else {\n                    // What to do now?\n                    didSomething = true;\n\n                    // leader adopts item...\n                    if (torch && buildStep.hordeTakesItem) {\n                        torchBearer = leader;\n                        torchBearer.item = torch;\n                        torch.x = -1;\n                        torch.y = -1;\n                    }\n\n                    if (horde.feature) {\n                        horde.feature(site, x, y);\n                    }\n\n                    if (buildStep.horde.feature) {\n                        buildStep.horde.feature(site, x, y);\n                    }\n                }\n            }\n        }\n\n        if (success && didSomething) {\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!data.blueprint.noInteriorFlag) {\n                site.setMachine(\n                    x,\n                    y,\n                    data.machineNumber,\n                    data.blueprint.isRoom\n                );\n            }\n\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.impregnable) {\n                site.makeImpregnable(x, y);\n            }\n\n            this.log.onStepInstanceSuccess(data, buildStep, x, y);\n        } else if (didSomething) {\n            // roll back any changes?\n        }\n\n        return success && didSomething;\n    }\n}\n\n////////////////////////////////////////////////////\n// TODO - Change this!!!\n// const blue = BLUE.get(id | blue);\n// const result =  blue.buildAt(map, x, y);\n//\nexport function build(\n    blueprint: BlueType,\n    site: Site,\n    x: number,\n    y: number,\n    opts?: Partial<BuilderOptions>\n): BuildResult {\n    const builder = new Builder(opts);\n\n    return builder.build(site, blueprint, x, y);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\nimport * as LEVEL from './digger';\n\nimport * as TYPES from './types';\nimport * as ROOM from './room';\n// import * as HALL from './hall';\n// import * as LOOP from './loop';\n// import * as LAKE from './lake';\n// import * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as DIG from './digger';\nimport { RoomOptions } from '.';\n\nexport interface DungeonOptions extends DIG.DiggerOptions {\n    // seed?: number;\n    levels: number;\n    goesUp?: boolean;\n\n    width: number;\n    height: number;\n\n    entrance?: string | string[] | Record<string, number> | ROOM.RoomDigger;\n\n    startLoc?: GWU.xy.Loc;\n    startTile?: TYPES.TileId;\n    stairDistance?: number;\n\n    endLoc?: GWU.xy.Loc;\n    endTile?: TYPES.TileId;\n\n    // rooms?: {\n    //     count?: number;\n    //     digger?: string | ROOM.RoomDigger;\n    //     entrance?: string | ROOM.RoomDigger;\n    //     first?: string | ROOM.RoomDigger;\n    // };\n\n    // halls?: Partial<HALL.HallOptions>;\n    // loops?: Partial<LOOP.LoopOptions>;\n    // lakes?: Partial<LAKE.LakeOpts>;\n    // bridges?: Partial<BRIDGE.BridgeOpts>;\n    // stairs?: Partial<STAIRS.StairOpts>;\n\n    // boundary?: boolean;\n}\n\nexport type LocPair = [GWU.xy.Loc, GWU.xy.Loc];\n\nexport class Dungeon {\n    // @ts-ignore\n    config: DungeonOptions = {\n        levels: 1,\n        width: 80,\n        height: 34,\n        rooms: { fails: 20 },\n        // rooms: { count: 20, digger: 'DEFAULT' },\n        // halls: {},\n        // loops: {},\n        // lakes: {},\n        // bridges: {},\n        // stairs: {},\n\n        boundary: true,\n    };\n    seeds: number[] = [];\n    stairLocs: LocPair[] = [];\n\n    constructor(options: DungeonOptions) {\n        GWU.object.setOptions(this.config, options);\n\n        if (this.config.seed) {\n            GWU.rng.random.seed(this.config.seed);\n        }\n\n        if (typeof this.config.stairs === 'boolean' || !this.config.stairs) {\n            this.config.stairs = {};\n        }\n        if (!this.config.rooms) {\n            this.config.rooms = {};\n        } else if (typeof this.config.rooms === 'number') {\n            this.config.rooms = { count: this.config.rooms };\n        }\n\n        this._initSeeds();\n        this._initStairLocs();\n    }\n\n    get length() {\n        return this.config.levels;\n    }\n\n    _initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.rng.random.number(2 ** 32);\n        }\n    }\n\n    _initStairLocs() {\n        let startLoc: GWU.xy.Loc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n\n        const minDistance =\n            this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n\n        let needUpdate = false;\n        for (let i = 0; i < this.config.levels; ++i) {\n            let endLoc: GWU.xy.Loc;\n\n            if (\n                this.stairLocs[i] &&\n                this.stairLocs[i][1] &&\n                this.stairLocs[i][1][0] > 0\n            ) {\n                endLoc = this.stairLocs[i][1];\n                needUpdate =\n                    GWU.xy.distanceBetween(\n                        startLoc[0],\n                        startLoc[1],\n                        endLoc[0],\n                        endLoc[1]\n                    ) < minDistance;\n            } else {\n                endLoc = GWU.rng.random.matchingLoc(\n                    this.config.width,\n                    this.config.height,\n                    (x, y) => {\n                        return (\n                            GWU.xy.distanceBetween(\n                                startLoc[0],\n                                startLoc[1],\n                                x,\n                                y\n                            ) > minDistance\n                        );\n                    }\n                );\n            }\n\n            this.stairLocs[i] = [\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ];\n            startLoc = endLoc;\n        }\n\n        if (needUpdate) {\n            // loop does not go all the way to level 0\n            for (let i = this.config.levels - 1; i > 0; --i) {\n                let [startLoc, endLoc] = this.stairLocs[i];\n\n                if (\n                    GWU.xy.distanceBetween(\n                        startLoc[0],\n                        startLoc[1],\n                        endLoc[0],\n                        endLoc[1]\n                    ) > minDistance\n                ) {\n                    break;\n                }\n\n                startLoc = GWU.rng.random.matchingLoc(\n                    this.config.width,\n                    this.config.height,\n                    (x, y) => {\n                        return (\n                            GWU.xy.distanceBetween(endLoc[0], endLoc[1], x, y) >\n                            minDistance\n                        );\n                    }\n                );\n\n                this.stairLocs[i][0] = startLoc;\n                this.stairLocs[i - 1][1] = startLoc;\n            }\n        }\n    }\n\n    getLevel(id: number, cb: TYPES.DigFn) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n\n        const stairOpts = Object.assign(\n            {},\n            this.config.stairs as Partial<STAIRS.StairOpts>\n        );\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        } else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n\n        const rooms = Object.assign(\n            {},\n            this.config.rooms as Partial<RoomOptions>\n        );\n        if (id === 0 && this.config.entrance) {\n            rooms.first = this.config.entrance;\n        }\n\n        let width = this.config.width,\n            height = this.config.height;\n        // if (cb instanceof GWM.map.Map) {\n        //     width = cb.width;\n        //     height = cb.height;\n        // }\n\n        const levelOpts = {\n            seed: this.seeds[id],\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n\n            rooms: rooms,\n\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n\n            goesUp: this.config.goesUp,\n            width,\n            height,\n        };\n\n        return this._makeLevel(id, levelOpts, cb);\n\n        // TODO - Update startLoc, endLoc\n    }\n\n    _makeLevel(id: number, opts: LEVEL.DiggerOptions, cb: TYPES.DigFn) {\n        const digger = new LEVEL.Digger(opts);\n        let result = false;\n        // if (cb instanceof GWM.map.Map) {\n        //     result = digger.create(cb);\n        // } else {\n        result = digger.create(this.config.width, this.config.height, cb);\n        // }\n\n        this.stairLocs[id] = [digger.locations.start, digger.locations.end];\n\n        // if (cb instanceof GWM.map.Map) {\n        //     const locs = this.stairLocs[id];\n        //     if (this.config.goesUp) {\n        //         cb.locations.down = cb.locations.start = locs[0];\n        //         cb.locations.up = cb.locations.end = locs[1];\n        //     } else {\n        //         cb.locations.down = cb.locations.start = locs[1];\n        //         cb.locations.up = cb.locations.end = locs[0];\n        //     }\n        // }\n        return result;\n    }\n}\n"],"names":["TileFactory","[object Object]","withDefaults","factory","this","tileIds","installTile","priority","ch","index","blocksMove","blocksVision","door","secretDoor","stairs","liquid","impregnable","name","id","undefined","allTiles","getTile","info","opts","base","length","tags","extends","root","Object","assign","Error","GWU","object","assignOmitting","make","text","replace","search","Number","parseInt","tile","substring","delta","blocksPathing","push","tileFactory","tileId","features","types","installType","fn","feature","Array","isArray","featureFeature","bind","site","x","y","feat","config","FALSE","parts","split","shift","toLowerCase","handler","steps","map","filter","a","entries","key","every","step","makeArray","cfg","c","s","src","includes","superpriority","blockedByActors","blockedByItems","tileAction","machine","setTile","chance","endsWith","parseFloat","chanceAction","rng","Fl","flag","fl","Flags","spread","args","t","trim","grow","decrement","flags","from","matchTile","indexOf","action","spreadFeature","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","didSomething","spawnMap","grid","alloc","width","height","computeSpawnMap","mapDisruptedBy","free","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","update","v","forEach","i","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","xy","forRect","j","lakeX","lakeY","get","isStairs","first","floodFill","cellIsOk","effect","isStart","hasXY","isProtected","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","hasTile","dir","x2","y2","madeChange","startProb","probDec","fill","count","DIRS","_flags","clearTile","blockingMap","eachActor","loc","matchingLocNear","forbidsActor","eachItem","forbidsItem","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","hordes","pickHorde","depth","rules","tagMatch","random","makeMatch","find","h","choices","horde","freq","frequency","weighted","spawnHorde","canSpawn","TRUE","leader","canSpawnActor","matchingLoc","hasActor","_pickLeaderLoc","_opts","addActor","_addLeader","_spawnLeader","members","kindId","value","_spawnMember","_spawnMembers","member","instance","actor","_pickMemberLoc","_addMember","items","pickItem","tagRules","item","makeItem","directionOfDoorSite","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","isFloor","chooseRandomDoorSites","k","doorSiteFailed","DOORS","w","isDiggable","isSet","doorSites","siteDisruptedByXY","options","offsetX","offsetY","arcCount","isPassable","result","siteDisruptedBy","blockingX","blockingY","getMachine","updateWalkable","siteDisruptedSize","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","_maxDistance","reset","setGoal","calculate","path","OK","blocksDiagonal","OBSTRUCTION","BLOCKED","clearInteriorFlag","needsMachine","setMachine","analyze","updateChokeCounts","updateLoopiness","updateChokepoints","updateCounts","blockMap","isSecretDoor","passableArcCount","clearChokepoint","isInLoop","oldX","CLOCK_DIRS","oldY","setChokepoint","left","right","up","down","setGateSite","setChokeCount","isChokepoint","cellCount","floodFillCount","i2","j2","getChokeCount","results","startX","startY","getCount","isAreaMachine","todo","pop","resetLoopiness","checkLoopiness","cleanLoopiness","setInLoop","clearInLoop","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","designationSurvives","Site","machineCount","tiles","_tiles","_doors","_machine","_chokeCounts","fmt","dump","other","copy","slice","actors","otherX","otherY","seed","isBoundaryXY","isDoor","isBridge","isShallow","_x","_y","isNothing","isDeep","isInMachine","IMPREGNABLE","CHOKEPOINT","GATE_SITE","IN_LOOP","ANALYZE.analyze","snapshot","isRoom","IN_MACHINE","IN_AREA_MACHINE","_v","Utils.directionOfDoorSite","hasItem","_actor","cb","_a","some","_i","NullLogger","StepFlags","CandidateType","BuildStep","pad","range","FEATURE.make","BS_ADOPT_ITEM","buildAtOrigin","hi","repeatUntilNoProgress","hordeTakesItem","allowBoundary","BS_ALLOW_BOUNDARY","notInHallway","BS_NOT_IN_HALLWAY","buildInWalls","BS_BUILD_IN_WALLS","buildAnywhere","BS_BUILD_ANYWHERE_ON_LEVEL","BS_REPEAT_UNTIL_NO_PROGRESS","permitBlocking","BS_PERMIT_BLOCKING","treatAsBlocking","BS_TREAT_AS_BLOCKING","BS_NO_BLOCK_ORIGIN","noBlockOrigin","adoptItem","itemIsKey","BS_ITEM_IS_KEY","keyIsDisposable","BS_KEY_DISPOSABLE","outsourceItem","BS_OUTSOURCE_ITEM_TO_MACHINE","BS_IMPREGNABLE","buildVestibule","BS_BUILD_VESTIBULE","BS_HORDE_TAKES_ITEM","generateEverywhere","BS_EVERYWHERE","BS_BUILD_AT_ORIGIN","buildsInstances","data","candidates","distanceBound","updateViewMap","blueprint","candidateType","cellIsCandidate","_data","JSON","stringify","lo","toString","join","builder","buildStep","BS_IN_VIEW_OF_ORIGIN","BS_IN_PASSABLE_VIEW_OF_ORIGIN","fov","FOV","isBlocked","viewMap","calcDistanceBound","BS_NEAR_ORIGIN","distance25","BS_FAR_FROM_ORIGIN","distance75","IN_HALLWAY","ON_BOUNDARY","MUST_BE_ORIGIN","NOT_ORIGIN","occupied","OCCUPIED","NOT_IN_VIEW","distance","getDistance","TOO_FAR","TOO_CLOSE","cellMachine","interior","machineNumber","failed","neighborMachine","INVALID_WALL","NOT_CANDIDATE","blocksItems","FAILED","ConsoleLogger","console","group","groupEnd","room","roomSite","_site","_room","_roomSite","error","log","label","size","wantCount","haveCount","_step","requiredTile","cells","line","source","costGrid","Hall","Bounds","super","dx","dy","doors","d","makeHall","dirIndex","hallLength","hallWidth","abs","Room","cx","floor","cy","hall","translate","checkConfig","expected","expect","have","RoomDigger","_setOptions","carve","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","randomRoom","ERROR","create","Cavern","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","DOWN","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","top","bottom","install","isDoorLoc","pickWidth","utils","clamp","Range","weights","_pickWidth","pickLength","lengths","UP","pickHallDirection","dirs","sequence","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.makeHall","lower","higher","actual","halls","Lakes","tries","canDisrupt","wreathTile","wreathChance","wreathSize","assignObject","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","DijkstraMap","dirCoords","seq","isAnyLiquid","bridgeDir","SITE.computeDistanceMap","isBridgeCandidate","_bridgeDir","Stairs","start","upTile","downTile","wall","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","distanceBetween","setupStairs","end","wallTile","indexes","x0","y0","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","Digger","fails","SITE.tileFactory","setOptions","goesUp","startLoc","_locs","endLoc","loops","lakes","bridges","LOGGER.NullLogger","SITE.Site","needsFree","dest","_createSite","_create","addRooms","addLoops","onLoopsAdded","addLakes","onLakesAdded","addBridges","onBridgesAdded","addStairs","onStairsAdded","finish","number","setSeed","clear","stair","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","addFirstRoom","updateDoorDirs","onDigFirstRoom","maxFails","addRoom","shuffle","_makeRoomSite","getDigger","_attachRoomAtLoc","HALL.dig","onRoomCandidate","_attachRoom","onRoomSuccess","onRoomFailed","len","getDoorDir","oppDir","_roomFitsAt","copyTiles","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","locs","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","boundaryTile","boundary","BuildData","maxDistance","qualifyingTileCount","distances","dist","Blueprint","STEP.BuildStep","BP_ADOPT_ITEM","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","BP_NOT_IN_HALLWAY","requiredFlags","want","alternativeFlags","STEP.StepFlags","BS_ALTERNATIVE","BS_ALTERNATIVE_2","keepFeature","totalFreq","randIndex","_f","addTileToInteriorAndIterate","computeVestibuleInterior","goalSize","n","isOccupied","markCandidates","buildData","isGateSite","contains","pickCandidateLoc","randSite","doorChokeCount","vestibuleLoc","vestibuleChokeCount","roomSize","wantSize","distMap","startChokeCount","additional","minimumInteriorNeighbors","interiorNeighborCount","interiorCount","maxInteriorCount","gen","prepareInterior","blueprints","Builder","values","BLUE.get","BLUE.blueprints","b","qualifies","requiredMachineFlags","BLUE.Flags","adoptedItem","_pickRandom","onBuildError","onBlueprintPick","_buildAt","_build","_markCandidates","BLUE.pickCandidateLoc","onBlueprintFail","onBlueprintStart","_computeInterior","nextMachineId","BLUE.prepareInterior","calcDistances","components","pickComponents","component","_buildStep","restore","SITE.clearInteriorFlag","onBlueprintSuccess","BLUE.markCandidates","onBlueprintCandidates","fail","fillInterior","SITE.siteDisruptedBy","SITE.siteDisruptedSize","onBlueprintInterior","builtCount","onStepStart","STEP.calcDistanceBound","buildRandom","onStepFail","onStepSuccess","onStepCandidates","_buildStepInstance","makePersonalSpace","g","SITE.siteDisruptedByXY","onStepInstanceFail","tileBlocksMove","torch","itemInfo","ITEM.pickItem","ITEM.makeItem","disposable","addItem","torchBearer","HORDE.pickHorde","newData","HORDE.spawnHorde","onStepInstanceSuccess","build","matches","levels","_initSeeds","_initStairLocs","seeds","stairDistance","needUpdate","stairLocs","stairOpts","startTile","endTile","entrance","levelOpts","_makeLevel","LEVEL.Digger"],"mappings":"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"}