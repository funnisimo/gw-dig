{"version":3,"file":"gw-dig.min.js","sources":["../js/site/digSite.js","../js/site/buildSite.js","../js/site/utils.js","../js/types.js","../js/room.js","../js/hall.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/level.js","../js/blueprint/blueprint.js","../js/blueprint/buildStep.js","../js/blueprint/builder.js","../js/dungeon.js"],"sourcesContent":["var _a, _b;\nimport * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nexport const NOTHING = GWM.tile.get('NULL').index;\nexport const FLOOR = GWM.tile.get('FLOOR').index;\nexport const DOOR = GWM.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GWM.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GWM.tile.get('WALL').index;\nexport const DEEP = GWM.tile.get('LAKE').index;\nexport const SHALLOW = GWM.tile.get('SHALLOW').index;\nexport const BRIDGE = GWM.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GWM.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GWM.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GWM.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\nexport class GridSite {\n    constructor(width, height) {\n        this.tiles = GWU.grid.alloc(width, height);\n    }\n    free() {\n        GWU.grid.free(this.tiles);\n    }\n    clear() {\n        this.tiles.fill(0);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === WALL || v === IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === UP_STAIRS || v === DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    getMachine(_x, _y) {\n        return 0;\n    }\n}\n","import * as GWM from 'gw-map';\nconst Flags = GWM.map.flags.Cell;\nexport class MapSite {\n    constructor(map) {\n        this.machineCount = 0;\n        this.map = map;\n    }\n    get width() {\n        return this.map.width;\n    }\n    get height() {\n        return this.map.height;\n    }\n    hasXY(x, y) {\n        return this.map.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.map.isBoundaryXY(x, y);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.map.cellInfo(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.map.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.map.cell(x, y).clearCellFlag(flag);\n    }\n    hasTile(x, y, tile) {\n        return this.map.cellInfo(x, y).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        return this.map.setTile(x, y, tile, opts);\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.map.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    clear() {\n        this.map.cells.forEach((c) => c.clear());\n    }\n    hasItem(x, y) {\n        return this.map.cellInfo(x, y).hasItem();\n    }\n    hasActor(x, y) {\n        return this.map.hasActor(x, y);\n    }\n    blocksMove(x, y) {\n        return this.map.cellInfo(x, y).blocksMove();\n    }\n    blocksVision(x, y) {\n        return this.map.cellInfo(x, y).blocksVision();\n    }\n    blocksDiagonal(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GWM.gameObject.flags.GameObject.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return (info.hasObjectFlag(GWM.gameObject.flags.GameObject.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GWM.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GWM.gameObject.flags.GameObject.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GWM.gameObject.flags.GameObject.L_BLOCKS_EFFECTS);\n    }\n    isWall(x, y) {\n        return this.map.cellInfo(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.map.cellInfo(x, y).isStairs();\n    }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.map.cell(x, y).isEmpty();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.isEmpty())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.map.cell(x, y).isEmpty();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GWM.gameObject.flags.GameObject.L_SECRETLY_PASSABLE);\n    }\n    isDeep(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (!!cell.depthTile(GWM.gameObject.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (cell.hasDepthTile(GWM.gameObject.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    isPassable(x, y) {\n        return !this.map.cellInfo(x, y).blocksMove();\n    }\n    // tileBlocksMove(tile: number): boolean {\n    //     return GWM.tile.get(tile).blocksMove();\n    // }\n    backup() {\n        const site = new MapSite(this.map.clone());\n        site.machineCount = this.machineCount;\n        return site;\n    }\n    restore(backup) {\n        this.map.copy(backup.map);\n        this.machineCount = backup.machineCount;\n    }\n    free() { }\n    getChokeCount(x, y) {\n        return this.map.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.map.cell(x, y).chokeCount = count;\n    }\n    analyze() {\n        GWM.map.analyze(this.map);\n    }\n    fireEffect(effect, x, y) {\n        return GWM.effect.fireSync(effect, this.map, x, y);\n    }\n    nextMachineId() {\n        return ++this.machineCount;\n    }\n    getMachine(x, y) {\n        return this.map.cell(x, y).machineId;\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.map.cell(x, y).machineId = id;\n        if (id == 0) {\n            this.map.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.map.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as TYPES from './types';\nconst DIRS = GWU.utils.DIRS;\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.utils.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GWU.utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.utils.DIRS[dir][0];\n                    newY = j + GWU.utils.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.utils.DIRS[dir][0];\n                        newY += GWU.utils.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = GWU.random.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.utils.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.utils.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.utils.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.utils.Loc[] {\n//     const doorIndexes = GWU.random.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.utils.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = GWU.random.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.utils.Loc;\n//             //     return [x0, y0] as GWU.utils.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GWU.utils.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n}\nexport function siteDisruptedBy(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.utils.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j) && site.getMachine(i, j) == 0) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GWU.utils.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GWU.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GWU.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GWU.grid.free(costGrid);\n}\n","import * as GWU from 'gw-utils';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GWU.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        // console.log('Hall', loc, d, length, width);\n        if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        // console.log(' - ', [this.x2, this.y2]);\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room extends GWU.utils.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.utils.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = GWU.random.item.bind(GWU.random, choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = GWU.random.weighted.bind(GWU.random, choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom();\n        const room = rooms[id];\n        if (!room) {\n            GWU.utils.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GWU.blob.Blob({\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GWU.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GWU.utils.DOWN] = [\n            Math.floor(site.width / 2),\n            site.height - 2,\n        ];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * GWU.random.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * GWU.random.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX +\n            GWU.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            GWU.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GWU.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * GWU.random.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * GWU.random.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.utils.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.utils.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.utils.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const ringMinWidth = this.options.ringMinWidth.value();\n        const holeMinSize = this.options.holeMinSize.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            GWU.random.chance(this.options.holeChance.value())) {\n            GWU.utils.forCircle(x, y, GWU.random.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value();\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GWU.utils.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = GWU.random.range(minX, maxX);\n            y = GWU.random.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GWU.utils.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\nconst DIRS = GWU.utils.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(opts = {}) {\n    return GWU.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GWU.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GWU.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GWU.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths) {\n    if (dir == GWU.utils.UP || dir == GWU.utils.DOWN) {\n        return lengths[1].value();\n    }\n    else {\n        return lengths[0].value();\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GWU.utils.NO_DIRECTION;\n    if (dir == GWU.utils.NO_DIRECTION) {\n        const dirs = GWU.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = GWU.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: GWU.range.make(1),\n            length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = GWU.range.make(options.width);\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n        if (!GWU.random.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.utils.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = this.config.width.value();\n        const length = pickLength(dir, this.config.length);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = new TYPES.Hall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GWU.utils.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = new TYPES.Hall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = GWU.random.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GWU.blob.Blob({\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = GWU.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = GWU.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GWU.utils.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.utils.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n        const seq = GWU.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GWU.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc = null;\n        let downLoc = null;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = GWU.random.matchingLocNear(GWU.utils.x(start), GWU.utils.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GWU.random.matchingLocNear(GWU.utils.x(up), GWU.utils.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = GWU.random.matchingLocNear(GWU.utils.x(down), GWU.utils.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GWU.random.matchingLocNear(GWU.utils.x(up), GWU.utils.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = GWU.random.matchingLocNear(GWU.utils.x(down), GWU.utils.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GWU.utils.distanceBetween(x, y, downLoc[0], downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.utils.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = GWU.random.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.utils.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GWU.utils.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GWU.utils.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GWU.utils.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GWU.utils.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n            doorChance: 50,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = GWU.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = GWU.random.chance(this.options.doorChance)\n                                ? SITE.DOOR\n                                : SITE.FLOOR;\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nexport class Level {\n    constructor(options = {}) {\n        var _a, _b;\n        this.seed = 0;\n        this.rooms = {};\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.seed = options.seed || 0;\n        GWU.utils.setOptions(this.rooms, options.rooms);\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        }\n        else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.utils.setOptions(this.doors, options.doors);\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        }\n        else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.utils.setOptions(this.halls, options.halls);\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        }\n        else {\n            if (options.loops === true)\n                options.loops = {};\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                (_a = options.loops.doorChance) !== null && _a !== void 0 ? _a : (_b = options.doors) === null || _b === void 0 ? void 0 : _b.chance;\n            GWU.utils.setOptions(this.loops, options.loops);\n        }\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        }\n        else {\n            if (options.lakes === true)\n                options.lakes = {};\n            GWU.utils.setOptions(this.lakes, options.lakes);\n        }\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        }\n        else {\n            if (options.bridges === true)\n                options.bridges = {};\n            GWU.utils.setOptions(this.bridges, options.bridges);\n        }\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        }\n        else {\n            if (options.stairs === true)\n                options.stairs = {};\n            GWU.utils.setOptions(this.stairs, options.stairs);\n        }\n        this.startLoc = options.startLoc || [-1, -1];\n        this.endLoc = options.endLoc || [-1, -1];\n    }\n    _makeSite(width, height) {\n        return new SITE.GridSite(width, height);\n    }\n    create(...args) {\n        if (args.length == 1 && args[0] instanceof GWM.map.Map) {\n            const map = args[0];\n            this.site = new SITE.MapSite(map);\n        }\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            this.site = new SITE.GridSite(width, height);\n        }\n        const result = this._create(this.site);\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            const cb = args[2];\n            GWU.utils.forRect(width, height, (x, y) => {\n                const t = this.site.getTileIndex(x, y);\n                if (t)\n                    cb(x, y, t);\n            });\n        }\n        this.site.free();\n        return result;\n    }\n    _create(site) {\n        if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n            this.startLoc[0] = Math.floor(site.width / 2);\n            this.startLoc[1] = site.height - 2;\n        }\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        let fails = 0;\n        while (fails < 20) {\n            if (this.addRoom(site)) {\n                fails = 0;\n            }\n            else {\n                ++fails;\n            }\n        }\n        if (this.loops)\n            this.addLoops(site, this.loops);\n        if (this.lakes)\n            this.addLakes(site, this.lakes);\n        if (this.bridges)\n            this.addBridges(site, this.bridges);\n        if (this.stairs)\n            this.addStairs(site, this.stairs);\n        this.finish(site);\n        return true;\n    }\n    start(site) {\n        if (this.seed) {\n            GWU.random.seed(this.seed);\n        }\n        site.clear();\n        this.seq = GWU.random.sequence(site.width * site.height);\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        if (room && !this._attachRoom(site, roomSite, room)) {\n            room = null;\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (let i = 0; i < this.seq.length; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n            if (!site.isNothing(x, y))\n                continue;\n            const dir = SITE.directionOfDoorSite(site, x, y);\n            if (dir != GWU.utils.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    SITE.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = GWU.random.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                SITE.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.utils.Loc;\n                //     return [x0, y0] as GWU.utils.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n            for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.hasXY(i, j) ||\n                                map.isBoundaryXY(i, j) ||\n                                !map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(map, room, x, y, dir) {\n        const opts = this.doors;\n        let isDoor = false;\n        if (opts.chance && GWU.random.chance(opts.chance)) {\n            isDoor = true;\n        }\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        map.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n            return;\n        }\n        if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x - k, y)) {\n                    if (map.isSet(x - k, y - 1) && map.isSet(x - k, y + 1)) {\n                        map.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x + k, y)) {\n                    if (map.isSet(x + k, y - 1) && map.isSet(x + k, y + 1)) {\n                        map.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x, y - k)) {\n                    if (map.isSet(x - 1, y - k) && map.isSet(x + 1, y - k)) {\n                        map.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x, y + k)) {\n                    if (map.isSet(x - 1, y + k) && map.isSet(x + 1, y + k)) {\n                        map.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (GWU.random.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GWU.utils.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GWU.utils.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nconst Fl = GWU.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(10)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(7)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(0)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(2)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(3)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(4)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(5)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(6)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(8)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(9)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(14)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(11)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(12)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(13)] = \"BP_NO_INTERIOR_FLAG\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            if (typeof opts.size === 'string') {\n                const parts = opts.size\n                    .split(/-/)\n                    .map((v) => v.trim())\n                    .map((v) => Number.parseInt(v));\n                if (parts.length !== 2)\n                    throw new Error('Blueprint size must be of format: #-#');\n                this.size = GWU.range.make([parts[0], parts[1]]);\n            }\n            else if (Array.isArray(opts.size)) {\n                if (opts.size.length !== 2)\n                    throw new Error('Blueprint size must be [min, max]');\n                this.size = GWU.range.make([opts.size[0], opts.size[1]]);\n            }\n            else {\n                throw new Error('size must be string or array.');\n            }\n            if (this.size.lo > this.size.hi)\n                throw new Error('Blueprint size must be small to large.');\n        }\n        else {\n            this.size = GWU.range.make([0, 999999]);\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n    }\n    getChance(level, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return 0;\n        }\n        return this.frequency(level);\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    qualifies(requiredFlags, depth) {\n        if (this.frequency(depth) <= 0 ||\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickLocation(site) {\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            const randSite = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                return (site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_GATE_SITE) && this.size.contains(site.getChokeCount(x, y)));\n            });\n            if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n                // If no suitable sites, abort.\n                console.log('Failed to build a machine; there was no eligible door candidate for the chosen room machine from blueprint.');\n                return false;\n            }\n            return randSite;\n        }\n        else if (this.isVestiblue) {\n            //  Door machines must have locations passed in. We can't pick one ourselves.\n            console.log('ERROR: Attempted to build a vestiblue without a location being provided.');\n            return false;\n        }\n        // Pick a random origin location.\n        const pos = GWU.random.matchingLoc(site.width, site.height, (x, y) => site.isPassable(x, y));\n        if (!pos || pos[0] < 0 || pos[1] < 0)\n            return false;\n        return pos;\n    }\n    // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n    computeInterior(builder) {\n        let failsafe = this.isRoom ? 10 : 20;\n        let tryAgain;\n        const interior = builder.interior;\n        const site = builder.site;\n        do {\n            tryAgain = false;\n            if (--failsafe <= 0) {\n                console.log('Failed to build a machine; failed repeatedly to find a suitable blueprint location.');\n                return false;\n            }\n            interior.fill(0);\n            // Find a location and map out the machine interior.\n            if (this.isRoom) {\n                // If it's a room machine, count up the gates of appropriate\n                // choke size and remember where they are. The origin of the room will be the gate location.\n                // Now map out the interior into interior[][].\n                // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n                // same or lower choke value, ignoring any tiles that are already part of a machine.\n                // If we get false from this, try again. If we've tried too many times already, abort.\n                tryAgain = !this.addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n            }\n            else if (this.isVestiblue) {\n                if (!this.computeInteriorForVestibuleMachine(builder)) {\n                    // TODO - tryagain = true?\n                    console.error('ERROR: Attempted to build a door machine from blueprint: not enough room.');\n                    return false;\n                }\n                // success\n            }\n            else {\n                // Find a location and map out the interior for a non-room machine.\n                // The strategy here is simply to pick a random location on the map,\n                // expand it along a pathing map by one space in all directions until the size reaches\n                // the chosen size, and then make sure the resulting space qualifies.\n                // If not, try again. If we've tried too many times already, abort.\n                let distanceMap = GWU.grid.alloc(interior.width, interior.height);\n                SITE.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, this.size.hi);\n                const seq = GWU.random.sequence(site.width * site.height);\n                let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n                let totalFreq = this.size.value(); // Keeps track of the goal size.\n                for (let k = 0; k < 1000 && qualifyingTileCount < totalFreq; k++) {\n                    for (let n = 0; n < seq.length && qualifyingTileCount < totalFreq; n++) {\n                        const i = Math.floor(seq[n] / site.height);\n                        const j = seq[n] % site.height;\n                        if (distanceMap[i][j] == k) {\n                            interior[i][j] = 1;\n                            qualifyingTileCount++;\n                            if (site.isOccupied(i, j) ||\n                                site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_IN_MACHINE)) {\n                                // Abort if we've entered another machine or engulfed another machine's item or monster.\n                                tryAgain = true;\n                                qualifyingTileCount = totalFreq; // This is a hack to drop out of these three for-loops.\n                            }\n                        }\n                    }\n                }\n                // Now make sure the interior map satisfies the machine's qualifications.\n                if (qualifyingTileCount < totalFreq) {\n                    tryAgain = true;\n                    console.log('too small');\n                }\n                else if (this.treatAsBlocking &&\n                    SITE.siteDisruptedBy(site, interior)) {\n                    console.log('disconnected');\n                    tryAgain = true;\n                }\n                else if (this.requireBlocking &&\n                    SITE.siteDisruptedSize(site, interior) < 100) {\n                    console.log('not disconnected enough');\n                    tryAgain = true; // BP_REQUIRE_BLOCKING needs some work to make sure the disconnect is interesting.\n                }\n                // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n                // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n                GWU.grid.free(distanceMap);\n            }\n            // Now loop if necessary.\n        } while (tryAgain);\n        // console.log(tryAgain, failsafe);\n        return true;\n    }\n    // Assumes (startX, startY) is in the machine.\n    // Returns true if everything went well, and false if we ran into a machine component\n    // that was already there, as we don't want to build a machine around it.\n    addTileToInteriorAndIterate(builder, startX, startY) {\n        let goodSoFar = true;\n        const interior = builder.interior;\n        const site = builder.site;\n        interior[startX][startY] = 1;\n        const startChokeCount = site.getChokeCount(startX, startY);\n        for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n            const newX = startX + GWU.utils.DIRS[dir][0];\n            const newY = startY + GWU.utils.DIRS[dir][1];\n            if (!site.hasXY(newX, newY))\n                continue;\n            if (interior[newX][newY])\n                continue; // already done\n            if (site.isOccupied(newX, newY) ||\n                (site.hasCellFlag(newX, newY, GWM.map.flags.Cell.IS_IN_MACHINE) &&\n                    !site.hasCellFlag(newX, newY, GWM.map.flags.Cell.IS_GATE_SITE))) {\n                // Abort if there's an item in the room.\n                // Items haven't been populated yet, so the only way this could happen is if another machine\n                // previously placed an item here.\n                // Also abort if we're touching another machine at any point other than a gate tile.\n                return false;\n            }\n            if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n                !site.hasCellFlag(newX, newY, GWM.map.flags.Cell.IS_IN_MACHINE)) {\n                goodSoFar = this.addTileToInteriorAndIterate(builder, newX, newY);\n            }\n        }\n        return goodSoFar;\n    }\n    computeInteriorForVestibuleMachine(builder) {\n        let success = true;\n        const interior = builder.interior;\n        const site = builder.site;\n        interior.fill(0);\n        let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n        const totalFreq = this.size.value(); // Keeps track of the goal size.\n        const distMap = GWU.grid.alloc(site.width, site.height);\n        SITE.computeDistanceMap(site, distMap, builder.originX, builder.originY, this.size.hi);\n        // console.log('DISTANCE MAP', originX, originY);\n        // RUT.Grid.dump(distMap);\n        const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n        const cells = GWU.random.sequence(site.width * site.height);\n        for (let k = 0; k < 1000 && qualifyingTileCount < totalFreq; k++) {\n            for (let i = 0; i < cells.length && qualifyingTileCount < totalFreq; ++i) {\n                const x = Math.floor(cells[i] / site.height);\n                const y = cells[i] % site.height;\n                const dist = distMap[x][y];\n                if (dist != k)\n                    continue;\n                if (site.isOccupied(x, y)) {\n                    success = false;\n                    qualifyingTileCount = totalFreq;\n                }\n                if (site.getChokeCount(x, y) <= doorChokeCount)\n                    continue;\n                interior[x][y] = 1;\n                qualifyingTileCount += 1;\n            }\n        }\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (this.treatAsBlocking && SITE.siteDisruptedBy(site, interior)) {\n            success = false;\n        }\n        else if (this.requireBlocking &&\n            SITE.siteDisruptedSize(site, interior) < 100) {\n            success = false;\n        }\n        GWU.grid.free(distMap);\n        return success;\n    }\n    prepareInteriorWithMachineFlags(builder) {\n        const interior = builder.interior;\n        const site = builder.site;\n        // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n        if (this.maximizeInterior) {\n            this.expandMachineInterior(builder, 1);\n        }\n        else if (this.openInterior) {\n            this.expandMachineInterior(builder, 4);\n        }\n        // If requested, cleanse the interior -- no interesting terrain allowed.\n        if (this.purgeInterior) {\n            interior.forEach((v, x, y) => {\n                if (v)\n                    site.setTile(x, y, SITE.FLOOR);\n            });\n        }\n        // If requested, purge pathing blockers -- no traps allowed.\n        if (this.purgeBlockers) {\n            interior.forEach((v, x, y) => {\n                if (!v)\n                    return;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n            });\n        }\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (this.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n            });\n        }\n        // Surround with walls if requested.\n        if (this.surroundWithWalls) {\n            interior.forEach((v, x, y) => {\n                if (!v ||\n                    site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_GATE_SITE))\n                    return;\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // Not valid x,y\n                    if (interior[i][j])\n                        return; // is part of machine\n                    if (site.isWall(i, j))\n                        return; // is already a wall (of some sort)\n                    if (site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_GATE_SITE))\n                        return; // is a door site\n                    if (site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_IN_MACHINE))\n                        return; // is part of a machine\n                    if (!site.blocksPathing(i, j))\n                        return; // is not a blocker for the player (water?)\n                    site.setTile(i, j, SITE.WALL);\n                }, false);\n            });\n        }\n        // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n        // Then zero out any portion of the interior that is still wall.\n        // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n        //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n        // }\n        // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n        if (this.makeImpregnable) {\n            interior.forEach((v, x, y) => {\n                if (!v ||\n                    site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(x, y, GWM.map.flags.Cell.IMPREGNABLE);\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return;\n                    if (interior[i][j])\n                        return;\n                    if (site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_GATE_SITE))\n                        return;\n                    site.setCellFlag(i, j, GWM.map.flags.Cell.IMPREGNABLE);\n                }, false);\n            });\n        }\n        // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n        const machineNumber = builder.machineNumber;\n        interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            site.setMachine(x, y, machineNumber, this.isRoom);\n            // secret doors mess up machines\n            if (site.isSecretDoor(x, y)) {\n                site.setTile(x, y, SITE.DOOR);\n            }\n        });\n    }\n    expandMachineInterior(builder, minimumInteriorNeighbors = 1) {\n        let madeChange;\n        const interior = builder.interior;\n        const site = builder.site;\n        do {\n            madeChange = false;\n            interior.forEach((_v, x, y) => {\n                // if (v && site.isDoor(x, y)) {\n                //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n                //     return;\n                // }\n                if (site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_IN_MACHINE))\n                    return;\n                if (!site.blocksPathing(x, y))\n                    return;\n                let nbcount = 0;\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // Not in map\n                    if (interior[i][j] && !site.blocksPathing(i, j)) {\n                        ++nbcount; // in machine and open tile\n                    }\n                }, false);\n                if (nbcount < minimumInteriorNeighbors)\n                    return;\n                nbcount = 0;\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // not on map\n                    if (interior[i][j])\n                        return; // already part of machine\n                    if (!site.isWall(i, j) ||\n                        site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_IN_MACHINE)) {\n                        ++nbcount; // tile is not a wall or is in a machine\n                    }\n                }, false);\n                if (nbcount)\n                    return;\n                // Eliminate this obstruction; welcome its location into the machine.\n                madeChange = true;\n                interior[x][y] = 1;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return;\n                    if (site.isSet(i, j))\n                        return;\n                    site.setTile(i, j, SITE.WALL);\n                });\n            });\n        } while (madeChange);\n    }\n    calcDistances(builder) {\n        builder.distanceMap.fill(0);\n        SITE.computeDistanceMap(builder.site, builder.distanceMap, builder.originX, builder.originY, this.size.hi);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        builder.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = builder.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        builder.distance25 = distance25;\n        builder.distance75 = distance75;\n    }\n    pickComponents() {\n        const alternativeFlags = [\n            STEP.StepFlags.BF_ALTERNATIVE,\n            STEP.StepFlags.BF_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = GWU.random.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n    clearInteriorFlag(builder) {\n        builder.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            if (!builder.site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_WIRED |\n                GWM.map.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                builder.site.setMachine(x, y, 0);\n            }\n        });\n        // for (i = 0; i < map.width; i++) {\n        //     for (j = 0; j < map.height; j++) {\n        //         const cell = RUT.Map.getCell(map, i, j);\n        //         if (\n        //             cell.machineNumber == map.machineNumber &&\n        //             !RUT.Cell.hasMechFlag(\n        //                 cell,\n        //                 MechFlags.TM_IS_WIRED |\n        //                     MechFlags.TM_IS_CIRCUIT_BREAKER\n        //             )\n        //         ) {\n        //             cell.flags &= ~CellFlags.IS_IN_MACHINE;\n        //             cell.machineNumber = 0;\n        //         }\n        //     }\n        // }\n    }\n}\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags, depth));\n    return GWU.random.item(matches);\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport { Flags } from './blueprint';\nconst Fl = GWU.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    // BF_GENERATE_ITEM\t\t\t\t= Fl(0),\t// feature entails generating an item (overridden if the machine is adopting an item)\n    // BF_GENERATE_HORDE\t\t\t= Fl(5),\t// generate a monster horde that has all of the horde flags\n    // BF_NO_THROWING_WEAPONS\t    = Fl(4),\t// the generated item cannot be a throwing weapon\n    // BF_REQUIRE_GOOD_RUNIC\t\t= Fl(18),\t// generated item must be uncursed runic\n    StepFlags[StepFlags[\"BF_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BF_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BF_BUILD_VESTIBULE\"] = Fl(2)] = \"BF_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BF_ADOPT_ITEM\"] = Fl(3)] = \"BF_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BF_BUILD_AT_ORIGIN\"] = Fl(6)] = \"BF_BUILD_AT_ORIGIN\";\n    // unused                   = Fl(7),\t//\n    StepFlags[StepFlags[\"BF_PERMIT_BLOCKING\"] = Fl(8)] = \"BF_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BF_TREAT_AS_BLOCKING\"] = Fl(9)] = \"BF_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BF_NEAR_ORIGIN\"] = Fl(10)] = \"BF_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BF_FAR_FROM_ORIGIN\"] = Fl(11)] = \"BF_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_VIEW_OF_ORIGIN\"] = Fl(25)] = \"BF_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(26)] = \"BF_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_MONSTER_TAKE_ITEM\"] = Fl(12)] = \"BF_MONSTER_TAKE_ITEM\";\n    StepFlags[StepFlags[\"BF_MONSTER_SLEEPING\"] = Fl(13)] = \"BF_MONSTER_SLEEPING\";\n    StepFlags[StepFlags[\"BF_MONSTER_FLEEING\"] = Fl(14)] = \"BF_MONSTER_FLEEING\";\n    StepFlags[StepFlags[\"BF_MONSTERS_DORMANT\"] = Fl(19)] = \"BF_MONSTERS_DORMANT\";\n    StepFlags[StepFlags[\"BF_ITEM_IS_KEY\"] = Fl(0)] = \"BF_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BF_ITEM_IDENTIFIED\"] = Fl(5)] = \"BF_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BF_ITEM_PLAYER_AVOIDS\"] = Fl(4)] = \"BF_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BF_EVERYWHERE\"] = Fl(15)] = \"BF_EVERYWHERE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE\"] = Fl(16)] = \"BF_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE_2\"] = Fl(17)] = \"BF_ALTERNATIVE_2\";\n    // unused                       = Fl(20),\t//\n    StepFlags[StepFlags[\"BF_BUILD_IN_WALLS\"] = Fl(21)] = \"BF_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BF_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BF_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BF_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BF_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BF_IMPREGNABLE\"] = Fl(24)] = \"BF_IMPREGNABLE\";\n    StepFlags[StepFlags[\"BF_NOT_IN_HALLWAY\"] = Fl(27)] = \"BF_NOT_IN_HALLWAY\";\n    StepFlags[StepFlags[\"BF_NOT_ON_LEVEL_PERIMETER\"] = Fl(28)] = \"BF_NOT_ON_LEVEL_PERIMETER\";\n    StepFlags[StepFlags[\"BF_SKELETON_KEY\"] = Fl(29)] = \"BF_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BF_KEY_DISPOSABLE\"] = Fl(30)] = \"BF_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    constructor(cfg = {}) {\n        var _a;\n        this.tile = -1;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        this.id = 'n/a';\n        this.tile = (_a = cfg.tile) !== null && _a !== void 0 ? _a : -1;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        this.item = cfg.item || null;\n        this.horde = cfg.horde || null;\n        if (cfg.effect) {\n            this.effect = GWM.effect.make(cfg.effect);\n        }\n    }\n    get repeatUntilNoProgress() {\n        return !!(this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS);\n    }\n    cellIsCandidate(builder, blueprint, x, y, distanceBound) {\n        const site = builder.site;\n        // No building in the hallway if it's prohibited.\n        // This check comes before the origin check, so an area machine will fail altogether\n        // if its origin is in a hallway and the feature that must be built there does not permit as much.\n        if (this.flags & StepFlags.BF_NOT_IN_HALLWAY &&\n            GWU.utils.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n            return false;\n        }\n        // No building along the perimeter of the level if it's prohibited.\n        if (this.flags & StepFlags.BF_NOT_ON_LEVEL_PERIMETER &&\n            (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1)) {\n            return false;\n        }\n        // The origin is a candidate if the feature is flagged to be built at the origin.\n        // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n        if (this.flags & StepFlags.BF_BUILD_AT_ORIGIN) {\n            return x == builder.originX && y == builder.originY ? true : false;\n        }\n        else if (blueprint.isRoom &&\n            x == builder.originX &&\n            y == builder.originY) {\n            return false;\n        }\n        // No building in another feature's personal space!\n        if (builder.occupied[x][y]) {\n            return false;\n        }\n        // Must be in the viewmap if the appropriate flag is set.\n        if (this.flags &\n            (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n                StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n            !builder.viewMap[x][y]) {\n            return false;\n        }\n        // Do a distance check if the feature requests it.\n        let distance = 10000;\n        if (site.isWall(x, y)) {\n            // Distance is calculated for walls too.\n            GWU.utils.eachNeighbor(x, y, (i, j) => {\n                if (!builder.distanceMap.hasXY(i, j))\n                    return;\n                if (!site.blocksPathing(i, j) &&\n                    distance > builder.distanceMap[i][j] + 1) {\n                    distance = builder.distanceMap[i][j] + 1;\n                }\n            }, true);\n        }\n        else {\n            distance = builder.distanceMap[x][y];\n        }\n        if (distance > distanceBound[1] || // distance exceeds max\n            distance < distanceBound[0]) {\n            // distance falls short of min\n            return false;\n        }\n        if (this.flags & StepFlags.BF_BUILD_IN_WALLS) {\n            // If we're supposed to build in a wall...\n            const cellMachine = site.getMachine(x, y);\n            if (!builder.interior[x][y] &&\n                (!cellMachine || cellMachine == builder.machineNumber) &&\n                site.isWall(x, y)) {\n                let ok = false;\n                // ...and this location is a wall that's not already machined...\n                GWU.utils.eachNeighbor(x, y, (newX, newY) => {\n                    if (site.hasXY(newX, newY) && // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                        ((builder.interior[newX][newY] &&\n                            !(newX == builder.originX &&\n                                newY == builder.originY)) ||\n                            (this.flags &\n                                StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL &&\n                                !site.blocksPathing(newX, newY) &&\n                                !site.getMachine(newX, newY)))) {\n                        ok = true;\n                    }\n                });\n                return ok;\n            }\n            return false;\n        }\n        else if (site.isWall(x, y)) {\n            // Can't build in a wall unless instructed to do so.\n            return false;\n        }\n        else if (this.flags & StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL) {\n            if ((this.item && site.blocksItems(x, y)) ||\n                site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_CHOKEPOINT |\n                    GWM.map.flags.Cell.IS_IN_LOOP |\n                    GWM.map.flags.Cell.IS_IN_MACHINE)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else if (builder.interior[x][y]) {\n            return true;\n        }\n        return false;\n    }\n    makePersonalSpace(builder, x, y, candidates) {\n        const personalSpace = this.pad;\n        let count = 0;\n        for (let i = x - personalSpace + 1; i <= x + personalSpace - 1; i++) {\n            for (let j = y - personalSpace + 1; j <= y + personalSpace - 1; j++) {\n                if (builder.site.hasXY(i, j)) {\n                    if (candidates[i][j]) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BF_EVERYWHERE &\n            ~StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    distanceBound(builder) {\n        const distanceBound = [0, 10000];\n        if (this.flags & StepFlags.BF_NEAR_ORIGIN) {\n            distanceBound[1] = builder.distance25;\n        }\n        if (this.flags & StepFlags.BF_FAR_FROM_ORIGIN) {\n            distanceBound[0] = builder.distance75;\n        }\n        return distanceBound;\n    }\n    updateViewMap(builder) {\n        if (this.flags &\n            (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n                StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n            const site = builder.site;\n            if (this.flags & StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) {\n                const fov = new GWU.fov.FOV({\n                    isBlocked: (x, y) => {\n                        return site.blocksPathing(x, y);\n                    },\n                    hasXY: (x, y) => {\n                        return site.hasXY(x, y);\n                    },\n                });\n                fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                    builder.viewMap[x][y] = 1;\n                });\n            }\n            else {\n                const fov = new GWU.fov.FOV({\n                    // TileFlags.T_OBSTRUCTS_PASSABILITY |\n                    //     TileFlags.T_OBSTRUCTS_VISION,\n                    isBlocked: (x, y) => {\n                        return (site.blocksPathing(x, y) || site.blocksVision(x, y));\n                    },\n                    hasXY: (x, y) => {\n                        return site.hasXY(x, y);\n                    },\n                });\n                fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                    builder.viewMap[x][y] = 1;\n                });\n            }\n            builder.viewMap[builder.originX][builder.originY] = 1;\n        }\n    }\n    markCandidates(candidates, builder, blueprint, distanceBound) {\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            if (this.cellIsCandidate(builder, blueprint, i, j, distanceBound)) {\n                count++;\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return count;\n    }\n    build(builder, blueprint) {\n        let wantCount = 0;\n        let builtCount = 0;\n        const site = builder.site;\n        const candidates = GWU.grid.alloc(site.width, site.height);\n        // Figure out the distance bounds.\n        const distanceBound = this.distanceBound(builder);\n        this.updateViewMap(builder);\n        do {\n            // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n            // Make a master map of candidate locations for this feature.\n            let qualifyingTileCount = this.markCandidates(candidates, builder, blueprint, distanceBound);\n            if (!this.generateEverywhere) {\n                wantCount = this.count.value();\n            }\n            if (!qualifyingTileCount || qualifyingTileCount < this.count.lo) {\n                console.warn('Only %s qualifying tiles - want at least %s.', qualifyingTileCount, this.count.lo);\n                return 0; // ?? Failed ??\n            }\n            let x = 0, y = 0;\n            for (builtCount = 0; (this.generateEverywhere || builtCount < wantCount) &&\n                qualifyingTileCount > 0;) {\n                // Find a location for the feature.\n                if (this.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = builder.originX;\n                    y = builder.originY;\n                }\n                else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = GWU.random.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] > 0);\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n                let success = true;\n                // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n                if (this.effect) {\n                    success = site.fireEffect(this.effect, x, y);\n                }\n                // Now try to place the terrain tile, if any.\n                if (success && this.tile !== -1) {\n                    const tile = GWM.tile.get(this.tile);\n                    if (!(this.flags & StepFlags.BF_PERMIT_BLOCKING) &&\n                        (tile.blocksMove() ||\n                            this.flags & StepFlags.BF_TREAT_AS_BLOCKING)) {\n                        // Yes, check for blocking.\n                        const blockingMap = GWU.grid.alloc(site.width, site.height);\n                        blockingMap[x][y] = 1;\n                        success = !SITE.siteDisruptedBy(site, blockingMap);\n                        GWU.grid.free(blockingMap);\n                    }\n                    if (success) {\n                        site.setTile(x, y, tile);\n                    }\n                }\n                // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                // Personal space of 0 means nothing gets cleared, 1 means that only the tile itself gets cleared, and 2 means the 3x3 grid centered on it.\n                if (success) {\n                    qualifyingTileCount -= this.makePersonalSpace(builder, x, y, candidates);\n                    builtCount++; // we've placed an instance\n                    //DEBUG printf(\"\\nPlaced instance #%i of feature %i at (%i, %i).\", instance, feat, featX, featY);\n                }\n                if (success) {\n                    // Proceed only if the terrain stuff for this instance succeeded.\n                    // Mark the feature location as part of the machine, in case it is not already inside of it.\n                    if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n                        site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n                    }\n                    // Mark the feature location as impregnable if requested.\n                    if (this.flags & StepFlags.BF_IMPREGNABLE) {\n                        site.setCellFlag(x, y, GWM.map.flags.Cell.IMPREGNABLE);\n                    }\n                }\n                // Finished with this instance!\n            }\n        } while (this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS &&\n            builtCount <= this.count.lo);\n        let success = true;\n        // let success = RUT.Component.generateAdoptItem(\n        //     component,\n        //     blueprint,\n        //     map,\n        //     xy.x,\n        //     xy.y,\n        //     context\n        // );\n        // if (!success) {\n        //     GWU.grid.free(candidates);\n        //     return false;\n        // }\n        // // Generate a horde as necessary.\n        // success = RUT.Component.generateMonsters(\n        //     component,\n        //     blueprint,\n        //     map,\n        //     xy.x,\n        //     xy.y,\n        //     context\n        // );\n        // if (!success) {\n        //     GWU.grid.free(candidates);\n        //     return false;\n        // }\n        if (this.flags &\n            (StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE |\n                StepFlags.BF_BUILD_VESTIBULE)) {\n            // Put this item up for adoption, or generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n            // If we fail 10 times, abort the entire machine (including any sub-machines already built).\n            // Also, if we build a sub-machine, and it succeeds, but this (its parent machine) fails,\n            // we pass the monsters and items that it spawned back to the parent,\n            // so that if the parent fails, they can all be freed.\n            // First make sure our adopted item, if any, is not on the floor or in the pack already.\n            // Otherwise, a previous attempt to place it may have put it on the floor in a different\n            // machine, only to have that machine fail and be deleted, leaving the item remaining on\n            // the floor where placed.\n            if (this.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE) {\n                // success = await buildAMachine(-1, -1, -1, BP_ADOPT_ITEM, theItem, spawnedItemsSub, spawnedMonstersSub);\n                throw new Error('OUTSOURCE_ITEM_TO_MACHINE - Not ready yet.');\n            }\n            else if (this.flags & StepFlags.BF_BUILD_VESTIBULE) {\n                success = builder.buildRandom(Flags.BP_VESTIBULE, builder.originX, builder.originY);\n            }\n            if (!success) {\n                console.log(`Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`);\n                // failure! abort!\n                return 0;\n            }\n            // theItem = NULL;\n        }\n        //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n        //DEBUG logBuffer(candidates);\n        GWU.grid.free(candidates);\n        return builtCount;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\n// export interface BuildData {\n//     site: SITE.BuildSite;\n//     spawnedItems: any[];\n//     spawnedHordes: any[];\n//     interior: GWU.grid.NumGrid;\n//     occupied: GWU.grid.NumGrid;\n//     viewMap: GWU.grid.NumGrid;\n//     distanceMap: GWU.grid.NumGrid;\n//     originX: number;\n//     originY: number;\n//     distance25: number;\n//     distance75: number;\n//     machineNumber: number;\n// }\nexport class Builder {\n    constructor(map, depth) {\n        this.map = map;\n        this.depth = depth;\n        this.spawnedItems = [];\n        this.spawnedHordes = [];\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.site = new SITE.MapSite(map);\n        this.interior = GWU.grid.alloc(map.width, map.height);\n        this.occupied = GWU.grid.alloc(map.width, map.height);\n        this.viewMap = GWU.grid.alloc(map.width, map.height);\n        this.distanceMap = GWU.grid.alloc(map.width, map.height);\n    }\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.distanceMap);\n    }\n    buildRandom(requiredMachineFlags = BLUE.Flags.BP_ROOM, x = -1, y = -1) {\n        let tries = 10;\n        while (tries--) {\n            const blueprint = BLUE.random(requiredMachineFlags, this.depth);\n            if (!blueprint) {\n                continue;\n            }\n            if (this.build(blueprint, x, y)) {\n                return true;\n            }\n        }\n        console.log('Failed to find blueprint matching flags: ' +\n            GWU.flag.toString(BLUE.Flags, requiredMachineFlags));\n        return false;\n    }\n    build(blueprint, x = -1, y = -1) {\n        let tries = 10;\n        this.site.analyze();\n        if (x >= 0 && y >= 0) {\n            return this._build(blueprint, x, y);\n        }\n        while (tries--) {\n            const loc = blueprint.pickLocation(this.site);\n            if (!loc) {\n                continue;\n            }\n            if (this._build(blueprint, loc[0], loc[1])) {\n                return true;\n            }\n        }\n        console.log('Failed to build blueprint.');\n        return false;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    _build(blueprint, originX, originY) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        if (!blueprint.computeInterior(this)) {\n            return false;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const levelBackup = this.site.backup();\n        this.machineNumber = this.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        blueprint.prepareInteriorWithMachineFlags(this);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        blueprint.calcDistances(this);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = blueprint.pickComponents();\n        // Keep track of all monsters and items that we spawn -- if we abort, we have to go back and delete them all.\n        // let itemCount = 0, monsterCount = 0;\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            const count = component.build(this, blueprint);\n            if (count == 0 ||\n                (count < component.count.lo && !component.repeatUntilNoProgress)) {\n                // failure! abort!\n                console.log('Failed to place blueprint because of feature; needed more instances.');\n                // Restore the map to how it was before we touched it.\n                this.site.restore(levelBackup);\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return false;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (blueprint.noInteriorFlag) {\n            blueprint.clearInteriorFlag(this);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as LEVEL from './level';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GWU.utils.setOptions(this.config, options);\n        if (this.config.seed) {\n            GWU.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GWU.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GWU.utils.distanceBetween(startLoc[0], startLoc[1], x, y) > minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        GWU.random.seed(this.seeds[id]);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    makeLevel(id, opts, cb) {\n        const level = new LEVEL.Level(opts);\n        const result = level.create(this.config.width, this.config.height, cb);\n        if (!GWU.utils.equalsXY(level.endLoc, opts.endLoc) ||\n            !GWU.utils.equalsXY(level.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [level.startLoc, level.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["_a","_b","NOTHING","GWM","tile","get","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","GridSite","width","height","this","tiles","GWU","grid","alloc","free","fill","x","y","hasXY","isBoundaryXY","isFloor","isDoor","isBridge","isStairs","isShallow","v","isNothing","isWall","isDeep","blocksPathing","Tile","obj","Error","_x","_y","Flags","map","flags","Cell","MapSite","machineCount","flag","cellInfo","hasCellFlag","cell","setCellFlag","clearCellFlag","hasTile","opts","setTile","highestPriorityTile","cells","forEach","c","clear","hasItem","hasActor","blocksMove","blocksVision","hasObjectFlag","gameObject","GameObject","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","hasTileFlag","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","isEmpty","isPassable","T_BRIDGE","T_IS_DOOR","L_SECRETLY_PASSABLE","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","site","clone","backup","copy","chokeCount","count","analyze","effect","fireSync","machineId","id","isRoom","IS_IN_MACHINE","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","DIRS","utils","directionOfDoorSite","dir","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","w","isDiggable","isSet","push","doorSites","loc","random","item","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","getTileIndex","fillCostGrid","costGrid","update","_v","path","OBSTRUCTION","siteDisruptedBy","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","lakeX","lakeY","getMachine","first","floodFill","siteDisruptedSize","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","Hall","length","doors","d","UP","DOWN","x2","y2","dx","dy","Room","Bounds","super","hall","cx","floor","cy","translate","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","make","RoomDigger","options","_setOptions","result","carve","every","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","bind","weighted","room","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickLength","lengths","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.Hall","lower","higher","actual","startX","startY","halls","clamp","Number","parseInt","_pickWidth","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","dirIndex","CLOCK_DIRS","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","SITE.DOOR","Level","seed","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","setOptions","SITE.GridSite","args","Map","SITE.MapSite","_create","cb","t","addFirstRoom","fails","addRoom","addLoops","addLakes","addBridges","addStairs","finish","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","roomSite","_makeSite","getDigger","_attachRoomAtLoc","HALL.dig","_attachRoom","SITE.directionOfDoorSite","oppDir","_roomFitsAt","SITE.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksDiagonal","boundaryTile","SITE.WALL","Fl","fl","Blueprint","tags","steps","split","trim","frequency","size","parts","lo","from","cfg","STEP.BuildStep","level","want","includes","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_ADOPT_ITEM","treatAsBlocking","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","requiredFlags","depth","randSite","IS_GATE_SITE","contains","getChokeCount","console","log","pos","builder","tryAgain","failsafe","interior","addTileToInteriorAndIterate","computeInteriorForVestibuleMachine","error","SITE.computeDistanceMap","qualifyingTileCount","totalFreq","n","isOccupied","SITE.siteDisruptedBy","SITE.siteDisruptedSize","goodSoFar","startChokeCount","distMap","doorChokeCount","expandMachineInterior","eachNeighbor","machineNumber","setMachine","isSecretDoor","minimumInteriorNeighbors","madeChange","nbcount","distances","dist","distance25","distance75","alternativeFlags","STEP.StepFlags","BF_ALTERNATIVE","BF_ALTERNATIVE_2","keepFeature","randIndex","filter","_f","IS_WIRED","IS_CIRCUIT_BREAKER","blueprints","matches","values","b","qualifies","StepFlags","BuildStep","pad","horde","repeatUntilNoProgress","BF_REPEAT_UNTIL_NO_PROGRESS","blueprint","distanceBound","BF_NOT_IN_HALLWAY","arcCount","BF_NOT_ON_LEVEL_PERIMETER","BF_BUILD_AT_ORIGIN","occupied","BF_IN_VIEW_OF_ORIGIN","BF_IN_PASSABLE_VIEW_OF_ORIGIN","viewMap","distance","BF_BUILD_IN_WALLS","cellMachine","ok","BF_BUILD_ANYWHERE_ON_LEVEL","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","candidates","personalSpace","generateEverywhere","BF_EVERYWHERE","buildAtOrigin","BF_NEAR_ORIGIN","BF_FAR_FROM_ORIGIN","fov","FOV","isBlocked","calculate","cellIsCandidate","wantCount","builtCount","updateViewMap","markCandidates","warn","fireEffect","BF_PERMIT_BLOCKING","BF_TREAT_AS_BLOCKING","blockingMap","makePersonalSpace","BF_IMPREGNABLE","BF_OUTSOURCE_ITEM_TO_MACHINE","BF_BUILD_VESTIBULE","buildRandom","spawnedItems","spawnedHordes","requiredMachineFlags","BLUE.Flags","BLUE.random","build","toString","_build","pickLocation","computeInterior","levelBackup","nextMachineId","prepareInteriorWithMachineFlags","calcDistances","components","pickComponents","component","restore","clearInteriorFlag","levels","seeds","stairLocs","initSeeds","initStairLocs","number","stairDistance","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","LEVEL.Level","equalsXY"],"mappings":"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"}