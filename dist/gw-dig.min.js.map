{"version":3,"file":"gw-dig.min.js","sources":["../js/site/digSite.js","../js/site/buildSite.js","../js/site/utils.js","../js/types.js","../js/room.js","../js/hall.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/level.js","../js/blueprint/blueprint.js","../js/blueprint/buildStep.js","../js/blueprint/builder.js","../js/dungeon.js"],"sourcesContent":["var _a, _b;\nimport * as DIG from 'gw-utils';\nimport * as GWM from 'gw-map';\nexport const NOTHING = GWM.tile.get('NULL').index;\nexport const FLOOR = GWM.tile.get('FLOOR').index;\nexport const DOOR = GWM.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GWM.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GWM.tile.get('WALL').index;\nexport const DEEP = GWM.tile.get('LAKE').index;\nexport const SHALLOW = GWM.tile.get('SHALLOW').index;\nexport const BRIDGE = GWM.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GWM.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GWM.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GWM.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\nexport class GridSite {\n    constructor(width, height) {\n        this.tiles = DIG.grid.alloc(width, height);\n    }\n    free() {\n        DIG.grid.free(this.tiles);\n    }\n    clear() {\n        this.tiles.fill(0);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === WALL || v === IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === UP_STAIRS || v === DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    getMachine(_x, _y) {\n        return 0;\n    }\n}\n","import * as GWM from 'gw-map';\nconst Flags = GWM.flags.Cell;\nexport class MapSite {\n    constructor(map) {\n        this.machineCount = 0;\n        this.map = map;\n    }\n    get width() {\n        return this.map.width;\n    }\n    get height() {\n        return this.map.height;\n    }\n    hasXY(x, y) {\n        return this.map.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.map.isBoundaryXY(x, y);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.map.cellInfo(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.map.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.map.cell(x, y).clearCellFlag(flag);\n    }\n    hasTile(x, y, tile) {\n        return this.map.cellInfo(x, y).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        return this.map.setTile(x, y, tile, opts);\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.map.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    clear() {\n        this.map.cells.forEach((c) => c.clear());\n    }\n    hasItem(x, y) {\n        return this.map.cellInfo(x, y).hasItem();\n    }\n    makeRandomItem(tags) {\n        return GWM.item.makeRandom(tags);\n    }\n    addItem(x, y, item) {\n        return this.map.forceItem(x, y, item);\n    }\n    hasActor(x, y) {\n        return this.map.hasActor(x, y);\n    }\n    blocksMove(x, y) {\n        return this.map.cellInfo(x, y).blocksMove();\n    }\n    blocksVision(x, y) {\n        return this.map.cellInfo(x, y).blocksVision();\n    }\n    blocksDiagonal(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return (info.hasEntityFlag(GWM.flags.Entity.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GWM.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isWall(x, y) {\n        return this.map.cellInfo(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.map.cellInfo(x, y).isStairs();\n    }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.map.cell(x, y).isEmpty();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.isEmpty())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.map.cell(x, y).isEmpty();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    isDeep(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (!!cell.depthTile(GWM.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (cell.hasDepthTile(GWM.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    isPassable(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return !(info.blocksMove() || info.blocksPathing());\n    }\n    // tileBlocksMove(tile: number): boolean {\n    //     return GWM.tile.get(tile).blocksMove();\n    // }\n    backup() {\n        const site = new MapSite(this.map.clone());\n        site.machineCount = this.machineCount;\n        return site;\n    }\n    restore(backup) {\n        this.map.copy(backup.map);\n        this.machineCount = backup.machineCount;\n    }\n    free() { }\n    getChokeCount(x, y) {\n        return this.map.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.map.cell(x, y).chokeCount = count;\n    }\n    analyze() {\n        GWM.map.analyze(this.map);\n    }\n    fireEffect(effect, x, y) {\n        return GWM.effect.fireSync(effect, this.map, x, y);\n    }\n    nextMachineId() {\n        return ++this.machineCount;\n    }\n    getMachine(x, y) {\n        return this.map.cell(x, y).machineId;\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.map.cell(x, y).machineId = id;\n        if (id == 0) {\n            this.map.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.map.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\n// import * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = GWU.random.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = GWU.random.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = GWU.random.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GWU.xy.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n}\nexport function siteDisruptedBy(site, blockingGrid, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + options.offsetX;\n        const lakeY = j + options.offsetY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GWU.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GWU.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GWU.grid.free(costGrid);\n}\nexport function clearInteriorFlag(site, machine) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine &&\n                !site.hasCellFlag(i, j, GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GWU.xy.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        // console.log('Hall', loc, d, length, width);\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        // console.log(' - ', [this.x2, this.y2]);\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = GWU.random.item.bind(GWU.random, choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = GWU.random.weighted.bind(GWU.random, choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom();\n        const room = rooms[id];\n        if (!room) {\n            GWU.utils.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GWU.blob.Blob({\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * GWU.random.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * GWU.random.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX +\n            GWU.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            GWU.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * GWU.random.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * GWU.random.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const ringMinWidth = this.options.ringMinWidth.value();\n        const holeMinSize = this.options.holeMinSize.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            GWU.random.chance(this.options.holeChance.value())) {\n            GWU.xy.forCircle(x, y, GWU.random.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value();\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = GWU.random.range(minX, maxX);\n            y = GWU.random.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(opts = {}) {\n    return GWU.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GWU.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GWU.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GWU.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths) {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value();\n    }\n    else {\n        return lengths[0].value();\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = GWU.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = GWU.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: GWU.range.make(1),\n            length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = GWU.range.make(options.width);\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n        if (!GWU.random.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = this.config.width.value();\n        const length = pickLength(dir, this.config.length);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = new TYPES.Hall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GWU.xy.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = new TYPES.Hall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = GWU.random.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GWU.blob.Blob({\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = GWU.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = GWU.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GWU.xy.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n        const seq = GWU.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GWU.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc = null;\n        let downLoc = null;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = GWU.random.matchingLocNear(GWU.xy.x(start), GWU.xy.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GWU.random.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = GWU.random.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GWU.random.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = GWU.random.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GWU.xy.distanceBetween(x, y, downLoc[0], downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = GWU.random.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GWU.utils.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n            doorChance: 50,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = GWU.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = GWU.random.chance(this.options.doorChance)\n                                ? SITE.DOOR\n                                : SITE.FLOOR;\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nexport class Level {\n    constructor(options = {}) {\n        var _a, _b;\n        this.seed = 0;\n        this.rooms = {};\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.seed = options.seed || 0;\n        GWU.object.setOptions(this.rooms, options.rooms);\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        }\n        else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        }\n        else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        }\n        else {\n            if (options.loops === true)\n                options.loops = {};\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                (_a = options.loops.doorChance) !== null && _a !== void 0 ? _a : (_b = options.doors) === null || _b === void 0 ? void 0 : _b.chance;\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        }\n        else {\n            if (options.lakes === true)\n                options.lakes = {};\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        }\n        else {\n            if (options.bridges === true)\n                options.bridges = {};\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        }\n        else {\n            if (options.stairs === true)\n                options.stairs = {};\n            GWU.object.setOptions(this.stairs, options.stairs);\n        }\n        this.startLoc = options.startLoc || [-1, -1];\n        this.endLoc = options.endLoc || [-1, -1];\n    }\n    _makeSite(width, height) {\n        return new SITE.GridSite(width, height);\n    }\n    create(...args) {\n        if (args.length == 1 && args[0] instanceof GWM.map.Map) {\n            const map = args[0];\n            this.site = new SITE.MapSite(map);\n        }\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            this.site = new SITE.GridSite(width, height);\n        }\n        const result = this._create(this.site);\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            const cb = args[2];\n            GWU.xy.forRect(width, height, (x, y) => {\n                const t = this.site.getTileIndex(x, y);\n                if (t)\n                    cb(x, y, t);\n            });\n        }\n        this.site.free();\n        return result;\n    }\n    _create(site) {\n        if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n            this.startLoc[0] = Math.floor(site.width / 2);\n            this.startLoc[1] = site.height - 2;\n        }\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        let fails = 0;\n        while (fails < 20) {\n            if (this.addRoom(site)) {\n                fails = 0;\n            }\n            else {\n                ++fails;\n            }\n        }\n        if (this.loops)\n            this.addLoops(site, this.loops);\n        if (this.lakes)\n            this.addLakes(site, this.lakes);\n        if (this.bridges)\n            this.addBridges(site, this.bridges);\n        if (this.stairs)\n            this.addStairs(site, this.stairs);\n        this.finish(site);\n        return true;\n    }\n    start(site) {\n        if (this.seed) {\n            GWU.random.seed(this.seed);\n        }\n        site.clear();\n        this.seq = GWU.random.sequence(site.width * site.height);\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        if (room && !this._attachRoom(site, roomSite, room)) {\n            room = null;\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (let i = 0; i < this.seq.length; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n            if (!site.isNothing(x, y))\n                continue;\n            const dir = SITE.directionOfDoorSite(site, x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    SITE.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = GWU.random.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                SITE.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n            for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.hasXY(i, j) ||\n                                map.isBoundaryXY(i, j) ||\n                                !map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(map, room, x, y, dir) {\n        const opts = this.doors;\n        let isDoor = false;\n        if (opts.chance && GWU.random.chance(opts.chance)) {\n            isDoor = true;\n        }\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        map.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n            return;\n        }\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x - k, y)) {\n                    if (map.isSet(x - k, y - 1) && map.isSet(x - k, y + 1)) {\n                        map.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x + k, y)) {\n                    if (map.isSet(x + k, y - 1) && map.isSet(x + k, y + 1)) {\n                        map.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x, y - k)) {\n                    if (map.isSet(x - 1, y - k) && map.isSet(x + 1, y - k)) {\n                        map.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x, y + k)) {\n                    if (map.isSet(x - 1, y + k) && map.isSet(x + 1, y + k)) {\n                        map.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (GWU.random.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nconst Fl = GWU.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(0)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(2)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(3)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(4)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(5)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(6)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(7)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(8)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(9)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(10)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(11)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(12)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(13)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(14)] = \"BP_NO_INTERIOR_FLAG\";\n    Flags[Flags[\"BP_NOT_IN_HALLWAY\"] = Fl(15)] = \"BP_NOT_IN_HALLWAY\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo > this.size.hi)\n                throw new Error('Blueprint size must be small to large.');\n        }\n        else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (!this.steps.some((s) => s.flags & STEP.StepFlags.BF_ADOPT_ITEM)) {\n                throw new Error('Blueprint wants to BP_ADOPT_ITEM, but has no steps with BF_ADOPT_ITEM.');\n            }\n        }\n    }\n    getChance(level, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return 0;\n        }\n        return this.frequency(level);\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    qualifies(requiredFlags, depth) {\n        if (this.frequency(depth) <= 0 ||\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickLocation(site) {\n        return pickLocation(site, this);\n    }\n    // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n    computeInterior(builder) {\n        return computeInterior(builder, this);\n    }\n    prepareInterior(builder) {\n        return prepareInterior(builder, this);\n    }\n    pickComponents() {\n        const alternativeFlags = [\n            STEP.StepFlags.BF_ALTERNATIVE,\n            STEP.StepFlags.BF_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = GWU.random.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n}\nexport function pickLocation(site, blueprint) {\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n        const randSite = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n            return (site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE) &&\n                blueprint.size.contains(site.getChokeCount(x, y)));\n        });\n        if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n            // If no suitable sites, abort.\n            console.log('Failed to build a machine; there was no eligible door candidate for the chosen room machine from blueprint.');\n            return false;\n        }\n        return randSite;\n    }\n    else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        console.log('ERROR: Attempted to build a vestiblue without a location being provided.');\n        return false;\n    }\n    // Pick a random origin location.\n    const pos = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n        if (!site.isPassable(x, y))\n            return false;\n        if (blueprint.flags & Flags.BP_NOT_IN_HALLWAY) {\n            const count = GWU.xy.arcCount(x, y, (i, j) => site.isPassable(i, j));\n            return count <= 1;\n        }\n        return true;\n    });\n    if (!pos || pos[0] < 0 || pos[1] < 0)\n        return false;\n    return pos;\n}\n// Assume site has been analyzed (aka GateSites and ChokeCounts set)\nexport function computeInterior(builder, blueprint) {\n    let failsafe = blueprint.isRoom ? 10 : 20;\n    let tryAgain;\n    const interior = builder.interior;\n    const site = builder.site;\n    do {\n        tryAgain = false;\n        if (--failsafe <= 0) {\n            // console.log(\n            //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n            // );\n            return false;\n        }\n        interior.fill(0);\n        // Find a location and map out the machine interior.\n        if (blueprint.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            tryAgain = !addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n        }\n        else if (blueprint.isVestiblue) {\n            if (!computeVestibuleInterior(builder, blueprint)) {\n                // TODO - tryagain = true?\n                console.log(`ERROR: Attempted to build vestibule ${blueprint.id}: not enough room.`);\n                return false;\n            }\n            // success\n        }\n        else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n            let distanceMap = GWU.grid.alloc(interior.width, interior.height);\n            SITE.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, blueprint.size.hi);\n            const seq = GWU.random.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = blueprint.size.value(); // Keeps track of the goal size.\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (let n = 0; n < seq.length && qualifyingTileCount < goalSize; n++) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n                    if (distanceMap[i][j] == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n                        if (site.isOccupied(i, j) ||\n                            site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            tryAgain = true;\n                            qualifyingTileCount = goalSize; // This is a hack to drop out of these three for-loops.\n                        }\n                    }\n                }\n            }\n            // Now make sure the interior map satisfies the machine's qualifications.\n            if (qualifyingTileCount < goalSize) {\n                tryAgain = true;\n                console.debug('- too small');\n            }\n            else if (blueprint.treatAsBlocking &&\n                SITE.siteDisruptedBy(site, interior, {\n                    machine: site.machineCount,\n                })) {\n                console.debug(' - disconnected');\n                tryAgain = true;\n            }\n            else if (blueprint.requireBlocking &&\n                SITE.siteDisruptedSize(site, interior) < 100) {\n                console.debug(' - not disconnected enough');\n                tryAgain = true; // BP_REQUIRE_BLOCKING needs some work to make sure the disconnect is interesting.\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            GWU.grid.free(distanceMap);\n        }\n        // Now loop if necessary.\n    } while (tryAgain);\n    // console.log(tryAgain, failsafe);\n    return true;\n}\nexport function computeVestibuleInterior(builder, blueprint) {\n    let success = true;\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n    // console.log('DISTANCE MAP', originX, originY);\n    // RUT.Grid.dump(distMap);\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(builder.originX, builder.originY, (x, y) => {\n        const count = site.getChokeCount(x, y);\n        if (count == doorChokeCount)\n            return;\n        if (count > 10000)\n            return;\n        if (count < 0)\n            return;\n        vestibuleLoc[0] = x;\n        vestibuleLoc[1] = y;\n        vestibuleChokeCount = count;\n    }, true);\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(vestibuleLoc[0], vestibuleLoc[1], (_v, i, j) => {\n            if (site.isOccupied(i, j)) {\n                success = false;\n            }\n            return site.getChokeCount(i, j) === vestibuleChokeCount;\n        }, 1);\n        if (success && blueprint.size.contains(count))\n            return true;\n    }\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(); // Keeps track of the goal size.\n    const distMap = GWU.grid.alloc(site.width, site.height);\n    SITE.computeDistanceMap(site, distMap, builder.originX, builder.originY, blueprint.size.hi);\n    const cells = GWU.random.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (let i = 0; i < cells.length && qualifyingTileCount < wantSize; ++i) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n            const dist = distMap[x][y];\n            if (dist != k)\n                continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount)\n                continue;\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n    // Now make sure the interior map satisfies the machine's qualifications.\n    if (blueprint.treatAsBlocking &&\n        SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })) {\n        success = false;\n        console.debug('- blocks');\n    }\n    else if (blueprint.requireBlocking &&\n        SITE.siteDisruptedSize(site, interior) < 100) {\n        success = false;\n        console.debug('- does not block');\n    }\n    GWU.grid.free(distMap);\n    return success;\n}\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(builder, startX, startY) {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY))\n            continue;\n        if (interior[newX][newY])\n            continue; // already done\n        if (site.isOccupied(newX, newY) ||\n            (site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE) &&\n                !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_GATE_SITE))) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return false;\n        }\n        if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE)) {\n            goodSoFar = addTileToInteriorAndIterate(builder, newX, newY);\n        }\n    }\n    return goodSoFar;\n}\nexport function prepareInterior(builder, blueprint) {\n    const interior = builder.interior;\n    const site = builder.site;\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        expandMachineInterior(builder, 1);\n    }\n    else if (blueprint.openInterior) {\n        expandMachineInterior(builder, 4);\n    }\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x, y, SITE.FLOOR);\n        });\n    }\n    // If requested, purge pathing blockers -- no traps allowed.\n    if (blueprint.purgeBlockers) {\n        interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            if (site.blocksPathing(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n        });\n    }\n    // If requested, purge the liquid layer in the interior -- no liquids allowed.\n    if (blueprint.purgeLiquids) {\n        interior.forEach((v, x, y) => {\n            if (v && site.isAnyLiquid(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n        });\n    }\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not valid x,y\n                if (interior[i][j])\n                    return; // is part of machine\n                if (site.isWall(i, j))\n                    return; // is already a wall (of some sort)\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return; // is a door site\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE))\n                    return; // is part of a machine\n                if (!site.blocksPathing(i, j))\n                    return; // is not a blocker for the player (water?)\n                site.setTile(i, j, SITE.WALL);\n            }, false);\n        });\n    }\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (interior[i][j])\n                    return;\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(i, j, GWM.flags.Cell.IMPREGNABLE);\n            }, false);\n        });\n    }\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v)\n            return;\n        if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, SITE.DOOR);\n        }\n    });\n}\nexport function expandMachineInterior(builder, minimumInteriorNeighbors = 1) {\n    let madeChange;\n    const interior = builder.interior;\n    const site = builder.site;\n    do {\n        madeChange = false;\n        interior.forEach((_v, x, y) => {\n            // if (v && site.isDoor(x, y)) {\n            //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n            //     return;\n            // }\n            if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE))\n                return;\n            if (!site.blocksPathing(x, y))\n                return;\n            let nbcount = 0;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not in map\n                if (interior[i][j] && !site.blocksPathing(i, j)) {\n                    ++nbcount; // in machine and open tile\n                }\n            }, false);\n            if (nbcount < minimumInteriorNeighbors)\n                return;\n            nbcount = 0;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // not on map\n                if (interior[i][j])\n                    return; // already part of machine\n                if (!site.isWall(i, j) ||\n                    site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                    ++nbcount; // tile is not a wall or is in a machine\n                }\n            }, false);\n            if (nbcount)\n                return;\n            // Eliminate this obstruction; welcome its location into the machine.\n            madeChange = true;\n            interior[x][y] = 1;\n            if (site.blocksPathing(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (site.isSet(i, j))\n                    return;\n                site.setTile(i, j, SITE.WALL);\n            });\n        });\n    } while (madeChange);\n}\n///////////////////////////\n// INSTALL\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags, depth));\n    return GWU.random.item(matches);\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport { Flags } from './blueprint';\nconst Fl = GWU.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    StepFlags[StepFlags[\"BF_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BF_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BF_BUILD_VESTIBULE\"] = Fl(2)] = \"BF_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BF_ADOPT_ITEM\"] = Fl(3)] = \"BF_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BF_BUILD_AT_ORIGIN\"] = Fl(4)] = \"BF_BUILD_AT_ORIGIN\";\n    StepFlags[StepFlags[\"BF_PERMIT_BLOCKING\"] = Fl(5)] = \"BF_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BF_TREAT_AS_BLOCKING\"] = Fl(6)] = \"BF_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BF_NEAR_ORIGIN\"] = Fl(7)] = \"BF_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BF_FAR_FROM_ORIGIN\"] = Fl(8)] = \"BF_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_VIEW_OF_ORIGIN\"] = Fl(9)] = \"BF_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(10)] = \"BF_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_MONSTER_TAKE_ITEM\"] = Fl(11)] = \"BF_MONSTER_TAKE_ITEM\";\n    StepFlags[StepFlags[\"BF_MONSTER_SLEEPING\"] = Fl(12)] = \"BF_MONSTER_SLEEPING\";\n    StepFlags[StepFlags[\"BF_MONSTER_FLEEING\"] = Fl(13)] = \"BF_MONSTER_FLEEING\";\n    StepFlags[StepFlags[\"BF_MONSTERS_DORMANT\"] = Fl(14)] = \"BF_MONSTERS_DORMANT\";\n    StepFlags[StepFlags[\"BF_ITEM_IS_KEY\"] = Fl(15)] = \"BF_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BF_ITEM_IDENTIFIED\"] = Fl(16)] = \"BF_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BF_ITEM_PLAYER_AVOIDS\"] = Fl(17)] = \"BF_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BF_EVERYWHERE\"] = Fl(18)] = \"BF_EVERYWHERE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE\"] = Fl(19)] = \"BF_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE_2\"] = Fl(20)] = \"BF_ALTERNATIVE_2\";\n    StepFlags[StepFlags[\"BF_BUILD_IN_WALLS\"] = Fl(21)] = \"BF_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BF_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BF_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BF_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BF_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BF_IMPREGNABLE\"] = Fl(24)] = \"BF_IMPREGNABLE\";\n    // TODO - BF_ALLOW_IN_HALLWAY instead?\n    StepFlags[StepFlags[\"BF_NOT_IN_HALLWAY\"] = Fl(27)] = \"BF_NOT_IN_HALLWAY\";\n    // TODO - BF_ALLOW_BOUNDARY instead\n    StepFlags[StepFlags[\"BF_NOT_ON_LEVEL_PERIMETER\"] = Fl(28)] = \"BF_NOT_ON_LEVEL_PERIMETER\";\n    StepFlags[StepFlags[\"BF_SKELETON_KEY\"] = Fl(29)] = \"BF_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BF_KEY_DISPOSABLE\"] = Fl(30)] = \"BF_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    constructor(cfg = {}) {\n        var _a;\n        this.tile = -1;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        this.id = 'n/a';\n        this.tile = (_a = cfg.tile) !== null && _a !== void 0 ? _a : -1;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        this.item = cfg.item || null;\n        this.horde = cfg.horde || null;\n        if (cfg.effect) {\n            this.effect = GWM.effect.from(cfg.effect);\n        }\n        if (this.item && this.flags & StepFlags.BF_ADOPT_ITEM) {\n            throw new Error('Cannot have blueprint step with item and BF_ADOPT_ITEM.');\n        }\n    }\n    get repeatUntilNoProgress() {\n        return !!(this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS);\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BF_EVERYWHERE &\n            ~StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    cellIsCandidate(builder, blueprint, x, y, distanceBound) {\n        return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    }\n    distanceBound(builder) {\n        return calcDistanceBound(builder, this);\n    }\n    updateViewMap(builder) {\n        updateViewMap(builder, this);\n    }\n    build(builder, blueprint, adoptedItem) {\n        return buildStep(builder, blueprint, this, adoptedItem);\n    }\n}\nexport function updateViewMap(builder, buildStep) {\n    if (buildStep.flags &\n        (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n            StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        else {\n            const fov = new GWU.fov.FOV({\n                // TileFlags.T_OBSTRUCTS_PASSABILITY |\n                //     TileFlags.T_OBSTRUCTS_VISION,\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\nexport function calcDistanceBound(builder, buildStep) {\n    const distanceBound = [0, 10000];\n    if (buildStep.flags & StepFlags.BF_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BF_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\nexport function markCandidates(candidates, builder, blueprint, buildStep, distanceBound) {\n    let count = 0;\n    candidates.update((_v, i, j) => {\n        if (cellIsCandidate(builder, blueprint, buildStep, i, j, distanceBound)) {\n            count++;\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    });\n    return count;\n}\nexport function cellIsCandidate(builder, blueprint, buildStep, x, y, distanceBound) {\n    const site = builder.site;\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (buildStep.flags & StepFlags.BF_NOT_IN_HALLWAY &&\n        GWU.xy.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n        return false;\n    }\n    // No building along the perimeter of the level if it's prohibited.\n    if (buildStep.flags & StepFlags.BF_NOT_ON_LEVEL_PERIMETER &&\n        (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1)) {\n        return false;\n    }\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.flags & StepFlags.BF_BUILD_AT_ORIGIN) {\n        return x == builder.originX && y == builder.originY ? true : false;\n    }\n    else if (blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY) {\n        return false;\n    }\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return false;\n    }\n    // Must be in the viewmap if the appropriate flag is set.\n    if (buildStep.flags &\n        (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n            StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]) {\n        return false;\n    }\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (!builder.distanceMap.hasXY(i, j))\n                return;\n            if (!site.blocksPathing(i, j) &&\n                distance > builder.distanceMap[i][j] + 1) {\n                distance = builder.distanceMap[i][j] + 1;\n            }\n        }, true);\n    }\n    else {\n        distance = builder.distanceMap[x][y];\n    }\n    if (distance > distanceBound[1] || // distance exceeds max\n        distance < distanceBound[0]) {\n        // distance falls short of min\n        return false;\n    }\n    if (buildStep.flags & StepFlags.BF_BUILD_IN_WALLS) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (!builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)) {\n            let ok = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(x, y, (newX, newY) => {\n                if (site.hasXY(newX, newY) && // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                    ((builder.interior[newX][newY] &&\n                        !(newX == builder.originX && newY == builder.originY)) ||\n                        (buildStep.flags &\n                            StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL &&\n                            !site.blocksPathing(newX, newY) &&\n                            !site.getMachine(newX, newY)))) {\n                    ok = true;\n                }\n            });\n            return ok;\n        }\n        return false;\n    }\n    else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return false;\n    }\n    else if (buildStep.flags & StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL) {\n        if ((buildStep.item && site.blocksItems(x, y)) ||\n            site.hasCellFlag(x, y, GWM.flags.Cell.IS_CHOKEPOINT |\n                GWM.flags.Cell.IS_IN_LOOP |\n                GWM.flags.Cell.IS_IN_MACHINE)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    else if (builder.interior[x][y]) {\n        return true;\n    }\n    return false;\n}\nexport function makePersonalSpace(builder, x, y, candidates, personalSpace) {\n    let count = 0;\n    for (let i = x - personalSpace + 1; i <= x + personalSpace - 1; i++) {\n        for (let j = y - personalSpace + 1; j <= y + personalSpace - 1; j++) {\n            if (builder.site.hasXY(i, j)) {\n                if (candidates[i][j]) {\n                    candidates[i][j] = 0;\n                    ++count;\n                }\n                builder.occupied[i][j] = 1;\n            }\n        }\n    }\n    return count;\n}\nexport function buildStep(builder, blueprint, buildStep, adoptedItem) {\n    let wantCount = 0;\n    let builtCount = 0;\n    const site = builder.site;\n    const candidates = GWU.grid.alloc(site.width, site.height);\n    // Figure out the distance bounds.\n    const distanceBound = calcDistanceBound(builder, buildStep);\n    buildStep.updateViewMap(builder);\n    // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n    // Make a master map of candidate locations for this feature.\n    let qualifyingTileCount = markCandidates(candidates, builder, blueprint, buildStep, distanceBound);\n    if (!buildStep.generateEverywhere) {\n        wantCount = buildStep.count.value();\n    }\n    if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n        console.log(' - Only %s qualifying tiles - want at least %s.', qualifyingTileCount, buildStep.count.lo);\n        return false;\n    }\n    let x = 0, y = 0;\n    let success = true;\n    let didSomething = false;\n    do {\n        success = true;\n        // Find a location for the feature.\n        if (buildStep.buildAtOrigin) {\n            // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n            x = builder.originX;\n            y = builder.originY;\n        }\n        else {\n            // Pick our candidate location randomly, and also strike it from\n            // the candidates map so that subsequent instances of this same feature can't choose it.\n            [x, y] = GWU.random.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] > 0);\n        }\n        // Don't waste time trying the same place again whether or not this attempt succeeds.\n        candidates[x][y] = 0;\n        qualifyingTileCount--;\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (buildStep.effect) {\n            success = site.fireEffect(buildStep.effect, x, y);\n            didSomething = success;\n        }\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile !== -1) {\n            const tile = GWM.tile.get(buildStep.tile);\n            if (!(buildStep.flags & StepFlags.BF_PERMIT_BLOCKING) &&\n                (tile.blocksMove() ||\n                    buildStep.flags & StepFlags.BF_TREAT_AS_BLOCKING)) {\n                // Yes, check for blocking.\n                const blockingMap = GWU.grid.alloc(site.width, site.height);\n                blockingMap[x][y] = 1;\n                success = !SITE.siteDisruptedBy(site, blockingMap, {\n                    machine: site.machineCount,\n                });\n                GWU.grid.free(blockingMap);\n            }\n            if (success) {\n                success = site.setTile(x, y, tile);\n                didSomething = didSomething || success;\n            }\n        }\n        // Generate an actor, if necessary\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const item = site.makeRandomItem(buildStep.item);\n            if (!item) {\n                success = false;\n            }\n            if (buildStep.flags & StepFlags.BF_ITEM_IS_KEY) {\n                item.key = GWM.entity.makeKeyInfo(x, y, !!(buildStep.flags & StepFlags.BF_KEY_DISPOSABLE));\n            }\n            if (buildStep.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE) {\n                success = builder.buildRandom(Flags.BP_ADOPT_ITEM, -1, -1, item);\n                if (success) {\n                    didSomething = true;\n                }\n            }\n            else {\n                success = site.addItem(x, y, item);\n                didSomething = didSomething || success;\n            }\n        }\n        else if (success && buildStep.flags & StepFlags.BF_ADOPT_ITEM) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error('Failed to build blueprint because there is no adopted item.');\n            }\n            if (buildStep.flags & StepFlags.BF_TREAT_AS_BLOCKING) {\n                // Yes, check for blocking.\n                const blockingMap = GWU.grid.alloc(site.width, site.height);\n                blockingMap[x][y] = 1;\n                success = !SITE.siteDisruptedBy(site, blockingMap);\n                GWU.grid.free(blockingMap);\n            }\n            if (success) {\n                success = site.addItem(x, y, adoptedItem);\n                if (success) {\n                    didSomething = true;\n                }\n                else {\n                    console.log('- failed to add item', x, y);\n                }\n            }\n            else {\n                // console.log('- blocks map', x, y);\n            }\n        }\n        if (success && didSomething) {\n            // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n            qualifyingTileCount -= makePersonalSpace(builder, x, y, candidates, buildStep.pad);\n            builtCount++; // we've placed an instance\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n                site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n            }\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.flags & StepFlags.BF_IMPREGNABLE) {\n                site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            }\n        }\n        // Finished with this instance!\n    } while (qualifyingTileCount > 0 &&\n        (buildStep.generateEverywhere ||\n            builtCount < wantCount ||\n            buildStep.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS));\n    if (success && buildStep.flags & StepFlags.BF_BUILD_VESTIBULE) {\n        // Generate a door guard machine.\n        // Try to create a sub-machine that qualifies.\n        success = builder.buildRandom(Flags.BP_VESTIBULE, builder.originX, builder.originY);\n        if (!success) {\n            // console.log(\n            //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n            // );\n            // failure! abort!\n            return false;\n        }\n        ++builtCount;\n    }\n    //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n    //DEBUG logBuffer(candidates);\n    success = builtCount > 0;\n    GWU.grid.free(candidates);\n    return success;\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\n// export interface BuildData {\n//     site: SITE.BuildSite;\n//     spawnedItems: any[];\n//     spawnedHordes: any[];\n//     interior: GWU.grid.NumGrid;\n//     occupied: GWU.grid.NumGrid;\n//     viewMap: GWU.grid.NumGrid;\n//     distanceMap: GWU.grid.NumGrid;\n//     originX: number;\n//     originY: number;\n//     distance25: number;\n//     distance75: number;\n//     machineNumber: number;\n// }\nexport class Builder {\n    constructor(map, depth) {\n        this.map = map;\n        this.spawnedItems = [];\n        this.spawnedHordes = [];\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.depth = 0;\n        this.site = new SITE.MapSite(map);\n        this.interior = GWU.grid.alloc(map.width, map.height);\n        this.occupied = GWU.grid.alloc(map.width, map.height);\n        this.viewMap = GWU.grid.alloc(map.width, map.height);\n        this.distanceMap = GWU.grid.alloc(map.width, map.height);\n        this.depth = depth;\n    }\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.distanceMap);\n    }\n    buildRandom(requiredMachineFlags = BLUE.Flags.BP_ROOM, x = -1, y = -1, adoptedItem = null) {\n        let tries = [];\n        while (tries.length < 10) {\n            const blueprint = BLUE.random(requiredMachineFlags, this.depth);\n            if (!blueprint) {\n                return false;\n            }\n            tries.push(blueprint.id);\n            if (this.build(blueprint, x, y, adoptedItem)) {\n                return true;\n            }\n        }\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return false;\n    }\n    build(blueprint, x = -1, y = -1, adoptedItem = null) {\n        let tries = 10;\n        this.site.analyze();\n        if (x >= 0 && y >= 0) {\n            return this._build(blueprint, x, y, adoptedItem);\n        }\n        while (tries--) {\n            const loc = blueprint.pickLocation(this.site);\n            if (!loc) {\n                continue;\n            }\n            if (this._build(blueprint, loc[0], loc[1], adoptedItem)) {\n                return true;\n            }\n        }\n        // console.log('Failed to build blueprint - ' + blueprint.id);\n        return false;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    _build(blueprint, originX, originY, adoptedItem = null) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        if (!blueprint.computeInterior(this)) {\n            return false;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const levelBackup = this.site.backup();\n        this.machineNumber = this.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        blueprint.prepareInterior(this);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        this.calcDistances(blueprint.size.hi);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = blueprint.pickComponents();\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            if (!component.build(this, blueprint, adoptedItem)) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                this.site.restore(levelBackup);\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return false;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(this.site, this.machineNumber);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return true;\n    }\n    calcDistances(maxSize) {\n        this.distanceMap.fill(0);\n        SITE.computeDistanceMap(this.site, this.distanceMap, this.originX, this.originY, maxSize);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        this.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = this.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as LEVEL from './level';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GWU.object.setOptions(this.config, options);\n        if (this.config.seed) {\n            GWU.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GWU.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GWU.xy.distanceBetween(startLoc[0], startLoc[1], x, y) >\n                    minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        GWU.random.seed(this.seeds[id]);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    makeLevel(id, opts, cb) {\n        const level = new LEVEL.Level(opts);\n        const result = level.create(this.config.width, this.config.height, cb);\n        if (!GWU.xy.equalsXY(level.endLoc, opts.endLoc) ||\n            !GWU.xy.equalsXY(level.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [level.startLoc, level.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["_a","_b","NOTHING","GWM","tile","get","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","GridSite","width","height","this","tiles","DIG","grid","alloc","free","fill","x","y","hasXY","isBoundaryXY","isFloor","isDoor","isBridge","isStairs","isShallow","v","isNothing","isWall","isDeep","blocksPathing","Tile","obj","Error","_x","_y","Flags","flags","Cell","MapSite","map","machineCount","flag","cellInfo","hasCellFlag","cell","setCellFlag","clearCellFlag","hasTile","opts","setTile","highestPriorityTile","cells","forEach","c","clear","hasItem","tags","item","makeRandom","forceItem","hasActor","blocksMove","blocksVision","hasEntityFlag","Entity","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","hasTileFlag","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","isEmpty","isPassable","T_BRIDGE","T_IS_DOOR","L_SECRETLY_PASSABLE","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","site","clone","backup","copy","chokeCount","count","analyze","effect","fireSync","machineId","id","isRoom","IS_IN_MACHINE","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","DIRS","GWU","xy","directionOfDoorSite","dir","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","w","isDiggable","isSet","push","doorSites","loc","random","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","getTileIndex","fillCostGrid","costGrid","update","_v","path","OBSTRUCTION","siteDisruptedBy","blockingGrid","options","_c","machine","walkableGrid","disrupts","lakeX","lakeY","getMachine","first","floodFill","siteDisruptedSize","blockingToMapX","blockingToMapY","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","clearInteriorFlag","IS_WIRED","IS_CIRCUIT_BREAKER","setMachine","Hall","length","doors","d","UP","DOWN","x2","y2","dx","dy","Room","Bounds","super","hall","cx","floor","cy","translate","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","make","RoomDigger","_setOptions","result","carve","every","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","bind","weighted","room","utils","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickLength","lengths","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.Hall","lower","higher","actual","startX","startY","halls","clamp","Number","parseInt","_pickWidth","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","dirIndex","CLOCK_DIRS","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","SITE.DOOR","Level","seed","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","object","setOptions","SITE.GridSite","args","Map","SITE.MapSite","_create","cb","t","addFirstRoom","fails","addRoom","addLoops","addLakes","addBridges","addStairs","finish","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","roomSite","_makeSite","getDigger","_attachRoomAtLoc","HALL.dig","_attachRoom","SITE.directionOfDoorSite","oppDir","_roomFitsAt","SITE.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksDiagonal","boundaryTile","SITE.WALL","Fl","fl","Blueprint","steps","split","trim","frequency","size","lo","from","cfg","STEP.BuildStep","BP_ADOPT_ITEM","some","s","STEP.StepFlags","BF_ADOPT_ITEM","level","want","includes","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","treatAsBlocking","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","requiredFlags","depth","blueprint","randSite","IS_GATE_SITE","contains","getChokeCount","console","log","pos","BP_NOT_IN_HALLWAY","arcCount","pickLocation","builder","tryAgain","failsafe","interior","addTileToInteriorAndIterate","computeVestibuleInterior","SITE.computeDistanceMap","qualifyingTileCount","goalSize","n","isOccupied","debug","SITE.siteDisruptedBy","SITE.siteDisruptedSize","computeInterior","expandMachineInterior","eachNeighbor","machineNumber","isSecretDoor","prepareInterior","alternativeFlags","BF_ALTERNATIVE","BF_ALTERNATIVE_2","keepFeature","totalFreq","randIndex","filter","_f","doorChokeCount","vestibuleLoc","vestibuleChokeCount","roomSize","wantSize","distMap","goodSoFar","startChokeCount","minimumInteriorNeighbors","madeChange","nbcount","blueprints","matches","values","b","qualifies","StepFlags","BuildStep","pad","horde","repeatUntilNoProgress","BF_REPEAT_UNTIL_NO_PROGRESS","generateEverywhere","BF_EVERYWHERE","BF_BUILD_AT_ORIGIN","buildAtOrigin","distanceBound","cellIsCandidate","calcDistanceBound","updateViewMap","adoptedItem","buildStep","BF_IN_VIEW_OF_ORIGIN","BF_IN_PASSABLE_VIEW_OF_ORIGIN","fov","FOV","isBlocked","calculate","viewMap","BF_NEAR_ORIGIN","distance25","BF_FAR_FROM_ORIGIN","distance75","markCandidates","candidates","BF_NOT_IN_HALLWAY","BF_NOT_ON_LEVEL_PERIMETER","occupied","distance","BF_BUILD_IN_WALLS","cellMachine","ok","BF_BUILD_ANYWHERE_ON_LEVEL","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","makePersonalSpace","personalSpace","wantCount","builtCount","fireEffect","BF_PERMIT_BLOCKING","BF_TREAT_AS_BLOCKING","blockingMap","makeRandomItem","BF_ITEM_IS_KEY","entity","makeKeyInfo","BF_KEY_DISPOSABLE","BF_OUTSOURCE_ITEM_TO_MACHINE","buildRandom","addItem","BF_IMPREGNABLE","BF_BUILD_VESTIBULE","spawnedItems","spawnedHordes","requiredMachineFlags","BLUE.Flags","BLUE.random","build","_build","levelBackup","nextMachineId","calcDistances","components","pickComponents","restore","SITE.clearInteriorFlag","maxSize","distances","dist","levels","seeds","stairLocs","initSeeds","initStairLocs","number","stairDistance","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","LEVEL.Level","equalsXY"],"mappings":"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"}