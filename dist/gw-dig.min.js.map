{"version":3,"file":"gw-dig.min.js","sources":["../ts/site/tile.ts","../ts/feature/feature.ts","../ts/feature/tile.ts","../ts/feature/chance.ts","../ts/feature/spread.ts","../ts/site/horde.ts","../ts/site/item.ts","../ts/site/utils.ts","../ts/site/analyze.ts","../ts/site/site.ts","../ts/site/log/logger.ts","../ts/build/buildStep.ts","../ts/site/log/consoleLogger.ts","../ts/types.ts","../ts/room.ts","../ts/hall.ts","../ts/lake.ts","../ts/bridge.ts","../ts/stairs.ts","../ts/loop.ts","../ts/digger.ts","../ts/build/data.ts","../ts/build/blueprint.ts","../ts/build/builder.ts","../ts/dungeon.ts"],"sourcesContent":["import * as GWU from 'gw-utils';\n\nexport { TileId } from '../types';\n// export type ToTileId = (name: TileId) => number;\n\nexport interface TileConfig {\n    blocksMove?: boolean;\n    blocksVision?: boolean;\n    blocksPathing?: boolean;\n\n    connectsLevel?: boolean;\n    secretDoor?: boolean;\n    door?: boolean;\n\n    stairs?: boolean;\n    liquid?: boolean;\n    impregnable?: boolean;\n\n    tags?: string | string[];\n    priority?: number | string;\n    ch?: string;\n\n    extends?: string;\n}\n\nexport interface TileOptions extends TileConfig {\n    id: string;\n}\n\nexport interface TileInfo extends TileOptions {\n    id: string;\n    index: number;\n    priority: number;\n    tags: string[];\n}\n\nexport interface TilePlugin {\n    createTile: (tile: TileInfo, cfg: TileConfig) => void;\n}\n\nexport class TileFactory {\n    plugins: TilePlugin[] = [];\n    tileIds: Record<string, number> = {};\n    allTiles: TileInfo[] = [];\n\n    constructor(withDefaults = true) {\n        if (withDefaults) {\n            installDefaults(this);\n        }\n    }\n\n    use(plugin: TilePlugin) {\n        this.plugins.push(plugin);\n    }\n\n    getTile(name: string | number): TileInfo | null {\n        let id: number;\n        if (typeof name === 'string') {\n            id = this.tileIds[name];\n            if (id === undefined) {\n                // TODO - Log?  Will hit this during default installs.\n                return null;\n            }\n        } else {\n            id = name;\n        }\n        return this.allTiles[id] || null;\n    }\n\n    hasTile(name: string | number): boolean {\n        return this.getTile(name) !== null;\n    }\n\n    tileId(name: string | number): number {\n        if (typeof name === 'number') return name;\n        return this.tileIds[name] ?? -1; // TODO: -1 vs 0?\n    }\n\n    // TODO - Remove?\n    blocksMove(name: string | number): boolean {\n        const info = this.getTile(name);\n        return (!!info && info.blocksMove) || false;\n    }\n\n    install(cfg: TileOptions): TileInfo;\n    install(id: string, opts?: TileConfig): TileInfo;\n    install(id: string | TileOptions, opts: TileConfig = {}): TileInfo {\n        if (typeof id !== 'string') {\n            opts = id;\n            id = id.id;\n        }\n        const base = { id, index: this.allTiles.length, priority: 0, tags: [] };\n\n        opts.extends = opts.extends || id;\n\n        if (opts.extends) {\n            const root = this.getTile(opts.extends);\n            if (root) {\n                Object.assign(base, root);\n            } else if (opts.extends !== id) {\n                throw new Error('Cannot extend tile: ' + opts.extends);\n            }\n        }\n\n        const info: TileInfo = GWU.object.assignOmitting(\n            'priority, extends',\n            base,\n            opts\n        ) as TileInfo;\n\n        info.id = id;\n        info.index = this.allTiles.length;\n\n        if (opts.tags) {\n            info.tags = GWU.tags.make(opts.tags);\n        }\n\n        if (typeof opts.priority === 'string') {\n            let text = opts.priority.replace(/ /g, '');\n            let index = text.search(/[+-]/);\n            if (index == 0) {\n                info.priority = info.priority + Number.parseInt(text);\n            } else if (index == -1) {\n                if (text.search(/[a-zA-Z]/) == 0) {\n                    const tile = getTile(text);\n                    if (!tile)\n                        throw new Error(\n                            'Failed to find tile for priority - ' + text + '.'\n                        );\n                    info.priority = tile.priority;\n                } else {\n                    info.priority = Number.parseInt(text);\n                }\n            } else {\n                const id = text.substring(0, index);\n                const delta = Number.parseInt(text.substring(index));\n                const tile = getTile(id);\n                if (!tile)\n                    throw new Error(\n                        'Failed to find tile for priority - ' + id + '.'\n                    );\n\n                info.priority = tile.priority + delta;\n            }\n        } else if (opts.priority !== undefined) {\n            info.priority = opts.priority;\n        }\n\n        if (info.blocksPathing === undefined) {\n            if (info.blocksMove) {\n                info.blocksPathing = true;\n            }\n        }\n\n        // Do any custom tile setup\n        this.apply(info, opts);\n\n        if (this.tileIds[id]) {\n            info.index = this.tileIds[id];\n            this.allTiles[info.index] = info;\n        } else {\n            this.allTiles.push(info);\n            this.tileIds[id] = info.index;\n        }\n\n        return info;\n    }\n\n    apply(tile: TileInfo, config: TileConfig) {\n        this.plugins.forEach((p) => {\n            if (p.createTile) {\n                p.createTile(tile, config);\n            }\n        });\n    }\n}\n\n// export const tileIds: Record<string, number> = {};\n// export const allTiles: TileInfo[] = [];\n\nexport const tileFactory = new TileFactory(true);\n\nexport function installTile(cfg: TileOptions): TileInfo;\nexport function installTile(id: string, opts?: TileConfig): TileInfo;\nexport function installTile(...args: any[]): TileInfo {\n    if (args.length == 1) {\n        return tileFactory.install(args[0]);\n    }\n    return tileFactory.install(args[0], args[1]);\n}\n\nexport function getTile(name: string | number): TileInfo | null {\n    return tileFactory.getTile(name);\n}\n\nexport function tileId(name: string | number): number {\n    return tileFactory.tileId(name);\n}\n\nexport function blocksMove(name: string | number): boolean {\n    return tileFactory.blocksMove(name);\n}\n\nfunction installDefaults(factory: TileFactory) {\n    factory.tileIds['NOTHING'] = factory.tileIds['NULL'] = factory.install(\n        'NONE',\n        {\n            priority: 0,\n            ch: '',\n        }\n    ).index;\n\n    factory.install('FLOOR', { priority: 10, ch: '.' });\n    factory.install('WALL', {\n        blocksMove: true,\n        blocksVision: true,\n        priority: 50,\n        ch: '#',\n    });\n    factory.install('DOOR', {\n        blocksVision: true,\n        door: true,\n        priority: 60,\n        ch: '+',\n    });\n    factory.install('SECRET_DOOR', {\n        blocksMove: true,\n        secretDoor: true,\n        priority: 70,\n        ch: '%',\n    });\n    factory.install('UP_STAIRS', {\n        stairs: true,\n        priority: 80,\n        ch: '>',\n    });\n    factory.install('DOWN_STAIRS', {\n        stairs: true,\n        priority: 80,\n        ch: '<',\n    });\n    factory.tileIds['DEEP'] = factory.install('LAKE', {\n        priority: 40,\n        liquid: true,\n        ch: '~',\n    }).index;\n    factory.install('SHALLOW', { priority: 30, ch: '`' });\n    factory.install('BRIDGE', { priority: 45, ch: '=' }); // layers help here\n    factory.install('IMPREGNABLE', {\n        priority: 200,\n        ch: '%',\n        impregnable: true,\n        blocksMove: true,\n        blocksVision: true,\n    });\n}\n","import * as GWU from 'gw-utils';\nimport { Site } from '../site';\n\nexport interface FeatureObj {\n    [key: string]: any;\n}\nexport type FeatureConfig = string | FeatureObj;\n\nexport type FeatureFn = (site: Site, x: number, y: number) => boolean;\nexport type MakeFn = (cfg: any) => FeatureFn;\n\nexport const features: Record<string, FeatureFn> = {};\n\nexport function install(name: string, fn: FeatureFn | FeatureConfig) {\n    if (typeof fn !== 'function') {\n        fn = make(fn);\n    }\n    features[name] = fn as FeatureFn;\n}\n\nexport const types: Record<string, MakeFn> = {};\n\nexport function installType(name: string, fn: MakeFn) {\n    types[name] = fn;\n}\n\n// FEATURE TYPE\n\nexport function feature(id: string | string[] | { id: string }): FeatureFn {\n    if (Array.isArray(id)) id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length) throw new Error('Feature effect needs ID');\n\n    return featureFeature.bind(undefined, id);\n}\n\nexport function featureFeature(\n    id: string,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    const feat = features[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n\n    return feat(site, x, y);\n}\n\ninstallType('feature', feature);\ninstallType('effect', feature);\ninstallType('id', feature);\n\nexport function make(obj: FeatureConfig): FeatureFn;\nexport function make(id: string, config: FeatureConfig): FeatureFn;\nexport function make(\n    id: string | FeatureConfig,\n    config?: FeatureConfig\n): FeatureFn {\n    if (!id) return GWU.FALSE;\n    if (typeof id === 'string') {\n        if (!id.length)\n            throw new Error('Cannot create effect from empty string.');\n\n        if (!config) {\n            const parts = id.split(':');\n            id = parts.shift()!.toLowerCase();\n            config = parts;\n        }\n        // string with no parameters is interpreted as id of registered feature\n        if (config.length === 0) {\n            config = id;\n            id = 'feature';\n        }\n        const handler = types[id];\n        if (!handler) throw new Error('Failed to find effect - ' + id);\n        return handler(config || {});\n    }\n    let steps: FeatureFn[];\n\n    if (Array.isArray(id)) {\n        steps = id\n            .map((config) => make(config))\n            .filter((a) => a !== null) as FeatureFn[];\n    } else if (typeof id === 'function') {\n        return id as FeatureFn;\n    } else {\n        steps = Object.entries(id)\n            .map(([key, config]) => make(key, config))\n            .filter((a) => a !== null) as FeatureFn[];\n    }\n    if (steps.length === 1) {\n        return steps[0];\n    }\n\n    return (site, x, y) => {\n        return steps.every((step) => step(site, x, y));\n    };\n}\n\nexport function makeArray(cfg: string): FeatureFn[];\nexport function makeArray(obj: FeatureObj): FeatureFn[];\nexport function makeArray(arr: FeatureFn[]): FeatureFn[];\nexport function makeArray(\n    cfg: string | FeatureFn | FeatureObj | FeatureFn[]\n): FeatureFn[] {\n    if (!cfg) return [];\n    if (Array.isArray(cfg)) {\n        return cfg\n            .map((c) => make(c))\n            .filter((fn) => fn !== null) as FeatureFn[];\n    }\n    if (typeof cfg === 'string') {\n        if (!cfg.length)\n            throw new Error('Cannot create effect from empty string.');\n\n        const parts = cfg.split(':');\n        cfg = parts.shift()!.toLowerCase();\n\n        const handler = types[cfg];\n        if (!handler) return [];\n        return [handler(parts)];\n    } else if (typeof cfg === 'function') {\n        return [cfg] as FeatureFn[];\n    }\n\n    const steps = Object.entries(cfg).map(([key, config]) => make(key, config));\n    return steps.filter((s) => s !== null) as FeatureFn[];\n}\n","import { SetTileOptions, Site } from '../site';\nimport { FeatureFn, installType } from './feature';\n\n//////////////////////////////////////////////\n// TILE\n\nexport interface TileOptions extends SetTileOptions {\n    id: string;\n    protected?: boolean;\n}\n\nexport function tile(src: string | TileOptions): FeatureFn {\n    if (!src) throw new Error('Tile effect needs configuration.');\n\n    if (typeof src === 'string') {\n        src = { id: src };\n    } else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    } else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n\n    const opts: TileOptions = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    // if (opts.id.includes('+')) {\n    //     opts.protected = true;\n    // }\n    opts.id = opts.id.replace(/[!~+]*/g, '');\n\n    return tileAction.bind(undefined, opts);\n}\n\nexport function tileAction(\n    cfg: TileOptions,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    cfg.machine = 0; // >???<\n    if (site.setTile(x, y, cfg.id, cfg)) {\n        return true;\n    }\n    return false;\n}\n\ninstallType('tile', tile);\n","import { Site } from '../site';\nimport { installType, FeatureFn } from './feature';\n\n//////////////////////////////////////////////\n// chance\n\nexport function chance(opts: any): FeatureFn {\n    if (Array.isArray(opts)) {\n        opts = opts[0];\n    }\n    if (typeof opts === 'object') {\n        opts = opts.chance;\n    }\n    if (typeof opts === 'string') {\n        if (opts.endsWith('%')) {\n            opts = Number.parseFloat(opts) * 100;\n        } else {\n            opts = Number.parseInt(opts || '10000');\n        }\n    }\n    if (typeof opts !== 'number') {\n        throw new Error(\n            'Chance effect config must be number or string that can be a number.'\n        );\n    }\n    return chanceAction.bind(undefined, opts);\n}\n\nexport function chanceAction(cfg: number, site: Site): boolean {\n    return site.rng.chance(cfg, 10000);\n}\n\ninstallType('chance', chance);\n","import * as GWU from 'gw-utils';\nimport { Site, tileId } from '../site';\nimport { FeatureFn, FeatureConfig, installType, makeArray } from './feature';\n\nconst Fl = GWU.flag.fl;\n\n///////////////////////////////////////////////////////\n// TILE EVENT\n\nexport enum Flags {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    // E_NEXT_ALWAYS = Fl(0), // Always fire the next effect, even if no tiles changed.\n    // E_NEXT_EVERYWHERE = Fl(1), // next effect spawns in every cell that this effect spawns in, instead of only the origin\n\n    // E_FIRED = Fl(2), // has already been fired once\n\n    // E_NO_MARK_FIRED = Fl(3), // Do not mark this cell as having fired an effect (so can log messages multiple times)\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    // E_PROTECTED = Fl(4),\n\n    // E_NO_REDRAW_CELL = Fl(),\n    E_TREAT_AS_BLOCKING = Fl(5), // If filling the footprint of this effect with walls would disrupt level connectivity, then abort.\n    E_PERMIT_BLOCKING = Fl(6), // Generate this effect without regard to level connectivity.\n    E_ABORT_IF_BLOCKS_MAP = Fl(7),\n    E_BLOCKED_BY_ITEMS = Fl(8), // Do not fire this effect in a cell that has an item.\n    E_BLOCKED_BY_ACTORS = Fl(9), // Do not fire this effect in a cell that has an item.\n    E_BLOCKED_BY_OTHER_LAYERS = Fl(10), // Will not propagate into a cell if any layer in that cell has a superior priority.\n    E_SUPERPRIORITY = Fl(11), // Will overwrite terrain of a superior priority.\n\n    E_IGNORE_FOV = Fl(12),\n\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n\n    E_EVACUATE_CREATURES = Fl(15), // Creatures in the effect area get moved outside of it\n    E_EVACUATE_ITEMS = Fl(16), // Creatures in the effect area get moved outside of it\n\n    E_BUILD_IN_WALLS = Fl(17),\n    E_MUST_TOUCH_WALLS = Fl(18),\n    E_NO_TOUCH_WALLS = Fl(19),\n\n    E_CLEAR_GROUND = Fl(21), // clear all existing tiles\n    E_CLEAR_SURFACE = Fl(22),\n    E_CLEAR_LIQUID = Fl(23),\n    E_CLEAR_GAS = Fl(24),\n\n    E_CLEAR_TILE = Fl(25), // Clear this tile\n\n    E_CLEAR_CELL = E_CLEAR_GROUND |\n        E_CLEAR_SURFACE |\n        E_CLEAR_LIQUID |\n        E_CLEAR_GAS,\n\n    E_ONLY_IF_EMPTY = E_BLOCKED_BY_ITEMS | E_BLOCKED_BY_ACTORS,\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n\n    // These should be effect types\n    // E_ACTIVATE_DORMANT_MONSTER = Fl(27), // Dormant monsters on this tile will appear -- e.g. when a statue bursts to reveal a monster.\n    // E_AGGRAVATES_MONSTERS = Fl(28), // Will act as though an aggravate monster scroll of effectRadius radius had been read at that point.\n    // E_RESURRECT_ALLY = Fl(29), // Will bring back to life your most recently deceased ally.\n}\n\nexport interface SpreadInfo {\n    grow: number;\n    decrement: number;\n    matchTile: string;\n    features: FeatureFn[];\n    flags: number;\n}\n\nexport interface SpreadConfig\n    extends Partial<Omit<SpreadInfo, 'flags' | 'features'>> {\n    features?: FeatureConfig;\n    flags?: GWU.flag.FlagBase;\n}\n\nexport interface SpreadFn extends FeatureFn {\n    config: SpreadInfo;\n}\n\nexport type SpreadArgs = [number, number, FeatureConfig, SpreadConfig?];\n\nexport function spread(config: SpreadArgs | SpreadConfig): SpreadFn;\nexport function spread(\n    grow: number,\n    decrement: number,\n    action: FeatureConfig,\n    opts?: SpreadConfig\n): SpreadFn;\nexport function spread(...args: any[]): SpreadFn {\n    let config = {} as SpreadInfo;\n    if (!args.length) {\n        throw new Error('Must have config to create spread.');\n    }\n    if (args.length === 1) {\n        if (typeof args[0] === 'string') {\n            args = args[0].split(':').map((t) => t.trim());\n        } else if (Array.isArray(args[0])) {\n            args = args[0];\n        } else {\n            Object.assign(config, args[0]);\n            args = [config];\n        }\n    }\n    if (args.length >= 3) {\n        Object.assign(config, args[3] || {});\n        config.grow = Number.parseInt(args[0]);\n        config.decrement = Number.parseInt(args[1]);\n        config.features = args[2];\n    } else if (args.length === 2) {\n        throw new Error('Must have actions to run for spread.');\n    }\n\n    if (typeof config.grow !== 'number')\n        config.grow = Number.parseInt(config.grow || 0);\n    if (typeof config.decrement !== 'number')\n        config.decrement = Number.parseInt(config.decrement || 100);\n    config.flags = GWU.flag.from(Flags, config.flags || 0);\n    config.matchTile = config.matchTile || '';\n\n    if (\n        typeof config.features === 'string' &&\n        // @ts-ignore\n        config.features.indexOf(':') < 0\n    ) {\n        if (tileId(config.features) >= 0) {\n            // @ts-ignore\n            config.features = 'TILE:' + config.features;\n        }\n    }\n\n    const action = makeArray(config.features);\n    if (!action) throw new Error('Failed to make action for spread.');\n    config.features = action;\n\n    const fn = spreadFeature.bind(undefined, config) as SpreadFn;\n    fn.config = config;\n    return fn;\n}\n\ninstallType('spread', spread);\n\nexport function spreadFeature(\n    cfg: SpreadInfo,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    const abortIfBlocking = !!(cfg.flags & Flags.E_ABORT_IF_BLOCKS_MAP);\n\n    const map = site;\n    let didSomething = false;\n\n    const spawnMap = GWU.grid.alloc(map.width, map.height);\n\n    if (!computeSpawnMap(cfg, spawnMap, site, x, y)) {\n        GWU.grid.free(spawnMap);\n        return false;\n    }\n\n    if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n        GWU.grid.free(spawnMap);\n        return false;\n    }\n\n    if (cfg.flags & Flags.E_EVACUATE_CREATURES) {\n        // first, evacuate creatures, so that they do not re-trigger the tile.\n        if (evacuateCreatures(map, spawnMap)) {\n            didSomething = true;\n        }\n    }\n\n    if (cfg.flags & Flags.E_EVACUATE_ITEMS) {\n        // first, evacuate items, so that they do not re-trigger the tile.\n        if (evacuateItems(map, spawnMap)) {\n            didSomething = true;\n        }\n    }\n\n    if (cfg.flags & Flags.E_CLEAR_CELL) {\n        // first, clear other tiles (not base/ground)\n        if (clearCells(map, spawnMap, cfg.flags)) {\n            didSomething = true;\n        }\n    }\n\n    spawnMap.update((v) => {\n        if (!v) return 0;\n        return 1;\n    });\n\n    cfg.features.forEach((fn, i) => {\n        spawnMap.forEach((v, x, y) => {\n            if (v !== i + 1) return;\n\n            if (fn(site, x, y)) {\n                didSomething = true;\n                spawnMap[x][y] += 1;\n            }\n        });\n    });\n\n    if (didSomething) {\n        didSomething = true;\n    }\n    GWU.grid.free(spawnMap);\n    return didSomething;\n}\n\nexport function mapDisruptedBy(\n    map: Site,\n    blockingGrid: GWU.grid.NumGrid,\n    blockingToMapX = 0,\n    blockingToMapY = 0\n) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.isStairs(i, j)) {\n                disrupts = true;\n            }\n        } else if (!map.blocksMove(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                } else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\n// Spread\n\nfunction cellIsOk(\n    effect: SpreadInfo,\n    map: Site,\n    x: number,\n    y: number,\n    isStart: boolean\n) {\n    if (!map.hasXY(x, y)) return false;\n    if (map.isProtected(x, y)) return false;\n\n    if (map.blocksEffects(x, y) && !effect.matchTile && !isStart) {\n        return false;\n    }\n\n    if (effect.flags & Flags.E_BUILD_IN_WALLS) {\n        if (!map.isWall(x, y)) return false;\n    } else if (effect.flags & Flags.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (map.isWall(i, j)) {\n                    ok = true;\n                }\n            },\n            true\n        );\n        if (!ok) return false;\n    } else if (effect.flags & Flags.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.isWall(x, y)) return false; // or on wall\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (map.isWall(i, j)) {\n                    ok = false;\n                }\n            },\n            true\n        );\n        if (!ok) return false;\n    }\n\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !map.hasTile(x, y, effect.matchTile)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function computeSpawnMap(\n    effect: SpreadInfo,\n    spawnMap: GWU.grid.NumGrid,\n    site: Site,\n    x: number,\n    y: number\n) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n\n    const map = site;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n\n    spawnMap.fill(0);\n\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (\n                                spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)\n                            ) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n\n    return count > 0;\n}\n\nexport function clearCells(map: Site, spawnMap: GWU.grid.NumGrid, _flags = 0) {\n    let didSomething = false;\n    // const clearAll = (flags & Flags.E_CLEAR_CELL) === Flags.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v) return;\n\n        // if (clearAll) {\n        map.clearTile(i, j);\n        // } else {\n        //     if (flags & Flags.E_CLEAR_GAS) {\n        //         cell.clearDepth(Flags.Depth.GAS);\n        //     }\n        //     if (flags & Flags.E_CLEAR_LIQUID) {\n        //         cell.clearDepth(Flags.Depth.LIQUID);\n        //     }\n        //     if (flags & Flags.E_CLEAR_SURFACE) {\n        //         cell.clearDepth(Flags.Depth.SURFACE);\n        //     }\n        //     if (flags & Flags.E_CLEAR_GROUND) {\n        //         cell.clearDepth(Flags.Depth.GROUND);\n        //     }\n        // }\n        didSomething = true;\n    });\n    return didSomething;\n}\n\nexport function evacuateCreatures(map: Site, blockingMap: GWU.grid.NumGrid) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y]) return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y)) return false;\n            if (blockingMap[x][y]) return false;\n            return !map.forbidsActor(x, y, a);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            a.y = loc[0];\n            a.y = loc[1];\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n\nexport function evacuateItems(map: Site, blockingMap: GWU.grid.NumGrid) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y]) return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y)) return false;\n            if (blockingMap[x][y]) return false;\n            return !map.forbidsItem(x, y, i);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            i.x = loc[0];\n            i.y = loc[1];\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { ItemInstance } from './item';\nimport * as FEATURE from '../feature';\nimport { Site } from '../site';\n\nexport type HordeId = string;\n\nexport interface ActorInstance {\n    id: string;\n    make: Record<string, any>;\n    x: number;\n    y: number;\n    machine: number;\n    leader?: ActorInstance; // number??\n    item?: ItemInstance;\n}\n\nexport interface MemberConfig {\n    count?: GWU.range.RangeBase;\n    make?: Record<string, any>;\n}\n\nexport interface HordeConfig {\n    id?: string;\n    leader: HordeId;\n    make?: Record<string, any>;\n    members?: Record<HordeId, GWU.range.RangeBase | MemberConfig>;\n\n    tags?: GWU.tags.TagBase;\n    frequency?: GWU.frequency.FrequencyConfig;\n\n    // flags?: GWU.flag.FlagBase;\n    requiredTile?: string; // ID\n    feature?: string; // ID\n    blueprint?: string; // ID\n}\n\nexport interface MemberInfo {\n    count: GWU.range.Range;\n    make: Record<string, any>;\n}\n\nexport interface HordeInfo {\n    id?: string;\n    leader: HordeId;\n    make: Record<string, any>;\n    members: Record<HordeId, MemberInfo>;\n\n    tags: string[];\n    frequency: GWU.frequency.FrequencyFn;\n\n    flags: number;\n    requiredTile: string | null;\n    feature: FEATURE.FeatureFn | null;\n    blueprint: string | null;\n}\n\nexport const hordes: HordeInfo[] = [];\n\nexport function installHorde(config: HordeConfig): HordeInfo {\n    const info = {} as HordeInfo;\n    info.id = config.id || config.leader;\n    info.leader = config.leader;\n    info.make = config.make || {};\n    info.members = {};\n    if (config.members) {\n        Object.entries(config.members).forEach(([key, value]) => {\n            let member = {} as MemberInfo;\n            if (\n                typeof value === 'object' &&\n                ('count' in value || 'make' in value)\n            ) {\n                member.count = GWU.range.make(value.count || 1);\n                member.make = value.make || {};\n            } else {\n                // @ts-ignore\n                member.count = GWU.range.make(value);\n            }\n            info.members[key] = member;\n        });\n    }\n\n    info.tags = [];\n    if (config.tags) {\n        if (typeof config.tags === 'string') {\n            config.tags = config.tags.split(/[:|,]/g).map((t) => t.trim());\n        }\n        info.tags = config.tags;\n    }\n\n    info.frequency = GWU.frequency.make(config.frequency);\n    info.flags = 0;\n\n    info.requiredTile = config.requiredTile || null;\n    info.feature = config.feature ? FEATURE.make(config.feature) : null;\n    info.blueprint = config.blueprint || null;\n\n    hordes.push(info);\n\n    return info;\n}\n\nexport function pickHorde(\n    depth: number,\n    rules: string | { id: string } | { tags: string | string[] },\n    rng?: GWU.rng.Random\n): HordeInfo | null {\n    rng = rng || GWU.random;\n    let tagMatch: GWU.tags.TagMatchFn;\n    if (typeof rules === 'string') {\n        tagMatch = GWU.tags.makeMatch(rules);\n    } else if ('id' in rules) {\n        return hordes.find((h) => h.id === rules.id) || null;\n    } else {\n        tagMatch = GWU.tags.makeMatch(rules);\n    }\n\n    const choices = hordes.filter((horde) => tagMatch(horde.tags));\n    if (choices.length == 0) return null;\n\n    const freq = choices.map((info) => info.frequency(depth));\n    const choice = rng.weighted(freq);\n    return choices[choice] || null;\n}\n\nexport interface HordeFlagsType {\n    horde: number;\n}\n\nexport interface SpawnOptions {\n    canSpawn: GWU.xy.XYMatchFunc;\n    rng: GWU.rng.Random;\n    machine: number;\n}\n\nexport function spawnHorde(\n    info: HordeInfo,\n    map: Site,\n    x = -1,\n    y = -1,\n    opts: Partial<SpawnOptions> = {}\n): ActorInstance | null {\n    // Leader info\n    opts.canSpawn = opts.canSpawn || GWU.TRUE;\n    opts.rng = opts.rng || map.rng;\n    opts.machine = opts.machine || 0;\n\n    const leader = _spawnLeader(info, map, x, y, opts as SpawnOptions);\n    if (!leader) return null;\n\n    _spawnMembers(info, leader, map, opts as SpawnOptions);\n    return leader;\n}\n\nfunction _spawnLeader(\n    info: HordeInfo,\n    map: Site,\n    x: number,\n    y: number,\n    opts: SpawnOptions\n): ActorInstance | null {\n    const leader: ActorInstance = {\n        id: info.leader,\n        make: info.make,\n        x,\n        y,\n        machine: opts.machine || 0,\n    };\n\n    if (x >= 0 && y >= 0) {\n        if (!map.canSpawnActor(x, y, leader)) return null;\n    } else {\n        [x, y] = _pickLeaderLoc(leader, map, opts) || [-1, -1];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n    }\n\n    // pre-placement stuff?  machine? effect?\n\n    if (!_addLeader(leader, map, x, y, opts)) {\n        return null;\n    }\n\n    return leader;\n}\n\nfunction _addLeader(\n    leader: ActorInstance,\n    map: Site,\n    x: number,\n    y: number,\n    _opts: SpawnOptions\n): number {\n    return map.addActor(x, y, leader);\n}\n\nfunction _addMember(\n    member: ActorInstance,\n    map: Site,\n    x: number,\n    y: number,\n    leader: ActorInstance,\n    _opts: SpawnOptions\n): number {\n    member.leader = leader;\n    return map.addActor(x, y, member);\n}\n\nfunction _spawnMembers(\n    horde: HordeInfo,\n    leader: ActorInstance,\n    map: Site,\n    opts: SpawnOptions\n): number {\n    const entries = Object.entries(horde.members);\n\n    if (entries.length == 0) return 0;\n\n    let count = 0;\n    entries.forEach(([kindId, config]) => {\n        const count = config.count.value(opts.rng);\n        for (let i = 0; i < count; ++i) {\n            _spawnMember(kindId, config, map, leader, opts);\n        }\n    });\n\n    return count;\n}\n\nfunction _spawnMember(\n    id: string,\n    member: MemberInfo,\n    map: Site,\n    leader: ActorInstance,\n    opts: SpawnOptions\n): ActorInstance | null {\n    const instance = {\n        id,\n        make: member.make,\n        x: -1,\n        y: -1,\n        machine: leader.machine,\n    };\n\n    const [x, y] = _pickMemberLoc(instance, map, leader, opts) || [-1, -1];\n    if (x < 0 || y < 0) {\n        return null;\n    }\n\n    // pre-placement stuff?  machine? effect?\n\n    if (!_addMember(instance, map, x, y, leader, opts)) {\n        return null;\n    }\n\n    return instance;\n}\n\nfunction _pickLeaderLoc(\n    leader: ActorInstance,\n    map: Site,\n    opts: SpawnOptions\n): GWU.xy.Loc | null {\n    let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n        if (!map.hasXY(x, y)) return false;\n\n        if (map.hasActor(x, y)) return false; // Brogue kills existing actors, but lets do this instead\n\n        if (!opts.canSpawn(x, y)) return false;\n        if (!map.canSpawnActor(x, y, leader)) return false;\n        // const cell = map.cell(x, y);\n\n        // if (leader.avoidsCell(cell)) return false;\n\n        // if (Map.isHallway(map, x, y)) {\n        //     return false;\n        // }\n        return true;\n    });\n    return loc;\n}\n\nfunction _pickMemberLoc(\n    actor: ActorInstance,\n    map: Site,\n    leader: ActorInstance,\n    opts: SpawnOptions\n): GWU.xy.Loc | null {\n    let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n        if (!map.hasXY(x, y)) return false;\n        if (map.hasActor(x, y)) return false;\n        // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n\n        if (!map.canSpawnActor(x, y, actor)) return false;\n        if (!opts.canSpawn(x, y)) return false;\n        return true;\n    });\n    return loc;\n}\n","import * as GWU from 'gw-utils';\n\nexport type ItemId = string;\n\nexport interface ItemInstance {\n    id: string;\n    make?: Record<string, any>;\n    key?: { x: number; y: number; disposable?: boolean };\n    x: number; // -1 means not on map (carried)\n    y: number; // -1 means not on map\n}\n\nexport interface ItemConfig {\n    id: ItemId;\n    make?: Record<string, any>;\n\n    tags?: GWU.tags.TagBase;\n    frequency?: GWU.frequency.FrequencyConfig;\n\n    // flags?: GWU.flag.FlagBase;\n    requiredTile?: string;\n    feature?: string;\n    blueprint?: string;\n}\n\nexport interface ItemMatchOptions {\n    tags: string | string[];\n    forbidTags: string | string[];\n    rng?: GWU.rng.Random;\n}\n\nexport interface ItemInfo {\n    id: ItemId;\n    make: Record<string, any>;\n\n    tags: string[];\n    frequency: GWU.frequency.FrequencyFn;\n\n    flags: number;\n    requiredTile: string | null;\n    feature: string | null;\n    blueprint: string | null;\n}\n\nexport const items: ItemInfo[] = [];\n\nexport function installItem(config: ItemConfig): ItemInfo;\nexport function installItem(id: string, cfg: Omit<ItemConfig, 'id'>): ItemInfo;\nexport function installItem(\n    config: ItemConfig | string,\n    cfg?: Omit<ItemConfig, 'id'>\n): ItemInfo {\n    const info = {} as ItemInfo;\n    if (typeof config === 'string') {\n        info.id = config;\n        if (!cfg) throw new Error('Need a configuration.');\n        config = cfg as ItemConfig;\n    } else {\n        info.id = config.id;\n    }\n\n    info.make = config.make || {};\n\n    info.tags = [];\n    if (config.tags) {\n        if (typeof config.tags === 'string') {\n            config.tags = config.tags.split(/[:|,]/g).map((t) => t.trim());\n        }\n        info.tags = config.tags;\n    }\n\n    info.frequency = GWU.frequency.make(config.frequency || 100);\n    info.flags = 0;\n\n    info.requiredTile = config.requiredTile || null;\n    info.feature = config.feature || null;\n    info.blueprint = config.blueprint || null;\n\n    items.push(info);\n\n    return info;\n}\n\nexport function pickItem(\n    depth: number,\n    tagRules: string | { tags: string } | { id: string },\n    rng?: GWU.rng.Random\n): ItemInfo | null {\n    rng = rng || GWU.random;\n    if (typeof tagRules !== 'string' && 'id' in tagRules) {\n        // @ts-ignore\n        return items.find((i) => i.id === tagRules.id) || null;\n    }\n    tagRules = typeof tagRules === 'string' ? tagRules : tagRules.tags;\n    const tagMatch = GWU.tags.makeMatch(tagRules);\n    const choices = items.filter((item) => tagMatch(item.tags));\n    if (choices.length == 0) return null;\n\n    const freq = choices.map((info) => info.frequency(depth));\n    const choice = rng.weighted(freq);\n    return choices[choice] || null;\n}\n\nexport function makeItem(info: ItemInfo): ItemInstance {\n    return {\n        id: info.id,\n        make: info.make,\n        x: -1,\n        y: -1,\n    };\n}\n\nexport function getItemInfo(id: string): ItemInfo | undefined {\n    return items.find((i) => i.id === id);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\nimport * as DIG from './site';\n\nconst DIRS = GWU.xy.DIRS;\n\nexport function loadSite(\n    site: DIG.Site,\n    cells: string[],\n    tiles: Record<string, string>\n) {\n    const w = site.width;\n    const h = site.height;\n\n    cells.forEach((line, j) => {\n        if (j >= h) return;\n        for (let i = 0; i < w && i < line.length; ++i) {\n            const ch = line[i];\n            const tile = tiles[ch] || 'FLOOR';\n\n            site.setTile(i, j, tile);\n        }\n    });\n}\n\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n\n//                 attachDoor(map, room, opts, x, y, oppDir);\n\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n\n//     return false;\n// }\n\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(\n    site: DIG.Site,\n    x: number,\n    y: number\n): number {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (\n            site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)\n        ) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\n\nexport function chooseRandomDoorSites(site: DIG.Site): GWU.xy.Loc[] {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n\n    const DOORS: GWU.xy.Loc[][] = [[], [], [], []];\n\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n\n    const h = site.height;\n    const w = site.width;\n\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (\n                        k = 0;\n                        k < 10 && site.hasXY(newX, newY) && !doorSiteFailed;\n                        k++\n                    ) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n\n    let doorSites: GWU.xy.Loc[] = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = site.rng.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n\n//     const site = new SITE.GridSite(map);\n\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n\n//         if (roomGrid[x][y]) continue;\n\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n\n//     return false;\n// }\n\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = site.rng.sequence(mapDoors.length);\n\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n\n//     return false;\n// }\n\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = site.rng.sequence(4);\n\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n\nexport function fillCostGrid(source: DIG.Site, costGrid: GWU.grid.NumGrid) {\n    costGrid.update((_v, x, y) =>\n        source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION\n    );\n}\n\nexport interface DisruptOptions {\n    offsetX: number; // blockingGridOffsetX\n    offsetY: number; // blockingGridOffsetY\n    machine: number;\n    updateWalkable: (grid: GWU.grid.NumGrid) => boolean; // true = ok to proceed, false = disrupts\n}\n\nexport function siteDisruptedByXY(\n    site: DIG.Site,\n    x: number,\n    y: number,\n    options: Partial<DisruptOptions> = {}\n) {\n    options.offsetX ??= 0;\n    options.offsetY ??= 0;\n    options.machine ??= 0;\n\n    if (\n        GWU.xy.arcCount(x, y, (i, j) => {\n            return site.isPassable(i, j);\n        }) <= 1\n    )\n        return false;\n\n    const blockingGrid = GWU.grid.alloc(site.width, site.height);\n    blockingGrid[x][y] = 1;\n    const result = siteDisruptedBy(site, blockingGrid, options);\n    GWU.grid.free(blockingGrid);\n    return result;\n}\n\nexport function siteDisruptedBy(\n    site: DIG.Site,\n    blockingGrid: GWU.grid.NumGrid,\n    options: Partial<DisruptOptions> = {}\n) {\n    options.offsetX ??= 0;\n    options.offsetY ??= 0;\n    options.machine ??= 0;\n\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const blockingX = i + options.offsetX!;\n        const blockingY = j + options.offsetY!;\n        if (blockingGrid.get(blockingX, blockingY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        } else if (\n            site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)\n        ) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    if (options.updateWalkable) {\n        if (!options.updateWalkable(walkableGrid)) {\n            return true;\n        }\n    }\n\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                } else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\nexport function siteDisruptedSize(\n    site: DIG.Site,\n    blockingGrid: GWU.grid.NumGrid,\n    blockingToMapX = 0,\n    blockingToMapY = 0\n) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        } else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    if (disrupts) return disrupts;\n\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                } else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\nexport function computeDistanceMap(\n    site: DIG.Site,\n    distanceMap: GWU.path.DijkstraMap,\n    originX: number,\n    originY: number,\n    _maxDistance: number\n) {\n    distanceMap.reset(site.width, site.height);\n    distanceMap.setGoal(originX, originY);\n    distanceMap.calculate((x, y) => {\n        if (!site.hasXY(x, y)) return GWU.path.OBSTRUCTION;\n        if (site.isPassable(x, y)) return GWU.path.OK;\n        if (site.blocksDiagonal(x, y)) return GWU.path.OBSTRUCTION;\n        return GWU.path.BLOCKED;\n    }, false);\n}\n\nexport function clearInteriorFlag(site: DIG.Site, machine: number) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine && !site.needsMachine(i, j)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\n\nexport interface AnalysisBase {\n    readonly height: number;\n    readonly width: number;\n\n    hasXY: GWU.xy.XYMatchFunc;\n\n    blocksPathing: GWU.xy.XYMatchFunc;\n    blocksMove: GWU.xy.XYMatchFunc;\n    blocksDiagonal: GWU.xy.XYMatchFunc;\n    isSecretDoor: GWU.xy.XYMatchFunc;\n}\n\nexport interface LoopSite extends AnalysisBase {\n    setInLoop: GWU.xy.XYFunc;\n    clearInLoop: GWU.xy.XYFunc;\n    isInLoop: GWU.xy.XYMatchFunc;\n}\n\nexport interface ChokeSite extends AnalysisBase {\n    clearChokepoint: GWU.xy.XYFunc;\n    setChokepoint: GWU.xy.XYFunc;\n    isChokepoint: GWU.xy.XYMatchFunc;\n    setChokeCount(x: number, y: number, count: number): void;\n    getChokeCount(x: number, y: number): number;\n\n    setGateSite: GWU.xy.XYFunc;\n    clearGateSite: GWU.xy.XYFunc;\n    isGateSite: GWU.xy.XYMatchFunc;\n\n    isAreaMachine: GWU.xy.XYMatchFunc;\n    isInLoop: GWU.xy.XYMatchFunc;\n}\n\nexport type AnalysisSite = LoopSite & ChokeSite;\n\nexport function analyze(map: AnalysisSite, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\n\nexport function updateChokepoints(map: ChokeSite, updateCounts: boolean) {\n    const blockMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            if (map.blocksDiagonal(i, j)) {\n                blockMap[i][j] = 2;\n            } else if (\n                (map.blocksPathing(i, j) || map.blocksMove(i, j)) &&\n                !map.isSecretDoor(i, j)\n            ) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                blockMap[i][j] = 1;\n            } else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                blockMap[i][j] = 0;\n            }\n        }\n    }\n\n    let passableArcCount;\n\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < blockMap.width - 1; i++) {\n        for (let j = 1; j < blockMap.height - 1; j++) {\n            map.clearChokepoint(i, j);\n            if (!blockMap[i][j]) {\n                if (!map.isInLoop(i, j)) {\n                    passableArcCount = 0;\n                    for (let dir = 0; dir < 8; dir++) {\n                        const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                        const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                        const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                        const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                        if (\n                            (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                                blockMap[newX][newY] > 0) !=\n                            (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                                blockMap[oldX][oldY] > 0)\n                        ) {\n                            if (++passableArcCount > 2) {\n                                if (\n                                    (blockMap[i - 1][j] &&\n                                        blockMap[i + 1][j]) ||\n                                    (blockMap[i][j - 1] && blockMap[i][j + 1])\n                                ) {\n                                    map.setChokepoint(i, j);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                const left = i - 1;\n                const right = i + 1;\n                const up = j - 1;\n                const down = j + 1;\n\n                if (blockMap[i][up] && blockMap[i][down]) {\n                    if (!blockMap[left][j] && !blockMap[right][j]) {\n                        if (\n                            !blockMap[left][up] ||\n                            !blockMap[left][down] ||\n                            !blockMap[right][up] ||\n                            !blockMap[right][down]\n                        ) {\n                            map.setGateSite(i, j);\n                        }\n                    }\n                } else if (blockMap[left][j] && blockMap[right][j]) {\n                    if (!blockMap[i][up] && !blockMap[i][down]) {\n                        if (\n                            !blockMap[left][up] ||\n                            !blockMap[left][down] ||\n                            !blockMap[right][up] ||\n                            !blockMap[right][down]\n                        ) {\n                            map.setGateSite(i, j);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.setChokeCount(i, j, 30000);\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n\n        // Scan through and find a chokepoint next to an open point.\n\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                if (!blockMap[i][j] && map.isChokepoint(i, j)) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (\n                            map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            !blockMap[newX][newY] &&\n                            !map.isChokepoint(newX, newY)\n                        ) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            blockMap[i][j] = 1;\n                            let cellCount = floodFillCount(\n                                map,\n                                grid,\n                                blockMap,\n                                newX,\n                                newY\n                            );\n                            blockMap[i][j] = 0;\n\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (\n                                            grid[i2][j2] &&\n                                            cellCount <\n                                                map.getChokeCount(i2, j2)\n                                        ) {\n                                            map.setChokeCount(\n                                                i2,\n                                                j2,\n                                                cellCount\n                                            );\n                                            // map.clearGateSite(i2, j2);\n                                        }\n                                    }\n                                }\n\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < map.getChokeCount(i, j)) {\n                                    map.setChokeCount(i, j, cellCount);\n                                    // map.setGateSite(i, j);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    GWU.grid.free(blockMap);\n    GWU.grid.free(grid);\n}\n\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(\n    map: ChokeSite,\n    results: GWU.grid.NumGrid,\n    blockMap: GWU.grid.NumGrid,\n    startX: number,\n    startY: number\n) {\n    function getCount(x: number, y: number): number {\n        let count = 1;\n\n        if (map.isAreaMachine(x, y)) {\n            // huh?\n            count = 10000;\n        }\n        return count;\n    }\n\n    let count = 0;\n    const todo: GWU.xy.Loc[] = [[startX, startY]];\n    const free: GWU.xy.Loc[] = [];\n\n    while (todo.length) {\n        const item = todo.pop()!;\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y]) continue;\n\n        results[x][y] = 1;\n        count += getCount(x, y);\n\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n\n            if (\n                map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                !blockMap[newX][newY] &&\n                !results[newX][newY]\n            ) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n\n    return Math.min(count, 10000);\n}\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n\nexport function updateLoopiness(map: LoopSite) {\n    resetLoopiness(map);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\n\nexport function resetLoopiness(map: LoopSite) {\n    GWU.xy.forRect(map.width, map.height, (x, y) => {\n        if (\n            (map.blocksPathing(x, y) || map.blocksMove(x, y)) &&\n            !map.isSecretDoor(x, y)\n        ) {\n            map.clearInLoop(x, y);\n            // cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n            // passMap[i][j] = false;\n        } else {\n            map.setInLoop(x, y);\n            // cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n            // passMap[i][j] = true;\n        }\n    });\n}\n\nexport function checkLoopiness(map: LoopSite) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v) return;\n            // const cell = map.cell(x, y);\n\n            todo[x][y] = 0;\n\n            if (!map.isInLoop(x, y)) {\n                return;\n            }\n\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n\n                if (!map.hasXY(newX, newY)) continue;\n\n                // const cell = map.cell(newX, newY);\n                if (!map.isInLoop(newX, newY)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY)) continue;\n\n                // const newCell = map.cell(newX, newY);\n                if (map.isInLoop(newX, newY)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                } else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                map.clearInLoop(x, y);\n                // cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && map.isInLoop(newX, newY)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\n\nexport function fillInnerLoopGrid(map: LoopSite, grid: GWU.grid.NumGrid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            // const cell = map.cell(x, y);\n            if (map.isInLoop(x, y)) {\n                grid[x][y] = 1;\n            } else if (x > 0 && y > 0) {\n                // const up = map.cell(x, y - 1);\n                // const left = map.cell(x - 1, y);\n                if (\n                    map.isInLoop(x, y - 1) &&\n                    map.isInLoop(x - 1, y)\n                    // up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    // left.flags.cell & Flags.Cell.IS_IN_LOOP\n                ) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\n\nexport function cleanLoopiness(map: LoopSite) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            // const cell = map.cell(i, j);\n            if (map.isInLoop(i, j)) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n\n                    if (\n                        map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !map.isInLoop(newX, newY)\n                    ) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.clearInLoop(i, j);\n                    // map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport * as Utils from './utils';\n\nimport { TileFactory, tileFactory, TileInfo } from './tile';\nimport * as ITEM from './item';\nimport * as HORDE from './horde';\nimport * as ANALYZE from './analyze';\n\nexport interface SetTileOptions {\n    superpriority?: boolean;\n    blockedByOtherLayers?: boolean;\n    blockedByActors?: boolean;\n    blockedByItems?: boolean;\n    volume?: number;\n    machine?: number;\n}\n\nexport const Flags = GWU.flag.make([\n    'CHOKEPOINT',\n    'GATE_SITE',\n    'IN_LOOP',\n    'IN_MACHINE',\n    'IN_AREA_MACHINE',\n    'IMPREGNABLE',\n]);\n\nexport interface SiteOptions {\n    rng?: GWU.rng.Random;\n    tiles?: TileFactory;\n}\n\nexport class Site implements ANALYZE.AnalysisSite {\n    _tiles: GWU.grid.NumGrid;\n    _doors: GWU.grid.NumGrid;\n    _flags: GWU.grid.NumGrid;\n    _machine: GWU.grid.NumGrid;\n    _chokeCounts: GWU.grid.NumGrid;\n\n    rng: GWU.rng.Random = GWU.rng.random;\n    tileFactory: TileFactory;\n\n    items: ITEM.ItemInstance[] = [];\n    actors: HORDE.ActorInstance[] = [];\n\n    depth: number;\n    machineCount: number;\n\n    constructor(width: number, height: number, opts: SiteOptions = {}) {\n        this.depth = 0;\n        this.machineCount = 0;\n        this.tileFactory = opts.tiles || tileFactory;\n\n        this._tiles = GWU.grid.alloc(width, height);\n        this._doors = GWU.grid.alloc(width, height);\n        this._flags = GWU.grid.alloc(width, height);\n        this._machine = GWU.grid.alloc(width, height);\n        this._chokeCounts = GWU.grid.alloc(width, height);\n\n        if (opts.rng) {\n            this.rng = opts.rng;\n        }\n    }\n\n    free() {\n        GWU.grid.free(this._tiles);\n        GWU.grid.free(this._doors);\n        GWU.grid.free(this._flags);\n        GWU.grid.free(this._machine);\n        GWU.grid.free(this._chokeCounts);\n    }\n    clear() {\n        this._tiles.fill(0);\n        this._doors.fill(0);\n        this._flags.fill(0);\n        this._machine.fill(0);\n        this._chokeCounts.fill(0);\n        // this.depth = 0;\n        this.machineCount = 0;\n    }\n    dump(fmt?: GWU.grid.GridFormat<number>) {\n        if (fmt) {\n            return this._tiles.dump(fmt);\n        }\n\n        this._tiles.dump((c) => this.tileFactory.getTile(c)!.ch || '?');\n    }\n    // drawInto(buffer: GWU.canvas.Buffer): void {\n    //     buffer.blackOut();\n    //     this.tiles.forEach((t, x, y) => {\n    //         const tile = GWM.tile.get(t);\n    //         buffer.drawSprite(x, y, tile.sprite);\n    //     });\n    // }\n\n    copy(other: Site) {\n        this.depth = other.depth;\n        this.machineCount = other.machineCount;\n\n        this._tiles.copy(other._tiles);\n        this._doors.copy(other._doors);\n        this._machine.copy(other._machine);\n        this._flags.copy(other._flags);\n        this._chokeCounts.copy(other._chokeCounts);\n\n        this.rng = other.rng;\n\n        this.items = other.items.slice();\n        this.actors = other.actors.slice();\n    }\n\n    copyTiles(other: Site, offsetX = 0, offsetY = 0) {\n        GWU.xy.forRect(this.width, this.height, (x, y) => {\n            const otherX = x - offsetX;\n            const otherY = y - offsetY;\n\n            const v = other._tiles.get(otherX, otherY);\n            if (!v) return;\n            this._tiles[x][y] = v;\n        });\n    }\n\n    setSeed(seed: number) {\n        this.rng.seed(seed);\n    }\n\n    get width() {\n        return this._tiles.width;\n    }\n    get height() {\n        return this._tiles.height;\n    }\n\n    hasXY(x: number, y: number) {\n        return this._tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x: number, y: number) {\n        return this._tiles.isBoundaryXY(x, y);\n    }\n\n    isPassable(x: number, y: number) {\n        return (\n            this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y)\n        );\n    }\n\n    isNothing(x: number, y: number) {\n        return this.hasTile(x, y, 'NOTHING');\n    }\n\n    isDiggable(x: number, y: number) {\n        return this.hasTile(x, y, 'NOTHING') || this.hasTile(x, y, 'WALL');\n    }\n\n    isProtected(_x: number, _y: number): boolean {\n        return false;\n    }\n\n    isFloor(x: number, y: number) {\n        return this.hasTile(x, y, 'FLOOR');\n    }\n\n    isDoor(x: number, y: number) {\n        return this.hasTile(x, y, 'DOOR');\n    }\n\n    isSecretDoor(x: number, y: number) {\n        return this.hasTile(x, y, 'SECRET_DOOR');\n    }\n\n    isBridge(x: number, y: number) {\n        return this.hasTile(x, y, 'BRIDGE');\n    }\n\n    isWall(x: number, y: number): boolean {\n        return this.blocksMove(x, y) && this.blocksVision(x, y);\n    }\n\n    blocksMove(x: number, y: number): boolean {\n        return this.tileFactory.getTile(this._tiles[x][y])!.blocksMove || false;\n    }\n\n    blocksDiagonal(x: number, y: number) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n\n    blocksPathing(x: number, y: number) {\n        return (\n            this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y)\n        );\n    }\n\n    blocksVision(x: number, y: number) {\n        return (\n            this.tileFactory.getTile(this._tiles[x][y])!.blocksVision || false\n        );\n    }\n\n    blocksItems(x: number, y: number) {\n        return (\n            this.blocksPathing(x, y) ||\n            this.isChokepoint(x, y) ||\n            this.isInLoop(x, y) ||\n            this.isInMachine(x, y)\n        );\n        // site.hasCellFlag(\n        //     x,\n        //     y,\n        //     GWM.flags.Cell.IS_CHOKEPOINT |\n        //         GWM.flags.Cell.IS_IN_LOOP |\n        //         GWM.flags.Cell.IS_IN_MACHINE\n        // );\n    }\n\n    blocksEffects(x: number, y: number) {\n        return this.isWall(x, y);\n    }\n\n    isStairs(x: number, y: number) {\n        return (\n            this.hasTile(x, y, 'UP_STAIRS') || this.hasTile(x, y, 'DOWN_STAIRS')\n        );\n    }\n\n    isDeep(x: number, y: number) {\n        return this.hasTile(x, y, 'DEEP');\n    }\n\n    isShallow(x: number, y: number) {\n        return this.hasTile(x, y, 'SHALLOW');\n    }\n\n    isAnyLiquid(x: number, y: number) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n\n    isSet(x: number, y: number) {\n        return (this._tiles.get(x, y) || 0) > 0;\n    }\n\n    tileBlocksMove(tile: string): boolean {\n        return this.tileFactory.blocksMove(tile);\n    }\n\n    setTile(\n        x: number,\n        y: number,\n        tile: string | number,\n        _opts: SetTileOptions = {}\n    ) {\n        // if (tile instanceof GWM.tile.Tile) {\n        //     tile = tile.index;\n        // }\n        if (!this._tiles.hasXY(x, y)) return false;\n\n        if (typeof tile === 'string') {\n            tile = this.tileFactory.tileId(tile);\n        }\n\n        // priority checks...\n\n        this._tiles[x][y] = tile;\n        return true;\n    }\n    clearTile(x: number, y: number) {\n        if (this.hasXY(x, y)) {\n            this._tiles[x][y] = 0;\n        }\n    }\n    getTile(x: number, y: number): TileInfo {\n        const id = this._tiles[x][y];\n        return this.tileFactory.getTile(id)!;\n    }\n\n    makeImpregnable(x: number, y: number): void {\n        this._flags[x][y] |= Flags.IMPREGNABLE;\n        // site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n    }\n\n    isImpregnable(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.IMPREGNABLE);\n    }\n\n    hasTile(x: number, y: number, tile: string | number): boolean {\n        if (typeof tile === 'string') {\n            tile = this.tileFactory.tileId(tile);\n        }\n        return this.hasXY(x, y) && this._tiles[x][y] == tile;\n    }\n\n    getChokeCount(x: number, y: number): number {\n        return this._chokeCounts[x][y];\n    }\n    setChokeCount(x: number, y: number, count: number): void {\n        this._chokeCounts[x][y] = count;\n    }\n\n    getFlags(x: number, y: number): number {\n        return this._flags[x][y];\n    }\n\n    setChokepoint(x: number, y: number): void {\n        this._flags[x][y] |= Flags.CHOKEPOINT;\n    }\n    isChokepoint(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.CHOKEPOINT);\n    }\n    clearChokepoint(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.CHOKEPOINT;\n    }\n\n    setGateSite(x: number, y: number): void {\n        this._flags[x][y] |= Flags.GATE_SITE;\n    }\n    isGateSite(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.GATE_SITE);\n    }\n\n    clearGateSite(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.GATE_SITE;\n    }\n\n    setInLoop(x: number, y: number): void {\n        this._flags[x][y] |= Flags.IN_LOOP;\n    }\n    isInLoop(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.IN_LOOP);\n    }\n    clearInLoop(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.IN_LOOP;\n    }\n\n    analyze(updateChokeCounts = true): void {\n        ANALYZE.analyze(this, updateChokeCounts);\n    }\n\n    snapshot(): Site {\n        const other = new Site(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    restore(snapshot: Site) {\n        this.copy(snapshot);\n    }\n\n    nextMachineId(): number {\n        this.machineCount += 1;\n        return this.machineCount;\n    }\n    setMachine(x: number, y: number, id: number, isRoom?: boolean): void {\n        this._machine[x][y] = id;\n        const flag = isRoom ? Flags.IN_MACHINE : Flags.IN_AREA_MACHINE;\n        this._flags[x][y] |= flag;\n    }\n    isAreaMachine(x: number, y: number): boolean {\n        return !!(this._machine[x][y] & Flags.IN_AREA_MACHINE);\n    }\n    isInMachine(x: number, y: number): boolean {\n        return this._machine[x][y] > 0;\n    }\n    getMachine(x: number, y: number): number {\n        return this._machine[x][y];\n    }\n\n    needsMachine(_x: number, _y: number): boolean {\n        // site.hasCellFlag(\n        //     i,\n        //     j,\n        //     GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER\n        // );\n        return false;\n    }\n\n    updateDoorDirs(): void {\n        this._doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x: number, y: number): number {\n        return this._doors[x][y];\n    }\n\n    // tileBlocksMove(tile: number): boolean {\n    //     return (\n    //         tile === WALL ||\n    //         tile === DEEP ||\n    //         tile === IMPREGNABLE ||\n    //         tile === DIG.NOTHING\n    //     );\n    // }\n\n    isOccupied(x: number, y: number): boolean {\n        return this.hasActor(x, y) || this.hasItem(x, y);\n    }\n\n    canSpawnActor(x: number, y: number, _actor: HORDE.ActorInstance): boolean {\n        // const cell = map.cell(x, y);\n        // if (actor.avoidsCell(cell)) return false;\n\n        // if (Map.isHallway(map, x, y)) {\n        //     return false;\n        // }\n        return this.isFloor(x, y);\n    }\n\n    eachActor(cb: (a: HORDE.ActorInstance) => void): void {\n        this.actors.forEach(cb);\n    }\n    addActor(x: number, y: number, a: HORDE.ActorInstance): number {\n        a.x = x;\n        a.y = y;\n        this.actors.push(a);\n        return this.actors.length;\n    }\n    getActor(i: number): HORDE.ActorInstance {\n        return this.actors[i];\n    }\n    // removeActor(a: HORDE.ActorInstance): void {\n    //     GWU.arrayDelete(this.actors, a);\n    // }\n    forbidsActor(x: number, y: number, _a: HORDE.ActorInstance): boolean {\n        return !this.isFloor(x, y);\n    }\n    hasActor(x: number, y: number): boolean {\n        return this.actors.some((a) => a.x === x && a.y === y);\n    }\n\n    eachItem(cb: (i: ITEM.ItemInstance) => void): void {\n        this.items.forEach(cb);\n    }\n    addItem(x: number, y: number, i: ITEM.ItemInstance): number {\n        i.x = x;\n        i.y = y;\n        this.items.push(i);\n        return this.items.length;\n    }\n    getItem(i: number): ITEM.ItemInstance {\n        return this.items[i];\n    }\n    // removeItem(i: ITEM.ItemInstance): void {\n    //     GWU.arrayDelete(this.items, i);\n    // }\n    forbidsItem(x: number, y: number, _i: ITEM.ItemInstance): boolean {\n        return !this.isFloor(x, y);\n    }\n    hasItem(x: number, y: number): boolean {\n        return this.items.some((i) => i.x === x && i.y === y);\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport { Site } from '../site';\nimport { Room } from '../../types';\nimport { BuildData } from '../../build/data';\nimport { BuildStep } from '../../build/buildStep';\nimport * as ITEM from '../item';\n\nexport interface Logger {\n    onDigFirstRoom(site: Site): void;\n    onRoomCandidate(room: Room, roomSite: Site): void;\n    onRoomFailed(site: Site, room: Room, roomSite: Site, error: string): void;\n    onRoomSuccess(site: Site, room: Room): void;\n\n    onLoopsAdded(site: Site): void;\n    onLakesAdded(site: Site): void;\n    onBridgesAdded(site: Site): void;\n    onStairsAdded(site: Site): void;\n\n    //\n\n    onBuildError(error: string): void;\n\n    onBlueprintPick(data: BuildData, flags: number, depth: number): void;\n\n    onBlueprintCandidates(data: BuildData): void;\n\n    onBlueprintStart(\n        data: BuildData,\n        adoptedItem: ITEM.ItemInstance | null\n    ): void;\n\n    onBlueprintInterior(data: BuildData): void;\n\n    onBlueprintFail(data: BuildData, error: string): void;\n\n    onBlueprintSuccess(data: BuildData): void;\n\n    onStepStart(\n        data: BuildData,\n        step: BuildStep,\n        item: ITEM.ItemInstance | null\n    ): void;\n\n    onStepCandidates(\n        data: BuildData,\n        step: BuildStep,\n        candidates: GWU.grid.NumGrid,\n        wantCount: number\n    ): void;\n\n    onStepInstanceSuccess(\n        data: BuildData,\n        step: BuildStep,\n        x: number,\n        y: number\n    ): void;\n\n    onStepInstanceFail(\n        data: BuildData,\n        step: BuildStep,\n        x: number,\n        y: number,\n        error: string\n    ): void;\n\n    onStepSuccess(data: BuildData, step: BuildStep): void;\n\n    onStepFail(data: BuildData, step: BuildStep, error: string): void;\n}\n\nexport class NullLogger implements Logger {\n    onDigFirstRoom(): void {}\n    onRoomCandidate(): void {}\n    onRoomFailed(): void {}\n    onRoomSuccess(): void {}\n    onLoopsAdded(): void {}\n    onLakesAdded(): void {}\n    onBridgesAdded(): void {}\n    onStairsAdded(): void {}\n\n    onBuildError(): void {}\n    onBlueprintPick(): void {}\n    onBlueprintCandidates(): void {}\n    onBlueprintStart(): void {}\n    onBlueprintInterior(): void {}\n    onBlueprintFail(): void {}\n    onBlueprintSuccess(): void {}\n    onStepStart(): void {}\n    onStepCandidates(): void {}\n    onStepInstanceSuccess(): void {}\n    onStepInstanceFail(): void {}\n    onStepSuccess(): void {}\n    onStepFail(): void {}\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport { BuildData } from './data';\nimport { Blueprint } from './blueprint';\nimport * as FEATURE from '../feature';\n// import * as ITEM from '../item';\n\nexport interface HordeStepOptions {\n    id?: string;\n    tags?: string;\n    feature?: FEATURE.FeatureConfig;\n    make?: Record<string, any>;\n}\n\nexport interface ItemStepOptions {\n    id?: string;\n    tags?: string;\n    make?: Record<string, any>;\n    feature?: FEATURE.FeatureConfig;\n}\n\nexport interface StepOptions {\n    tile: string;\n    flags: GWU.flag.FlagBase;\n    pad: number;\n    count: GWU.range.RangeBase;\n    item: string | ItemStepOptions;\n    horde: string | boolean | HordeStepOptions;\n    feature: FEATURE.FeatureConfig;\n}\n\nexport interface HordeStepInfo extends HordeStepOptions {\n    tags: string;\n    feature?: FEATURE.FeatureFn;\n}\n\nexport interface ItemStepInfo extends ItemStepOptions {\n    tags: string;\n    feature?: FEATURE.FeatureFn;\n}\n\nconst Fl = GWU.flag.fl;\n\nexport enum StepFlags {\n    BS_OUTSOURCE_ITEM_TO_MACHINE = Fl(1), // item must be adopted by another machine\n    BS_BUILD_VESTIBULE = Fl(2), // call this at the origin of a door room to create a new door guard machine there\n    BS_ADOPT_ITEM = Fl(3), // this feature will take the adopted item (be it from another machine or a previous feature)\n    BS_BUILD_AT_ORIGIN = Fl(4), // generate this feature at the room entrance\n\n    BS_PERMIT_BLOCKING = Fl(5), // permit the feature to block the map's passability (e.g. to add a locked door)\n    BS_TREAT_AS_BLOCKING = Fl(6), // treat this terrain as though it blocks, for purposes of deciding whether it can be placed there\n\n    BS_NEAR_ORIGIN = Fl(7), // feature must spawn in the rough quarter of tiles closest to the origin\n    BS_FAR_FROM_ORIGIN = Fl(8), // feature must spawn in the rough quarter of tiles farthest from the origin\n    BS_IN_VIEW_OF_ORIGIN = Fl(9), // this feature must be in view of the origin\n    BS_IN_PASSABLE_VIEW_OF_ORIGIN = Fl(10), // this feature must be in view of the origin, where \"view\" is blocked by pathing blockers\n\n    BS_HORDE_TAKES_ITEM = Fl(11), // the item associated with this feature (including if adopted) will be in possession of the horde leader that's generated\n    BS_HORDE_SLEEPING = Fl(12), // the monsters should be asleep when generated\n    BS_HORDE_FLEEING = Fl(13), // the monsters should be permanently fleeing when generated\n    BS_HORDES_DORMANT = Fl(14), // monsters are dormant, and appear when a dungeon feature with DFF_ACTIVATE_DORMANT_MONSTER spawns on their tile\n\n    BS_ITEM_IS_KEY = Fl(15),\n    BS_ITEM_IDENTIFIED = Fl(16),\n    BS_ITEM_PLAYER_AVOIDS = Fl(17),\n\n    BS_EVERYWHERE = Fl(18), // generate the feature on every tile of the machine (e.g. carpeting)\n    BS_ALTERNATIVE = Fl(19), // build only one feature that has this flag per machine; the rest are skipped\n    BS_ALTERNATIVE_2 = Fl(20), // same as BS_ALTERNATIVE, but provides for a second set of alternatives of which only one will be chosen\n\n    BS_BUILD_IN_WALLS = Fl(21), // build in an impassable tile that is adjacent to the interior\n    BS_BUILD_ANYWHERE_ON_LEVEL = Fl(22), // build anywhere on the level that is not inside the machine\n    BS_REPEAT_UNTIL_NO_PROGRESS = Fl(23), // keep trying to build this feature set until no changes are made\n    BS_IMPREGNABLE = Fl(24), // this feature's location will be immune to tunneling\n\n    BS_NO_BLOCK_ORIGIN = Fl(25), // Treat as blocking, but do not block the path to the origin\n\n    // TODO - BS_ALLOW_IN_HALLWAY instead?\n    BS_NOT_IN_HALLWAY = Fl(27), // the feature location must have a passableArcCount of <= 1\n\n    BS_ALLOW_BOUNDARY = Fl(28), // allow build it in the outermost walls of the level\n\n    BS_SKELETON_KEY = Fl(29), // if a key is generated or adopted by this feature, it will open all locks in this machine.\n    BS_KEY_DISPOSABLE = Fl(30), // if a key is generated or adopted, it will self-destruct after being used at this current location.\n}\n\nexport class BuildStep {\n    tile: string | null = null;\n    flags: number = 0;\n    pad: number = 0;\n    count: GWU.range.Range;\n    item: ItemStepInfo | null = null;\n    horde: HordeStepInfo | null = null;\n    feature: FEATURE.FeatureFn | null = null;\n    chance = 0;\n    index = -1;\n    // next: null = null;\n    // id = 'n/a';\n\n    constructor(cfg: Partial<StepOptions> = {}) {\n        this.tile = cfg.tile || null;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        if (typeof cfg.item === 'string') {\n            this.item = { tags: cfg.item };\n        } else if (cfg.item) {\n            // @ts-ignore\n            this.item = Object.assign({ tags: '' }, cfg.item);\n            if (this.item!.feature) {\n                this.item!.feature = FEATURE.make(this.item!.feature);\n            }\n        } else {\n            this.item = null;\n        }\n        if (cfg.horde) {\n            if (cfg.horde === true) {\n                this.horde = { tags: '' };\n            } else if (typeof cfg.horde === 'string') {\n                this.horde = { tags: cfg.horde };\n            } else {\n                // @ts-ignore\n                this.horde = Object.assign({ tags: '' }, cfg.horde);\n                if (this.horde!.feature) {\n                    this.horde!.feature = FEATURE.make(this.horde!.feature);\n                }\n            }\n        } else {\n            this.horde = null;\n        }\n\n        if (cfg.feature) {\n            this.feature = FEATURE.make(cfg.feature);\n        } else {\n            this.feature = null;\n        }\n\n        if (this.item && this.flags & StepFlags.BS_ADOPT_ITEM) {\n            throw new Error(\n                'Cannot have blueprint step with item and BS_ADOPT_ITEM.'\n            );\n        }\n\n        if (this.buildAtOrigin && this.count.hi > 1) {\n            throw new Error(\n                'Cannot have count > 1 for step with BS_BUILD_AT_ORIGIN.'\n            );\n        }\n        if (this.buildAtOrigin && this.repeatUntilNoProgress) {\n            throw new Error(\n                'Cannot have BS_BUILD_AT_ORIGIN and BS_REPEAT_UNTIL_NO_PROGRESS together in a build step.'\n            );\n        }\n        if (this.hordeTakesItem && !this.horde) {\n            throw new Error(\n                'Cannot have BS_HORDE_TAKES_ITEM without a horde configured.'\n            );\n        }\n    }\n\n    get allowBoundary(): boolean {\n        return !!(this.flags & StepFlags.BS_ALLOW_BOUNDARY);\n    }\n\n    get notInHallway(): boolean {\n        return !!(this.flags & StepFlags.BS_NOT_IN_HALLWAY);\n    }\n\n    get buildInWalls(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_IN_WALLS);\n    }\n\n    get buildAnywhere(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_ANYWHERE_ON_LEVEL);\n    }\n\n    get repeatUntilNoProgress(): boolean {\n        return !!(this.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS);\n    }\n\n    get permitBlocking(): boolean {\n        return !!(this.flags & StepFlags.BS_PERMIT_BLOCKING);\n    }\n\n    get treatAsBlocking(): boolean {\n        return !!(\n            this.flags &\n            (StepFlags.BS_TREAT_AS_BLOCKING | StepFlags.BS_NO_BLOCK_ORIGIN)\n        );\n    }\n\n    get noBlockOrigin(): boolean {\n        return !!(this.flags & StepFlags.BS_NO_BLOCK_ORIGIN);\n    }\n\n    get adoptItem(): boolean {\n        return !!(this.flags & StepFlags.BS_ADOPT_ITEM);\n    }\n\n    get itemIsKey(): boolean {\n        return !!(this.flags & StepFlags.BS_ITEM_IS_KEY);\n    }\n\n    get keyIsDisposable(): boolean {\n        return !!(this.flags & StepFlags.BS_KEY_DISPOSABLE);\n    }\n\n    get outsourceItem(): boolean {\n        return !!(this.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE);\n    }\n\n    get impregnable(): boolean {\n        return !!(this.flags & StepFlags.BS_IMPREGNABLE);\n    }\n\n    get buildVestibule(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_VESTIBULE);\n    }\n\n    get hordeTakesItem(): boolean {\n        return !!(this.flags & StepFlags.BS_HORDE_TAKES_ITEM);\n    }\n\n    get generateEverywhere(): boolean {\n        return !!(\n            this.flags &\n            StepFlags.BS_EVERYWHERE &\n            ~StepFlags.BS_BUILD_AT_ORIGIN\n        );\n    }\n\n    get buildAtOrigin(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_AT_ORIGIN);\n    }\n\n    get buildsInstances(): boolean {\n        return !!(\n            this.feature ||\n            this.tile ||\n            this.item ||\n            this.horde ||\n            this.adoptItem\n        );\n    }\n\n    // makeItem(data: BuildData): ITEM.ItemInfo | null {\n    //     if (!this.item) return null;\n    //     return ITEM.pick(data.depth, this.item);\n    // }\n\n    // cellIsCandidate(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     x: number,\n    //     y: number,\n    //     distanceBound: [number, number]\n    // ) {\n    //     return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    // }\n\n    // distanceBound(builder: BuildData): [number, number] {\n    //     return calcDistanceBound(builder, this);\n    // }\n\n    // updateViewMap(builder: BuildData): void {\n    //     updateViewMap(builder, this);\n    // }\n\n    // build(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     adoptedItem: GWM.item.Item | null\n    // ): boolean {\n    //     return buildStep(builder, blueprint, this, adoptedItem);\n    // }\n\n    markCandidates(\n        data: BuildData,\n        candidates: GWU.grid.NumGrid,\n        distanceBound: [number, number] = [0, 10000]\n    ): number {\n        updateViewMap(data, this);\n        const blueprint = data.blueprint;\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            const candidateType = cellIsCandidate(\n                data,\n                blueprint,\n                this,\n                i,\n                j,\n                distanceBound\n            );\n            if (candidateType === CandidateType.OK) {\n                count++;\n            }\n            return candidateType;\n        });\n        return count;\n    }\n\n    makePersonalSpace(\n        _data: BuildData,\n        x: number,\n        y: number,\n        candidates: GWU.grid.NumGrid\n    ) {\n        let count = 0;\n\n        if (this.pad < 1) return 0; // do not mark occupied\n        // or...\n        // if (this.buildEverywhere) return 0;  // do not mark occupied\n\n        for (let i = x - this.pad; i <= x + this.pad; i++) {\n            for (let j = y - this.pad; j <= y + this.pad; j++) {\n                if (candidates.hasXY(i, j)) {\n                    if (candidates[i][j] == 1) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    // builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n\n    toString() {\n        let parts = [];\n        if (this.tile) {\n            parts.push('tile: ' + this.tile);\n        }\n        if (this.feature) {\n            parts.push('effect: ' + JSON.stringify(this.feature));\n        }\n        if (this.item) {\n            parts.push('item: ' + JSON.stringify(this.item));\n        }\n        if (this.horde) {\n            parts.push('horde: ' + JSON.stringify(this.horde));\n        }\n        if (this.pad > 1) {\n            parts.push('pad: ' + this.pad);\n        }\n        if (this.count.lo > 1 || this.count.hi > 1) {\n            parts.push('count: ' + this.count.toString());\n        }\n        if (this.chance) {\n            parts.push('chance: ' + this.chance);\n        }\n        if (this.flags) {\n            parts.push('flags: ' + GWU.flag.toString(StepFlags, this.flags));\n        }\n        return '{ ' + parts.join(', ') + ' }';\n    }\n}\n\nexport function updateViewMap(builder: BuildData, buildStep: BuildStep): void {\n    if (\n        buildStep.flags &\n        (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n            StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN)\n    ) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        } else {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\n\nexport function calcDistanceBound(\n    builder: BuildData,\n    buildStep: BuildStep\n): [number, number] {\n    const distanceBound: [number, number] = [0, 10000];\n    if (buildStep.flags & StepFlags.BS_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BS_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\n\nexport enum CandidateType {\n    NOT_CANDIDATE = 0,\n    OK = 1,\n    IN_HALLWAY,\n    ON_BOUNDARY,\n    MUST_BE_ORIGIN,\n    NOT_ORIGIN,\n    OCCUPIED,\n    NOT_IN_VIEW,\n    TOO_FAR,\n    TOO_CLOSE,\n    INVALID_WALL,\n    BLOCKED,\n    FAILED,\n}\n\nexport function cellIsCandidate(\n    builder: BuildData,\n    blueprint: Blueprint,\n    buildStep: BuildStep,\n    x: number,\n    y: number,\n    distanceBound: [number, number]\n): CandidateType {\n    const site = builder.site;\n\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (\n        buildStep.notInHallway &&\n        GWU.xy.arcCount(\n            x,\n            y,\n            (i, j) => site.hasXY(i, j) && site.isPassable(i, j)\n        ) > 1\n    ) {\n        return CandidateType.IN_HALLWAY;\n    }\n\n    // if (buildStep.noBlockOrigin) {\n    //     let ok = true;\n    //     GWU.xy.eachNeighbor(\n    //         x,\n    //         y,\n    //         (nx, ny) => {\n    //             if (nx === builder.originX && ny === builder.originY) {\n    //                 ok = false;\n    //             }\n    //         },\n    //         true\n    //     );\n    //     if (!ok) return false;\n    // }\n\n    // No building along the perimeter of the level if it's prohibited.\n    if (\n        (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1) &&\n        !buildStep.allowBoundary\n    ) {\n        return CandidateType.ON_BOUNDARY;\n    }\n\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.buildAtOrigin) {\n        if (x == builder.originX && y == builder.originY)\n            return CandidateType.OK;\n        return CandidateType.MUST_BE_ORIGIN;\n    } else if (\n        blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY\n    ) {\n        return CandidateType.NOT_ORIGIN;\n    }\n\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return CandidateType.OCCUPIED;\n    }\n\n    // Must be in the viewmap if the appropriate flag is set.\n    if (\n        buildStep.flags &\n            (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n                StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]\n    ) {\n        return CandidateType.NOT_IN_VIEW;\n    }\n\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (!builder.distanceMap.hasXY(i, j)) return;\n                if (\n                    !site.blocksPathing(i, j) &&\n                    distance > builder.distanceMap.getDistance(i, j) + 1\n                ) {\n                    distance = builder.distanceMap.getDistance(i, j) + 1;\n                }\n            },\n            true\n        );\n    } else {\n        distance = builder.distanceMap.getDistance(x, y);\n    }\n\n    if (distance > distanceBound[1]) return CandidateType.TOO_FAR; // distance exceeds max\n    if (distance < distanceBound[0]) return CandidateType.TOO_CLOSE;\n\n    if (buildStep.buildInWalls) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (\n            !builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)\n        ) {\n            let ok = false;\n            let failed = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (newX, newY) => {\n                    if (failed) return;\n                    if (!site.hasXY(newX, newY)) return;\n                    if (\n                        !builder.interior[newX][newY] &&\n                        !buildStep.buildAnywhere\n                    ) {\n                        return;\n                    }\n                    // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                    const neighborMachine = site.getMachine(newX, newY);\n                    if (\n                        !site.blocksPathing(newX, newY) &&\n                        (!neighborMachine ||\n                            neighborMachine == builder.machineNumber) &&\n                        !(newX == builder.originX && newY == builder.originY)\n                    ) {\n                        if (\n                            buildStep.notInHallway &&\n                            GWU.xy.arcCount(\n                                newX,\n                                newY,\n                                (i, j) =>\n                                    site.hasXY(i, j) && site.isPassable(i, j)\n                            ) > 1\n                        ) {\n                            // return CandidateType.IN_HALLWAY;\n                            failed = true;\n                            ok = false;\n                        } else {\n                            ok = true;\n                        }\n                    }\n                },\n                true\n            );\n            return ok ? CandidateType.OK : CandidateType.INVALID_WALL;\n        }\n        return CandidateType.NOT_CANDIDATE;\n    } else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return CandidateType.INVALID_WALL;\n    } else if (buildStep.buildAnywhere) {\n        if (buildStep.item && site.blocksItems(x, y)) {\n            return CandidateType.BLOCKED;\n        } else {\n            return CandidateType.OK;\n        }\n    } else if (builder.interior[x][y]) {\n        return CandidateType.OK;\n    }\n    return CandidateType.FAILED;\n}\n\n// export function buildStep(\n//     builder: BuildData,\n//     blueprint: Blueprint,\n//     buildStep: BuildStep,\n//     adoptedItem: GWM.item.Item | null\n// ): boolean {\n//     let wantCount = 0;\n//     let builtCount = 0;\n\n//     const site = builder.site;\n\n//     const candidates = GWU.grid.alloc(site.width, site.height);\n\n//     // Figure out the distance bounds.\n//     const distanceBound = calcDistanceBound(builder, buildStep);\n//     buildStep.updateViewMap(builder);\n\n//     // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n\n//     // Make a master map of candidate locations for this feature.\n//     let qualifyingTileCount = markCandidates(\n//         candidates,\n//         builder,\n//         blueprint,\n//         buildStep,\n//         distanceBound\n//     );\n\n//     if (!buildStep.generateEverywhere) {\n//         wantCount = buildStep.count.value();\n//     }\n\n//     if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n//         console.log(\n//             ' - Only %s qualifying tiles - want at least %s.',\n//             qualifyingTileCount,\n//             buildStep.count.lo\n//         );\n//         GWU.grid.free(candidates);\n//         return false;\n//     }\n\n//     let x = 0,\n//         y = 0;\n\n//     let success = true;\n//     let didSomething = false;\n\n//     do {\n//         success = true;\n//         // Find a location for the feature.\n//         if (buildStep.buildAtOrigin) {\n//             // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n//             x = builder.originX;\n//             y = builder.originY;\n//         } else {\n//             // Pick our candidate location randomly, and also strike it from\n//             // the candidates map so that subsequent instances of this same feature can't choose it.\n//             [x, y] = site.rng.matchingLoc(\n//                 candidates.width,\n//                 candidates.height,\n//                 (x, y) => candidates[x][y] > 0\n//             );\n//         }\n//         // Don't waste time trying the same place again whether or not this attempt succeeds.\n//         candidates[x][y] = 0;\n//         qualifyingTileCount--;\n\n//         // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n//         if (buildStep.effect) {\n//             success = site.fireEffect(buildStep.effect, x, y);\n//             didSomething = success;\n//         }\n\n//         // Now try to place the terrain tile, if any.\n//         if (success && buildStep.tile !== -1) {\n//             const tile = GWM.tile.get(buildStep.tile);\n//             if (\n//                 !(buildStep.flags & StepFlags.BS_PERMIT_BLOCKING) &&\n//                 (tile.blocksMove() ||\n//                     buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING)\n//             ) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y, {\n//                     machine: site.machineCount,\n//                 });\n//             }\n//             if (success) {\n//                 success = site.setTile(x, y, tile);\n//                 didSomething = didSomething || success;\n//             }\n//         }\n\n//         // Generate an actor, if necessary\n\n//         // Generate an item, if necessary\n//         if (success && buildStep.item) {\n//             const item = site.makeRandomItem(buildStep.item);\n//             if (!item) {\n//                 success = false;\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_ITEM_IS_KEY) {\n//                 item.key = GWM.entity.makeKeyInfo(\n//                     x,\n//                     y,\n//                     !!(buildStep.flags & StepFlags.BS_KEY_DISPOSABLE)\n//                 );\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE) {\n//                 success = builder.buildRandom(\n//                     Flags.BP_ADOPT_ITEM,\n//                     -1,\n//                     -1,\n//                     item\n//                 );\n//                 if (success) {\n//                     didSomething = true;\n//                 }\n//             } else {\n//                 success = site.addItem(x, y, item);\n//                 didSomething = didSomething || success;\n//             }\n//         } else if (success && buildStep.flags & StepFlags.BS_ADOPT_ITEM) {\n//             // adopt item if necessary\n//             if (!adoptedItem) {\n//                 GWU.grid.free(candidates);\n//                 throw new Error(\n//                     'Failed to build blueprint because there is no adopted item.'\n//                 );\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y);\n//             }\n\n//             if (success) {\n//                 success = site.addItem(x, y, adoptedItem);\n//                 if (success) {\n//                     didSomething = true;\n//                 } else {\n//                     console.log('- failed to add item', x, y);\n//                 }\n//             } else {\n//                 // console.log('- blocks map', x, y);\n//             }\n//         }\n\n//         if (success && didSomething) {\n//             // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n//             qualifyingTileCount -= makePersonalSpace(\n//                 builder,\n//                 x,\n//                 y,\n//                 candidates,\n//                 buildStep.pad\n//             );\n//             builtCount++; // we've placed an instance\n\n//             // Mark the feature location as part of the machine, in case it is not already inside of it.\n//             if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n//                 site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n//             }\n\n//             // Mark the feature location as impregnable if requested.\n//             if (buildStep.flags & StepFlags.BS_IMPREGNABLE) {\n//                 site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n//             }\n//         }\n\n//         // Finished with this instance!\n//     } while (\n//         qualifyingTileCount > 0 &&\n//         (buildStep.generateEverywhere ||\n//             builtCount < wantCount ||\n//             buildStep.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS)\n//     );\n\n//     if (success && buildStep.flags & StepFlags.BS_BUILD_VESTIBULE) {\n//         // Generate a door guard machine.\n//         // Try to create a sub-machine that qualifies.\n\n//         success = builder.buildRandom(\n//             Flags.BP_VESTIBULE,\n//             builder.originX,\n//             builder.originY\n//         );\n\n//         if (!success) {\n//             // console.log(\n//             //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n//             // );\n//             // failure! abort!\n//             GWU.grid.free(candidates);\n//             return false;\n//         }\n//         ++builtCount;\n//     }\n\n//     //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n//     //DEBUG logBuffer(candidates);\n\n//     success = builtCount > 0;\n\n//     GWU.grid.free(candidates);\n//     return success;\n// }\n","import * as GWU from 'gw-utils';\nimport { Room } from '../../types';\nimport { Site } from '../site';\nimport { Logger } from './logger';\nimport { BuildData } from '../../build/data';\nimport { BuildStep, StepFlags } from '../../build/buildStep';\n\nexport class ConsoleLogger implements Logger {\n    onDigFirstRoom(site: Site) {\n        console.group('dig first room');\n        site.dump();\n        console.groupEnd();\n    }\n\n    onRoomCandidate(room: Room, roomSite: Site): void {\n        console.group('room candidate: ' + room.toString());\n        roomSite.dump();\n        console.groupEnd();\n    }\n\n    onRoomFailed(\n        _site: Site,\n        _room: Room,\n        _roomSite: Site,\n        error: string\n    ): void {\n        console.log('Room Failed - ', error);\n    }\n\n    onRoomSuccess(site: Site, room: Room): void {\n        console.group('Added Room - ' + room.toString());\n        site.dump();\n        console.groupEnd();\n    }\n\n    onLoopsAdded(_site: Site): void {\n        console.log('loops added');\n    }\n    onLakesAdded(_site: Site): void {\n        console.log('lakes added');\n    }\n    onBridgesAdded(_site: Site): void {\n        console.log('bridges added');\n    }\n    onStairsAdded(_site: Site): void {\n        console.log('stairs added');\n    }\n\n    //\n\n    onBuildError(error: string) {\n        console.log(`onBuildError - error: ${error}`);\n    }\n\n    onBlueprintPick(data: BuildData, flags: number, depth: number) {\n        console.log(\n            `onBlueprintPick - ${\n                data.blueprint.id\n            }, depth = ${depth}, matchingFlags = ${GWU.flag.toString(\n                StepFlags,\n                flags\n            )}`\n        );\n    }\n\n    onBlueprintCandidates(data: BuildData) {\n        const label = `onBlueprintCandidates - ${data.blueprint.id}`;\n        console.group(label);\n        data.candidates.dump();\n        console.groupEnd();\n    }\n\n    onBlueprintStart(data: BuildData) {\n        console.group(\n            `onBlueprintStart - ${data.blueprint.id} @ ${data.originX},${\n                data.originY\n            } : stepCount: ${\n                data.blueprint.steps.length\n            }, size: [${data.blueprint.size.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                data.blueprint.flags\n            )}`\n        );\n    }\n\n    onBlueprintInterior(data: BuildData) {\n        console.group(`onBlueprintInterior - ${data.blueprint.id}`);\n        data.interior.dump();\n        console.groupEnd();\n    }\n\n    onBlueprintFail(data: BuildData, error: string) {\n        console.log(\n            `onBlueprintFail - ${data.blueprint.id} @ ${data.originX},${data.originY} : error: ${error}`\n        );\n        console.groupEnd();\n    }\n\n    onBlueprintSuccess(data: BuildData) {\n        console.log(\n            `onBlueprintSuccess - ${data.blueprint.id} @ ${data.originX},${data.originY}`\n        );\n        console.groupEnd();\n    }\n\n    onStepStart(data: BuildData, step: BuildStep) {\n        console.group(\n            `onStepStart - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : count: [${step.count.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                step.flags\n            )}`\n        );\n        console.log(step.toString());\n    }\n\n    onStepCandidates(\n        data: BuildData,\n        step: BuildStep,\n        candidates: GWU.grid.NumGrid,\n        wantCount: number\n    ) {\n        const haveCount = candidates.count((v) => v == 1);\n        console.log(\n            `onStepCandidates - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : wantCount: ${wantCount}, have: ${haveCount}`\n        );\n        candidates.dump();\n        if (haveCount == 0) {\n            console.log('No candidates - check interior');\n            data.interior.dump();\n        }\n    }\n\n    onStepInstanceSuccess(\n        _data: BuildData,\n        _step: BuildStep,\n        x: number,\n        y: number\n    ) {\n        console.log(`onStepInstance @ ${x},${y}`);\n    }\n\n    onStepInstanceFail(\n        _data: BuildData,\n        _step: BuildStep,\n        x: number,\n        y: number,\n        error: string\n    ) {\n        console.log(`onStepInstanceFail @ ${x},${y} - error: ${error}`);\n    }\n\n    onStepSuccess(data: BuildData, step: BuildStep) {\n        console.log(\n            `onStepSuccess - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : count: [${step.count.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                step.flags\n            )}`\n        );\n        console.groupEnd();\n    }\n\n    onStepFail(data: BuildData, step: BuildStep, error: string) {\n        console.log(\n            `onStepFail - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : error : ${error}`\n        );\n        console.groupEnd();\n    }\n}\n","import * as GWU from 'gw-utils';\n\nexport type TileId = string;\n\nexport interface RoomConfig {\n    // fn?: RoomFn;\n    // door?: boolean | number;\n    // doorChance?: number;\n    tile?: TileId;\n    [x: string]: any;\n}\n\n// export type RoomFn = (\n//     config: RoomConfig,\n//     grid: GWU.grid.NumGrid\n// ) => Room | RoomConfig | null;\n\n// export interface RoomData extends RoomConfig {\n//     fn: RoomFn;\n//     id: string;\n// }\n\n// export type HallFn = (\n//     opts: HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: Room\n// ) => Hall | any | null;\n// export interface HallConfig {\n//     fn?: HallFn;\n//     chance?: number;\n//     length?: GWU.range.RangeBase | [GWU.range.RangeBase, GWU.range.RangeBase];\n//     width?: GWU.range.RangeBase;\n//     tile?: number;\n//     [x: string]: any;\n// }\n\n// export interface HallData extends HallConfig {\n//     fn: HallFn;\n//     id: string;\n// }\n\n// export interface DigConfig {\n//     room: string | any;\n//     hall?: string | HallConfig | boolean;\n//     tries?: number;\n//     locs?: GWU.xy.Loc[];\n//     loc?: GWU.xy.Loc;\n//     door?: number | boolean;\n// }\n\nexport type DigFn = (x: number, y: number, tile: number) => any;\n\nexport class Hall extends GWU.xy.Bounds {\n    public doors: GWU.xy.Loc[] = [];\n\n    constructor(x: number, y: number, width: number, height: number) {\n        super(x, y, width, height);\n    }\n\n    translate(dx: number, dy: number) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d) return;\n                if (d[0] < 0 || d[1] < 0) return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\n\nexport function makeHall(\n    loc: GWU.xy.Loc,\n    dirIndex: number,\n    hallLength: number,\n    hallWidth = 1\n) {\n    const dir = GWU.xy.DIRS[dirIndex];\n    const x = Math.min(loc[0], loc[0] + dir[0] * (hallLength - 1));\n    const y = Math.min(loc[1], loc[1] + dir[1] * (hallLength - 1));\n    const width = Math.abs(dir[0] * hallLength) || hallWidth;\n    const height = Math.abs(dir[1] * hallLength) || hallWidth;\n    return new Hall(x, y, width, height);\n}\n\nexport class Room extends GWU.xy.Bounds {\n    public doors: GWU.xy.Loc[] = [];\n    public hall: Hall | null = null;\n\n    constructor(x: number, y: number, width: number, height: number) {\n        super(x, y, width, height);\n    }\n\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n\n    translate(dx: number, dy: number) {\n        this.x += dx;\n        this.y += dy;\n\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d) return;\n                if (d[0] < 0 || d[1] < 0) return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\n\nexport function checkConfig(\n    config: TYPES.RoomConfig,\n    expected: TYPES.RoomConfig = {}\n) {\n    config = config || {};\n    expected = expected || {};\n\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect as TYPES.TileId;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error(\n                    'Missing required config for room digger: ' + key\n                );\n            }\n        } else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        } else if (Array.isArray(expect)) {\n            have = have || expect;\n        } else {\n            // just set the value\n            have = have || expect;\n        }\n\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n\n    return config;\n}\n\nexport abstract class RoomDigger {\n    public options: TYPES.RoomConfig = {};\n    public doors: GWU.xy.Loc[] = [];\n\n    constructor(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        this._setOptions(config, expected);\n    }\n\n    _setOptions(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        this.options = checkConfig(config, expected);\n    }\n\n    create(site: SITE.Site): TYPES.Room {\n        const result = this.carve(site);\n        if (result) {\n            if (\n                !result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)\n            ) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n\n    abstract carve(site: SITE.Site): TYPES.Room;\n}\n\nexport var rooms: Record<string, RoomDigger> = {};\n\nexport class ChoiceRoom extends RoomDigger {\n    // @ts-ignore\n    public randomRoom: (rng: GWU.rng.Random) => string;\n\n    constructor(config: TYPES.RoomConfig = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n\n    _setOptions(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = (rng) => rng.item(choices);\n        } else if (typeof choices == 'object') {\n            this.randomRoom = (rng) =>\n                rng.weighted(choices as GWU.rng.WeightedObject);\n        } else {\n            throw new Error(\n                'Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }'\n            );\n        }\n    }\n\n    carve(site: SITE.Site) {\n        let id = this.randomRoom(site.rng);\n        const room = rooms[id];\n        if (!room) {\n            GWU.ERROR('Missing room digger choice: ' + id);\n        }\n\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\n\nexport function choiceRoom(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\n\nexport class Cavern extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n\n        const blob = new GWU.blob.Blob({\n            rng: site.rng,\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n\n        const bounds = blob.carve(\n            blobGrid.width,\n            blobGrid.height,\n            (x, y) => (blobGrid[x][y] = 1)\n        );\n\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v) site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\n\nexport function cavern(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        const room = new TYPES.Room(\n            Math.min(roomX, roomX2),\n            Math.min(roomY, roomY2),\n            Math.max(roomWidth, roomWidth2),\n            Math.max(roomHeight, roomHeight2)\n        );\n\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\n\nexport function brogueEntrance(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\n\nexport class Cross extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const roomWidth = width;\n        const roomWidth2 = Math.max(\n            3,\n            Math.floor((width * site.rng.range(25, 75)) / 100)\n        ); // [4,20]\n        const roomHeight = Math.max(\n            3,\n            Math.floor((height * site.rng.range(25, 75)) / 100)\n        ); // [2,5]\n        const roomHeight2 = height;\n\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 =\n            roomX + site.rng.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY =\n            roomY2 +\n            site.rng.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        return new TYPES.Room(\n            roomX,\n            roomY2,\n            Math.max(roomWidth, roomWidth2),\n            Math.max(roomHeight, roomHeight2)\n        );\n    }\n}\n\nexport function cross(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\n\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        let minorWidth = Math.max(\n            3,\n            Math.floor((width * site.rng.range(25, 50)) / 100)\n        ); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(\n            3,\n            Math.floor((height * site.rng.range(25, 50)) / 100)\n        ); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        return new TYPES.Room(\n            Math.min(x, x2),\n            Math.min(y, y2),\n            Math.max(width, minorWidth),\n            Math.max(height, minorHeight)\n        );\n    }\n}\n\nexport function symmetricalCross(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\n\nexport class Rectangular extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\n\nexport function rectangular(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\n\nexport class Circular extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const radius = this.options.radius.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n\n        return new TYPES.Room(\n            x - radius,\n            y - radius,\n            radius * 2 + 1,\n            radius * 2 + 1\n        );\n    }\n}\n\nexport function circular(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\n\nexport class BrogueDonut extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const radius = this.options.radius.value(site.rng);\n        const ringMinWidth = this.options.ringMinWidth.value(site.rng);\n        const holeMinSize = this.options.holeMinSize.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n\n        if (\n            radius > ringMinWidth + holeMinSize &&\n            site.rng.chance(this.options.holeChance.value(site.rng))\n        ) {\n            GWU.xy.forCircle(\n                x,\n                y,\n                site.rng.range(holeMinSize, radius - holeMinSize),\n                (x, y) => site.clearTile(x, y)\n            );\n        }\n\n        return new TYPES.Room(\n            x - radius,\n            y - radius,\n            radius * 2 + 1,\n            radius * 2 + 1\n        );\n    }\n}\n\nexport function brogueDonut(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\n\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value(site.rng);\n\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n\n        for (i = 0; i < chunkCount; ) {\n            x = site.rng.range(minX, maxX);\n            y = site.rng.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX) continue;\n                if (x + 2 > maxX) continue;\n                if (y - 2 < minY) continue;\n                if (y + 2 > maxY) continue;\n\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\n\nexport function chunkyRoom(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\n\nexport function install(id: string, room: RoomDigger) {\n    rooms[id] = room;\n    return room;\n}\n\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\n\nconst DIRS = GWU.xy.DIRS;\n\nexport function isDoorLoc(site: SITE.Site, loc: GWU.xy.Loc, dir: GWU.xy.Loc) {\n    if (!site.hasXY(loc[0], loc[1])) return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1])) return false; // must be a wall/diggable space\n\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1])) return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1])) return false; // must have floor in opposite direction\n\n    return true;\n}\n\nexport type WidthBase = number | string | number[] | { [key: number]: number };\n\nexport function pickWidth(width: WidthBase, rng?: GWU.rng.Random): number {\n    return GWU.utils.clamp(_pickWidth(width, rng), 1, 3);\n}\n\nfunction _pickWidth(width: WidthBase, rng?: GWU.rng.Random): number {\n    if (!width) return 1;\n    if (typeof width === 'number') return width;\n\n    rng = rng ?? GWU.rng.random;\n\n    if (Array.isArray(width)) {\n        width = rng.weighted(width) + 1;\n    } else if (typeof width === 'string') {\n        width = GWU.range.make(width).value(rng);\n    } else if (width instanceof GWU.range.Range) {\n        width = width.value(rng);\n    } else {\n        const weights = width as GWU.types.WeightedObject;\n        width = Number.parseInt(rng.weighted(weights) as string);\n    }\n    return width;\n}\n\nexport function pickLength(\n    dir: number,\n    lengths: [GWU.range.Range, GWU.range.Range],\n    rng?: GWU.rng.Random\n): number {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value(rng);\n    } else {\n        return lengths[0].value(rng);\n    }\n}\n\nexport function pickHallDirection(\n    site: SITE.Site,\n    doors: GWU.xy.Loc[],\n    lengths: [GWU.range.Range, GWU.range.Range]\n): number {\n    // Pick a direction.\n    let dir: number = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = site.rng.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\n\nexport function pickHallExits(\n    site: SITE.Site,\n    x: number,\n    y: number,\n    dir: number,\n    obliqueChance: number\n) {\n    let newX: number, newY: number;\n    const allowObliqueHallwayExit = site.rng.chance(obliqueChance);\n    const hallDoors: GWU.xy.Loc[] = [\n        // [-1, -1],\n        // [-1, -1],\n        // [-1, -1],\n        // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n\n        if (\n            (dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)\n        ) {\n            // do nothing\n        } else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\n\n// export function digWide(\n//     opts: TYPES.HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: TYPES.Room\n// ): TYPES.Hall | TYPES.HallConfig | null {\n//     opts = opts || {};\n//     if (!opts.width) {\n//         opts.width = 2;\n//     }\n//     if (!grid) {\n//         return opts;\n//     }\n\n//     const dir = pickHallDirection(grid, room, opts);\n//     if (dir === GWU.xy.NO_DIRECTION) return null;\n\n//     const length = pickLength(dir, opts.lengths);\n//     const width = pickWidth(opts) || 2;\n\n//     const door = room.doors[dir];\n//     const tile = opts.tile || SITE.FLOOR;\n//     const hallDoors: GWU.xy.Loc[] = [];\n\n//     let x0: number, y0: number;\n//     let hall;\n//     if (dir === GWU.utils.UP) {\n//         x0 = GWU.clamp(door[0], room.x, room.x + room.width - width);\n//         y0 = door[1] - length + 1;\n\n//         for (let x = x0; x < x0 + width; ++x) {\n//             for (let y = y0; y < y0 + length; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0, y0 - 1];\n//         hall = new TYPES.Hall([x0, door[1]], dir, length, 2);\n//     } else if (dir === GWU.utils.DOWN) {\n//         x0 = GWU.clamp(door[0], room.x, room.x + room.width - width);\n//         y0 = door[1] + length - 1;\n\n//         for (let x = x0; x < x0 + width; ++x) {\n//             for (let y = y0; y > y0 - length; --y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0, y0 + 1];\n//         hall = new TYPES.Hall([x0, door[1]], dir, length, 2);\n//     } else if (dir === GWU.utils.LEFT) {\n//         x0 = door[0] - length + 1;\n//         y0 = GWU.clamp(door[1], room.y, room.y + room.height - width);\n\n//         for (let x = x0; x < x0 + length; ++x) {\n//             for (let y = y0; y < y0 + width; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0 - 1, y0];\n//         hall = new TYPES.Hall([door[0], y0], dir, length, 2);\n//     } else {\n//         //if (dir === GWU.utils.RIGHT) {\n//         x0 = door[0] + length - 1;\n//         y0 = GWU.clamp(door[1], room.y, room.y + room.height - width);\n\n//         for (let x = x0; x > x0 - length; --x) {\n//             for (let y = y0; y < y0 + width; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0 + 1, y0];\n//         hall = new TYPES.Hall([door[0], y0], dir, length, width);\n//     }\n\n//     hall.doors = hallDoors;\n//     hall.width = width;\n//     return hall;\n// }\n\n// export function dig(\n//     opts: TYPES.HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: TYPES.Room\n// ): TYPES.Hall | TYPES.HallConfig | null {\n//     opts = opts || {};\n//     opts.width = 1;\n//     if (!grid) {\n//         return opts;\n//     }\n\n//     const dir = pickHallDirection(grid, room, opts);\n//     if (dir === GWU.xy.NO_DIRECTION) return null;\n\n//     const length = pickLength(dir, opts.length);\n\n//     const door = room.doors[dir];\n//     const DIR = DIRS[dir];\n\n//     let x = door[0];\n//     let y = door[1];\n\n//     const tile = opts.tile || SITE.FLOOR;\n//     for (let i = 0; i < length; i++) {\n//         grid[x][y] = tile;\n//         x += DIR[0];\n//         y += DIR[1];\n//     }\n\n//     x -= DIR[0];\n//     y -= DIR[1];\n\n//     const hall = new TYPES.Hall(door, dir, length);\n//     hall.doors = pickHallExits(grid, x, y, dir, opts);\n//     return hall;\n// }\n\nexport interface HallOptions {\n    width: number | string;\n    length: number | string | number[] | string[];\n    tile: TYPES.TileId;\n    obliqueChance: number;\n    chance: number;\n}\n\nexport interface HallConfig {\n    width: WidthBase;\n    length: [GWU.range.Range, GWU.range.Range];\n    tile: string;\n    obliqueChance: number;\n    chance: number;\n}\n\nexport class HallDigger {\n    public config: HallConfig = {\n        width: 1,\n        length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n        tile: 'FLOOR',\n        obliqueChance: 15,\n        chance: 100,\n    };\n\n    constructor(options: Partial<HallOptions> = {}) {\n        this._setOptions(options);\n    }\n\n    _setOptions(options: Partial<HallOptions> = {}) {\n        if (options.width) {\n            this.config.width = options.width;\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n\n    create(site: SITE.Site, doors: GWU.xy.Loc[] = []): TYPES.Hall | null {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n\n        if (!site.rng.chance(this.config.chance)) return null;\n\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION) return null;\n        if (!doors[dir]) return null;\n\n        const width = pickWidth(this.config.width, site.rng);\n        const length = pickLength(dir, this.config.length, site.rng);\n        const doorLoc = doors[dir];\n\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        } else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n\n    _digLine(\n        site: SITE.Site,\n        door: GWU.xy.Loc,\n        dir: GWU.xy.Loc,\n        length: number\n    ) {\n        let x = door[0];\n        let y = door[1];\n\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n\n        x -= dir[0];\n        y -= dir[1];\n\n        return [x, y];\n    }\n\n    dig(site: SITE.Site, dir: number, door: GWU.xy.Loc, length: number) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = TYPES.makeHall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n\n    digWide(\n        site: SITE.Site,\n        dir: number,\n        door: GWU.xy.Loc,\n        length: number,\n        width: number\n    ) {\n        const DIR = GWU.xy.DIRS[dir];\n\n        const lower: GWU.xy.Loc = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher: GWU.xy.Loc = [door[0] + DIR[1], door[1] + DIR[0]];\n\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n\n        const hall = TYPES.makeHall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        // hall.width = width;\n        return hall;\n    }\n}\n\nexport function dig(\n    config: Partial<HallOptions>,\n    site: SITE.Site,\n    doors: GWU.xy.Loc[]\n) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\n\nexport var halls: Record<string, HallDigger> = {};\n\nexport function install(id: string, hall: HallDigger) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\n\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nimport * as TYPES from './types';\n\nexport interface LakeOpts {\n    height: number;\n    width: number;\n    minSize: number;\n    tries: number;\n    count: number;\n    canDisrupt: boolean;\n    wreathTile: TYPES.TileId;\n    wreathChance: number;\n    wreathSize: number;\n    tile: TYPES.TileId;\n}\n\nexport class Lakes {\n    options: LakeOpts = {\n        height: 15,\n        width: 30,\n        minSize: 5,\n        tries: 20,\n        count: 1,\n        canDisrupt: false,\n        wreathTile: 'SHALLOW',\n        wreathChance: 50,\n        wreathSize: 1,\n        tile: 'DEEP',\n    };\n\n    constructor(options: Partial<LakeOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site): number {\n        let i, j, k;\n        let x: number, y: number;\n        let lakeMaxHeight,\n            lakeMaxWidth,\n            lakeMinSize,\n            tries,\n            maxCount,\n            canDisrupt;\n        let count = 0;\n\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = site.rng.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || 'SHALLOW';\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || 'DEEP';\n\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n\n            const width =\n                Math.round(\n                    ((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                        maxCount\n                ) + lakeMinSize;\n            const height =\n                Math.round(\n                    ((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                        maxCount\n                ) + lakeMinSize;\n\n            const blob = new GWU.blob.Blob({\n                rng: site.rng,\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                // birthParameters: 'ffffftttt',\n                // survivalParameters: 'ffffttttt',\n            });\n\n            lakeGrid.fill(0);\n            const bounds = blob.carve(\n                lakeGrid.width,\n                lakeGrid.height,\n                (x, y) => (lakeGrid[x][y] = 1)\n            );\n\n            // console.log('LAKE ATTEMPT');\n            // lakeGrid.dump();\n\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = site.rng.range(\n                    1 - bounds.x,\n                    lakeGrid.width - bounds.width - bounds.x - 2\n                );\n                y = site.rng.range(\n                    1 - bounds.y,\n                    lakeGrid.height - bounds.height - bounds.y - 2\n                );\n\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n\n                                if (hasWreath) {\n                                    // if (site.hasTile(sx, sy, wreathTile)) {\n                                    //     site.clearTile(sx, sy, wreathTile);\n                                    // }\n                                    GWU.xy.forCircle(\n                                        sx,\n                                        sy,\n                                        wreathSize,\n                                        (i2, j2) => {\n                                            if (\n                                                site.isPassable(i2, j2) &&\n                                                !lakeGrid[i2 - x][j2 - y]\n                                                // SITE.isFloor(map, i, j) ||\n                                                // SITE.isDoor(map, i, j)\n                                            ) {\n                                                site.setTile(\n                                                    i2,\n                                                    j2,\n                                                    wreathTile\n                                                );\n                                            }\n                                        }\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n\n            if (success) {\n                ++count;\n                attempts = 0;\n            } else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n\n    isDisruptedBy(\n        site: SITE.Site,\n        lakeGrid: GWU.grid.NumGrid,\n        lakeToMapX = 0,\n        lakeToMapY = 0\n    ) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            } else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    } else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nexport interface BridgeOpts {\n    minDistance: number;\n    maxLength: number;\n}\n\nexport class Bridges {\n    public options: BridgeOpts = {\n        minDistance: 20,\n        maxLength: 5,\n    };\n\n    constructor(options: Partial<BridgeOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site): number {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n\n        const pathGrid = new GWU.path.DijkstraMap();\n        // const costGrid = GWU.grid.alloc(site.width, site.height);\n\n        const dirCoords: [number, number][] = [\n            [1, 0],\n            [0, 1],\n        ];\n\n        const seq = site.rng.sequence(site.width * site.height);\n\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n\n            if (\n                // map.hasXY(x, y) &&\n                // map.get(x, y) &&\n                site.isPassable(x, y) &&\n                (site.isBridge(x, y) || !site.isAnyLiquid(x, y))\n            ) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n\n                    // if (!map.hasXY(newX, newY)) continue;\n\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (\n                        site.isAnyLiquid(newX, newY) &&\n                        !site.isBridge(newX, newY)\n                    ) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (\n                                site.isBridge(newX, newY) ||\n                                !site.isAnyLiquid(newX, newY)\n                            ) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (\n                        // map.get(newX, newY) &&\n                        site.isPassable(newX, newY) &&\n                        j < maxLength\n                    ) {\n                        SITE.computeDistanceMap(\n                            site,\n                            pathGrid,\n                            newX,\n                            newY,\n                            999\n                        );\n\n                        if (\n                            pathGrid.getDistance(x, y) > minDistance &&\n                            pathGrid.getDistance(x, y) < GWU.path.BLOCKED\n                        ) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n\n                            while (x !== newX || y !== newY) {\n                                if (\n                                    this.isBridgeCandidate(\n                                        site,\n                                        x,\n                                        y,\n                                        bridgeDir\n                                    )\n                                ) {\n                                    site.setTile(x, y, 'BRIDGE'); // map[x][y] = SITE.BRIDGE;\n                                    // costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                } else {\n                                    site.setTile(x, y, 'FLOOR'); // map[x][y] = SITE.FLOOR;\n                                    // costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // GWU.grid.free(costGrid);\n        return count;\n    }\n\n    isBridgeCandidate(\n        site: SITE.Site,\n        x: number,\n        y: number,\n        _bridgeDir: [number, number]\n    ) {\n        if (site.isBridge(x, y)) return true;\n        if (!site.isAnyLiquid(x, y)) return false;\n        // if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0])) return false;\n        // if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0])) return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as TYPES from './types';\nimport * as SITE from './site';\n\nexport interface StairOpts {\n    up: boolean | GWU.xy.Loc;\n    down: boolean | GWU.xy.Loc;\n    minDistance: number;\n\n    start: boolean | string | GWU.xy.Loc;\n\n    upTile: TYPES.TileId;\n    downTile: TYPES.TileId;\n    wall: TYPES.TileId;\n}\n\nexport class Stairs {\n    public options: StairOpts = {\n        up: true,\n        down: true,\n        minDistance: 10,\n        start: false,\n        upTile: 'UP_STAIRS',\n        downTile: 'DOWN_STAIRS',\n        wall: 'IMPREGNABLE',\n    };\n\n    constructor(options: Partial<StairOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance =\n            this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n\n        const locations: Record<string, GWU.xy.Loc> = {};\n        let upLoc: GWU.xy.Loc | null = null;\n        let downLoc: GWU.xy.Loc | null = null;\n\n        const isValidLoc = this.isStairXY.bind(this, site);\n\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    isValidLoc\n                );\n            } else {\n                start = site.rng.matchingLocNear(\n                    GWU.xy.x(start),\n                    GWU.xy.y(start),\n                    isValidLoc\n                );\n            }\n            locations.start = start;\n        }\n\n        if (\n            Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)\n        ) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(\n                GWU.xy.x(up),\n                GWU.xy.y(up),\n                isValidLoc\n            );\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(\n                GWU.xy.x(down),\n                GWU.xy.y(down),\n                isValidLoc\n            );\n        } else if (\n            Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)\n        ) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(\n                GWU.xy.x(up),\n                GWU.xy.y(up),\n                isValidLoc\n            );\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            // @ts-ignore\n                            GWU.xy.distanceBetween(x, y, upLoc![0], upLoc![1]) <\n                            minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (\n            Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)\n        ) {\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(\n                GWU.xy.x(down),\n                GWU.xy.y(down),\n                isValidLoc\n            );\n            if (needUp) {\n                upLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            GWU.xy.distanceBetween(\n                                x,\n                                y,\n                                downLoc![0],\n                                downLoc![1]\n                            ) < minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (needUp) {\n            upLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            // @ts-ignore\n                            GWU.xy.distanceBetween(x, y, upLoc![0], upLoc![1]) <\n                            minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (needDown) {\n            downLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n        }\n\n        if (upLoc) {\n            locations.up = upLoc.slice() as GWU.xy.Loc;\n            this.setupStairs(\n                site,\n                upLoc[0],\n                upLoc[1],\n                this.options.upTile,\n                this.options.wall\n            );\n            if (this.options.start === 'up') {\n                locations.start = locations.up;\n            } else {\n                locations.end = locations.up;\n            }\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice() as GWU.xy.Loc;\n            this.setupStairs(\n                site,\n                downLoc[0],\n                downLoc[1],\n                this.options.downTile,\n                this.options.wall\n            );\n            if (this.options.start === 'down') {\n                locations.start = locations.down;\n            } else {\n                locations.end = locations.down;\n            }\n        }\n\n        return upLoc || downLoc ? locations : null;\n    }\n\n    hasXY(site: SITE.Site, x: number, y: number) {\n        if (x < 0 || y < 0) return false;\n        if (x >= site.width || y >= site.height) return false;\n        return true;\n    }\n\n    isStairXY(site: SITE.Site, x: number, y: number) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y)) return false;\n\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1])) return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1])) return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            } else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n\n    setupStairs(\n        site: SITE.Site,\n        x: number,\n        y: number,\n        tile: TYPES.TileId,\n        wallTile: TYPES.TileId\n    ) {\n        const indexes = site.rng.sequence(4);\n\n        let dir: GWU.xy.Loc | null = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1])) break;\n            }\n\n            dir = null;\n        }\n\n        if (!dir) GWU.ERROR('No stair direction found!');\n\n        site.setTile(x, y, tile);\n\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n            // @ts-ignore\n            (d) => d[0] == dir[0] && d[1] == dir[1]\n        );\n\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex) continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wallTile);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nexport interface LoopOptions {\n    minDistance: number;\n    maxLength: number;\n    doorChance: number;\n}\n\nexport interface LoopConfig {\n    minDistance: number;\n    maxLength: number;\n    doorChance: number;\n}\n\nexport class LoopDigger {\n    public options: LoopConfig = {\n        minDistance: 100,\n        maxLength: 1,\n        doorChance: 50,\n    };\n\n    constructor(options: Partial<LoopOptions> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n\n        const minDistance = Math.min(\n            this.options.minDistance,\n            Math.floor(Math.max(site.width, site.height) / 2)\n        );\n        const maxLength = this.options.maxLength;\n\n        const pathGrid = new GWU.path.DijkstraMap();\n        // const costGrid = GWU.grid.alloc(site.width, site.height);\n\n        const dirCoords: [number, number][] = [\n            [1, 0],\n            [0, 1],\n        ];\n\n        // SITE.fillCostGrid(site, costGrid);\n\n        function isValidTunnelStart(\n            x: number,\n            y: number,\n            dir: [number, number]\n        ) {\n            if (!site.hasXY(x, y)) return false;\n            if (!site.hasXY(x + dir[1], y + dir[0])) return false;\n            if (!site.hasXY(x - dir[1], y - dir[0])) return false;\n            if (site.isSet(x, y)) return false;\n            if (site.isSet(x + dir[1], y + dir[0])) return false;\n            if (site.isSet(x - dir[1], y - dir[0])) return false;\n            return true;\n        }\n\n        function isValidTunnelEnd(x: number, y: number, dir: [number, number]) {\n            if (!site.hasXY(x, y)) return false;\n            if (!site.hasXY(x + dir[1], y + dir[0])) return false;\n            if (!site.hasXY(x - dir[1], y - dir[0])) return false;\n            if (site.isSet(x, y)) return true;\n            if (site.isSet(x + dir[1], y + dir[0])) return true;\n            if (site.isSet(x - dir[1], y - dir[0])) return true;\n            return false;\n        }\n\n        let count = 0;\n        const seq = site.rng.sequence(site.width * site.height);\n\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir)) continue;\n                    j = maxLength;\n\n                    // check up/left\n                    if (\n                        site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])\n                    ) {\n                        // just can't build directly into a door\n                        if (\n                            !site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])\n                        ) {\n                            continue;\n                        }\n                    } else if (\n                        site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])\n                    ) {\n                        if (\n                            !site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])\n                        ) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v) as [number, number];\n                    } else {\n                        continue; // not valid start for tunnel\n                    }\n\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n\n                    if (j < maxLength) {\n                        SITE.computeDistanceMap(\n                            site,\n                            pathGrid,\n                            startX,\n                            startY,\n                            888\n                        );\n\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (\n                            pathGrid.getDistance(endX, endY) > minDistance &&\n                            pathGrid.getDistance(endX, endY) < GWU.path.BLOCKED\n                        ) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, 'FLOOR');\n                                    // costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = site.rng.chance(\n                                this.options.doorChance\n                            )\n                                ? 'DOOR'\n                                : 'FLOOR';\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // pathGrid.free();\n        // GWU.grid.free(costGrid);\n\n        return count;\n    }\n}\n\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site: SITE.Site, opts: Partial<LoopOptions> = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as TYPES from './types';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\n\nimport * as LOGGER from './site/log/logger';\nimport { ConsoleLogger } from './site/log/consoleLogger';\n\nexport interface DoorOpts {\n    chance: number;\n    tile: string;\n}\n\nexport interface RoomOptions {\n    count: number;\n    fails: number;\n    first: string | string[] | Record<string, number> | ROOM.RoomDigger;\n    digger: string | string[] | Record<string, number> | ROOM.RoomDigger;\n}\n\nexport interface DiggerOptions {\n    halls?: Partial<HALL.HallOptions> | boolean;\n    loops?: Partial<LOOP.LoopOptions> | boolean;\n    lakes?: Partial<LAKE.LakeOpts> | boolean | number;\n    bridges?: Partial<BRIDGE.BridgeOpts> | boolean | number;\n    stairs?: Partial<STAIRS.StairOpts> | boolean;\n    doors?: Partial<DoorOpts> | boolean;\n\n    rooms?: number | Partial<RoomOptions>;\n\n    startLoc?: GWU.xy.Loc;\n    endLoc?: GWU.xy.Loc;\n    goesUp?: boolean;\n\n    seed?: number;\n    boundary?: boolean;\n\n    log?: LOGGER.Logger | boolean;\n}\n\nexport class Digger {\n    site!: SITE.Site;\n\n    seed = 0;\n    rooms: Partial<RoomOptions> = { fails: 20 };\n    doors: Partial<DoorOpts> = { chance: 15 };\n    halls: Partial<HALL.HallOptions> = { chance: 15 };\n    loops: Partial<LOOP.LoopOptions> | null = {};\n    lakes: Partial<LAKE.LakeOpts> | null = {};\n    bridges: Partial<BRIDGE.BridgeOpts> | null = {};\n    stairs: Partial<STAIRS.StairOpts> | null = {};\n    boundary: boolean = true;\n\n    // startLoc: GWU.xy.Loc = [-1, -1];\n    // endLoc: GWU.xy.Loc = [-1, -1];\n\n    locations: Record<string, GWU.xy.Loc> = {};\n    _locs: Record<string, GWU.xy.Loc> = {};\n    goesUp = false;\n\n    seq!: number[];\n    log: LOGGER.Logger;\n    tiles: SITE.TileFactory;\n\n    constructor(options: DiggerOptions = {}, tiles?: SITE.TileFactory) {\n        this.seed = options.seed || 0;\n        this.tiles = tiles || SITE.tileFactory;\n\n        if (typeof options.rooms === 'number') {\n            options.rooms = { count: options.rooms };\n        }\n        GWU.object.setOptions(this.rooms, options.rooms);\n\n        this.goesUp = options.goesUp || false;\n        if (options.startLoc) {\n            this._locs.start = options.startLoc;\n        }\n        if (options.endLoc) {\n            this._locs.end = options.endLoc;\n        }\n\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        } else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        } else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        } else {\n            if (options.loops === true) options.loops = {};\n            else if (typeof options.loops === 'number') {\n                options.loops = { maxLength: options.loops };\n            }\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                options.loops.doorChance ?? options.doors?.chance;\n            // @ts-ignore\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        } else {\n            if (options.lakes === true) options.lakes = {};\n            else if (typeof options.lakes === 'number') {\n                options.lakes = { count: options.lakes };\n            }\n            options.lakes = options.lakes || {};\n            // @ts-ignore\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        } else {\n            if (typeof options.bridges === 'number') {\n                options.bridges = { maxLength: options.bridges };\n            }\n            if (options.bridges === true) options.bridges = {};\n            // @ts-ignore\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        } else {\n            if (typeof options.stairs !== 'object') options.stairs = {};\n            // @ts-ignore\n            GWU.object.setOptions(this.stairs, options.stairs);\n            this.stairs!.start = this.goesUp ? 'down' : 'up';\n        }\n\n        // this.startLoc = options.startLoc || [-1, -1];\n        // this.endLoc = options.endLoc || [-1, -1];\n\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        } else if (options.log) {\n            this.log = options.log;\n        } else {\n            this.log = new LOGGER.NullLogger();\n        }\n    }\n\n    _makeRoomSite(width: number, height: number) {\n        const site = new SITE.Site(width, height);\n        site.rng = this.site.rng;\n        return site;\n    }\n\n    _createSite(width: number, height: number): void {\n        this.site = new SITE.Site(width, height);\n    }\n\n    create(width: number, height: number, cb: TYPES.DigFn): boolean;\n    create(map: GWU.grid.NumGrid): boolean;\n    create(map: SITE.Site): boolean;\n    create(...args: any[]): boolean {\n        let needsFree = true;\n        if (args.length == 1) {\n            const dest = args[0];\n            if (dest instanceof SITE.Site) {\n                this.site = dest;\n                needsFree = false;\n            } else {\n                this._createSite(dest.width, dest.height);\n            }\n        } else {\n            this._createSite(args[0], args[1]);\n        }\n\n        const result = this._create(this.site);\n\n        const cb = args[2] || null;\n        if (cb) {\n            GWU.xy.forRect(this.site.width, this.site.height, (x, y) => {\n                const t = this.site._tiles[x][y];\n                if (t) cb(x, y, t);\n            });\n        } else if (args.length == 1 && needsFree) {\n            const dest = args[0];\n            dest.copy(this.site._tiles);\n        }\n\n        needsFree && this.site.free();\n        return result;\n    }\n\n    _create(site: SITE.Site): boolean {\n        this.start(site);\n\n        this.addRooms(site);\n\n        if (this.loops) {\n            this.addLoops(site, this.loops);\n            this.log.onLoopsAdded(site);\n        }\n        if (this.lakes) {\n            this.addLakes(site, this.lakes);\n            this.log.onLakesAdded(site);\n        }\n        if (this.bridges) {\n            this.addBridges(site, this.bridges);\n            this.log.onBridgesAdded(site);\n        }\n        if (this.stairs) {\n            this.addStairs(site, this.stairs);\n            this.log.onStairsAdded(site);\n        }\n\n        this.finish(site);\n\n        return true;\n    }\n\n    start(site: SITE.Site) {\n        this.site = site;\n\n        const seed = this.seed || GWU.rng.random.number();\n        site.setSeed(seed);\n\n        site.clear();\n        this.seq = site.rng.sequence(site.width * site.height);\n\n        this.locations = Object.assign({}, this._locs);\n\n        if (!this.locations.start || this.locations.start[0] < 0) {\n            const stair = this.goesUp ? 'down' : 'up';\n            if (this.stairs && Array.isArray(this.stairs[stair])) {\n                this.locations.start = this.stairs[stair] as GWU.xy.Loc;\n            } else {\n                this.locations.start = [\n                    Math.floor(site.width / 2),\n                    site.height - 2,\n                ];\n                if (this.stairs && this.stairs[stair]) {\n                    this.stairs[stair] = this.locations.start;\n                }\n            }\n        }\n\n        if (!this.locations.end || this.locations.end[0] < 0) {\n            const stair = this.goesUp ? 'up' : 'down';\n            if (this.stairs && Array.isArray(this.stairs[stair])) {\n                this.locations.end = this.stairs[stair] as GWU.xy.Loc;\n            }\n        }\n\n        // if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n        //     this.startLoc[0] = Math.floor(site.width / 2);\n        //     this.startLoc[1] = site.height - 2;\n        // }\n    }\n\n    getDigger(\n        id: string | string[] | Record<string, number> | ROOM.RoomDigger\n    ) {\n        if (!id) throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger) return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n\n    addRooms(site: SITE.Site) {\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site)) break;\n        }\n        if (!tries) throw new Error('Failed to place first room!');\n        site.updateDoorDirs();\n\n        this.log.onDigFirstRoom(site);\n\n        // site.dump();\n        // console.log('- rng.number', site.rng.number());\n\n        let fails = 0;\n        let count = 1;\n        const maxFails = this.rooms.fails || 20;\n        while (fails < maxFails) {\n            if (this.addRoom(site)) {\n                fails = 0;\n                site.updateDoorDirs();\n                site.rng.shuffle(this.seq);\n\n                // site.dump();\n                // console.log('- rng.number', site.rng.number());\n\n                if (this.rooms.count && ++count >= this.rooms.count) {\n                    break; // we are done\n                }\n            } else {\n                ++fails;\n            }\n        }\n    }\n\n    addFirstRoom(site: SITE.Site): TYPES.Room | null {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n\n        let digger: ROOM.RoomDigger = this.getDigger(\n            this.rooms.first || this.rooms.digger || 'DEFAULT'\n        );\n        let room: TYPES.Room | null = digger.create(roomSite);\n\n        if (\n            room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.locations.start)\n        ) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n\n    addRoom(site: SITE.Site): TYPES.Room | null {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger: ROOM.RoomDigger = this.getDigger(\n            this.rooms.digger || 'DEFAULT'\n        );\n\n        let room: TYPES.Room | null = digger.create(roomSite);\n\n        // attach hall?\n        if (room && this.halls.chance) {\n            let hall: TYPES.Hall | null = HALL.dig(\n                this.halls,\n                roomSite,\n                room.doors\n            );\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n\n        // console.log('potential room');\n        // roomSite.dump();\n\n        if (room) {\n            this.log.onRoomCandidate(room, roomSite);\n\n            if (this._attachRoom(site, roomSite, room)) {\n                this.log.onRoomSuccess(site, room);\n            } else {\n                this.log.onRoomFailed(site, room, roomSite, 'Did not fit.');\n                room = null;\n            }\n        }\n\n        roomSite.free();\n        return room;\n    }\n\n    _attachRoom(\n        site: SITE.Site,\n        roomSite: SITE.Site,\n        room: TYPES.Room\n    ): boolean {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        let i = 0;\n        const len = this.seq.length;\n\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (i = 0; i < len; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n\n            const dir = site.getDoorDir(x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door) continue;\n\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n\n                if (\n                    door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, room, offsetX, offsetY)\n                ) {\n                    // TYPES.Room fits here.\n                    site.copyTiles(roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _attachRoomAtLoc(\n        site: SITE.Site,\n        roomSite: SITE.Site,\n        room: TYPES.Room,\n        attachLoc: GWU.xy.Loc\n    ): boolean {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = site.rng.sequence(4);\n\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1) continue;\n\n            const offX = x - door[0];\n            const offY = y - door[1];\n\n            if (this._roomFitsAt(site, roomSite, room, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n\n                // TYPES.Room fits here.\n                site.copyTiles(roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _roomFitsAt(\n        map: SITE.Site,\n        roomGrid: SITE.Site,\n        room: TYPES.Room,\n        roomToSiteX: number,\n        roomToSiteY: number\n    ) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n\n        const hall = room.hall || room;\n        const left = Math.min(room.left, hall.left);\n        const top = Math.min(room.top, hall.top);\n        const right = Math.max(room.right, hall.right);\n        const bottom = Math.max(room.bottom, hall.bottom);\n\n        for (xRoom = left; xRoom <= right; xRoom++) {\n            for (yRoom = top; yRoom <= bottom; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    if (\n                        !map.hasXY(xSite, ySite) ||\n                        map.isBoundaryXY(xSite, ySite)\n                    ) {\n                        return false;\n                    }\n\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n\n    _attachDoor(\n        site: SITE.Site,\n        room: TYPES.Room,\n        x: number,\n        y: number,\n        dir: number\n    ) {\n        const opts = this.doors;\n        let isDoor = false;\n\n        if (opts.chance && site.rng.chance(opts.chance)) {\n            isDoor = true;\n        }\n\n        const tile = isDoor ? opts.tile || 'DOOR' : 'FLOOR';\n        site.setTile(x, y, tile); // Door site.\n\n        // most cases...\n        if (!room.hall || room.hall.width == 1 || room.hall.height == 1) {\n            return;\n        }\n\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n\n                if (site.isNothing(x - k, y)) {\n                    if (site.isSet(x - k, y - 1) && site.isSet(x - k, y + 1)) {\n                        site.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x + k, y)) {\n                    if (site.isSet(x + k, y - 1) && site.isSet(x + k, y + 1)) {\n                        site.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        } else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n\n                if (site.isNothing(x, y - k)) {\n                    if (site.isSet(x - 1, y - k) && site.isSet(x + 1, y - k)) {\n                        site.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x, y + k)) {\n                    if (site.isSet(x - 1, y + k) && site.isSet(x + 1, y + k)) {\n                        site.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n\n    addLoops(site: SITE.Site, opts: Partial<LOOP.LoopOptions>) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n\n    addLakes(site: SITE.Site, opts: Partial<LAKE.LakeOpts>) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n\n    addBridges(site: SITE.Site, opts: Partial<BRIDGE.BridgeOpts>) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n\n    addStairs(site: SITE.Site, opts: Partial<STAIRS.StairOpts>) {\n        const digger = new STAIRS.Stairs(opts);\n        const locs = digger.create(site);\n        if (locs) Object.assign(this.locations, locs);\n        return !!locs;\n    }\n\n    finish(site: SITE.Site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n\n    _removeDiagonalOpenings(site: SITE.Site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (\n                            !site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)\n                        ) {\n                            if (site.rng.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            } else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, 'FLOOR'); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n\n    _finishDoors(site: SITE.Site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y)) return;\n\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                // if (\n                //     // TODO - isPassable\n                //     (site.isPassable(x + 1, y) || site.isPassable(x - 1, y)) &&\n                //     (site.isPassable(x, y + 1) || site.isPassable(x, y - 1))\n                // ) {\n                //     // If there's passable terrain to the left or right, and there's passable terrain\n                //     // above or below, then the door is orphaned and must be removed.\n                //     site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                // } else\n                if (\n                    (site.isWall(x + 1, y) ? 1 : 0) +\n                        (site.isWall(x - 1, y) ? 1 : 0) +\n                        (site.isWall(x, y + 1) ? 1 : 0) +\n                        (site.isWall(x, y - 1) ? 1 : 0) !=\n                    2\n                ) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, 'FLOOR', { superpriority: true }); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n\n    _finishWalls(site: SITE.Site) {\n        const boundaryTile = this.boundary ? 'IMPREGNABLE' : 'WALL';\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                } else {\n                    site.setTile(x, y, 'WALL');\n                }\n            }\n        });\n    }\n}\n\n// export function digMap(map: GWM.map.Map, options: Partial<DiggerOptions> = {}) {\n//     const digger = new Digger(options);\n//     return digger.create(map);\n// }\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nimport { Blueprint } from './blueprint';\n\nexport class BuildData {\n    site: SITE.Site;\n    blueprint: Blueprint;\n    interior: GWU.grid.NumGrid;\n    occupied: GWU.grid.NumGrid;\n    candidates: GWU.grid.NumGrid;\n    viewMap: GWU.grid.NumGrid;\n    distanceMap: GWU.path.DijkstraMap;\n    originX: number = -1;\n    originY: number = -1;\n    distance25: number = -1;\n    distance75: number = -1;\n    machineNumber: number;\n    // depth = 0;\n    // seed = 0;\n\n    constructor(site: SITE.Site, blueprint: Blueprint, machine = 0) {\n        this.site = site;\n        this.blueprint = blueprint;\n        this.interior = GWU.grid.alloc(site.width, site.height);\n        this.occupied = GWU.grid.alloc(site.width, site.height);\n        this.viewMap = GWU.grid.alloc(site.width, site.height);\n        this.distanceMap = new GWU.path.DijkstraMap(site.width, site.height);\n        this.candidates = GWU.grid.alloc(site.width, site.height);\n        this.machineNumber = machine;\n    }\n\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.candidates);\n    }\n\n    get rng(): GWU.rng.Random {\n        return this.site.rng;\n    }\n\n    reset(originX: number, originY: number) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.reset(this.site.width, this.site.height);\n        // this.candidates.fill(0);\n\n        this.originX = originX;\n        this.originY = originY;\n        this.distance25 = 0;\n        this.distance75 = 0;\n\n        // if (this.seed) {\n        //     this.site.setSeed(this.seed);\n        // }\n    }\n\n    calcDistances(maxDistance: number) {\n        SITE.computeDistanceMap(\n            this.site,\n            this.distanceMap,\n            this.originX,\n            this.originY,\n            maxDistance\n        );\n\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n\n        this.interior.forEach((v, x, y) => {\n            if (!v) return;\n            const dist = Math.round(this.distanceMap.getDistance(x, y));\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            } else {\n                distance25 -= distances[i];\n            }\n        }\n\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            } else {\n                distance75 -= distances[i];\n            }\n        }\n\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nimport { BuildData } from './data';\n\nconst Fl = GWU.flag.fl;\n\nexport enum Flags {\n    BP_ROOM = Fl(0), // spawns in a dead-end room that is dominated by a chokepoint of the given size (as opposed to a random place of the given size)\n    BP_VESTIBULE = Fl(1), // spawns in a doorway (location must be given) and expands outward, to guard the room\n    BP_REWARD = Fl(2), // metered reward machines\n    BP_ADOPT_ITEM = Fl(3), // the machine must adopt an item (e.g. a door key)\n\n    BP_PURGE_PATHING_BLOCKERS = Fl(4), // clean out traps and other T_PATHING_BLOCKERs\n    BP_PURGE_INTERIOR = Fl(5), // clean out all of the terrain in the interior before generating the machine\n    BP_PURGE_LIQUIDS = Fl(6), // clean out all of the liquids in the interior before generating the machine\n\n    BP_SURROUND_WITH_WALLS = Fl(7), // fill in any impassable gaps in the perimeter (e.g. water, lava, brimstone, traps) with wall\n    BP_IMPREGNABLE = Fl(8), // impassable perimeter and interior tiles are locked; tunneling bolts will bounce off harmlessly\n\n    BP_OPEN_INTERIOR = Fl(9), // clear out walls in the interior, widen the interior until convex or bumps into surrounding areas\n    BP_MAXIMIZE_INTERIOR = Fl(10), // same as BP_OPEN_INTERIOR but expands the room as far as it can go, potentially surrounding the whole level.\n    BP_REDESIGN_INTERIOR = Fl(11), // nuke and pave -- delete all terrain in the interior and build entirely new rooms within the bounds\n\n    BP_TREAT_AS_BLOCKING = Fl(12), // abort the machine if, were it filled with wall tiles, it would disrupt the level connectivity\n    BP_REQUIRE_BLOCKING = Fl(13), // abort the machine unless, were it filled with wall tiles, it would disrupt the level connectivity\n\n    BP_NO_INTERIOR_FLAG = Fl(14), // don't flag the area as being part of a machine\n    BP_NOT_IN_HALLWAY = Fl(15), // Do not allow building in hallways (for !ROOM, !VESTIBULE)\n}\n\nexport interface BlueprintOptions {\n    id: string;\n    tags: string | string[];\n    frequency: GWU.frequency.FrequencyConfig;\n    size: string | number[] | number;\n    flags: GWU.flag.FlagBase;\n    steps: Partial<STEP.StepOptions>[];\n}\n\nexport class Blueprint {\n    public tags: string[] = [];\n    public frequency: GWU.frequency.FrequencyFn;\n    public size: GWU.range.Range;\n    public flags: number = 0;\n    public steps: STEP.BuildStep[] = [];\n    public id: string = 'n/a';\n\n    constructor(opts: Partial<BlueprintOptions> = {}) {\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo <= 0) this.size.lo = 1;\n            if (this.size.hi < this.size.lo) this.size.hi = this.size.lo;\n        } else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n            this.steps.forEach((s, i) => (s.index = i));\n        }\n        if (opts.id) {\n            this.id = opts.id;\n        }\n\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (\n                !this.steps.some((step) => {\n                    if (step.adoptItem) return true;\n                    if (step.hordeTakesItem && !step.item) return true;\n                    return false;\n                })\n            ) {\n                throw new Error(\n                    'Blueprint calls for BP_ADOPT_ITEM, but has no adoptive step.'\n                );\n            }\n        }\n    }\n\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n\n    get notInHallway() {\n        return !!(this.flags & Flags.BP_NOT_IN_HALLWAY);\n    }\n\n    qualifies(requiredFlags: number, tags?: string | string[]) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want))) return false;\n        }\n\n        if (\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    pickComponents(rng: GWU.rng.Random) {\n        const alternativeFlags = [\n            STEP.StepFlags.BS_ALTERNATIVE,\n            STEP.StepFlags.BS_ALTERNATIVE_2,\n        ];\n\n        const keepFeature = new Array(this.steps.length).fill(true);\n\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = rng.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        } else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n\n    fillInterior(builder: BuildData): number {\n        const interior = builder.interior;\n        const site = builder.site;\n\n        interior.fill(0);\n\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            return addTileToInteriorAndIterate(\n                builder,\n                builder.originX,\n                builder.originY\n            );\n        } else if (this.isVestiblue) {\n            return computeVestibuleInterior(builder, this);\n            // success\n        } else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n\n            let distanceMap = builder.distanceMap;\n\n            SITE.computeDistanceMap(\n                site,\n                distanceMap,\n                builder.originX,\n                builder.originY,\n                this.size.hi\n            );\n\n            const seq = site.rng.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = this.size.value(); // Keeps track of the goal size.\n\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (\n                    let n = 0;\n                    n < seq.length && qualifyingTileCount < goalSize;\n                    n++\n                ) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n\n                    if (Math.round(distanceMap.getDistance(i, j)) == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n\n                        const machine = site.getMachine(i, j);\n                        if (\n                            site.isOccupied(i, j) ||\n                            (machine > 0 && machine !== builder.machineNumber) // in different machine\n                        ) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            return 0;\n                        }\n                    }\n                }\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            return qualifyingTileCount;\n        }\n    }\n\n    //  function redesignInterior( interior, originX, originY, theDungeonProfileIndex) {\n    //     let i, j, n, newX, newY;\n    //     let dir;\n    //     let orphanList = [];\n    //     let orphanCount = 0;\n\n    //     let grid, pathingGrid, costGrid;\n    //     grid = allocGrid();\n\n    //     for (i=0; i<DCOLS; i++) {\n    //         for (j=0; j<DROWS; j++) {\n    //             if (interior[i][j]) {\n    //                 if (i == originX && j == originY) {\n    //                     grid[i][j] = 1; // All rooms must grow from this space.\n    //                 } else {\n    //                     grid[i][j] = 0; // Other interior squares are fair game for placing rooms.\n    //                 }\n    //             } else if (cellIsPassableOrDoor(i, j)) {\n    //                 grid[i][j] = 1; // Treat existing level as already built (though shielded by a film of -1s).\n    //                 for (dir = 0; dir < 4; dir++) {\n    //                     newX = i + nbDirs[dir][0];\n    //                     newY = j + nbDirs[dir][1];\n    //                     if (coordinatesAreInMap(newX, newY)\n    //                         && interior[newX][newY]\n    //                         && (newX != originX || newY != originY)) {\n\n    //                         orphanList[orphanCount] = [newX, newY];\n    //                         orphanCount++;\n    //                         grid[i][j] = -1; // Treat the orphaned door as off limits.\n\n    //                         break;\n    //                     }\n    //                 }\n    //             } else {\n    //                 grid[i][j] = -1; // Exterior spaces are off limits.\n    //             }\n    //         }\n    //     }\n    //     await attachRooms(grid, dungeonProfileCatalog[theDungeonProfileIndex], 40, 40);\n\n    //     // Connect to preexisting rooms that were orphaned (mostly preexisting machine rooms).\n    //     if (orphanCount > 0) {\n    //         pathingGrid = allocGrid();\n    //         costGrid = allocGrid();\n    //         for (n = 0; n < orphanCount; n++) {\n\n    //             if (D_INSPECT_MACHINES) {\n    //                 dumpLevelToScreen();\n    //                 copyGrid(pathingGrid, grid);\n    //                 findReplaceGrid(pathingGrid, -1, -1, 0);\n    //                 hiliteGrid(pathingGrid, /* Color. */green, 50);\n    //                 plotCharWithColor('X', mapToWindowX(orphanList[n][0]), mapToWindowY(orphanList[n][1]), /* Color. */black, /* Color. */orange);\n    //                 await temporaryMessage(\"Orphan detected:\", true);\n    //             }\n\n    //             for (i=0; i<DCOLS; i++) {\n    //                 for (j=0; j<DROWS; j++) {\n    //                     if (interior[i][j]) {\n    //                         if (grid[i][j] > 0) {\n    //                             pathingGrid[i][j] = 0;\n    //                             costGrid[i][j] = 1;\n    //                         } else {\n    //                             pathingGrid[i][j] = 30000;\n    //                             costGrid[i][j] = 1;\n    //                         }\n    //                     } else {\n    //                         pathingGrid[i][j] = 30000;\n    //                         costGrid[i][j] = PDS_OBSTRUCTION;\n    //                     }\n    //                 }\n    //             }\n    //             dijkstraScan(pathingGrid, costGrid, false);\n\n    //             i = orphanList[n][0];\n    //             j = orphanList[n][1];\n    //             while (pathingGrid[i][j] > 0) {\n    //                 for (dir = 0; dir < 4; dir++) {\n    //                     newX = i + nbDirs[dir][0];\n    //                     newY = j + nbDirs[dir][1];\n\n    //                     if (coordinatesAreInMap(newX, newY)\n    //                         && pathingGrid[newX][newY] < pathingGrid[i][j]) {\n\n    //                         grid[i][j] = 1;\n    //                         i = newX;\n    //                         j = newY;\n    //                         break;\n    //                     }\n    //                 }\n    //                 brogueAssert(dir < 4);\n    //                 if (D_INSPECT_MACHINES) {\n    //                     dumpLevelToScreen();\n    //                     displayGrid(pathingGrid);\n    //                     plotCharWithColor('X', mapToWindowX(i), mapToWindowY(j), /* Color. */black, /* Color. */orange);\n    //                     await temporaryMessage(\"Orphan connecting:\", true);\n    //                 }\n    //             }\n    //         }\n    //         freeGrid(pathingGrid);\n    //         freeGrid(costGrid);\n    //     }\n\n    //     await addLoops(grid, 10);\n    //     for(i=0; i<DCOLS; i++) {\n    //         for(j=0; j<DROWS; j++) {\n    //             if (interior[i][j]) {\n    //                 if (grid[i][j] >= 0) {\n    //                     pmap[i][j].layers[SURFACE] = pmap[i][j].layers[GAS] = NOTHING;\n    //                 }\n    //                 if (grid[i][j] == 0) {\n    //                     pmap[i][j].layers[DUNGEON] = GRANITE;\n    //                     interior[i][j] = false;\n    //                 }\n    //                 if (grid[i][j] >= 1) {\n    //                     pmap[i][j].layers[DUNGEON] = FLOOR;\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     freeGrid(grid);\n    // }\n}\n\nexport function markCandidates(buildData: BuildData): number {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const blueprint = buildData.blueprint;\n    candidates.fill(0);\n\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n\n        candidates.update((_v, x, y) => {\n            return site.isGateSite(x, y) &&\n                blueprint.size.contains(site.getChokeCount(x, y))\n                ? 1\n                : 0;\n        });\n    } else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        throw new Error(\n            'ERROR: Attempted to build a vestiblue without a location being provided.'\n        );\n    } else {\n        candidates.update((_v, x, y) => {\n            if (!site.isPassable(x, y)) return 0;\n            if (blueprint.notInHallway) {\n                const count = GWU.xy.arcCount(x, y, (i, j) =>\n                    site.isPassable(i, j)\n                );\n                return count <= 1 ? 1 : 0;\n            }\n            return 1;\n        });\n    }\n    return candidates.count((v) => v == 1);\n}\n\nexport function pickCandidateLoc(buildData: BuildData): GWU.xy.Loc | null {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n\n    const randSite = site.rng.matchingLoc(\n        site.width,\n        site.height,\n        (x, y) => candidates[x][y] == 1\n    );\n\n    if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n        // If no suitable sites, abort.\n        return null;\n    }\n    return randSite;\n}\n\n// // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n// export function computeInterior(\n//     builder: BuildData,\n//     blueprint: Blueprint\n// ): boolean {\n//     let failsafe = blueprint.isRoom ? 10 : 20;\n//     let tryAgain;\n//     const interior = builder.interior;\n//     const site = builder.site;\n\n//     do {\n//         tryAgain = false;\n//         if (--failsafe <= 0) {\n//             // console.log(\n//             //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n//             // );\n//             return false;\n//         }\n\n//         let count = fillInterior(builder, blueprint);\n\n//         // Now make sure the interior map satisfies the machine's qualifications.\n//         if (!count) {\n//             console.debug('- no interior');\n//             tryAgain = true;\n//         } else if (!blueprint.size.contains(count)) {\n//             console.debug('- too small');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.treatAsBlocking &&\n//             SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })\n//         ) {\n//             console.debug('- blocks');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.requireBlocking &&\n//             SITE.siteDisruptedSize(site, interior) < 100\n//         ) {\n//             console.debug('- does not block');\n//             tryAgain = true;\n//         }\n\n//         // Now loop if necessary.\n//     } while (tryAgain);\n\n//     // console.log(tryAgain, failsafe);\n\n//     return true;\n// }\n\nexport function computeVestibuleInterior(\n    builder: BuildData,\n    blueprint: Blueprint\n): number {\n    let success = true;\n\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n\n    if (blueprint.size.hi == 1) {\n        interior[builder.originX][builder.originY] = 1;\n        return 1;\n    }\n\n    // If this is a wall - it is really an error (maybe manually trying a build location?)\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    if (doorChokeCount > 10000) {\n        return 0;\n    }\n\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(\n        builder.originX,\n        builder.originY,\n        (x, y) => {\n            const count = site.getChokeCount(x, y);\n            if (count == doorChokeCount) return;\n            if (count > 10000) return;\n            if (count < 0) return;\n            vestibuleLoc[0] = x;\n            vestibuleLoc[1] = y;\n            vestibuleChokeCount = count;\n        },\n        true\n    );\n\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(\n            vestibuleLoc[0],\n            vestibuleLoc[1],\n            (_v, i, j) => {\n                if (site.isOccupied(i, j)) {\n                    success = false;\n                }\n                return site.getChokeCount(i, j) === vestibuleChokeCount;\n            },\n            1\n        );\n        if (success && blueprint.size.contains(count)) return roomSize;\n    }\n\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(site.rng); // Keeps track of the goal size.\n\n    const distMap = builder.distanceMap;\n    SITE.computeDistanceMap(\n        site,\n        distMap,\n        builder.originX,\n        builder.originY,\n        blueprint.size.hi\n    );\n\n    const cells = site.rng.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (\n            let i = 0;\n            i < cells.length && qualifyingTileCount < wantSize;\n            ++i\n        ) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n\n            const dist = Math.round(distMap.getDistance(x, y));\n\n            if (dist != k) continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount) continue;\n\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n\n    return qualifyingTileCount;\n}\n\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(\n    builder: BuildData,\n    startX: number,\n    startY: number\n): number {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n\n    let count = 1;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY)) continue;\n        if (interior[newX][newY]) continue; // already done\n\n        if (\n            site.isOccupied(newX, newY) ||\n            (site.getMachine(newX, newY) && !site.isGateSite(newX, newY))\n        ) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return 0;\n        }\n        if (\n            site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.getMachine(newX, newY)\n        ) {\n            let additional = addTileToInteriorAndIterate(builder, newX, newY);\n            if (additional <= 0) return 0;\n            count += additional;\n        }\n    }\n    return count;\n}\n\nexport function maximizeInterior(\n    data: BuildData,\n    minimumInteriorNeighbors = 1\n) {\n    const interior = data.interior;\n    const site = data.site;\n    let interiorNeighborCount = 0;\n    // let openNeighborCount = 0;\n\n    let madeChange = true;\n    let interiorCount = 0;\n    let maxInteriorCount = data.blueprint.size.hi;\n    let gen = 0;\n\n    while (madeChange && interiorCount < maxInteriorCount) {\n        madeChange = false;\n        interiorCount = 0;\n        ++gen;\n        interior.forEach((i, x, y) => {\n            if (!i) return;\n            ++interiorCount;\n\n            if (i != gen) return;\n\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j) || interior[i][j]) return;\n                    if (interior.isBoundaryXY(i, j)) return;\n\n                    interiorNeighborCount = 0;\n                    let ok = true;\n                    GWU.xy.eachNeighbor(\n                        i,\n                        j,\n                        (x2, y2) => {\n                            if (interior[x2][y2]) {\n                                ++interiorNeighborCount;\n                            } else if (!site.isWall(x2, y2)) {\n                                ok = false; // non-interior and not wall\n                            } else if (site.getMachine(x2, y2)) {\n                                ok = false; // in another machine\n                            }\n                        },\n                        false // 8 dirs\n                    );\n\n                    if (!ok || interiorNeighborCount < minimumInteriorNeighbors)\n                        return;\n\n                    interior[i][j] = gen + 1;\n                    ++interiorCount;\n                    if (site.blocksPathing(i, j)) {\n                        site.setTile(i, j, 'FLOOR');\n                    }\n                    madeChange = true;\n                },\n                true // 4 dirs\n            );\n        });\n    }\n    interior.update((v) => (v > 0 ? 1 : 0));\n}\n\nexport function prepareInterior(builder: BuildData) {\n    const interior = builder.interior;\n    const site = builder.site;\n    const blueprint = builder.blueprint;\n\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        maximizeInterior(builder, 1);\n    } else if (blueprint.openInterior) {\n        maximizeInterior(builder, 4);\n    }\n\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v) site.setTile(x, y, 'FLOOR');\n        });\n    } else {\n        if (blueprint.purgeBlockers) {\n            // If requested, purge pathing blockers -- no traps allowed.\n            interior.forEach((v, x, y) => {\n                if (!v) return;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, 'FLOOR');\n                }\n            });\n        }\n\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (blueprint.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.setTile(x, y, 'FLOOR');\n                }\n            });\n        }\n    }\n\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.isGateSite(x, y)) return;\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j)) return; // Not valid x,y\n                    if (interior[i][j]) return; // is part of machine\n                    if (site.isWall(i, j)) return; // is already a wall (of some sort)\n\n                    if (site.isGateSite(i, j)) return; // is a door site\n                    if (site.getMachine(i, j)) return; // is part of a machine\n\n                    if (site.blocksPathing(i, j)) return; // is a blocker for the player (water?)\n                    site.setTile(i, j, 'WALL');\n                },\n                false // all 8 directions\n            );\n        });\n    }\n\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.isGateSite(x, y)) return;\n            site.makeImpregnable(x, y);\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j)) return;\n                    if (interior[i][j]) return;\n                    if (site.isGateSite(i, j)) return;\n                    site.makeImpregnable(i, j);\n                },\n                false\n            );\n        });\n    }\n\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v) return;\n\n        if (!blueprint.noInteriorFlag) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, 'DOOR');\n        }\n    });\n}\n\n// export function expandMachineInterior(\n//     builder: BuildData,\n//     minimumInteriorNeighbors = 1\n// ) {\n//     let madeChange;\n//     const interior = builder.interior;\n//     const site = builder.site;\n\n//     do {\n//         madeChange = false;\n//         interior.forEach((_v, x, y) => {\n//             // if (v && site.isDoor(x, y)) {\n//             //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n//             //     return;\n//             // }\n//             if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE)) return;\n//             if (!site.blocksPathing(x, y)) return;\n\n//             let nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // Not in map\n//                     if (interior.isBoundaryXY(i, j)) return; // Not on boundary\n\n//                     if (interior[i][j] && !site.blocksPathing(i, j)) {\n//                         ++nbcount; // in machine and open tile\n//                     }\n//                 },\n//                 false\n//             );\n\n//             if (nbcount < minimumInteriorNeighbors) return;\n\n//             nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // not on map\n//                     if (interior[i][j]) return; // already part of machine\n//                     if (\n//                         !site.isWall(i, j) ||\n//                         site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)\n//                     ) {\n//                         ++nbcount; // tile is not a wall or is in a machine\n//                     }\n//                 },\n//                 false\n//             );\n\n//             if (nbcount) return;\n\n//             // Eliminate this obstruction; welcome its location into the machine.\n//             madeChange = true;\n//             interior[x][y] = 1;\n//             if (site.blocksPathing(x, y)) {\n//                 site.setTile(x, y, SITE.FLOOR);\n//             }\n//             GWU.xy.eachNeighbor(x, y, (i, j) => {\n//                 if (!interior.hasXY(i, j)) return;\n//                 if (site.isSet(i, j)) return;\n//                 site.setTile(i, j, SITE.WALL);\n//             });\n//         });\n//     } while (madeChange);\n// }\n\n///////////////////////////\n// INSTALL\n\nexport const blueprints: Record<string, Blueprint> = {};\n\nexport function install(\n    id: string,\n    blueprint: Blueprint | Partial<BlueprintOptions>\n) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\n\nexport function random(\n    requiredFlags: number,\n    depth: number,\n    rng?: GWU.rng.Random\n): Blueprint {\n    const matches = Object.values(blueprints).filter(\n        (b) => b.qualifies(requiredFlags) && b.frequency(depth)\n    );\n    rng = rng || GWU.rng.random;\n    return rng.item(matches);\n}\n\nexport function get(id: string | Blueprint): Blueprint {\n    if (id instanceof Blueprint) return id;\n    return blueprints[id];\n}\n\nexport function make(config: Partial<BlueprintOptions>): Blueprint {\n    // if (!config.id) throw new Error('id is required to make Blueprint.');\n    return new Blueprint(config);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\nimport * as STEP from './buildStep';\nimport * as ITEM from '../site/item';\nimport * as HORDE from '../site/horde';\n\nimport { BuildData } from './data';\nimport { NullLogger, Logger } from '../site/log/logger';\nimport { ConsoleLogger } from '../site/log/consoleLogger';\nimport { DisruptOptions, Site } from '../site';\n\nexport type BlueType = BLUE.Blueprint | string;\n\nexport interface BuilderOptions {\n    blueprints: BlueType[] | { [key: string]: BlueType };\n    log: Logger | boolean;\n    seed: number;\n}\n\nexport interface BuildInfo {\n    x: number;\n    y: number;\n}\n\nexport type BuildResult = BuildInfo | null;\n\nexport class Builder {\n    blueprints: BLUE.Blueprint[] | null = null;\n    log: Logger;\n    seed: number;\n\n    constructor(options: Partial<BuilderOptions> = {}) {\n        if (options.blueprints) {\n            if (!Array.isArray(options.blueprints)) {\n                options.blueprints = Object.values(options.blueprints);\n            }\n            this.blueprints = options.blueprints.map((v) => BLUE.get(v));\n        }\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        } else {\n            this.log = options.log || new NullLogger();\n        }\n        if (options.seed) {\n            this.seed = options.seed;\n        } else {\n            this.seed = 0;\n        }\n    }\n\n    _pickRandom(\n        requiredFlags: number,\n        depth: number,\n        rng?: GWU.rng.Random\n    ): BLUE.Blueprint | null {\n        rng = rng || GWU.rng.random;\n        const blueprints = this.blueprints || Object.values(BLUE.blueprints);\n        const weights = blueprints.map((b) => {\n            if (!b.qualifies(requiredFlags)) return 0;\n            return b.frequency(depth);\n        });\n\n        const index = rng.weighted(weights) as number;\n        return blueprints[index] || null;\n    }\n\n    buildRandom(\n        site: Site,\n        requiredMachineFlags = BLUE.Flags.BP_ROOM,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        const depth = site.depth;\n\n        let tries = 0;\n        while (tries < 10) {\n            const blueprint = this._pickRandom(\n                requiredMachineFlags,\n                depth,\n                site.rng\n            );\n            if (!blueprint) {\n                this.log.onBuildError(\n                    `Failed to find matching blueprint: requiredMachineFlags : ${GWU.flag.toString(\n                        BLUE.Flags,\n                        requiredMachineFlags\n                    )}, depth: ${depth}`\n                );\n                return null;\n            }\n\n            const data = new BuildData(site, blueprint);\n            site.analyze();\n\n            this.log.onBlueprintPick(data, requiredMachineFlags, depth);\n\n            if (this._buildAt(data, x, y, adoptedItem)) {\n                return { x, y };\n            }\n            ++tries;\n        }\n\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return null;\n    }\n\n    build(\n        site: Site,\n        blueprint: BLUE.Blueprint | string,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        if (typeof blueprint === 'string') {\n            const id = blueprint;\n            blueprint = BLUE.blueprints[id];\n            if (!blueprint) throw new Error('Failed to find blueprint - ' + id);\n        }\n\n        if (this.seed) {\n            site.rng.seed(this.seed);\n        }\n\n        const data = new BuildData(site, blueprint);\n        site.analyze();\n\n        return this._buildAt(data, x, y, adoptedItem);\n    }\n\n    _buildAt(\n        data: BuildData,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        if (x >= 0 && y >= 0) {\n            return this._build(data, x, y, adoptedItem);\n        }\n\n        let count = this._markCandidates(data);\n        if (!count) {\n            return null;\n        }\n\n        let tries = 20; // TODO - Make property of Blueprint\n        while (count-- && tries--) {\n            const loc = BLUE.pickCandidateLoc(data) || false;\n            if (loc) {\n                if (this._build(data, loc[0], loc[1], adoptedItem)) {\n                    return { x: loc[0], y: loc[1] };\n                }\n            }\n        }\n\n        this.log.onBlueprintFail(\n            data,\n            'No suitable locations found to build blueprint.'\n        );\n        return null;\n    }\n\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    _build(\n        data: BuildData,\n        originX: number,\n        originY: number,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        data.reset(originX, originY);\n        this.log.onBlueprintStart(data, adoptedItem);\n\n        if (!this._computeInterior(data)) {\n            return null;\n        }\n\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const snapshot = data.site.snapshot();\n        data.machineNumber = data.site.nextMachineId(); // Reserve this machine number, starting with 1.\n\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        BLUE.prepareInterior(data);\n\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        data.calcDistances(data.blueprint.size.hi);\n\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n\n        const components = data.blueprint.pickComponents(data.site.rng);\n\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n\n            if (!this._buildStep(data, component, adoptedItem)) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                this.log.onBlueprintFail(\n                    data,\n                    `Failed to build step ${component.index + 1}/${\n                        data.blueprint.steps.length\n                    }.`\n                );\n                data.site.restore(snapshot);\n                snapshot.free();\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return null;\n            }\n        }\n\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (data.blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(data.site, data.machineNumber);\n        }\n\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n\n        this.log.onBlueprintSuccess(data);\n\n        snapshot.free();\n\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return { x: originX, y: originY };\n    }\n\n    _markCandidates(data: BuildData): number {\n        const count = BLUE.markCandidates(data);\n\n        if (count <= 0) {\n            this.log.onBlueprintFail(\n                data,\n                'No suitable candidate locations found.'\n            );\n            return 0;\n        }\n\n        this.log.onBlueprintCandidates(data);\n\n        return count;\n    }\n\n    _computeInterior(data: BuildData): boolean {\n        let fail = null;\n        let count = data.blueprint.fillInterior(data);\n\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (!count) {\n            fail = 'Interior error.';\n        } else if (!data.blueprint.size.contains(count)) {\n            fail = `Interior wrong size - have: ${count}, want: ${data.blueprint.size.toString()}`;\n        } else if (\n            data.blueprint.treatAsBlocking &&\n            SITE.siteDisruptedBy(data.site, data.interior, {\n                machine: data.site.machineCount,\n            })\n        ) {\n            fail = 'Interior blocks map.';\n        } else if (\n            data.blueprint.requireBlocking &&\n            SITE.siteDisruptedSize(data.site, data.interior) < 100\n        ) {\n            fail = 'Interior does not block enough cells.';\n        }\n\n        if (!fail) {\n            this.log.onBlueprintInterior(data);\n\n            return true;\n        }\n\n        this.log.onBlueprintFail(data, fail);\n        return false;\n    }\n\n    _buildStep(\n        data: BuildData,\n        buildStep: STEP.BuildStep,\n        adoptedItem: ITEM.ItemInstance | null\n    ) {\n        let wantCount = 0;\n        let builtCount = 0;\n\n        const site = data.site;\n\n        this.log.onStepStart(data, buildStep, adoptedItem);\n\n        // console.log(\n        //     'buildComponent',\n        //     blueprint.id,\n        //     blueprint.steps.indexOf(buildStep)\n        // );\n\n        // Figure out the distance bounds.\n        const distanceBound = STEP.calcDistanceBound(data, buildStep);\n\n        // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n\n        // Make a master map of candidate locations for this feature.\n        let qualifyingTileCount = 0;\n\n        if (buildStep.buildVestibule) {\n            // Generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n\n            let success = this.buildRandom(\n                data.site,\n                BLUE.Flags.BP_VESTIBULE,\n                data.originX,\n                data.originY\n            );\n\n            if (!success) {\n                this.log.onStepFail(\n                    data,\n                    buildStep,\n                    'Failed to build vestibule'\n                );\n                return false;\n            }\n        }\n\n        // If we are just building a vestibule, then we can exit here...\n        if (!buildStep.buildsInstances) {\n            this.log.onStepSuccess(data, buildStep);\n            return true;\n        }\n\n        const candidates = GWU.grid.alloc(site.width, site.height);\n\n        let didSomething = false;\n\n        do {\n            didSomething = false;\n\n            if (buildStep.buildAtOrigin) {\n                candidates[data.originX][data.originY] = 1;\n                qualifyingTileCount = 1;\n                wantCount = 1;\n            } else {\n                qualifyingTileCount = buildStep.markCandidates(\n                    data,\n                    candidates,\n                    distanceBound\n                );\n\n                if (\n                    buildStep.generateEverywhere ||\n                    buildStep.repeatUntilNoProgress\n                ) {\n                    wantCount = qualifyingTileCount;\n                } else {\n                    wantCount = buildStep.count.value(site.rng);\n                }\n\n                this.log.onStepCandidates(\n                    data,\n                    buildStep,\n                    candidates,\n                    wantCount\n                );\n\n                // get rid of all error/invalid codes\n                candidates.update((v) => (v == 1 ? 1 : 0));\n\n                if (\n                    !qualifyingTileCount ||\n                    qualifyingTileCount < buildStep.count.lo\n                ) {\n                    this.log.onStepFail(\n                        data,\n                        buildStep,\n                        `Only ${qualifyingTileCount} qualifying tiles - want ${buildStep.count.toString()}.`\n                    );\n                    return false;\n                }\n            }\n\n            let x = 0,\n                y = 0;\n\n            while (qualifyingTileCount > 0 && builtCount < wantCount) {\n                // Find a location for the feature.\n                if (buildStep.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = data.originX;\n                    y = data.originY;\n                } else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = data.rng.matchingLoc(\n                        candidates.width,\n                        candidates.height,\n                        (x, y) => candidates[x][y] == 1\n                    );\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n\n                const snapshot = data.site.snapshot();\n\n                if (\n                    this._buildStepInstance(data, buildStep, x, y, adoptedItem)\n                ) {\n                    // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                    qualifyingTileCount -= buildStep.makePersonalSpace(\n                        data,\n                        x,\n                        y,\n                        candidates\n                    );\n                    builtCount++; // we've placed an instance\n                    didSomething = true;\n                    snapshot.free(); // This snapshot is useless b/c we made changes...\n                } else {\n                    data.site.restore(snapshot); // need to undo any changes...\n                    snapshot.free();\n                }\n\n                // Finished with this instance!\n            }\n        } while (didSomething && buildStep.repeatUntilNoProgress);\n\n        GWU.grid.free(candidates);\n\n        if (\n            !buildStep.count.contains(builtCount) &&\n            !buildStep.generateEverywhere &&\n            !buildStep.repeatUntilNoProgress\n        ) {\n            this.log.onStepFail(\n                data,\n                buildStep,\n                `Failed to build enough instances - want: ${buildStep.count.toString()}, built: ${builtCount}`\n            );\n            return false;\n        }\n\n        this.log.onStepSuccess(data, buildStep);\n\n        return true;\n    }\n\n    _buildStepInstance(\n        data: BuildData,\n        buildStep: STEP.BuildStep,\n        x: number,\n        y: number,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): boolean {\n        let success = true;\n        let didSomething = true;\n\n        const site = data.site;\n\n        if (success && buildStep.treatAsBlocking) {\n            // Yes, check for blocking.\n            const options: Partial<DisruptOptions> = {\n                machine: site.machineCount,\n            };\n            if (buildStep.noBlockOrigin) {\n                options.updateWalkable = (g) => {\n                    g[data.originX][data.originY] = 1;\n                    return true;\n                };\n            }\n            if (SITE.siteDisruptedByXY(site, x, y, options)) {\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'instance blocks map'\n                );\n                success = false;\n            }\n        }\n\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (success && buildStep.feature) {\n            success = buildStep.feature(site, x, y);\n            didSomething = success;\n            if (!success) {\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to build effect - ' +\n                        JSON.stringify(buildStep.feature)\n                );\n            }\n        }\n\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile) {\n            if (\n                !buildStep.permitBlocking &&\n                site.tileBlocksMove(buildStep.tile) &&\n                !buildStep.treatAsBlocking // already did treatAsBlocking\n            ) {\n                if (\n                    SITE.siteDisruptedByXY(site, x, y, {\n                        machine: site.machineCount,\n                    })\n                ) {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'tile blocks site'\n                    );\n                    success = false;\n                }\n            }\n\n            if (success) {\n                success = site.setTile(x, y, buildStep.tile);\n                didSomething = didSomething || success;\n                if (!success) {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'failed to set tile - ' + buildStep.tile\n                    );\n                }\n            }\n        }\n\n        let torch: ITEM.ItemInstance | null = adoptedItem;\n\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const itemInfo = ITEM.pickItem(data.site.depth, buildStep.item);\n\n            if (!itemInfo) {\n                success = false;\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to make random item - ' +\n                        JSON.stringify(buildStep.item)\n                );\n            } else {\n                const item = ITEM.makeItem(itemInfo);\n                if (buildStep.itemIsKey) {\n                    item.key = {\n                        x,\n                        y,\n                        disposable: !!buildStep.keyIsDisposable,\n                    };\n                }\n\n                if (buildStep.outsourceItem) {\n                    const result = this.buildRandom(\n                        data.site,\n                        BLUE.Flags.BP_ADOPT_ITEM,\n                        -1,\n                        -1,\n                        item\n                    );\n                    if (result) {\n                        didSomething = true;\n                    } else {\n                        this.log.onStepInstanceFail(\n                            data,\n                            buildStep,\n                            x,\n                            y,\n                            'Failed to build machine to adopt item - ' + item.id\n                        );\n                        success = false;\n                    }\n                } else if (buildStep.hordeTakesItem) {\n                    torch = item;\n                } else {\n                    success = site.addItem(x, y, item) > 0;\n                    didSomething = didSomething || success;\n                    if (!success) {\n                        this.log.onStepInstanceFail(\n                            data,\n                            buildStep,\n                            x,\n                            y,\n                            'Failed to add item to site - ' + item.id\n                        );\n                    }\n                }\n            }\n        } else if (success && buildStep.adoptItem) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error(\n                    'Failed to build blueprint because there is no adopted item.'\n                );\n            }\n\n            if (success) {\n                success = site.addItem(x, y, adoptedItem) > 0;\n                if (success) {\n                    didSomething = true;\n                } else {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'Failed to add adopted item to site - ' + adoptedItem.id\n                    );\n                }\n            }\n        }\n\n        let torchBearer: HORDE.ActorInstance | null = null;\n\n        if (success && buildStep.horde) {\n            let horde = HORDE.pickHorde(\n                data.site.depth,\n                buildStep.horde,\n                site.rng\n            );\n            // if (buildStep.horde.random) {\n            //     horde = GWM.horde.random({ rng: site.rng });\n            // } else if (buildStep.horde.id) {\n            //     horde = GWM.horde.from(buildStep.horde.id);\n            // } else {\n            //     buildStep.horde.rng = site.rng;\n            //     horde = GWM.horde.random(buildStep.horde);\n            // }\n            if (!horde) {\n                success = false;\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to pick horde - ' + JSON.stringify(buildStep.horde)\n                );\n            } else {\n                if (horde.blueprint) {\n                    const blueprint = BLUE.get(horde.blueprint);\n                    const newData = new BuildData(\n                        data.site,\n                        blueprint,\n                        data.machineNumber\n                    );\n                    const result = this._build(newData, x, y, null);\n                    newData.free();\n                    if (!result) {\n                        return false;\n                    }\n                }\n\n                const leader = HORDE.spawnHorde(horde, site, x, y, {\n                    machine: site.machineCount,\n                });\n                if (!leader) {\n                    success = false;\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'Failed to build horde - ' + horde\n                    );\n                } else {\n                    // What to do now?\n                    didSomething = true;\n\n                    // leader adopts item...\n                    if (torch && buildStep.hordeTakesItem) {\n                        torchBearer = leader;\n                        torchBearer.item = torch;\n                        torch.x = -1;\n                        torch.y = -1;\n                    }\n\n                    if (horde.feature) {\n                        horde.feature(site, x, y);\n                    }\n\n                    if (buildStep.horde.feature) {\n                        buildStep.horde.feature(site, x, y);\n                    }\n                }\n            }\n        }\n\n        if (success && didSomething) {\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!data.blueprint.noInteriorFlag) {\n                site.setMachine(\n                    x,\n                    y,\n                    data.machineNumber,\n                    data.blueprint.isRoom\n                );\n            }\n\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.impregnable) {\n                site.makeImpregnable(x, y);\n            }\n\n            this.log.onStepInstanceSuccess(data, buildStep, x, y);\n        } else if (didSomething) {\n            // roll back any changes?\n        }\n\n        return success && didSomething;\n    }\n}\n\n////////////////////////////////////////////////////\n// TODO - Change this!!!\n// const blue = BLUE.get(id | blue);\n// const result =  blue.buildAt(map, x, y);\n//\nexport function build(\n    blueprint: BlueType,\n    site: Site,\n    x: number,\n    y: number,\n    opts?: Partial<BuilderOptions>\n): BuildResult {\n    const builder = new Builder(opts);\n\n    return builder.build(site, blueprint, x, y);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\nimport * as LEVEL from './digger';\n\nimport * as TYPES from './types';\nimport * as ROOM from './room';\n// import * as HALL from './hall';\n// import * as LOOP from './loop';\n// import * as LAKE from './lake';\n// import * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as DIG from './digger';\nimport { RoomOptions } from '.';\n\nexport interface DungeonOptions extends DIG.DiggerOptions {\n    // seed?: number;\n    levels: number;\n    goesUp?: boolean;\n\n    width: number;\n    height: number;\n\n    entrance?: string | string[] | Record<string, number> | ROOM.RoomDigger;\n\n    startLoc?: GWU.xy.Loc;\n    startTile?: TYPES.TileId;\n    stairDistance?: number;\n\n    endLoc?: GWU.xy.Loc;\n    endTile?: TYPES.TileId;\n\n    // rooms?: {\n    //     count?: number;\n    //     digger?: string | ROOM.RoomDigger;\n    //     entrance?: string | ROOM.RoomDigger;\n    //     first?: string | ROOM.RoomDigger;\n    // };\n\n    // halls?: Partial<HALL.HallOptions>;\n    // loops?: Partial<LOOP.LoopOptions>;\n    // lakes?: Partial<LAKE.LakeOpts>;\n    // bridges?: Partial<BRIDGE.BridgeOpts>;\n    // stairs?: Partial<STAIRS.StairOpts>;\n\n    // boundary?: boolean;\n}\n\nexport type LocPair = [GWU.xy.Loc, GWU.xy.Loc];\n\nexport class Dungeon {\n    // @ts-ignore\n    config: DungeonOptions = {\n        levels: 1,\n        width: 80,\n        height: 34,\n        rooms: { fails: 20 },\n        // rooms: { count: 20, digger: 'DEFAULT' },\n        // halls: {},\n        // loops: {},\n        // lakes: {},\n        // bridges: {},\n        // stairs: {},\n\n        boundary: true,\n    };\n    seeds: number[] = [];\n    stairLocs: LocPair[] = [];\n\n    constructor(options: DungeonOptions) {\n        GWU.object.setOptions(this.config, options);\n\n        if (this.config.seed) {\n            GWU.rng.random.seed(this.config.seed);\n        }\n\n        if (typeof this.config.stairs === 'boolean' || !this.config.stairs) {\n            this.config.stairs = {};\n        }\n        if (!this.config.rooms) {\n            this.config.rooms = {};\n        } else if (typeof this.config.rooms === 'number') {\n            this.config.rooms = { count: this.config.rooms };\n        }\n\n        this._initSeeds();\n        this._initStairLocs();\n    }\n\n    get length() {\n        return this.config.levels;\n    }\n\n    _initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.rng.random.number(2 ** 32);\n        }\n    }\n\n    _initStairLocs() {\n        let startLoc: GWU.xy.Loc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n\n        const minDistance =\n            this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n\n        let needUpdate = false;\n        for (let i = 0; i < this.config.levels; ++i) {\n            let endLoc: GWU.xy.Loc;\n\n            if (\n                this.stairLocs[i] &&\n                this.stairLocs[i][1] &&\n                this.stairLocs[i][1][0] > 0\n            ) {\n                endLoc = this.stairLocs[i][1];\n                needUpdate =\n                    GWU.xy.distanceBetween(\n                        startLoc[0],\n                        startLoc[1],\n                        endLoc[0],\n                        endLoc[1]\n                    ) < minDistance;\n            } else {\n                endLoc = GWU.rng.random.matchingLoc(\n                    this.config.width,\n                    this.config.height,\n                    (x, y) => {\n                        return (\n                            GWU.xy.distanceBetween(\n                                startLoc[0],\n                                startLoc[1],\n                                x,\n                                y\n                            ) > minDistance\n                        );\n                    }\n                );\n            }\n\n            this.stairLocs[i] = [\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ];\n            startLoc = endLoc;\n        }\n\n        if (needUpdate) {\n            // loop does not go all the way to level 0\n            for (let i = this.config.levels - 1; i > 0; --i) {\n                let [startLoc, endLoc] = this.stairLocs[i];\n\n                if (\n                    GWU.xy.distanceBetween(\n                        startLoc[0],\n                        startLoc[1],\n                        endLoc[0],\n                        endLoc[1]\n                    ) > minDistance\n                ) {\n                    break;\n                }\n\n                startLoc = GWU.rng.random.matchingLoc(\n                    this.config.width,\n                    this.config.height,\n                    (x, y) => {\n                        return (\n                            GWU.xy.distanceBetween(endLoc[0], endLoc[1], x, y) >\n                            minDistance\n                        );\n                    }\n                );\n\n                this.stairLocs[i][0] = startLoc;\n                this.stairLocs[i - 1][1] = startLoc;\n            }\n        }\n    }\n\n    getLevel(id: number, cb: TYPES.DigFn) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n\n        const stairOpts = Object.assign(\n            {},\n            this.config.stairs as Partial<STAIRS.StairOpts>\n        );\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        } else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n\n        const rooms = Object.assign(\n            {},\n            this.config.rooms as Partial<RoomOptions>\n        );\n        if (id === 0 && this.config.entrance) {\n            rooms.first = this.config.entrance;\n        }\n\n        let width = this.config.width,\n            height = this.config.height;\n        // if (cb instanceof GWM.map.Map) {\n        //     width = cb.width;\n        //     height = cb.height;\n        // }\n\n        const levelOpts = {\n            seed: this.seeds[id],\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n\n            rooms: rooms,\n\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n\n            goesUp: this.config.goesUp,\n            width,\n            height,\n        };\n\n        return this._makeLevel(id, levelOpts, cb);\n\n        // TODO - Update startLoc, endLoc\n    }\n\n    _makeLevel(id: number, opts: LEVEL.DiggerOptions, cb: TYPES.DigFn) {\n        const digger = new LEVEL.Digger(opts);\n        let result = false;\n        // if (cb instanceof GWM.map.Map) {\n        //     result = digger.create(cb);\n        // } else {\n        result = digger.create(this.config.width, this.config.height, cb);\n        // }\n\n        this.stairLocs[id] = [digger.locations.start, digger.locations.end];\n\n        // if (cb instanceof GWM.map.Map) {\n        //     const locs = this.stairLocs[id];\n        //     if (this.config.goesUp) {\n        //         cb.locations.down = cb.locations.start = locs[0];\n        //         cb.locations.up = cb.locations.end = locs[1];\n        //     } else {\n        //         cb.locations.down = cb.locations.start = locs[1];\n        //         cb.locations.up = cb.locations.end = locs[0];\n        //     }\n        // }\n        return result;\n    }\n}\n"],"names":["TileFactory","[object Object]","withDefaults","factory","this","tileIds","install","priority","ch","index","blocksMove","blocksVision","door","secretDoor","stairs","liquid","impregnable","plugin","plugins","push","name","id","undefined","allTiles","getTile","info","opts","base","length","tags","extends","root","Object","assign","Error","GWU","object","assignOmitting","make","text","replace","search","Number","parseInt","tile","substring","delta","blocksPathing","apply","config","forEach","p","createTile","tileFactory","tileId","features","types","installType","fn","feature","Array","isArray","featureFeature","bind","site","x","y","feat","FALSE","parts","split","shift","toLowerCase","handler","steps","map","filter","a","entries","key","every","step","makeArray","cfg","c","s","src","includes","superpriority","blockedByActors","blockedByItems","tileAction","machine","setTile","chance","endsWith","parseFloat","chanceAction","rng","Fl","flag","fl","Flags","spread","args","t","trim","grow","decrement","flags","from","matchTile","indexOf","action","spreadFeature","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","didSomething","spawnMap","grid","alloc","width","height","computeSpawnMap","mapDisruptedBy","free","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","update","v","i","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","xy","forRect","j","lakeX","lakeY","get","isStairs","first","floodFill","cellIsOk","effect","isStart","hasXY","isProtected","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","hasTile","dir","x2","y2","madeChange","startProb","probDec","fill","count","DIRS","_flags","clearTile","blockingMap","eachActor","loc","matchingLocNear","forbidsActor","eachItem","forbidsItem","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","hordes","pickHorde","depth","rules","tagMatch","random","makeMatch","find","h","choices","horde","freq","frequency","weighted","spawnHorde","canSpawn","TRUE","leader","canSpawnActor","matchingLoc","hasActor","_pickLeaderLoc","_opts","addActor","_addLeader","_spawnLeader","members","kindId","value","_spawnMember","_spawnMembers","member","instance","actor","_pickMemberLoc","_addMember","items","pickItem","tagRules","item","makeItem","directionOfDoorSite","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","isFloor","chooseRandomDoorSites","k","doorSiteFailed","DOORS","w","isDiggable","isSet","doorSites","siteDisruptedByXY","options","offsetX","offsetY","arcCount","isPassable","result","siteDisruptedBy","blockingX","blockingY","getMachine","updateWalkable","siteDisruptedSize","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","_maxDistance","reset","setGoal","calculate","path","OK","blocksDiagonal","OBSTRUCTION","BLOCKED","clearInteriorFlag","needsMachine","setMachine","analyze","updateChokeCounts","updateLoopiness","updateChokepoints","updateCounts","blockMap","isSecretDoor","passableArcCount","clearChokepoint","isInLoop","oldX","CLOCK_DIRS","oldY","setChokepoint","left","right","up","down","setGateSite","setChokeCount","isChokepoint","cellCount","floodFillCount","i2","j2","getChokeCount","results","startX","startY","getCount","isAreaMachine","todo","pop","resetLoopiness","checkLoopiness","cleanLoopiness","setInLoop","clearInLoop","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","designationSurvives","Site","machineCount","tiles","_tiles","_doors","_machine","_chokeCounts","fmt","dump","other","copy","slice","actors","otherX","otherY","seed","isBoundaryXY","isDoor","isBridge","isShallow","_x","_y","isNothing","isDeep","isInMachine","IMPREGNABLE","CHOKEPOINT","GATE_SITE","IN_LOOP","ANALYZE.analyze","snapshot","isRoom","IN_MACHINE","IN_AREA_MACHINE","_v","Utils.directionOfDoorSite","hasItem","_actor","cb","_a","some","_i","NullLogger","StepFlags","CandidateType","BuildStep","pad","range","FEATURE.make","BS_ADOPT_ITEM","buildAtOrigin","hi","repeatUntilNoProgress","hordeTakesItem","allowBoundary","BS_ALLOW_BOUNDARY","notInHallway","BS_NOT_IN_HALLWAY","buildInWalls","BS_BUILD_IN_WALLS","buildAnywhere","BS_BUILD_ANYWHERE_ON_LEVEL","BS_REPEAT_UNTIL_NO_PROGRESS","permitBlocking","BS_PERMIT_BLOCKING","treatAsBlocking","BS_TREAT_AS_BLOCKING","BS_NO_BLOCK_ORIGIN","noBlockOrigin","adoptItem","itemIsKey","BS_ITEM_IS_KEY","keyIsDisposable","BS_KEY_DISPOSABLE","outsourceItem","BS_OUTSOURCE_ITEM_TO_MACHINE","BS_IMPREGNABLE","buildVestibule","BS_BUILD_VESTIBULE","BS_HORDE_TAKES_ITEM","generateEverywhere","BS_EVERYWHERE","BS_BUILD_AT_ORIGIN","buildsInstances","data","candidates","distanceBound","updateViewMap","blueprint","candidateType","cellIsCandidate","_data","JSON","stringify","lo","toString","join","builder","buildStep","BS_IN_VIEW_OF_ORIGIN","BS_IN_PASSABLE_VIEW_OF_ORIGIN","fov","FOV","isBlocked","viewMap","calcDistanceBound","BS_NEAR_ORIGIN","distance25","BS_FAR_FROM_ORIGIN","distance75","IN_HALLWAY","ON_BOUNDARY","MUST_BE_ORIGIN","NOT_ORIGIN","occupied","OCCUPIED","NOT_IN_VIEW","distance","getDistance","TOO_FAR","TOO_CLOSE","cellMachine","interior","machineNumber","failed","neighborMachine","INVALID_WALL","NOT_CANDIDATE","blocksItems","FAILED","ConsoleLogger","console","group","groupEnd","room","roomSite","_site","_room","_roomSite","error","log","label","size","wantCount","haveCount","_step","requiredTile","cells","line","source","costGrid","Hall","Bounds","super","dx","dy","doors","d","makeHall","dirIndex","hallLength","hallWidth","abs","Room","cx","floor","cy","hall","translate","checkConfig","expected","expect","have","RoomDigger","_setOptions","carve","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","randomRoom","ERROR","create","Cavern","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","DOWN","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","top","bottom","isDoorLoc","pickWidth","utils","clamp","Range","weights","_pickWidth","pickLength","lengths","UP","pickHallDirection","dirs","sequence","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.makeHall","lower","higher","actual","halls","Lakes","tries","canDisrupt","wreathTile","wreathChance","wreathSize","assignObject","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","DijkstraMap","dirCoords","seq","isAnyLiquid","bridgeDir","SITE.computeDistanceMap","isBridgeCandidate","_bridgeDir","Stairs","start","upTile","downTile","wall","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","distanceBetween","setupStairs","end","wallTile","indexes","x0","y0","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","Digger","fails","SITE.tileFactory","setOptions","goesUp","startLoc","_locs","endLoc","loops","lakes","bridges","LOGGER.NullLogger","SITE.Site","needsFree","dest","_createSite","_create","addRooms","addLoops","onLoopsAdded","addLakes","onLakesAdded","addBridges","onBridgesAdded","addStairs","onStairsAdded","finish","number","setSeed","clear","stair","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","addFirstRoom","updateDoorDirs","onDigFirstRoom","maxFails","addRoom","shuffle","_makeRoomSite","getDigger","_attachRoomAtLoc","HALL.dig","onRoomCandidate","_attachRoom","onRoomSuccess","onRoomFailed","len","getDoorDir","oppDir","_roomFitsAt","copyTiles","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","locs","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","boundaryTile","boundary","BuildData","maxDistance","qualifyingTileCount","distances","dist","Blueprint","STEP.BuildStep","BP_ADOPT_ITEM","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","BP_NOT_IN_HALLWAY","requiredFlags","want","alternativeFlags","STEP.StepFlags","BS_ALTERNATIVE","BS_ALTERNATIVE_2","keepFeature","totalFreq","randIndex","_f","addTileToInteriorAndIterate","computeVestibuleInterior","goalSize","n","isOccupied","markCandidates","buildData","isGateSite","contains","pickCandidateLoc","randSite","doorChokeCount","vestibuleLoc","vestibuleChokeCount","roomSize","wantSize","distMap","startChokeCount","additional","minimumInteriorNeighbors","interiorNeighborCount","interiorCount","maxInteriorCount","gen","prepareInterior","blueprints","Builder","values","BLUE.get","BLUE.blueprints","b","qualifies","requiredMachineFlags","BLUE.Flags","adoptedItem","_pickRandom","onBuildError","onBlueprintPick","_buildAt","_build","_markCandidates","BLUE.pickCandidateLoc","onBlueprintFail","onBlueprintStart","_computeInterior","nextMachineId","BLUE.prepareInterior","calcDistances","components","pickComponents","component","_buildStep","restore","SITE.clearInteriorFlag","onBlueprintSuccess","BLUE.markCandidates","onBlueprintCandidates","fail","fillInterior","SITE.siteDisruptedBy","SITE.siteDisruptedSize","onBlueprintInterior","builtCount","onStepStart","STEP.calcDistanceBound","buildRandom","onStepFail","onStepSuccess","onStepCandidates","_buildStepInstance","makePersonalSpace","g","SITE.siteDisruptedByXY","onStepInstanceFail","tileBlocksMove","torch","itemInfo","ITEM.pickItem","ITEM.makeItem","disposable","addItem","torchBearer","HORDE.pickHorde","newData","HORDE.spawnHorde","onStepInstanceSuccess","build","matches","levels","_initSeeds","_initStairLocs","seeds","stairDistance","needUpdate","stairLocs","stairOpts","startTile","endTile","entrance","levelOpts","_makeLevel","LEVEL.Digger"],"mappings":"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"}