{"version":3,"file":"gw-dig.min.js","sources":["../js/site/digSite.js","../js/site/utils.js","../js/site/gridSite.js","../js/site/mapSite.js","../js/types.js","../js/room.js","../js/hall.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/log/logger.js","../js/blueprint/buildStep.js","../js/blueprint/blueprint.js","../js/log/consoleLogger.js","../js/digger.js","../js/blueprint/data.js","../js/blueprint/builder.js","../js/log/visualizer.js","../js/dungeon.js"],"sourcesContent":["var _a, _b;\nimport * as GWM from 'gw-map';\nexport const NOTHING = GWM.tile.get('NULL').index;\nexport const FLOOR = GWM.tile.get('FLOOR').index;\nexport const DOOR = GWM.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GWM.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GWM.tile.get('WALL').index;\nexport const DEEP = GWM.tile.get('LAKE').index;\nexport const SHALLOW = GWM.tile.get('SHALLOW').index;\nexport const BRIDGE = GWM.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GWM.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GWM.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GWM.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\n// import * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = site.rng.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = site.rng.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = site.rng.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GWU.xy.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n}\nexport function siteDisruptedByXY(site, x, y, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    if (GWU.xy.arcCount(x, y, (i, j) => {\n        return site.isPassable(i, j);\n    }) <= 1)\n        return false;\n    const blockingGrid = GWU.grid.alloc(site.width, site.height);\n    blockingGrid[x][y] = 1;\n    const result = siteDisruptedBy(site, blockingGrid, options);\n    GWU.grid.free(blockingGrid);\n    return result;\n}\nexport function siteDisruptedBy(site, blockingGrid, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const blockingX = i + options.offsetX;\n        const blockingY = j + options.offsetY;\n        if (blockingGrid.get(blockingX, blockingY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (options.updateWalkable) {\n        if (!options.updateWalkable(walkableGrid)) {\n            return true;\n        }\n    }\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GWU.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GWU.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GWU.grid.free(costGrid);\n}\nexport function clearInteriorFlag(site, machine) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine &&\n                !site.hasCellFlag(i, j, GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as Utils from './utils';\nimport * as DIG from './digSite';\nexport class GridSite {\n    constructor(width, height) {\n        this.rng = GWU.rng.random;\n        this.tiles = GWU.grid.alloc(width, height);\n        this.doors = GWU.grid.alloc(width, height);\n    }\n    free() {\n        GWU.grid.free(this.tiles);\n        GWU.grid.free(this.doors);\n    }\n    clear() {\n        this.tiles.fill(0);\n        this.doors.fill(0);\n    }\n    dump() {\n        this.tiles.dump();\n    }\n    drawInto(buffer) {\n        buffer.blackOut();\n        this.tiles.forEach((t, x, y) => {\n            const tile = GWM.tile.get(t);\n            buffer.drawSprite(x, y, tile.sprite);\n        });\n    }\n    setSeed(seed) {\n        this.rng.seed(seed);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == DIG.FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.WALL || v === DIG.IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.UP_STAIRS || v === DIG.DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DIG.DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === DIG.SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    getMachine(_x, _y) {\n        return 0;\n    }\n    updateDoorDirs() {\n        this.doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x, y) {\n        return this.doors[x][y];\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as Utils from './utils';\nconst Flags = GWM.flags.Cell;\nexport class MapSnapshot {\n    constructor(site, snap) {\n        this.machineCount = 0;\n        this.needsAnalysis = true;\n        this.isUsed = false;\n        this.site = site;\n        this.snapshot = snap;\n        this.machineCount = this.site.machineCount;\n        this.needsAnalysis = this.site.needsAnalysis;\n        this.isUsed = true;\n    }\n    restore() {\n        this.site.snapshots.revertMapTo(this.snapshot);\n        this.site.machineCount = this.machineCount;\n        this.site.needsAnalysis = this.needsAnalysis;\n        this.cancel();\n    }\n    cancel() {\n        this.site.snapshots.release(this.snapshot);\n    }\n}\nexport class MapSite {\n    constructor(map) {\n        this.machineCount = 0;\n        this.needsAnalysis = true;\n        this.map = map;\n        this.doors = GWU.grid.alloc(map.width, map.height);\n        this.snapshots = new GWM.map.SnapshotManager(map);\n    }\n    get rng() {\n        return this.map.rng;\n    }\n    // get seed() {\n    //     return this.map.seed;\n    // }\n    // set seed(v: number) {\n    //     this.map.seed = v;\n    // }\n    setSeed(seed) {\n        this.map.seed = seed;\n    }\n    get width() {\n        return this.map.width;\n    }\n    get height() {\n        return this.map.height;\n    }\n    dump() {\n        this.map.dump();\n    }\n    drawInto(buffer) {\n        this.map.drawInto(buffer);\n    }\n    hasXY(x, y) {\n        return this.map.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.map.isBoundaryXY(x, y);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.map.cellInfo(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).clearCellFlag(flag);\n    }\n    hasTile(x, y, tile) {\n        return this.map.cellInfo(x, y).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        this.needsAnalysis = true;\n        return this.map.setTile(x, y, tile, opts);\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.map.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    clear() {\n        this.needsAnalysis = true;\n        this.map.cells.forEach((c) => c.clear());\n    }\n    hasItem(x, y) {\n        return this.map.cellInfo(x, y).hasItem();\n    }\n    makeRandomItem(tags) {\n        if (typeof tags === 'string') {\n            tags = { tags };\n        }\n        tags.rng = this.rng;\n        return GWM.item.makeRandom(tags);\n    }\n    addItem(x, y, item) {\n        this.needsAnalysis = true;\n        return this.map.forceItem(x, y, item);\n    }\n    hasActor(x, y) {\n        return this.map.hasActor(x, y);\n    }\n    blocksMove(x, y) {\n        return this.map.cellInfo(x, y).blocksMove();\n    }\n    blocksVision(x, y) {\n        return this.map.cellInfo(x, y).blocksVision();\n    }\n    blocksDiagonal(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return (info.hasEntityFlag(GWM.flags.Entity.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GWM.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isWall(x, y) {\n        return this.map.cellInfo(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.map.cellInfo(x, y).isStairs();\n    }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.map.cell(x, y).isEmpty();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.isEmpty())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.map.cell(x, y).isEmpty();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    isDeep(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (!!cell.depthTile(GWM.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (cell.hasDepthTile(GWM.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    isPassable(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return !(info.blocksMove() || info.blocksPathing());\n    }\n    // tileBlocksMove(tile: number): boolean {\n    //     return GWM.tile.get(tile).blocksMove();\n    // }\n    snapshot() {\n        return new MapSnapshot(this, this.snapshots.takeNew());\n    }\n    free() {\n        GWU.grid.free(this.doors);\n    }\n    getChokeCount(x, y) {\n        return this.map.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.map.cell(x, y).chokeCount = count;\n    }\n    analyze() {\n        if (this.needsAnalysis) {\n            GWM.map.analyze(this.map);\n        }\n        this.needsAnalysis = false;\n    }\n    buildEffect(effect, x, y) {\n        this.needsAnalysis = true;\n        return GWM.effect.fireSync(effect, this.map, x, y, { rng: this.rng });\n    }\n    nextMachineId() {\n        return ++this.machineCount;\n    }\n    getMachine(x, y) {\n        return this.map.cell(x, y).machineId;\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).machineId = id;\n        if (id == 0) {\n            this.map.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.map.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n    updateDoorDirs() {\n        this.doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x, y) {\n        return this.doors[x][y];\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Hall extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport function makeHall(loc, dirIndex, hallLength, hallWidth = 1) {\n    const dir = GWU.xy.DIRS[dirIndex];\n    const x = Math.min(loc[0], loc[0] + dir[0] * (hallLength - 1));\n    const y = Math.min(loc[1], loc[1] + dir[1] * (hallLength - 1));\n    const width = Math.abs(dir[0] * hallLength) || hallWidth;\n    const height = Math.abs(dir[1] * hallLength) || hallWidth;\n    return new Hall(x, y, width, height);\n}\nexport class Room extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = (rng) => rng.item(choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = (rng) => rng.weighted(choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom(site.rng);\n        const room = rooms[id];\n        if (!room) {\n            GWU.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GWU.blob.Blob({\n            rng: site.rng,\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * site.rng.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * site.rng.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX + site.rng.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            site.rng.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * site.rng.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * site.rng.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value(site.rng);\n        const ringMinWidth = this.options.ringMinWidth.value(site.rng);\n        const holeMinSize = this.options.holeMinSize.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            site.rng.chance(this.options.holeChance.value(site.rng))) {\n            GWU.xy.forCircle(x, y, site.rng.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value(site.rng);\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = site.rng.range(minX, maxX);\n            y = site.rng.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(width, rng) {\n    return GWU.clamp(_pickWidth(width, rng), 1, 3);\n}\nfunction _pickWidth(width, rng) {\n    if (!width)\n        return 1;\n    if (typeof width === 'number')\n        return width;\n    rng = rng !== null && rng !== void 0 ? rng : GWU.rng.random;\n    if (Array.isArray(width)) {\n        width = rng.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GWU.range.make(width).value(rng);\n    }\n    else if (width instanceof GWU.range.Range) {\n        width = width.value(rng);\n    }\n    else {\n        const weights = width;\n        width = Number.parseInt(rng.weighted(weights));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths, rng) {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value(rng);\n    }\n    else {\n        return lengths[0].value(rng);\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = site.rng.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = site.rng.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: 1,\n            length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = options.width;\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n        if (!site.rng.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = pickWidth(this.config.width, site.rng);\n        const length = pickLength(dir, this.config.length, site.rng);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = TYPES.makeHall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GWU.xy.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = TYPES.makeHall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        // hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = site.rng.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GWU.blob.Blob({\n                rng: site.rng,\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = site.rng.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = site.rng.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GWU.xy.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n        const seq = site.rng.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GWU.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc = null;\n        let downLoc = null;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = site.rng.matchingLocNear(GWU.xy.x(start), GWU.xy.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GWU.xy.distanceBetween(x, y, downLoc[0], downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = site.rng.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GWU.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n            doorChance: 50,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = site.rng.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = site.rng.chance(this.options.doorChance)\n                                ? SITE.DOOR\n                                : SITE.FLOOR;\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","export class NullLogger {\n    async onDigFirstRoom() { }\n    async onRoomCandidate() { }\n    async onRoomFailed() { }\n    async onRoomSuccess() { }\n    async onLoopsAdded() { }\n    async onLakesAdded() { }\n    async onBridgesAdded() { }\n    async onStairsAdded() { }\n    async onBuildError() { }\n    async onBlueprintPick() { }\n    async onBlueprintCandidates() { }\n    async onBlueprintStart() { }\n    async onBlueprintInterior() { }\n    async onBlueprintFail() { }\n    async onBlueprintSuccess() { }\n    async onStepStart() { }\n    async onStepCandidates() { }\n    async onStepInstanceSuccess() { }\n    async onStepInstanceFail() { }\n    async onStepSuccess() { }\n    async onStepFail() { }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nconst Fl = GWU.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    StepFlags[StepFlags[\"BF_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BF_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BF_BUILD_VESTIBULE\"] = Fl(2)] = \"BF_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BF_ADOPT_ITEM\"] = Fl(3)] = \"BF_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BF_BUILD_AT_ORIGIN\"] = Fl(4)] = \"BF_BUILD_AT_ORIGIN\";\n    StepFlags[StepFlags[\"BF_PERMIT_BLOCKING\"] = Fl(5)] = \"BF_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BF_TREAT_AS_BLOCKING\"] = Fl(6)] = \"BF_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BF_NEAR_ORIGIN\"] = Fl(7)] = \"BF_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BF_FAR_FROM_ORIGIN\"] = Fl(8)] = \"BF_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_VIEW_OF_ORIGIN\"] = Fl(9)] = \"BF_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(10)] = \"BF_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_MONSTER_TAKE_ITEM\"] = Fl(11)] = \"BF_MONSTER_TAKE_ITEM\";\n    StepFlags[StepFlags[\"BF_MONSTER_SLEEPING\"] = Fl(12)] = \"BF_MONSTER_SLEEPING\";\n    StepFlags[StepFlags[\"BF_MONSTER_FLEEING\"] = Fl(13)] = \"BF_MONSTER_FLEEING\";\n    StepFlags[StepFlags[\"BF_MONSTERS_DORMANT\"] = Fl(14)] = \"BF_MONSTERS_DORMANT\";\n    StepFlags[StepFlags[\"BF_ITEM_IS_KEY\"] = Fl(15)] = \"BF_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BF_ITEM_IDENTIFIED\"] = Fl(16)] = \"BF_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BF_ITEM_PLAYER_AVOIDS\"] = Fl(17)] = \"BF_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BF_EVERYWHERE\"] = Fl(18)] = \"BF_EVERYWHERE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE\"] = Fl(19)] = \"BF_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE_2\"] = Fl(20)] = \"BF_ALTERNATIVE_2\";\n    StepFlags[StepFlags[\"BF_BUILD_IN_WALLS\"] = Fl(21)] = \"BF_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BF_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BF_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BF_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BF_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BF_IMPREGNABLE\"] = Fl(24)] = \"BF_IMPREGNABLE\";\n    StepFlags[StepFlags[\"BF_NO_BLOCK_ORIGIN\"] = Fl(25)] = \"BF_NO_BLOCK_ORIGIN\";\n    // TODO - BF_ALLOW_IN_HALLWAY instead?\n    StepFlags[StepFlags[\"BF_NOT_IN_HALLWAY\"] = Fl(27)] = \"BF_NOT_IN_HALLWAY\";\n    StepFlags[StepFlags[\"BF_ALLOW_BOUNDARY\"] = Fl(28)] = \"BF_ALLOW_BOUNDARY\";\n    StepFlags[StepFlags[\"BF_SKELETON_KEY\"] = Fl(29)] = \"BF_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BF_KEY_DISPOSABLE\"] = Fl(30)] = \"BF_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    constructor(cfg = {}) {\n        var _a;\n        this.tile = -1;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        // public next: null = null;\n        this.id = 'n/a';\n        this.tile = (_a = cfg.tile) !== null && _a !== void 0 ? _a : -1;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        this.item = cfg.item || null;\n        this.horde = cfg.horde || null;\n        if (cfg.effect) {\n            this.effect = GWM.effect.from(cfg.effect);\n        }\n        if (this.item && this.flags & StepFlags.BF_ADOPT_ITEM) {\n            throw new Error('Cannot have blueprint step with item and BF_ADOPT_ITEM.');\n        }\n        if (this.buildAtOrigin && this.count.hi > 1) {\n            throw new Error('Cannot have count > 1 for step with BF_BUILD_AT_ORIGIN.');\n        }\n        if (this.buildAtOrigin && this.repeatUntilNoProgress) {\n            throw new Error('Cannot have BF_BUILD_AT_ORIGIN and BF_REPEAT_UNTIL_NO_PROGRESS together in a build step.');\n        }\n    }\n    get allowBoundary() {\n        return !!(this.flags & StepFlags.BF_ALLOW_BOUNDARY);\n    }\n    get notInHallway() {\n        return !!(this.flags & StepFlags.BF_NOT_IN_HALLWAY);\n    }\n    get buildInWalls() {\n        return !!(this.flags & StepFlags.BF_BUILD_IN_WALLS);\n    }\n    get buildAnywhere() {\n        return !!(this.flags & StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL);\n    }\n    get repeatUntilNoProgress() {\n        return !!(this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS);\n    }\n    get permitBlocking() {\n        return !!(this.flags & StepFlags.BF_PERMIT_BLOCKING);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags &\n            (StepFlags.BF_TREAT_AS_BLOCKING | StepFlags.BF_NO_BLOCK_ORIGIN));\n    }\n    get noBlockOrigin() {\n        return !!(this.flags & StepFlags.BF_NO_BLOCK_ORIGIN);\n    }\n    get adoptItem() {\n        return !!(this.flags & StepFlags.BF_ADOPT_ITEM);\n    }\n    get itemIsKey() {\n        return !!(this.flags & StepFlags.BF_ITEM_IS_KEY);\n    }\n    get keyIsDisposable() {\n        return !!(this.flags & StepFlags.BF_KEY_DISPOSABLE);\n    }\n    get outsourceItem() {\n        return !!(this.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE);\n    }\n    get impregnable() {\n        return !!(this.flags & StepFlags.BF_IMPREGNABLE);\n    }\n    get buildVestibule() {\n        return !!(this.flags & StepFlags.BF_BUILD_VESTIBULE);\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BF_EVERYWHERE &\n            ~StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildsInstances() {\n        return !!(this.effect ||\n            this.tile != -1 ||\n            this.item ||\n            this.horde ||\n            this.adoptItem);\n    }\n    // cellIsCandidate(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     x: number,\n    //     y: number,\n    //     distanceBound: [number, number]\n    // ) {\n    //     return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    // }\n    // distanceBound(builder: BuildData): [number, number] {\n    //     return calcDistanceBound(builder, this);\n    // }\n    // updateViewMap(builder: BuildData): void {\n    //     updateViewMap(builder, this);\n    // }\n    // build(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     adoptedItem: GWM.item.Item | null\n    // ): boolean {\n    //     return buildStep(builder, blueprint, this, adoptedItem);\n    // }\n    markCandidates(data, blueprint, candidates, distanceBound = [0, 10000]) {\n        updateViewMap(data, this);\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            if (cellIsCandidate(data, blueprint, this, i, j, distanceBound)) {\n                count++;\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return count;\n    }\n}\nexport function updateViewMap(builder, buildStep) {\n    if (buildStep.flags &\n        (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n            StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        else {\n            const fov = new GWU.fov.FOV({\n                // TileFlags.T_OBSTRUCTS_PASSABILITY |\n                //     TileFlags.T_OBSTRUCTS_VISION,\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\nexport function calcDistanceBound(builder, buildStep) {\n    const distanceBound = [0, 10000];\n    if (buildStep.flags & StepFlags.BF_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BF_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\nexport function cellIsCandidate(builder, blueprint, buildStep, x, y, distanceBound) {\n    const site = builder.site;\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (buildStep.notInHallway &&\n        GWU.xy.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n        return false;\n    }\n    // if (buildStep.noBlockOrigin) {\n    //     let ok = true;\n    //     GWU.xy.eachNeighbor(\n    //         x,\n    //         y,\n    //         (nx, ny) => {\n    //             if (nx === builder.originX && ny === builder.originY) {\n    //                 ok = false;\n    //             }\n    //         },\n    //         true\n    //     );\n    //     if (!ok) return false;\n    // }\n    // No building along the perimeter of the level if it's prohibited.\n    if ((x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1) &&\n        !buildStep.allowBoundary) {\n        return false;\n    }\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.buildAtOrigin) {\n        return x == builder.originX && y == builder.originY;\n    }\n    else if (blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY) {\n        return false;\n    }\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return false;\n    }\n    // Must be in the viewmap if the appropriate flag is set.\n    if (buildStep.flags &\n        (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n            StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]) {\n        return false;\n    }\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (!builder.distanceMap.hasXY(i, j))\n                return;\n            if (!site.blocksPathing(i, j) &&\n                distance > builder.distanceMap[i][j] + 1) {\n                distance = builder.distanceMap[i][j] + 1;\n            }\n        }, true);\n    }\n    else {\n        distance = builder.distanceMap[x][y];\n    }\n    if (distance > distanceBound[1] || // distance exceeds max\n        distance < distanceBound[0]) {\n        // distance falls short of min\n        return false;\n    }\n    if (buildStep.buildInWalls) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (!builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)) {\n            let ok = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(x, y, (newX, newY) => {\n                if (!site.hasXY(newX, newY))\n                    return;\n                if (!builder.interior[newX][newY] &&\n                    !buildStep.buildAnywhere) {\n                    return;\n                }\n                // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                if (buildStep.buildAnywhere &&\n                    !site.blocksPathing(newX, newY) &&\n                    !site.getMachine(newX, newY) &&\n                    !(newX == builder.originX && newY == builder.originY)) {\n                    ok = true;\n                }\n            }, true);\n            return ok;\n        }\n        return false;\n    }\n    else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return false;\n    }\n    else if (buildStep.buildAnywhere) {\n        if ((buildStep.item && site.blocksItems(x, y)) ||\n            site.hasCellFlag(x, y, GWM.flags.Cell.IS_CHOKEPOINT |\n                GWM.flags.Cell.IS_IN_LOOP |\n                GWM.flags.Cell.IS_IN_MACHINE)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    else if (builder.interior[x][y]) {\n        return true;\n    }\n    return false;\n}\nexport function makePersonalSpace(builder, x, y, candidates, personalSpace) {\n    let count = 0;\n    for (let i = x - personalSpace + 1; i <= x + personalSpace - 1; i++) {\n        for (let j = y - personalSpace + 1; j <= y + personalSpace - 1; j++) {\n            if (builder.site.hasXY(i, j)) {\n                if (candidates[i][j]) {\n                    candidates[i][j] = 0;\n                    ++count;\n                }\n                builder.occupied[i][j] = 1;\n            }\n        }\n    }\n    return count;\n}\n// export function buildStep(\n//     builder: BuildData,\n//     blueprint: Blueprint,\n//     buildStep: BuildStep,\n//     adoptedItem: GWM.item.Item | null\n// ): boolean {\n//     let wantCount = 0;\n//     let builtCount = 0;\n//     const site = builder.site;\n//     const candidates = GWU.grid.alloc(site.width, site.height);\n//     // Figure out the distance bounds.\n//     const distanceBound = calcDistanceBound(builder, buildStep);\n//     buildStep.updateViewMap(builder);\n//     // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n//     // Make a master map of candidate locations for this feature.\n//     let qualifyingTileCount = markCandidates(\n//         candidates,\n//         builder,\n//         blueprint,\n//         buildStep,\n//         distanceBound\n//     );\n//     if (!buildStep.generateEverywhere) {\n//         wantCount = buildStep.count.value();\n//     }\n//     if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n//         console.log(\n//             ' - Only %s qualifying tiles - want at least %s.',\n//             qualifyingTileCount,\n//             buildStep.count.lo\n//         );\n//         GWU.grid.free(candidates);\n//         return false;\n//     }\n//     let x = 0,\n//         y = 0;\n//     let success = true;\n//     let didSomething = false;\n//     do {\n//         success = true;\n//         // Find a location for the feature.\n//         if (buildStep.buildAtOrigin) {\n//             // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n//             x = builder.originX;\n//             y = builder.originY;\n//         } else {\n//             // Pick our candidate location randomly, and also strike it from\n//             // the candidates map so that subsequent instances of this same feature can't choose it.\n//             [x, y] = site.rng.matchingLoc(\n//                 candidates.width,\n//                 candidates.height,\n//                 (x, y) => candidates[x][y] > 0\n//             );\n//         }\n//         // Don't waste time trying the same place again whether or not this attempt succeeds.\n//         candidates[x][y] = 0;\n//         qualifyingTileCount--;\n//         // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n//         if (buildStep.effect) {\n//             success = site.fireEffect(buildStep.effect, x, y);\n//             didSomething = success;\n//         }\n//         // Now try to place the terrain tile, if any.\n//         if (success && buildStep.tile !== -1) {\n//             const tile = GWM.tile.get(buildStep.tile);\n//             if (\n//                 !(buildStep.flags & StepFlags.BF_PERMIT_BLOCKING) &&\n//                 (tile.blocksMove() ||\n//                     buildStep.flags & StepFlags.BF_TREAT_AS_BLOCKING)\n//             ) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y, {\n//                     machine: site.machineCount,\n//                 });\n//             }\n//             if (success) {\n//                 success = site.setTile(x, y, tile);\n//                 didSomething = didSomething || success;\n//             }\n//         }\n//         // Generate an actor, if necessary\n//         // Generate an item, if necessary\n//         if (success && buildStep.item) {\n//             const item = site.makeRandomItem(buildStep.item);\n//             if (!item) {\n//                 success = false;\n//             }\n//             if (buildStep.flags & StepFlags.BF_ITEM_IS_KEY) {\n//                 item.key = GWM.entity.makeKeyInfo(\n//                     x,\n//                     y,\n//                     !!(buildStep.flags & StepFlags.BF_KEY_DISPOSABLE)\n//                 );\n//             }\n//             if (buildStep.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE) {\n//                 success = builder.buildRandom(\n//                     Flags.BP_ADOPT_ITEM,\n//                     -1,\n//                     -1,\n//                     item\n//                 );\n//                 if (success) {\n//                     didSomething = true;\n//                 }\n//             } else {\n//                 success = site.addItem(x, y, item);\n//                 didSomething = didSomething || success;\n//             }\n//         } else if (success && buildStep.flags & StepFlags.BF_ADOPT_ITEM) {\n//             // adopt item if necessary\n//             if (!adoptedItem) {\n//                 GWU.grid.free(candidates);\n//                 throw new Error(\n//                     'Failed to build blueprint because there is no adopted item.'\n//                 );\n//             }\n//             if (buildStep.flags & StepFlags.BF_TREAT_AS_BLOCKING) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y);\n//             }\n//             if (success) {\n//                 success = site.addItem(x, y, adoptedItem);\n//                 if (success) {\n//                     didSomething = true;\n//                 } else {\n//                     console.log('- failed to add item', x, y);\n//                 }\n//             } else {\n//                 // console.log('- blocks map', x, y);\n//             }\n//         }\n//         if (success && didSomething) {\n//             // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n//             qualifyingTileCount -= makePersonalSpace(\n//                 builder,\n//                 x,\n//                 y,\n//                 candidates,\n//                 buildStep.pad\n//             );\n//             builtCount++; // we've placed an instance\n//             // Mark the feature location as part of the machine, in case it is not already inside of it.\n//             if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n//                 site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n//             }\n//             // Mark the feature location as impregnable if requested.\n//             if (buildStep.flags & StepFlags.BF_IMPREGNABLE) {\n//                 site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n//             }\n//         }\n//         // Finished with this instance!\n//     } while (\n//         qualifyingTileCount > 0 &&\n//         (buildStep.generateEverywhere ||\n//             builtCount < wantCount ||\n//             buildStep.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS)\n//     );\n//     if (success && buildStep.flags & StepFlags.BF_BUILD_VESTIBULE) {\n//         // Generate a door guard machine.\n//         // Try to create a sub-machine that qualifies.\n//         success = builder.buildRandom(\n//             Flags.BP_VESTIBULE,\n//             builder.originX,\n//             builder.originY\n//         );\n//         if (!success) {\n//             // console.log(\n//             //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n//             // );\n//             // failure! abort!\n//             GWU.grid.free(candidates);\n//             return false;\n//         }\n//         ++builtCount;\n//     }\n//     //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n//     //DEBUG logBuffer(candidates);\n//     success = builtCount > 0;\n//     GWU.grid.free(candidates);\n//     return success;\n// }\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nconst Fl = GWU.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(0)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(2)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(3)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(4)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(5)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(6)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(7)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(8)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(9)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(10)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(11)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(12)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(13)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(14)] = \"BP_NO_INTERIOR_FLAG\";\n    Flags[Flags[\"BP_NOT_IN_HALLWAY\"] = Fl(15)] = \"BP_NOT_IN_HALLWAY\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo <= 0)\n                this.size.lo = 1;\n            if (this.size.hi < this.size.lo)\n                this.size.hi = this.size.lo;\n        }\n        else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (!this.steps.some((s) => s.flags & STEP.StepFlags.BF_ADOPT_ITEM)) {\n                throw new Error('Blueprint wants to BP_ADOPT_ITEM, but has no steps with BF_ADOPT_ITEM.');\n            }\n        }\n        if (opts.id) {\n            this.id = opts.id;\n        }\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    get notInHallway() {\n        return !!(this.flags & Flags.BP_NOT_IN_HALLWAY);\n    }\n    qualifies(requiredFlags, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return false;\n        }\n        if (\n        // Must have the required flags:\n        ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickComponents(rng) {\n        const alternativeFlags = [\n            STEP.StepFlags.BF_ALTERNATIVE,\n            STEP.StepFlags.BF_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = rng.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n    fillInterior(builder) {\n        const interior = builder.interior;\n        const site = builder.site;\n        interior.fill(0);\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            return addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n        }\n        else if (this.isVestiblue) {\n            return computeVestibuleInterior(builder, this);\n            // success\n        }\n        else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n            let distanceMap = builder.distanceMap;\n            SITE.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, this.size.hi);\n            const seq = site.rng.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = this.size.value(); // Keeps track of the goal size.\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (let n = 0; n < seq.length && qualifyingTileCount < goalSize; n++) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n                    if (distanceMap[i][j] == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n                        if (site.isOccupied(i, j) ||\n                            site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            return 0;\n                        }\n                    }\n                }\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            return qualifyingTileCount;\n        }\n    }\n}\nexport function markCandidates(buildData, blueprint) {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    candidates.fill(0);\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n        candidates.update((_v, x, y) => {\n            return site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE) &&\n                blueprint.size.contains(site.getChokeCount(x, y))\n                ? 1\n                : 0;\n        });\n    }\n    else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        throw new Error('ERROR: Attempted to build a vestiblue without a location being provided.');\n    }\n    else {\n        candidates.update((_v, x, y) => {\n            if (!site.isPassable(x, y))\n                return 0;\n            if (blueprint.notInHallway) {\n                const count = GWU.xy.arcCount(x, y, (i, j) => site.isPassable(i, j));\n                return count <= 1 ? 1 : 0;\n            }\n            return 1;\n        });\n    }\n    return candidates.count((v) => v == 1);\n}\nexport function pickCandidateLoc(buildData, _blueprint) {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const randSite = site.rng.matchingLoc(site.width, site.height, (x, y) => candidates[x][y] == 1);\n    if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n        // If no suitable sites, abort.\n        return null;\n    }\n    return randSite;\n}\n// // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n// export function computeInterior(\n//     builder: BuildData,\n//     blueprint: Blueprint\n// ): boolean {\n//     let failsafe = blueprint.isRoom ? 10 : 20;\n//     let tryAgain;\n//     const interior = builder.interior;\n//     const site = builder.site;\n//     do {\n//         tryAgain = false;\n//         if (--failsafe <= 0) {\n//             // console.log(\n//             //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n//             // );\n//             return false;\n//         }\n//         let count = fillInterior(builder, blueprint);\n//         // Now make sure the interior map satisfies the machine's qualifications.\n//         if (!count) {\n//             console.debug('- no interior');\n//             tryAgain = true;\n//         } else if (!blueprint.size.contains(count)) {\n//             console.debug('- too small');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.treatAsBlocking &&\n//             SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })\n//         ) {\n//             console.debug('- blocks');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.requireBlocking &&\n//             SITE.siteDisruptedSize(site, interior) < 100\n//         ) {\n//             console.debug('- does not block');\n//             tryAgain = true;\n//         }\n//         // Now loop if necessary.\n//     } while (tryAgain);\n//     // console.log(tryAgain, failsafe);\n//     return true;\n// }\nexport function computeVestibuleInterior(builder, blueprint) {\n    let success = true;\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n    if (blueprint.size.hi == 1) {\n        interior[builder.originX][builder.originY] = 1;\n        return 1;\n    }\n    // If this is a wall - it is really an error (maybe manually trying a build location?)\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    if (doorChokeCount > 10000) {\n        return 0;\n    }\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(builder.originX, builder.originY, (x, y) => {\n        const count = site.getChokeCount(x, y);\n        if (count == doorChokeCount)\n            return;\n        if (count > 10000)\n            return;\n        if (count < 0)\n            return;\n        vestibuleLoc[0] = x;\n        vestibuleLoc[1] = y;\n        vestibuleChokeCount = count;\n    }, true);\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(vestibuleLoc[0], vestibuleLoc[1], (_v, i, j) => {\n            if (site.isOccupied(i, j)) {\n                success = false;\n            }\n            return site.getChokeCount(i, j) === vestibuleChokeCount;\n        }, 1);\n        if (success && blueprint.size.contains(count))\n            return roomSize;\n    }\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(site.rng); // Keeps track of the goal size.\n    const distMap = builder.distanceMap;\n    SITE.computeDistanceMap(site, distMap, builder.originX, builder.originY, blueprint.size.hi);\n    const cells = site.rng.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (let i = 0; i < cells.length && qualifyingTileCount < wantSize; ++i) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n            const dist = distMap[x][y];\n            if (dist != k)\n                continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount)\n                continue;\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n    return qualifyingTileCount;\n}\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(builder, startX, startY) {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n    let count = 1;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY))\n            continue;\n        if (interior[newX][newY])\n            continue; // already done\n        if (site.isOccupied(newX, newY) ||\n            (site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE) &&\n                !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_GATE_SITE))) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return 0;\n        }\n        if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE)) {\n            let additional = addTileToInteriorAndIterate(builder, newX, newY);\n            if (additional <= 0)\n                return 0;\n            count += additional;\n        }\n    }\n    return count;\n}\nexport function prepareInterior(builder, blueprint) {\n    const interior = builder.interior;\n    const site = builder.site;\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        expandMachineInterior(builder, 1);\n    }\n    else if (blueprint.openInterior) {\n        expandMachineInterior(builder, 4);\n    }\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x, y, SITE.FLOOR);\n        });\n    }\n    // If requested, purge pathing blockers -- no traps allowed.\n    if (blueprint.purgeBlockers) {\n        interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            if (site.blocksPathing(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n        });\n    }\n    // If requested, purge the liquid layer in the interior -- no liquids allowed.\n    if (blueprint.purgeLiquids) {\n        interior.forEach((v, x, y) => {\n            if (v && site.isAnyLiquid(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n        });\n    }\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not valid x,y\n                if (interior[i][j])\n                    return; // is part of machine\n                if (site.isWall(i, j))\n                    return; // is already a wall (of some sort)\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return; // is a door site\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE))\n                    return; // is part of a machine\n                if (!site.blocksPathing(i, j))\n                    return; // is not a blocker for the player (water?)\n                site.setTile(i, j, SITE.WALL);\n            }, false);\n        });\n    }\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (interior[i][j])\n                    return;\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(i, j, GWM.flags.Cell.IMPREGNABLE);\n            }, false);\n        });\n    }\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v)\n            return;\n        if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, SITE.DOOR);\n        }\n    });\n}\nexport function expandMachineInterior(builder, minimumInteriorNeighbors = 1) {\n    let madeChange;\n    const interior = builder.interior;\n    const site = builder.site;\n    do {\n        madeChange = false;\n        interior.forEach((_v, x, y) => {\n            // if (v && site.isDoor(x, y)) {\n            //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n            //     return;\n            // }\n            if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE))\n                return;\n            if (!site.blocksPathing(x, y))\n                return;\n            let nbcount = 0;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not in map\n                if (interior[i][j] && !site.blocksPathing(i, j)) {\n                    ++nbcount; // in machine and open tile\n                }\n            }, false);\n            if (nbcount < minimumInteriorNeighbors)\n                return;\n            nbcount = 0;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // not on map\n                if (interior[i][j])\n                    return; // already part of machine\n                if (!site.isWall(i, j) ||\n                    site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                    ++nbcount; // tile is not a wall or is in a machine\n                }\n            }, false);\n            if (nbcount)\n                return;\n            // Eliminate this obstruction; welcome its location into the machine.\n            madeChange = true;\n            interior[x][y] = 1;\n            if (site.blocksPathing(x, y)) {\n                site.setTile(x, y, SITE.FLOOR);\n            }\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (site.isSet(i, j))\n                    return;\n                site.setTile(i, j, SITE.WALL);\n            });\n        });\n    } while (madeChange);\n}\n///////////////////////////\n// INSTALL\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth, rng) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags) && b.frequency(depth));\n    rng = rng || GWU.rng.random;\n    return rng.item(matches);\n}\nexport function get(id) {\n    if (id instanceof Blueprint)\n        return id;\n    return blueprints[id];\n}\nexport function make(config) {\n    // if (!config.id) throw new Error('id is required to make Blueprint.');\n    return new Blueprint(config);\n}\n","import * as GWU from 'gw-utils';\nimport { Flags } from '../blueprint/blueprint';\nimport { StepFlags } from '../blueprint/buildStep';\nexport class ConsoleLogger {\n    async onDigFirstRoom(site) {\n        console.group('dig first room');\n        site.dump();\n        console.groupEnd();\n    }\n    async onRoomCandidate(room, roomSite) {\n        console.group('room candidate: ' + room.toString());\n        roomSite.dump();\n        console.groupEnd();\n    }\n    async onRoomFailed(_site, _room, _roomSite, error) {\n        console.log('Room Failed - ', error);\n    }\n    async onRoomSuccess(site, room) {\n        console.group('Added Room - ' + room.toString());\n        site.dump();\n        console.groupEnd();\n    }\n    async onLoopsAdded(_site) {\n        console.log('loops added');\n    }\n    async onLakesAdded(_site) {\n        console.log('lakes added');\n    }\n    async onBridgesAdded(_site) {\n        console.log('bridges added');\n    }\n    async onStairsAdded(_site) {\n        console.log('stairs added');\n    }\n    //\n    async onBuildError(_data, error) {\n        console.log(`onBuildError - error: ${error}`);\n    }\n    async onBlueprintPick(_data, blueprint, flags, depth) {\n        console.log(`onBlueprintPick - ${blueprint.id}, depth = ${depth}, matchingFlags = ${GWU.flag.toString(Flags, flags)}`);\n    }\n    async onBlueprintCandidates(data, blueprint) {\n        const label = `onBlueprintCandidates - ${blueprint.id}`;\n        console.group(label);\n        data.candidates.dump();\n        console.groupEnd();\n    }\n    async onBlueprintStart(data, blueprint) {\n        console.group(`onBlueprintStart - ${blueprint.id} @ ${data.originX},${data.originY} : stepCount: ${blueprint.steps.length}, size: [${blueprint.size.toString()}], flags: ${GWU.flag.toString(Flags, blueprint.flags)}`);\n    }\n    async onBlueprintInterior(data, blueprint) {\n        console.group(`onBlueprintInterior - ${blueprint.id}`);\n        data.interior.dump();\n        console.groupEnd();\n    }\n    async onBlueprintFail(data, blueprint, error) {\n        console.log(`onBlueprintFail - ${blueprint.id} @ ${data.originX},${data.originY} : error: ${error}`);\n        console.groupEnd();\n    }\n    async onBlueprintSuccess(data, blueprint) {\n        console.log(`onBlueprintSuccess - ${blueprint.id} @ ${data.originX},${data.originY}`);\n        console.groupEnd();\n    }\n    async onStepStart(data, blueprint, step) {\n        console.group(`onStepStart - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : count: [${step.count.toString()}], flags: ${GWU.flag.toString(StepFlags, step.flags)}`);\n    }\n    async onStepCandidates(data, blueprint, step, candidates, wantCount) {\n        const haveCount = candidates.count((v) => v == 1);\n        console.log(`onStepCandidates - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : wantCount: ${wantCount}, have: ${haveCount}`);\n        candidates.dump();\n    }\n    async onStepInstanceSuccess(_data, _blueprint, _step, x, y) {\n        console.log(`onStepInstance @ ${x},${y}`);\n    }\n    async onStepInstanceFail(_data, _blueprint, _step, x, y, error) {\n        console.log(`onStepInstanceFail @ ${x},${y} - error: ${error}`);\n    }\n    async onStepSuccess(data, blueprint, step) {\n        console.log(`onStepSuccess - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : count: [${step.count.toString()}], flags: ${GWU.flag.toString(StepFlags, step.flags)}`);\n        console.groupEnd();\n    }\n    async onStepFail(data, blueprint, step, error) {\n        console.log(`onStepFail - ${blueprint.id}[${blueprint.steps.indexOf(step) + 1}/${blueprint.steps.length}] @ ${data.originX},${data.originY} : error : ${error}`);\n        console.groupEnd();\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as LOGGER from './log/logger';\nimport { ConsoleLogger } from './log/consoleLogger';\nexport class Digger {\n    constructor(options = {}) {\n        var _a, _b;\n        this.seed = 0;\n        this.rooms = { fails: 20 };\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.seed = options.seed || 0;\n        GWU.object.setOptions(this.rooms, options.rooms);\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        }\n        else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        }\n        else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        }\n        else {\n            if (options.loops === true)\n                options.loops = {};\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                (_a = options.loops.doorChance) !== null && _a !== void 0 ? _a : (_b = options.doors) === null || _b === void 0 ? void 0 : _b.chance;\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        }\n        else {\n            if (options.lakes === true)\n                options.lakes = {};\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        }\n        else {\n            if (options.bridges === true)\n                options.bridges = {};\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        }\n        else {\n            if (options.stairs === true)\n                options.stairs = {};\n            GWU.object.setOptions(this.stairs, options.stairs);\n        }\n        this.startLoc = options.startLoc || [-1, -1];\n        this.endLoc = options.endLoc || [-1, -1];\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        }\n        else if (options.log) {\n            this.log = options.log;\n        }\n        else {\n            this.log = new LOGGER.NullLogger();\n        }\n    }\n    _makeRoomSite(width, height) {\n        const site = new SITE.GridSite(width, height);\n        site.rng = this.site.rng;\n        return site;\n    }\n    async create(...args) {\n        if (args.length == 1 && args[0] instanceof GWM.map.Map) {\n            const map = args[0];\n            this.site = new SITE.MapSite(map);\n        }\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            this.site = new SITE.GridSite(width, height);\n        }\n        const result = await this._create(this.site);\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            const cb = args[2];\n            GWU.xy.forRect(width, height, (x, y) => {\n                const t = this.site.getTileIndex(x, y);\n                if (t)\n                    cb(x, y, t);\n            });\n        }\n        this.site.free();\n        return result;\n    }\n    async _create(site) {\n        if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n            this.startLoc[0] = Math.floor(site.width / 2);\n            this.startLoc[1] = site.height - 2;\n        }\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (await this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        site.updateDoorDirs();\n        await this.log.onDigFirstRoom(site);\n        // site.dump();\n        // console.log('- rng.number', site.rng.number());\n        let fails = 0;\n        let count = 1;\n        const maxFails = this.rooms.fails || 20;\n        while (fails < maxFails) {\n            if (await this.addRoom(site)) {\n                fails = 0;\n                site.updateDoorDirs();\n                site.rng.shuffle(this.seq);\n                // site.dump();\n                // console.log('- rng.number', site.rng.number());\n                if (this.rooms.count && ++count >= this.rooms.count) {\n                    break; // we are done\n                }\n            }\n            else {\n                ++fails;\n            }\n        }\n        if (this.loops) {\n            this.addLoops(site, this.loops);\n            await this.log.onLoopsAdded(site);\n        }\n        if (this.lakes) {\n            this.addLakes(site, this.lakes);\n            await this.log.onLakesAdded(site);\n        }\n        if (this.bridges) {\n            this.addBridges(site, this.bridges);\n            await this.log.onBridgesAdded(site);\n        }\n        if (this.stairs) {\n            this.addStairs(site, this.stairs);\n            await this.log.onStairsAdded(site);\n        }\n        this.finish(site);\n        return true;\n    }\n    start(site) {\n        const seed = this.seed || GWU.rng.random.number();\n        site.setSeed(seed);\n        site.clear();\n        this.seq = site.rng.sequence(site.width * site.height);\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    async addFirstRoom(site) {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !(await this._attachRoomAtLoc(site, roomSite, room, this.startLoc))) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    async addRoom(site) {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (room && this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        // console.log('potential room');\n        // roomSite.dump();\n        if (room) {\n            await this.log.onRoomCandidate(room, roomSite);\n            if (this._attachRoom(site, roomSite, room)) {\n                await this.log.onRoomSuccess(site, room);\n            }\n            else {\n                await this.log.onRoomFailed(site, room, roomSite, 'Did not fit.');\n                room = null;\n            }\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        let i = 0;\n        const len = this.seq.length;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (i = 0; i < len; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n            const dir = site.getDoorDir(x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, room, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    SITE.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    async _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = site.rng.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, room, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                SITE.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, room, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        const hall = room.hall || room;\n        const left = Math.min(room.left, hall.left);\n        const top = Math.min(room.top, hall.top);\n        const right = Math.max(room.right, hall.right);\n        const bottom = Math.max(room.bottom, hall.bottom);\n        for (xRoom = left; xRoom <= right; xRoom++) {\n            for (yRoom = top; yRoom <= bottom; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    if (!map.hasXY(xSite, ySite) ||\n                        map.isBoundaryXY(xSite, ySite)) {\n                        return false;\n                    }\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(site, room, x, y, dir) {\n        const opts = this.doors;\n        let isDoor = false;\n        if (opts.chance && site.rng.chance(opts.chance)) {\n            isDoor = true;\n        }\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        site.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || room.hall.width == 1 || room.hall.height == 1) {\n            return;\n        }\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (site.isNothing(x - k, y)) {\n                    if (site.isSet(x - k, y - 1) && site.isSet(x - k, y + 1)) {\n                        site.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x + k, y)) {\n                    if (site.isSet(x + k, y - 1) && site.isSet(x + k, y + 1)) {\n                        site.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (site.isNothing(x, y - k)) {\n                    if (site.isSet(x - 1, y - k) && site.isSet(x + 1, y - k)) {\n                        site.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x, y + k)) {\n                    if (site.isSet(x - 1, y + k) && site.isSet(x + 1, y + k)) {\n                        site.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (site.rng.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nexport class BuildData {\n    constructor(map, options = {}) {\n        this.map = map;\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.depth = 0;\n        this.seed = 0;\n        this.site = new SITE.MapSite(map);\n        this.interior = GWU.grid.alloc(map.width, map.height);\n        this.occupied = GWU.grid.alloc(map.width, map.height);\n        this.viewMap = GWU.grid.alloc(map.width, map.height);\n        this.distanceMap = GWU.grid.alloc(map.width, map.height);\n        this.candidates = GWU.grid.alloc(map.width, map.height);\n        this.depth = options.depth || 1;\n        this.seed = options.seed || 0;\n    }\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.distanceMap);\n        GWU.grid.free(this.candidates);\n    }\n    reset(originX, originY) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        // this.candidates.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        this.distance25 = 0;\n        this.distance75 = 0;\n        if (this.seed) {\n            this.site.setSeed(this.seed);\n        }\n    }\n    calcDistances(maxSize) {\n        this.distanceMap.fill(0);\n        SITE.computeDistanceMap(this.site, this.distanceMap, this.originX, this.originY, maxSize);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        this.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = this.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\nimport * as STEP from './buildStep';\nimport { BuildData } from './data';\nimport { NullLogger } from '../log/logger';\nimport { ConsoleLogger } from '../log/consoleLogger';\nexport class Builder {\n    constructor(map, options = {}) {\n        this.blueprints = null;\n        this.data = new BuildData(map, options);\n        if (options.blueprints) {\n            if (!Array.isArray(options.blueprints)) {\n                options.blueprints = Object.values(options.blueprints);\n            }\n            this.blueprints = options.blueprints.map((v) => BLUE.get(v));\n        }\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        }\n        else {\n            this.log = options.log || new NullLogger();\n        }\n    }\n    _pickRandom(requiredFlags) {\n        const blueprints = this.blueprints || Object.values(BLUE.blueprints);\n        const weights = blueprints.map((b) => {\n            if (!b.qualifies(requiredFlags))\n                return 0;\n            return b.frequency(this.data.depth);\n        });\n        const index = this.data.map.rng.weighted(weights);\n        return blueprints[index] || null;\n    }\n    async buildRandom(requiredMachineFlags = BLUE.Flags.BP_ROOM, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        data.site.analyze();\n        let tries = 0;\n        while (tries < 10) {\n            const blueprint = this._pickRandom(requiredMachineFlags);\n            if (!blueprint) {\n                await this.log.onBuildError(data, `Failed to find matching blueprint: requiredMachineFlags : ${GWU.flag.toString(BLUE.Flags, requiredMachineFlags)}, depth: ${data.depth}`);\n                return false;\n            }\n            await this.log.onBlueprintPick(data, blueprint, requiredMachineFlags, data.depth);\n            if (await this._buildAt(blueprint, x, y, adoptedItem)) {\n                return true;\n            }\n            ++tries;\n        }\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return false;\n    }\n    async build(blueprint, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        if (typeof blueprint === 'string') {\n            const id = blueprint;\n            blueprint = BLUE.blueprints[id];\n            if (!blueprint)\n                throw new Error('Failed to find blueprint - ' + id);\n        }\n        data.site.analyze();\n        return await this._buildAt(blueprint, x, y, adoptedItem);\n    }\n    async _buildAt(blueprint, x = -1, y = -1, adoptedItem = null) {\n        const data = this.data;\n        if (x >= 0 && y >= 0) {\n            return await this._build(blueprint, x, y, adoptedItem);\n        }\n        let count = await this._markCandidates(blueprint);\n        if (!count) {\n            return false;\n        }\n        let tries = 20; // TODO - Make property of Blueprint\n        while (count-- && tries--) {\n            const loc = BLUE.pickCandidateLoc(data, blueprint) || false;\n            if (loc) {\n                if (await this._build(blueprint, loc[0], loc[1], adoptedItem)) {\n                    return true;\n                }\n            }\n        }\n        await this.log.onBlueprintFail(data, blueprint, 'No suitable locations found to build blueprint.');\n        return false;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    async _build(blueprint, originX, originY, adoptedItem = null) {\n        const data = this.data;\n        data.reset(originX, originY);\n        await this.log.onBlueprintStart(data, blueprint, adoptedItem);\n        if (!(await this._computeInterior(blueprint))) {\n            return false;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const snapshot = data.site.snapshot();\n        data.machineNumber = data.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        BLUE.prepareInterior(data, blueprint);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        data.calcDistances(blueprint.size.hi);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = blueprint.pickComponents(data.site.rng);\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            if (!(await this._buildStep(blueprint, component, adoptedItem))) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                await this.log.onBlueprintFail(data, blueprint, `Failed to build step ${index + 1}.`);\n                snapshot.restore();\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return false;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(data.site, data.machineNumber);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        await this.log.onBlueprintSuccess(data, blueprint);\n        snapshot.cancel();\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return true;\n    }\n    async _markCandidates(blueprint) {\n        const data = this.data;\n        const count = BLUE.markCandidates(data, blueprint);\n        if (count <= 0) {\n            await this.log.onBlueprintFail(data, blueprint, 'No suitable candidate locations found.');\n            return 0;\n        }\n        await this.log.onBlueprintCandidates(data, blueprint);\n        return count;\n    }\n    async _computeInterior(blueprint) {\n        let fail = null;\n        const data = this.data;\n        let count = blueprint.fillInterior(data);\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (!count) {\n            fail = 'Interior error.';\n        }\n        else if (!blueprint.size.contains(count)) {\n            fail = `Interior wrong size - have: ${count}, want: ${blueprint.size.toString()}`;\n        }\n        else if (blueprint.treatAsBlocking &&\n            SITE.siteDisruptedBy(data.site, data.interior, {\n                machine: data.site.machineCount,\n            })) {\n            fail = 'Interior blocks map.';\n        }\n        else if (blueprint.requireBlocking &&\n            SITE.siteDisruptedSize(data.site, data.interior) < 100) {\n            fail = 'Interior does not block enough cells.';\n        }\n        if (!fail) {\n            await this.log.onBlueprintInterior(data, blueprint);\n            return true;\n        }\n        await this.log.onBlueprintFail(data, blueprint, fail);\n        return false;\n    }\n    async _buildStep(blueprint, buildStep, adoptedItem) {\n        let wantCount = 0;\n        let builtCount = 0;\n        const data = this.data;\n        const site = data.site;\n        await this.log.onStepStart(data, blueprint, buildStep, adoptedItem);\n        // console.log(\n        //     'buildComponent',\n        //     blueprint.id,\n        //     blueprint.steps.indexOf(buildStep)\n        // );\n        // Figure out the distance bounds.\n        const distanceBound = STEP.calcDistanceBound(data, buildStep);\n        // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n        // Make a master map of candidate locations for this feature.\n        let qualifyingTileCount = 0;\n        if (buildStep.buildVestibule) {\n            // Generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n            let success = await this.buildRandom(BLUE.Flags.BP_VESTIBULE, data.originX, data.originY);\n            if (!success) {\n                await this.log.onStepFail(data, blueprint, buildStep, 'Failed to build vestibule');\n                return false;\n            }\n        }\n        // If we are just building a vestibule, then we can exit here...\n        if (!buildStep.buildsInstances) {\n            await this.log.onStepSuccess(data, blueprint, buildStep);\n            return true;\n        }\n        const candidates = GWU.grid.alloc(site.width, site.height);\n        let didSomething = false;\n        do {\n            didSomething = false;\n            if (buildStep.buildAtOrigin) {\n                candidates[data.originX][data.originY] = 1;\n                qualifyingTileCount = 1;\n                wantCount = 1;\n            }\n            else {\n                qualifyingTileCount = buildStep.markCandidates(data, blueprint, candidates, distanceBound);\n                if (buildStep.generateEverywhere ||\n                    buildStep.repeatUntilNoProgress) {\n                    wantCount = qualifyingTileCount;\n                }\n                else {\n                    wantCount = buildStep.count.value(site.rng);\n                }\n                await this.log.onStepCandidates(data, blueprint, buildStep, candidates, wantCount);\n                if (!qualifyingTileCount ||\n                    qualifyingTileCount < buildStep.count.lo) {\n                    await this.log.onStepFail(data, blueprint, buildStep, `Blueprint ${blueprint.id}, step ${blueprint.steps.indexOf(buildStep)} - Only ${qualifyingTileCount} qualifying tiles - want ${buildStep.count.toString()}.`);\n                    return false;\n                }\n            }\n            let x = 0, y = 0;\n            while (qualifyingTileCount > 0 && builtCount < wantCount) {\n                // Find a location for the feature.\n                if (buildStep.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = data.originX;\n                    y = data.originY;\n                }\n                else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = this.data.map.rng.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] > 0);\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n                const snapshot = data.site.snapshot();\n                if (await this._buildStepInstance(blueprint, buildStep, x, y, adoptedItem)) {\n                    // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                    qualifyingTileCount -= STEP.makePersonalSpace(data, x, y, candidates, buildStep.pad);\n                    builtCount++; // we've placed an instance\n                    didSomething = true;\n                    snapshot.cancel(); // This snapshot is useless b/c we made changes...\n                }\n                else {\n                    snapshot.restore(); // need to undo any changes...\n                }\n                // Finished with this instance!\n            }\n        } while (didSomething && buildStep.repeatUntilNoProgress);\n        GWU.grid.free(candidates);\n        if (!buildStep.count.contains(builtCount) &&\n            !buildStep.generateEverywhere &&\n            !buildStep.repeatUntilNoProgress) {\n            await this.log.onStepFail(data, blueprint, buildStep, `Failed to build enough instances - want: ${buildStep.count.toString()}, built: ${builtCount}`);\n            return false;\n        }\n        await this.log.onStepSuccess(data, blueprint, buildStep);\n        return true;\n    }\n    async _buildStepInstance(blueprint, buildStep, x, y, adoptedItem = null) {\n        let success = true;\n        let didSomething = true;\n        const data = this.data;\n        const site = data.site;\n        if (success && buildStep.treatAsBlocking) {\n            // Yes, check for blocking.\n            const options = {\n                machine: site.machineCount,\n            };\n            if (buildStep.noBlockOrigin) {\n                options.updateWalkable = (g) => {\n                    g[data.originX][data.originY] = 1;\n                    return true;\n                };\n            }\n            if (SITE.siteDisruptedByXY(site, x, y, options)) {\n                await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'instance blocks map');\n                success = false;\n            }\n        }\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (success && buildStep.effect) {\n            success = site.buildEffect(buildStep.effect, x, y);\n            didSomething = success;\n            if (!success) {\n                this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to build effect - ' +\n                    JSON.stringify(buildStep.effect));\n            }\n        }\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile !== -1) {\n            const tile = GWM.tile.get(buildStep.tile);\n            if (!buildStep.permitBlocking &&\n                tile.blocksMove() &&\n                !buildStep.treatAsBlocking // already did treatAsBlocking\n            ) {\n                if (SITE.siteDisruptedByXY(site, x, y, {\n                    machine: site.machineCount,\n                })) {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'tile blocks site');\n                    success = false;\n                }\n            }\n            if (success) {\n                success = site.setTile(x, y, tile);\n                didSomething = didSomething || success;\n                if (!success) {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'failed to set tile - ' + tile.id);\n                }\n            }\n        }\n        // Generate an actor, if necessary\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const item = site.makeRandomItem(buildStep.item);\n            if (!item) {\n                success = false;\n                await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to make random item - ' +\n                    JSON.stringify(buildStep.item));\n            }\n            else {\n                if (buildStep.itemIsKey) {\n                    item.key = GWM.entity.makeKeyInfo(x, y, !!buildStep.keyIsDisposable);\n                }\n                if (buildStep.outsourceItem) {\n                    success = await this.buildRandom(BLUE.Flags.BP_ADOPT_ITEM, -1, -1, item);\n                    if (success) {\n                        didSomething = true;\n                    }\n                    else {\n                        await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to build machine to adopt item - ' +\n                            item.kind.id);\n                    }\n                }\n                else {\n                    success = site.addItem(x, y, item);\n                    didSomething = didSomething || success;\n                    if (!success) {\n                        await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to add item to site - ' + item.kind.id);\n                    }\n                }\n            }\n        }\n        else if (success && buildStep.adoptItem) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error('Failed to build blueprint because there is no adopted item.');\n            }\n            if (success) {\n                success = site.addItem(x, y, adoptedItem);\n                if (success) {\n                    didSomething = true;\n                }\n                else {\n                    await this.log.onStepInstanceFail(data, blueprint, buildStep, x, y, 'Failed to add adopted item to site - ' +\n                        adoptedItem.kind.id);\n                }\n            }\n        }\n        if (success && didSomething) {\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!blueprint.noInteriorFlag) {\n                site.setMachine(x, y, data.machineNumber, blueprint.isRoom);\n            }\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.impregnable) {\n                site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            }\n            await this.log.onStepInstanceSuccess(data, blueprint, buildStep, x, y);\n        }\n        else if (didSomething) {\n            // roll back any changes?\n        }\n        return success && didSomething;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nexport class Visualizer {\n    constructor(dest, io) {\n        this.dest = dest instanceof GWU.canvas.Canvas ? dest.buffer : dest;\n        this.io = io || GWU.loop;\n    }\n    async onDigFirstRoom(site) {\n        site.drawInto(this.dest);\n        this.dest.drawText(0, 0, 'First Room', 'yellow');\n        this.dest.render();\n        await this.io.nextKeyPress();\n    }\n    async onRoomCandidate(room, roomSite) {\n        roomSite.drawInto(this.dest);\n        this.dest.drawText(0, 0, 'Room Candidate', 'yellow');\n        if (room.doors) {\n            room.doors.forEach((loc) => {\n                if (!loc || loc[0] < 0)\n                    return;\n                this.dest.drawSprite(loc[0], loc[1], GWM.tile.tiles.DOOR.sprite);\n            });\n        }\n        if (room.hall && room.hall.doors) {\n            room.hall.doors.forEach((loc) => {\n                if (!loc || loc[0] < 0)\n                    return;\n                this.dest.drawSprite(loc[0], loc[1], GWM.tile.tiles.DOOR.sprite);\n            });\n        }\n        this.dest.render();\n        await this.io.nextKeyPress();\n    }\n    async onRoomFailed(_site, _room, _roomSite, error) {\n        this.dest.drawText(0, 0, error, 'red');\n        this.dest.render();\n        await this.io.nextKeyPress();\n    }\n    async onRoomSuccess(site, room) {\n        site.drawInto(this.dest);\n        this.dest.drawText(0, 0, 'Room: ' + room.toString(), 'yellow');\n        this.dest.render();\n        await this.io.nextKeyPress();\n    }\n    async onLoopsAdded(_site) { }\n    async onLakesAdded(_site) { }\n    async onBridgesAdded(_site) { }\n    async onStairsAdded(_site) { }\n    async onBuildError(_data, _error) { }\n    async onBlueprintPick(_data, _blueprint, _flags, _depth) { }\n    async onBlueprintCandidates(_data, _blueprint) { }\n    async onBlueprintStart(_data, _blueprint, _adoptedItem) { }\n    async onBlueprintInterior(_data, _blueprint) { }\n    async onBlueprintFail(_data, _blueprint, _error) { }\n    async onBlueprintSuccess(_data, _blueprint) { }\n    async onStepStart(_data, _blueprint, _step, _item) { }\n    async onStepCandidates(_data, _blueprint, _step, _candidates, _wantCount) { }\n    async onStepInstanceSuccess(_data, _blueprint, _step, _x, _y) { }\n    async onStepInstanceFail(_data, _blueprint, _step, _x, _y, _error) { }\n    async onStepSuccess(_data, _blueprint, _step) { }\n    async onStepFail(_data, _blueprint, _step, _error) { }\n}\n","import * as GWU from 'gw-utils';\nimport * as LEVEL from './digger';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GWU.object.setOptions(this.config, options);\n        if (this.config.seed) {\n            GWU.rng.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.rng.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GWU.rng.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GWU.xy.distanceBetween(startLoc[0], startLoc[1], x, y) >\n                    minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    async getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            seed: this.seeds[id],\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    async makeLevel(id, opts, cb) {\n        const digger = new LEVEL.Digger(opts);\n        const result = await digger.create(this.config.width, this.config.height, cb);\n        if (!GWU.xy.equalsXY(digger.endLoc, opts.endLoc) ||\n            !GWU.xy.equalsXY(digger.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [digger.startLoc, digger.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["_a","_b","NOTHING","GWM","tile","get","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","DIRS","GWU","xy","directionOfDoorSite","site","x","y","dir","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","hasXY","isFloor","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","height","w","width","isDiggable","isSet","push","doorSites","loc","rng","item","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","v","getTileIndex","setTile","fillCostGrid","costGrid","update","_v","isPassable","path","OBSTRUCTION","siteDisruptedByXY","options","_c","machine","arcCount","blockingGrid","grid","alloc","result","siteDisruptedBy","free","walkableGrid","disrupts","blockingX","blockingY","isStairs","getMachine","updateWalkable","first","floodFill","siteDisruptedSize","blockingToMapX","blockingToMapY","lakeX","lakeY","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","clearInteriorFlag","hasCellFlag","flags","Cell","IS_WIRED","IS_CIRCUIT_BREAKER","setMachine","GridSite","this","random","tiles","doors","fill","dump","buffer","blackOut","forEach","t","drawSprite","sprite","seed","isBoundaryXY","isDoor","isBridge","isShallow","DIG.NOTHING","DIG.FLOOR","DIG.DOOR","DIG.SECRET_DOOR","DIG.BRIDGE","DIG.WALL","DIG.IMPREGNABLE","isNothing","isWall","isDeep","blocksPathing","DIG.UP_STAIRS","DIG.DOWN_STAIRS","DIG.DEEP","DIG.SHALLOW","Tile","obj","Error","_x","_y","Utils.directionOfDoorSite","Flags","MapSnapshot","snap","machineCount","needsAnalysis","isUsed","snapshot","snapshots","revertMapTo","cancel","release","MapSite","map","SnapshotManager","drawInto","flag","cellInfo","cell","setCellFlag","clearCellFlag","hasTile","opts","highestPriorityTile","cells","c","clear","hasItem","tags","makeRandom","forceItem","hasActor","blocksMove","blocksVision","hasEntityFlag","Entity","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","hasTileFlag","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","isEmpty","T_BRIDGE","T_IS_DOOR","L_SECRETLY_PASSABLE","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","takeNew","chokeCount","count","analyze","effect","fireSync","machineId","id","isRoom","IS_IN_MACHINE","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","Hall","Bounds","super","dx","dy","d","makeHall","dirIndex","hallLength","hallWidth","abs","Room","hall","cx","floor","cy","translate","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","make","RoomDigger","_setOptions","carve","length","every","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","weighted","room","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","DOWN","Cross","SymmetricalCross","minorWidth","minorHeight","x2","y2","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickWidth","clamp","Range","weights","Number","parseInt","_pickWidth","pickLength","lengths","UP","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.makeHall","lower","higher","actual","startX","startY","halls","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","bind","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","CLOCK_DIRS","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","SITE.DOOR","NullLogger","Fl","fl","StepFlags","BuildStep","cfg","pad","horde","from","BF_ADOPT_ITEM","buildAtOrigin","repeatUntilNoProgress","allowBoundary","BF_ALLOW_BOUNDARY","notInHallway","BF_NOT_IN_HALLWAY","buildInWalls","BF_BUILD_IN_WALLS","buildAnywhere","BF_BUILD_ANYWHERE_ON_LEVEL","BF_REPEAT_UNTIL_NO_PROGRESS","permitBlocking","BF_PERMIT_BLOCKING","treatAsBlocking","BF_TREAT_AS_BLOCKING","BF_NO_BLOCK_ORIGIN","noBlockOrigin","adoptItem","itemIsKey","BF_ITEM_IS_KEY","keyIsDisposable","BF_KEY_DISPOSABLE","outsourceItem","BF_OUTSOURCE_ITEM_TO_MACHINE","impregnable","BF_IMPREGNABLE","buildVestibule","BF_BUILD_VESTIBULE","generateEverywhere","BF_EVERYWHERE","BF_BUILD_AT_ORIGIN","buildsInstances","data","blueprint","candidates","distanceBound","updateViewMap","cellIsCandidate","builder","buildStep","BF_IN_VIEW_OF_ORIGIN","BF_IN_PASSABLE_VIEW_OF_ORIGIN","fov","FOV","isBlocked","calculate","viewMap","calcDistanceBound","BF_NEAR_ORIGIN","distance25","BF_FAR_FROM_ORIGIN","distance75","occupied","distance","eachNeighbor","cellMachine","interior","machineNumber","ok","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","makePersonalSpace","personalSpace","Blueprint","steps","split","trim","frequency","size","lo","STEP.BuildStep","BP_ADOPT_ITEM","some","s","STEP.StepFlags","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","BP_NOT_IN_HALLWAY","requiredFlags","want","includes","alternativeFlags","BF_ALTERNATIVE","BF_ALTERNATIVE_2","keepFeature","totalFreq","randIndex","filter","_f","addTileToInteriorAndIterate","doorChokeCount","getChokeCount","vestibuleLoc","vestibuleChokeCount","roomSize","contains","isOccupied","qualifyingTileCount","wantSize","distMap","SITE.computeDistanceMap","computeVestibuleInterior","goalSize","n","pickCandidateLoc","buildData","_blueprint","randSite","startChokeCount","IS_GATE_SITE","additional","expandMachineInterior","minimumInteriorNeighbors","madeChange","nbcount","SITE.WALL","blueprints","ConsoleLogger","console","group","groupEnd","roomSite","toString","_site","_room","_roomSite","error","log","_data","depth","label","step","indexOf","wantCount","haveCount","_step","Digger","fails","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","object","setOptions","LOGGER.NullLogger","SITE.GridSite","args","Map","SITE.MapSite","_create","cb","addFirstRoom","updateDoorDirs","onDigFirstRoom","maxFails","addRoom","shuffle","addLoops","onLoopsAdded","addLakes","onLakesAdded","addBridges","onBridgesAdded","addStairs","onStairsAdded","finish","number","setSeed","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","_makeRoomSite","getDigger","_attachRoomAtLoc","HALL.dig","onRoomCandidate","_attachRoom","onRoomSuccess","onRoomFailed","len","getDoorDir","oppDir","_roomFitsAt","SITE.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksDiagonal","boundaryTile","BuildData","maxSize","distances","dist","matches","values","b","qualifies","BLUE.get","BLUE.blueprints","requiredMachineFlags","BLUE.Flags","adoptedItem","_pickRandom","onBuildError","onBlueprintPick","_buildAt","_build","_markCandidates","BLUE.pickCandidateLoc","onBlueprintFail","reset","onBlueprintStart","_computeInterior","nextMachineId","isSecretDoor","BLUE.prepareInterior","calcDistances","components","pickComponents","component","_buildStep","restore","SITE.clearInteriorFlag","onBlueprintSuccess","BLUE.markCandidates","onBlueprintCandidates","fail","fillInterior","SITE.siteDisruptedBy","SITE.siteDisruptedSize","onBlueprintInterior","builtCount","onStepStart","STEP.calcDistanceBound","buildRandom","onStepFail","onStepSuccess","markCandidates","onStepCandidates","_buildStepInstance","STEP.makePersonalSpace","g","SITE.siteDisruptedByXY","onStepInstanceFail","buildEffect","JSON","stringify","makeRandomItem","entity","makeKeyInfo","kind","addItem","onStepInstanceSuccess","io","canvas","Canvas","loop","drawText","render","nextKeyPress","_error","_flags","_depth","_adoptedItem","_item","_candidates","_wantCount","levels","seeds","stairLocs","initSeeds","initStairLocs","stairDistance","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","LEVEL.Digger","equalsXY"],"mappings":"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"}