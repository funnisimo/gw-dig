{"version":3,"file":"gw-dig.min.js","sources":["../js/site/digSite.js","../js/site/buildSite.js","../js/site/utils.js","../js/types.js","../js/room.js","../js/hall.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/level.js","../js/blueprint/blueprint.js","../js/blueprint/buildStep.js","../js/blueprint/builder.js","../js/dungeon.js"],"sourcesContent":["var _a, _b;\nimport * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nexport const NOTHING = GWM.tile.get('NULL').index;\nexport const FLOOR = GWM.tile.get('FLOOR').index;\nexport const DOOR = GWM.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GWM.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GWM.tile.get('WALL').index;\nexport const DEEP = GWM.tile.get('LAKE').index;\nexport const SHALLOW = GWM.tile.get('SHALLOW').index;\nexport const BRIDGE = GWM.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GWM.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GWM.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GWM.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\nexport class GridSite {\n    constructor(width, height) {\n        this.tiles = GWU.grid.alloc(width, height);\n    }\n    free() {\n        GWU.grid.free(this.tiles);\n    }\n    clear() {\n        this.tiles.fill(0);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === WALL || v === IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === UP_STAIRS || v === DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    getMachine(_x, _y) {\n        return 0;\n    }\n}\n","import * as GWM from 'gw-map';\nconst Flags = GWM.map.flags.Cell;\nexport class MapSite {\n    constructor(map) {\n        this.machineCount = 0;\n        this.map = map;\n    }\n    get width() {\n        return this.map.width;\n    }\n    get height() {\n        return this.map.height;\n    }\n    hasXY(x, y) {\n        return this.map.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.map.isBoundaryXY(x, y);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.map.cellInfo(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.map.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.map.cell(x, y).clearCellFlag(flag);\n    }\n    hasTile(x, y, tile) {\n        return this.map.cellInfo(x, y).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        return this.map.setTile(x, y, tile, opts);\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.map.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    clear() {\n        this.map.cells.forEach((c) => c.clear());\n    }\n    hasItem(x, y) {\n        return this.map.cellInfo(x, y).hasItem();\n    }\n    hasActor(x, y) {\n        return this.map.hasActor(x, y);\n    }\n    blocksMove(x, y) {\n        return this.map.cellInfo(x, y).blocksMove();\n    }\n    blocksVision(x, y) {\n        return this.map.cellInfo(x, y).blocksVision();\n    }\n    blocksDiagonal(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GWM.gameObject.flags.GameObject.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.map.cellInfo(x, y);\n        return (info.hasObjectFlag(GWM.gameObject.flags.GameObject.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GWM.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GWM.gameObject.flags.GameObject.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GWM.gameObject.flags.GameObject.L_BLOCKS_EFFECTS);\n    }\n    isWall(x, y) {\n        return this.map.cellInfo(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.map.cellInfo(x, y).isStairs();\n    }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.map.cell(x, y).isEmpty();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.isEmpty())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.map.cell(x, y).isEmpty();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasObjectFlag(GWM.gameObject.flags.GameObject.L_SECRETLY_PASSABLE);\n    }\n    isDeep(x, y) {\n        return this.map\n            .cellInfo(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (!!cell.depthTile(GWM.gameObject.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (cell.hasDepthTile(GWM.gameObject.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    isPassable(x, y) {\n        return !this.map.cellInfo(x, y).blocksMove();\n    }\n    // tileBlocksMove(tile: number): boolean {\n    //     return GWM.tile.get(tile).blocksMove();\n    // }\n    backup() {\n        const site = new MapSite(this.map.clone());\n        site.machineCount = this.machineCount;\n        return site;\n    }\n    restore(backup) {\n        this.map.copy(backup.map);\n        this.machineCount = backup.machineCount;\n    }\n    free() { }\n    getChokeCount(x, y) {\n        return this.map.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.map.cell(x, y).chokeCount = count;\n    }\n    analyze() {\n        GWM.map.analyze(this.map);\n    }\n    fireEffect(effect, x, y) {\n        return GWM.effect.fireSync(effect, this.map, x, y);\n    }\n    nextMachineId() {\n        return ++this.machineCount;\n    }\n    getMachine(x, y) {\n        return this.map.cell(x, y).machineId;\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.map.cell(x, y).machineId = id;\n        if (id == 0) {\n            this.map.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.map.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as TYPES from './types';\nconst DIRS = GWU.utils.DIRS;\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.utils.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GWU.utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.utils.DIRS[dir][0];\n                    newY = j + GWU.utils.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.utils.DIRS[dir][0];\n                        newY += GWU.utils.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = GWU.random.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.utils.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.utils.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.utils.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.utils.Loc[] {\n//     const doorIndexes = GWU.random.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.utils.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = GWU.random.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.utils.Loc;\n//             //     return [x0, y0] as GWU.utils.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GWU.utils.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n}\nexport function siteDisruptedBy(site, blockingGrid, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.utils.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + options.offsetX;\n        const lakeY = j + options.offsetY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GWU.utils.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GWU.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GWU.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GWU.grid.free(costGrid);\n}\n","import * as GWU from 'gw-utils';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GWU.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        // console.log('Hall', loc, d, length, width);\n        if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        // console.log(' - ', [this.x2, this.y2]);\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room extends GWU.utils.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.utils.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = GWU.random.item.bind(GWU.random, choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = GWU.random.weighted.bind(GWU.random, choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom();\n        const room = rooms[id];\n        if (!room) {\n            GWU.utils.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GWU.blob.Blob({\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GWU.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GWU.utils.DOWN] = [\n            Math.floor(site.width / 2),\n            site.height - 2,\n        ];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * GWU.random.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * GWU.random.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX +\n            GWU.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            GWU.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GWU.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * GWU.random.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * GWU.random.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.utils.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.utils.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.utils.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const ringMinWidth = this.options.ringMinWidth.value();\n        const holeMinSize = this.options.holeMinSize.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            GWU.random.chance(this.options.holeChance.value())) {\n            GWU.utils.forCircle(x, y, GWU.random.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value();\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GWU.utils.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = GWU.random.range(minX, maxX);\n            y = GWU.random.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GWU.utils.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\nconst DIRS = GWU.utils.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(opts = {}) {\n    return GWU.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GWU.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GWU.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GWU.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths) {\n    if (dir == GWU.utils.UP || dir == GWU.utils.DOWN) {\n        return lengths[1].value();\n    }\n    else {\n        return lengths[0].value();\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GWU.utils.NO_DIRECTION;\n    if (dir == GWU.utils.NO_DIRECTION) {\n        const dirs = GWU.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = GWU.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: GWU.range.make(1),\n            length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = GWU.range.make(options.width);\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n        if (!GWU.random.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.utils.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = this.config.width.value();\n        const length = pickLength(dir, this.config.length);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = new TYPES.Hall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GWU.utils.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = new TYPES.Hall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = GWU.random.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GWU.blob.Blob({\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = GWU.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = GWU.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GWU.utils.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.utils.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n        const seq = GWU.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GWU.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc = null;\n        let downLoc = null;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = GWU.random.matchingLocNear(GWU.utils.x(start), GWU.utils.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GWU.random.matchingLocNear(GWU.utils.x(up), GWU.utils.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = GWU.random.matchingLocNear(GWU.utils.x(down), GWU.utils.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GWU.random.matchingLocNear(GWU.utils.x(up), GWU.utils.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = GWU.random.matchingLocNear(GWU.utils.x(down), GWU.utils.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GWU.utils.distanceBetween(x, y, downLoc[0], downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = GWU.random.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.utils.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = GWU.random.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.utils.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GWU.utils.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GWU.utils.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GWU.utils.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GWU.utils.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n            doorChance: 50,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = GWU.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = GWU.random.chance(this.options.doorChance)\n                                ? SITE.DOOR\n                                : SITE.FLOOR;\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nexport class Level {\n    constructor(options = {}) {\n        var _a, _b;\n        this.seed = 0;\n        this.rooms = {};\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.seed = options.seed || 0;\n        GWU.utils.setOptions(this.rooms, options.rooms);\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        }\n        else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.utils.setOptions(this.doors, options.doors);\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        }\n        else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.utils.setOptions(this.halls, options.halls);\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        }\n        else {\n            if (options.loops === true)\n                options.loops = {};\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                (_a = options.loops.doorChance) !== null && _a !== void 0 ? _a : (_b = options.doors) === null || _b === void 0 ? void 0 : _b.chance;\n            GWU.utils.setOptions(this.loops, options.loops);\n        }\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        }\n        else {\n            if (options.lakes === true)\n                options.lakes = {};\n            GWU.utils.setOptions(this.lakes, options.lakes);\n        }\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        }\n        else {\n            if (options.bridges === true)\n                options.bridges = {};\n            GWU.utils.setOptions(this.bridges, options.bridges);\n        }\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        }\n        else {\n            if (options.stairs === true)\n                options.stairs = {};\n            GWU.utils.setOptions(this.stairs, options.stairs);\n        }\n        this.startLoc = options.startLoc || [-1, -1];\n        this.endLoc = options.endLoc || [-1, -1];\n    }\n    _makeSite(width, height) {\n        return new SITE.GridSite(width, height);\n    }\n    create(...args) {\n        if (args.length == 1 && args[0] instanceof GWM.map.Map) {\n            const map = args[0];\n            this.site = new SITE.MapSite(map);\n        }\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            this.site = new SITE.GridSite(width, height);\n        }\n        const result = this._create(this.site);\n        if (args.length > 1) {\n            const width = args[0];\n            const height = args[1];\n            const cb = args[2];\n            GWU.utils.forRect(width, height, (x, y) => {\n                const t = this.site.getTileIndex(x, y);\n                if (t)\n                    cb(x, y, t);\n            });\n        }\n        this.site.free();\n        return result;\n    }\n    _create(site) {\n        if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n            this.startLoc[0] = Math.floor(site.width / 2);\n            this.startLoc[1] = site.height - 2;\n        }\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        let fails = 0;\n        while (fails < 20) {\n            if (this.addRoom(site)) {\n                fails = 0;\n            }\n            else {\n                ++fails;\n            }\n        }\n        if (this.loops)\n            this.addLoops(site, this.loops);\n        if (this.lakes)\n            this.addLakes(site, this.lakes);\n        if (this.bridges)\n            this.addBridges(site, this.bridges);\n        if (this.stairs)\n            this.addStairs(site, this.stairs);\n        this.finish(site);\n        return true;\n    }\n    start(site) {\n        if (this.seed) {\n            GWU.random.seed(this.seed);\n        }\n        site.clear();\n        this.seq = GWU.random.sequence(site.width * site.height);\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const roomSite = this._makeSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        if (room && !this._attachRoom(site, roomSite, room)) {\n            room = null;\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (let i = 0; i < this.seq.length; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n            if (!site.isNothing(x, y))\n                continue;\n            const dir = SITE.directionOfDoorSite(site, x, y);\n            if (dir != GWU.utils.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    SITE.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = GWU.random.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                SITE.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.utils.Loc;\n                //     return [x0, y0] as GWU.utils.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n            for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.hasXY(i, j) ||\n                                map.isBoundaryXY(i, j) ||\n                                !map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(map, room, x, y, dir) {\n        const opts = this.doors;\n        let isDoor = false;\n        if (opts.chance && GWU.random.chance(opts.chance)) {\n            isDoor = true;\n        }\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        map.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n            return;\n        }\n        if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x - k, y)) {\n                    if (map.isSet(x - k, y - 1) && map.isSet(x - k, y + 1)) {\n                        map.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x + k, y)) {\n                    if (map.isSet(x + k, y - 1) && map.isSet(x + k, y + 1)) {\n                        map.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x, y - k)) {\n                    if (map.isSet(x - 1, y - k) && map.isSet(x + 1, y - k)) {\n                        map.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x, y + k)) {\n                    if (map.isSet(x - 1, y + k) && map.isSet(x + 1, y + k)) {\n                        map.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (GWU.random.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GWU.utils.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GWU.utils.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nconst Fl = GWU.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(10)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(7)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(0)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(2)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(3)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(4)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(5)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(6)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(8)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(9)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(14)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(11)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(12)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(13)] = \"BP_NO_INTERIOR_FLAG\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo > this.size.hi)\n                throw new Error('Blueprint size must be small to large.');\n        }\n        else {\n            this.size = GWU.range.make([0, 999999]);\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n    }\n    getChance(level, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return 0;\n        }\n        return this.frequency(level);\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    qualifies(requiredFlags, depth) {\n        if (this.frequency(depth) <= 0 ||\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickLocation(site) {\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            const randSite = GWU.random.matchingLoc(site.width, site.height, (x, y) => {\n                return (site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_GATE_SITE) && this.size.contains(site.getChokeCount(x, y)));\n            });\n            if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n                // If no suitable sites, abort.\n                console.log('Failed to build a machine; there was no eligible door candidate for the chosen room machine from blueprint.');\n                return false;\n            }\n            return randSite;\n        }\n        else if (this.isVestiblue) {\n            //  Door machines must have locations passed in. We can't pick one ourselves.\n            console.log('ERROR: Attempted to build a vestiblue without a location being provided.');\n            return false;\n        }\n        // Pick a random origin location.\n        const pos = GWU.random.matchingLoc(site.width, site.height, (x, y) => site.isPassable(x, y));\n        if (!pos || pos[0] < 0 || pos[1] < 0)\n            return false;\n        return pos;\n    }\n    // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n    computeInterior(builder) {\n        let failsafe = this.isRoom ? 10 : 20;\n        let tryAgain;\n        const interior = builder.interior;\n        const site = builder.site;\n        do {\n            tryAgain = false;\n            if (--failsafe <= 0) {\n                console.log('Failed to build a machine; failed repeatedly to find a suitable blueprint location.');\n                return false;\n            }\n            interior.fill(0);\n            // Find a location and map out the machine interior.\n            if (this.isRoom) {\n                // If it's a room machine, count up the gates of appropriate\n                // choke size and remember where they are. The origin of the room will be the gate location.\n                // Now map out the interior into interior[][].\n                // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n                // same or lower choke value, ignoring any tiles that are already part of a machine.\n                // If we get false from this, try again. If we've tried too many times already, abort.\n                tryAgain = !this.addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n            }\n            else if (this.isVestiblue) {\n                if (!this.computeInteriorForVestibuleMachine(builder)) {\n                    // TODO - tryagain = true?\n                    console.error('ERROR: Attempted to build a door machine from blueprint: not enough room.');\n                    return false;\n                }\n                // success\n            }\n            else {\n                // Find a location and map out the interior for a non-room machine.\n                // The strategy here is simply to pick a random location on the map,\n                // expand it along a pathing map by one space in all directions until the size reaches\n                // the chosen size, and then make sure the resulting space qualifies.\n                // If not, try again. If we've tried too many times already, abort.\n                let distanceMap = GWU.grid.alloc(interior.width, interior.height);\n                SITE.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, this.size.hi);\n                const seq = GWU.random.sequence(site.width * site.height);\n                let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n                let totalFreq = this.size.value(); // Keeps track of the goal size.\n                for (let k = 0; k < 1000 && qualifyingTileCount < totalFreq; k++) {\n                    for (let n = 0; n < seq.length && qualifyingTileCount < totalFreq; n++) {\n                        const i = Math.floor(seq[n] / site.height);\n                        const j = seq[n] % site.height;\n                        if (distanceMap[i][j] == k) {\n                            interior[i][j] = 1;\n                            qualifyingTileCount++;\n                            if (site.isOccupied(i, j) ||\n                                site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_IN_MACHINE)) {\n                                // Abort if we've entered another machine or engulfed another machine's item or monster.\n                                tryAgain = true;\n                                qualifyingTileCount = totalFreq; // This is a hack to drop out of these three for-loops.\n                            }\n                        }\n                    }\n                }\n                // Now make sure the interior map satisfies the machine's qualifications.\n                if (qualifyingTileCount < totalFreq) {\n                    tryAgain = true;\n                    console.log('too small');\n                }\n                else if (this.treatAsBlocking &&\n                    SITE.siteDisruptedBy(site, interior, {\n                        machine: site.machineCount,\n                    })) {\n                    console.log('disconnected');\n                    tryAgain = true;\n                }\n                else if (this.requireBlocking &&\n                    SITE.siteDisruptedSize(site, interior) < 100) {\n                    console.log('not disconnected enough');\n                    tryAgain = true; // BP_REQUIRE_BLOCKING needs some work to make sure the disconnect is interesting.\n                }\n                // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n                // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n                GWU.grid.free(distanceMap);\n            }\n            // Now loop if necessary.\n        } while (tryAgain);\n        // console.log(tryAgain, failsafe);\n        return true;\n    }\n    // Assumes (startX, startY) is in the machine.\n    // Returns true if everything went well, and false if we ran into a machine component\n    // that was already there, as we don't want to build a machine around it.\n    addTileToInteriorAndIterate(builder, startX, startY) {\n        let goodSoFar = true;\n        const interior = builder.interior;\n        const site = builder.site;\n        interior[startX][startY] = 1;\n        const startChokeCount = site.getChokeCount(startX, startY);\n        for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n            const newX = startX + GWU.utils.DIRS[dir][0];\n            const newY = startY + GWU.utils.DIRS[dir][1];\n            if (!site.hasXY(newX, newY))\n                continue;\n            if (interior[newX][newY])\n                continue; // already done\n            if (site.isOccupied(newX, newY) ||\n                (site.hasCellFlag(newX, newY, GWM.map.flags.Cell.IS_IN_MACHINE) &&\n                    !site.hasCellFlag(newX, newY, GWM.map.flags.Cell.IS_GATE_SITE))) {\n                // Abort if there's an item in the room.\n                // Items haven't been populated yet, so the only way this could happen is if another machine\n                // previously placed an item here.\n                // Also abort if we're touching another machine at any point other than a gate tile.\n                return false;\n            }\n            if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n                !site.hasCellFlag(newX, newY, GWM.map.flags.Cell.IS_IN_MACHINE)) {\n                goodSoFar = this.addTileToInteriorAndIterate(builder, newX, newY);\n            }\n        }\n        return goodSoFar;\n    }\n    computeInteriorForVestibuleMachine(builder) {\n        let success = true;\n        const site = builder.site;\n        const interior = builder.interior;\n        interior.fill(0);\n        // console.log('DISTANCE MAP', originX, originY);\n        // RUT.Grid.dump(distMap);\n        const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n        const vestibuleLoc = [-1, -1];\n        let vestibuleChokeCount = doorChokeCount;\n        GWU.utils.eachNeighbor(builder.originX, builder.originY, (x, y) => {\n            const count = site.getChokeCount(x, y);\n            if (count == doorChokeCount)\n                return;\n            if (count > 10000)\n                return;\n            if (count < 0)\n                return;\n            vestibuleLoc[0] = x;\n            vestibuleLoc[1] = y;\n            vestibuleChokeCount = count;\n        }, true);\n        const roomSize = vestibuleChokeCount - doorChokeCount;\n        if (this.size.contains(roomSize)) {\n            // The room entirely fits within the vestibule desired size\n            const count = interior.floodFill(vestibuleLoc[0], vestibuleLoc[1], (_v, i, j) => {\n                if (site.isOccupied(i, j)) {\n                    success = false;\n                }\n                return site.getChokeCount(i, j) === vestibuleChokeCount;\n            }, 1);\n            if (success && this.size.contains(count))\n                return true;\n        }\n        let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n        const wantSize = this.size.value(); // Keeps track of the goal size.\n        const distMap = GWU.grid.alloc(site.width, site.height);\n        SITE.computeDistanceMap(site, distMap, builder.originX, builder.originY, this.size.hi);\n        const cells = GWU.random.sequence(site.width * site.height);\n        success = true;\n        for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n            for (let i = 0; i < cells.length && qualifyingTileCount < wantSize; ++i) {\n                const x = Math.floor(cells[i] / site.height);\n                const y = cells[i] % site.height;\n                const dist = distMap[x][y];\n                if (dist != k)\n                    continue;\n                if (site.isOccupied(x, y)) {\n                    success = false;\n                    qualifyingTileCount = wantSize;\n                }\n                if (site.getChokeCount(x, y) <= doorChokeCount)\n                    continue;\n                interior[x][y] = 1;\n                qualifyingTileCount += 1;\n            }\n        }\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (this.treatAsBlocking &&\n            SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })) {\n            success = false;\n        }\n        else if (this.requireBlocking &&\n            SITE.siteDisruptedSize(site, interior) < 100) {\n            success = false;\n        }\n        GWU.grid.free(distMap);\n        return success;\n    }\n    prepareInteriorWithMachineFlags(builder) {\n        const interior = builder.interior;\n        const site = builder.site;\n        // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n        if (this.maximizeInterior) {\n            this.expandMachineInterior(builder, 1);\n        }\n        else if (this.openInterior) {\n            this.expandMachineInterior(builder, 4);\n        }\n        // If requested, cleanse the interior -- no interesting terrain allowed.\n        if (this.purgeInterior) {\n            interior.forEach((v, x, y) => {\n                if (v)\n                    site.setTile(x, y, SITE.FLOOR);\n            });\n        }\n        // If requested, purge pathing blockers -- no traps allowed.\n        if (this.purgeBlockers) {\n            interior.forEach((v, x, y) => {\n                if (!v)\n                    return;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n            });\n        }\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (this.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n            });\n        }\n        // Surround with walls if requested.\n        if (this.surroundWithWalls) {\n            interior.forEach((v, x, y) => {\n                if (!v ||\n                    site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_GATE_SITE))\n                    return;\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // Not valid x,y\n                    if (interior[i][j])\n                        return; // is part of machine\n                    if (site.isWall(i, j))\n                        return; // is already a wall (of some sort)\n                    if (site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_GATE_SITE))\n                        return; // is a door site\n                    if (site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_IN_MACHINE))\n                        return; // is part of a machine\n                    if (!site.blocksPathing(i, j))\n                        return; // is not a blocker for the player (water?)\n                    site.setTile(i, j, SITE.WALL);\n                }, false);\n            });\n        }\n        // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n        // Then zero out any portion of the interior that is still wall.\n        // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n        //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n        // }\n        // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n        if (this.makeImpregnable) {\n            interior.forEach((v, x, y) => {\n                if (!v ||\n                    site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(x, y, GWM.map.flags.Cell.IMPREGNABLE);\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return;\n                    if (interior[i][j])\n                        return;\n                    if (site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_GATE_SITE))\n                        return;\n                    site.setCellFlag(i, j, GWM.map.flags.Cell.IMPREGNABLE);\n                }, false);\n            });\n        }\n        // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n        const machineNumber = builder.machineNumber;\n        interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            site.setMachine(x, y, machineNumber, this.isRoom);\n            // secret doors mess up machines\n            if (site.isSecretDoor(x, y)) {\n                site.setTile(x, y, SITE.DOOR);\n            }\n        });\n    }\n    expandMachineInterior(builder, minimumInteriorNeighbors = 1) {\n        let madeChange;\n        const interior = builder.interior;\n        const site = builder.site;\n        do {\n            madeChange = false;\n            interior.forEach((_v, x, y) => {\n                // if (v && site.isDoor(x, y)) {\n                //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n                //     return;\n                // }\n                if (site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_IN_MACHINE))\n                    return;\n                if (!site.blocksPathing(x, y))\n                    return;\n                let nbcount = 0;\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // Not in map\n                    if (interior[i][j] && !site.blocksPathing(i, j)) {\n                        ++nbcount; // in machine and open tile\n                    }\n                }, false);\n                if (nbcount < minimumInteriorNeighbors)\n                    return;\n                nbcount = 0;\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // not on map\n                    if (interior[i][j])\n                        return; // already part of machine\n                    if (!site.isWall(i, j) ||\n                        site.hasCellFlag(i, j, GWM.map.flags.Cell.IS_IN_MACHINE)) {\n                        ++nbcount; // tile is not a wall or is in a machine\n                    }\n                }, false);\n                if (nbcount)\n                    return;\n                // Eliminate this obstruction; welcome its location into the machine.\n                madeChange = true;\n                interior[x][y] = 1;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, SITE.FLOOR);\n                }\n                GWU.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return;\n                    if (site.isSet(i, j))\n                        return;\n                    site.setTile(i, j, SITE.WALL);\n                });\n            });\n        } while (madeChange);\n    }\n    calcDistances(builder) {\n        builder.distanceMap.fill(0);\n        SITE.computeDistanceMap(builder.site, builder.distanceMap, builder.originX, builder.originY, this.size.hi);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        builder.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = builder.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        builder.distance25 = distance25;\n        builder.distance75 = distance75;\n    }\n    pickComponents() {\n        const alternativeFlags = [\n            STEP.StepFlags.BF_ALTERNATIVE,\n            STEP.StepFlags.BF_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = GWU.random.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n    clearInteriorFlag(builder) {\n        builder.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            if (!builder.site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_WIRED |\n                GWM.map.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                builder.site.setMachine(x, y, 0);\n            }\n        });\n        // for (i = 0; i < map.width; i++) {\n        //     for (j = 0; j < map.height; j++) {\n        //         const cell = RUT.Map.getCell(map, i, j);\n        //         if (\n        //             cell.machineNumber == map.machineNumber &&\n        //             !RUT.Cell.hasMechFlag(\n        //                 cell,\n        //                 MechFlags.TM_IS_WIRED |\n        //                     MechFlags.TM_IS_CIRCUIT_BREAKER\n        //             )\n        //         ) {\n        //             cell.flags &= ~CellFlags.IS_IN_MACHINE;\n        //             cell.machineNumber = 0;\n        //         }\n        //     }\n        // }\n    }\n}\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags, depth));\n    return GWU.random.item(matches);\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport { Flags } from './blueprint';\nconst Fl = GWU.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    // BF_GENERATE_ITEM\t\t\t\t= Fl(0),\t// feature entails generating an item (overridden if the machine is adopting an item)\n    // BF_GENERATE_HORDE\t\t\t= Fl(5),\t// generate a monster horde that has all of the horde flags\n    // BF_NO_THROWING_WEAPONS\t    = Fl(4),\t// the generated item cannot be a throwing weapon\n    // BF_REQUIRE_GOOD_RUNIC\t\t= Fl(18),\t// generated item must be uncursed runic\n    StepFlags[StepFlags[\"BF_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BF_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BF_BUILD_VESTIBULE\"] = Fl(2)] = \"BF_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BF_ADOPT_ITEM\"] = Fl(3)] = \"BF_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BF_BUILD_AT_ORIGIN\"] = Fl(6)] = \"BF_BUILD_AT_ORIGIN\";\n    // unused                   = Fl(7),\t//\n    StepFlags[StepFlags[\"BF_PERMIT_BLOCKING\"] = Fl(8)] = \"BF_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BF_TREAT_AS_BLOCKING\"] = Fl(9)] = \"BF_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BF_NEAR_ORIGIN\"] = Fl(10)] = \"BF_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BF_FAR_FROM_ORIGIN\"] = Fl(11)] = \"BF_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_VIEW_OF_ORIGIN\"] = Fl(25)] = \"BF_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(26)] = \"BF_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_MONSTER_TAKE_ITEM\"] = Fl(12)] = \"BF_MONSTER_TAKE_ITEM\";\n    StepFlags[StepFlags[\"BF_MONSTER_SLEEPING\"] = Fl(13)] = \"BF_MONSTER_SLEEPING\";\n    StepFlags[StepFlags[\"BF_MONSTER_FLEEING\"] = Fl(14)] = \"BF_MONSTER_FLEEING\";\n    StepFlags[StepFlags[\"BF_MONSTERS_DORMANT\"] = Fl(19)] = \"BF_MONSTERS_DORMANT\";\n    StepFlags[StepFlags[\"BF_ITEM_IS_KEY\"] = Fl(0)] = \"BF_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BF_ITEM_IDENTIFIED\"] = Fl(5)] = \"BF_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BF_ITEM_PLAYER_AVOIDS\"] = Fl(4)] = \"BF_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BF_EVERYWHERE\"] = Fl(15)] = \"BF_EVERYWHERE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE\"] = Fl(16)] = \"BF_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE_2\"] = Fl(17)] = \"BF_ALTERNATIVE_2\";\n    // unused                       = Fl(20),\t//\n    StepFlags[StepFlags[\"BF_BUILD_IN_WALLS\"] = Fl(21)] = \"BF_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BF_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BF_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BF_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BF_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BF_IMPREGNABLE\"] = Fl(24)] = \"BF_IMPREGNABLE\";\n    // TODO - BF_ALLOW_IN_HALLWAY instead?\n    StepFlags[StepFlags[\"BF_NOT_IN_HALLWAY\"] = Fl(27)] = \"BF_NOT_IN_HALLWAY\";\n    // TODO - BF_ALLOW_BOUNDARY instead\n    StepFlags[StepFlags[\"BF_NOT_ON_LEVEL_PERIMETER\"] = Fl(28)] = \"BF_NOT_ON_LEVEL_PERIMETER\";\n    StepFlags[StepFlags[\"BF_SKELETON_KEY\"] = Fl(29)] = \"BF_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BF_KEY_DISPOSABLE\"] = Fl(30)] = \"BF_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    constructor(cfg = {}) {\n        var _a;\n        this.tile = -1;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        this.id = 'n/a';\n        this.tile = (_a = cfg.tile) !== null && _a !== void 0 ? _a : -1;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        this.item = cfg.item || null;\n        this.horde = cfg.horde || null;\n        if (cfg.effect) {\n            this.effect = GWM.effect.from(cfg.effect);\n        }\n    }\n    get repeatUntilNoProgress() {\n        return !!(this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS);\n    }\n    cellIsCandidate(builder, blueprint, x, y, distanceBound) {\n        const site = builder.site;\n        // No building in the hallway if it's prohibited.\n        // This check comes before the origin check, so an area machine will fail altogether\n        // if its origin is in a hallway and the feature that must be built there does not permit as much.\n        if (this.flags & StepFlags.BF_NOT_IN_HALLWAY &&\n            GWU.utils.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n            return false;\n        }\n        // No building along the perimeter of the level if it's prohibited.\n        if (this.flags & StepFlags.BF_NOT_ON_LEVEL_PERIMETER &&\n            (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1)) {\n            return false;\n        }\n        // The origin is a candidate if the feature is flagged to be built at the origin.\n        // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n        if (this.flags & StepFlags.BF_BUILD_AT_ORIGIN) {\n            return x == builder.originX && y == builder.originY ? true : false;\n        }\n        else if (blueprint.isRoom &&\n            x == builder.originX &&\n            y == builder.originY) {\n            return false;\n        }\n        // No building in another feature's personal space!\n        if (builder.occupied[x][y]) {\n            return false;\n        }\n        // Must be in the viewmap if the appropriate flag is set.\n        if (this.flags &\n            (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n                StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n            !builder.viewMap[x][y]) {\n            return false;\n        }\n        // Do a distance check if the feature requests it.\n        let distance = 10000;\n        if (site.isWall(x, y)) {\n            // Distance is calculated for walls too.\n            GWU.utils.eachNeighbor(x, y, (i, j) => {\n                if (!builder.distanceMap.hasXY(i, j))\n                    return;\n                if (!site.blocksPathing(i, j) &&\n                    distance > builder.distanceMap[i][j] + 1) {\n                    distance = builder.distanceMap[i][j] + 1;\n                }\n            }, true);\n        }\n        else {\n            distance = builder.distanceMap[x][y];\n        }\n        if (distance > distanceBound[1] || // distance exceeds max\n            distance < distanceBound[0]) {\n            // distance falls short of min\n            return false;\n        }\n        if (this.flags & StepFlags.BF_BUILD_IN_WALLS) {\n            // If we're supposed to build in a wall...\n            const cellMachine = site.getMachine(x, y);\n            if (!builder.interior[x][y] &&\n                (!cellMachine || cellMachine == builder.machineNumber) &&\n                site.isWall(x, y)) {\n                let ok = false;\n                // ...and this location is a wall that's not already machined...\n                GWU.utils.eachNeighbor(x, y, (newX, newY) => {\n                    if (site.hasXY(newX, newY) && // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                        ((builder.interior[newX][newY] &&\n                            !(newX == builder.originX &&\n                                newY == builder.originY)) ||\n                            (this.flags &\n                                StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL &&\n                                !site.blocksPathing(newX, newY) &&\n                                !site.getMachine(newX, newY)))) {\n                        ok = true;\n                    }\n                });\n                return ok;\n            }\n            return false;\n        }\n        else if (site.isWall(x, y)) {\n            // Can't build in a wall unless instructed to do so.\n            return false;\n        }\n        else if (this.flags & StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL) {\n            if ((this.item && site.blocksItems(x, y)) ||\n                site.hasCellFlag(x, y, GWM.map.flags.Cell.IS_CHOKEPOINT |\n                    GWM.map.flags.Cell.IS_IN_LOOP |\n                    GWM.map.flags.Cell.IS_IN_MACHINE)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else if (builder.interior[x][y]) {\n            return true;\n        }\n        return false;\n    }\n    makePersonalSpace(builder, x, y, candidates) {\n        const personalSpace = this.pad;\n        let count = 0;\n        for (let i = x - personalSpace + 1; i <= x + personalSpace - 1; i++) {\n            for (let j = y - personalSpace + 1; j <= y + personalSpace - 1; j++) {\n                if (builder.site.hasXY(i, j)) {\n                    if (candidates[i][j]) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BF_EVERYWHERE &\n            ~StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    distanceBound(builder) {\n        const distanceBound = [0, 10000];\n        if (this.flags & StepFlags.BF_NEAR_ORIGIN) {\n            distanceBound[1] = builder.distance25;\n        }\n        if (this.flags & StepFlags.BF_FAR_FROM_ORIGIN) {\n            distanceBound[0] = builder.distance75;\n        }\n        return distanceBound;\n    }\n    updateViewMap(builder) {\n        if (this.flags &\n            (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n                StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n            const site = builder.site;\n            if (this.flags & StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) {\n                const fov = new GWU.fov.FOV({\n                    isBlocked: (x, y) => {\n                        return site.blocksPathing(x, y);\n                    },\n                    hasXY: (x, y) => {\n                        return site.hasXY(x, y);\n                    },\n                });\n                fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                    builder.viewMap[x][y] = 1;\n                });\n            }\n            else {\n                const fov = new GWU.fov.FOV({\n                    // TileFlags.T_OBSTRUCTS_PASSABILITY |\n                    //     TileFlags.T_OBSTRUCTS_VISION,\n                    isBlocked: (x, y) => {\n                        return (site.blocksPathing(x, y) || site.blocksVision(x, y));\n                    },\n                    hasXY: (x, y) => {\n                        return site.hasXY(x, y);\n                    },\n                });\n                fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                    builder.viewMap[x][y] = 1;\n                });\n            }\n            builder.viewMap[builder.originX][builder.originY] = 1;\n        }\n    }\n    markCandidates(candidates, builder, blueprint, distanceBound) {\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            if (this.cellIsCandidate(builder, blueprint, i, j, distanceBound)) {\n                count++;\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return count;\n    }\n    build(builder, blueprint) {\n        let wantCount = 0;\n        let builtCount = 0;\n        const site = builder.site;\n        const candidates = GWU.grid.alloc(site.width, site.height);\n        // Figure out the distance bounds.\n        const distanceBound = this.distanceBound(builder);\n        this.updateViewMap(builder);\n        do {\n            // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n            // Make a master map of candidate locations for this feature.\n            let qualifyingTileCount = this.markCandidates(candidates, builder, blueprint, distanceBound);\n            if (!this.generateEverywhere) {\n                wantCount = this.count.value();\n            }\n            if (!qualifyingTileCount || qualifyingTileCount < this.count.lo) {\n                console.warn('Only %s qualifying tiles - want at least %s.', qualifyingTileCount, this.count.lo);\n                return 0; // ?? Failed ??\n            }\n            let x = 0, y = 0;\n            for (builtCount = 0; (this.generateEverywhere || builtCount < wantCount) &&\n                qualifyingTileCount > 0;) {\n                // Find a location for the feature.\n                if (this.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = builder.originX;\n                    y = builder.originY;\n                }\n                else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = GWU.random.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] > 0);\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n                let success = true;\n                // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n                if (this.effect) {\n                    success = site.fireEffect(this.effect, x, y);\n                }\n                // Now try to place the terrain tile, if any.\n                if (success && this.tile !== -1) {\n                    const tile = GWM.tile.get(this.tile);\n                    if (!(this.flags & StepFlags.BF_PERMIT_BLOCKING) &&\n                        (tile.blocksMove() ||\n                            this.flags & StepFlags.BF_TREAT_AS_BLOCKING)) {\n                        // Yes, check for blocking.\n                        const blockingMap = GWU.grid.alloc(site.width, site.height);\n                        blockingMap[x][y] = 1;\n                        success = !SITE.siteDisruptedBy(site, blockingMap, {\n                            machine: site.machineCount,\n                        });\n                        GWU.grid.free(blockingMap);\n                    }\n                    if (success) {\n                        site.setTile(x, y, tile);\n                    }\n                }\n                // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                // Personal space of 0 means nothing gets cleared, 1 means that only the tile itself gets cleared, and 2 means the 3x3 grid centered on it.\n                if (success) {\n                    qualifyingTileCount -= this.makePersonalSpace(builder, x, y, candidates);\n                    builtCount++; // we've placed an instance\n                    //DEBUG printf(\"\\nPlaced instance #%i of feature %i at (%i, %i).\", instance, feat, featX, featY);\n                }\n                if (success) {\n                    // Proceed only if the terrain stuff for this instance succeeded.\n                    // Mark the feature location as part of the machine, in case it is not already inside of it.\n                    if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n                        site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n                    }\n                    // Mark the feature location as impregnable if requested.\n                    if (this.flags & StepFlags.BF_IMPREGNABLE) {\n                        site.setCellFlag(x, y, GWM.map.flags.Cell.IMPREGNABLE);\n                    }\n                }\n                // Finished with this instance!\n            }\n        } while (this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS &&\n            builtCount <= this.count.lo);\n        let success = true;\n        // let success = RUT.Component.generateAdoptItem(\n        //     component,\n        //     blueprint,\n        //     map,\n        //     xy.x,\n        //     xy.y,\n        //     context\n        // );\n        // if (!success) {\n        //     GWU.grid.free(candidates);\n        //     return false;\n        // }\n        // // Generate a horde as necessary.\n        // success = RUT.Component.generateMonsters(\n        //     component,\n        //     blueprint,\n        //     map,\n        //     xy.x,\n        //     xy.y,\n        //     context\n        // );\n        // if (!success) {\n        //     GWU.grid.free(candidates);\n        //     return false;\n        // }\n        if (this.flags &\n            (StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE |\n                StepFlags.BF_BUILD_VESTIBULE)) {\n            // Put this item up for adoption, or generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n            // If we fail 10 times, abort the entire machine (including any sub-machines already built).\n            // Also, if we build a sub-machine, and it succeeds, but this (its parent machine) fails,\n            // we pass the monsters and items that it spawned back to the parent,\n            // so that if the parent fails, they can all be freed.\n            // First make sure our adopted item, if any, is not on the floor or in the pack already.\n            // Otherwise, a previous attempt to place it may have put it on the floor in a different\n            // machine, only to have that machine fail and be deleted, leaving the item remaining on\n            // the floor where placed.\n            if (this.flags & StepFlags.BF_OUTSOURCE_ITEM_TO_MACHINE) {\n                // success = await buildAMachine(-1, -1, -1, BP_ADOPT_ITEM, theItem, spawnedItemsSub, spawnedMonstersSub);\n                throw new Error('OUTSOURCE_ITEM_TO_MACHINE - Not ready yet.');\n            }\n            else if (this.flags & StepFlags.BF_BUILD_VESTIBULE) {\n                success = builder.buildRandom(Flags.BP_VESTIBULE, builder.originX, builder.originY);\n            }\n            if (!success) {\n                console.log(`Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`);\n                // failure! abort!\n                return 0;\n            }\n            // theItem = NULL;\n        }\n        //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n        //DEBUG logBuffer(candidates);\n        GWU.grid.free(candidates);\n        return builtCount;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\n// export interface BuildData {\n//     site: SITE.BuildSite;\n//     spawnedItems: any[];\n//     spawnedHordes: any[];\n//     interior: GWU.grid.NumGrid;\n//     occupied: GWU.grid.NumGrid;\n//     viewMap: GWU.grid.NumGrid;\n//     distanceMap: GWU.grid.NumGrid;\n//     originX: number;\n//     originY: number;\n//     distance25: number;\n//     distance75: number;\n//     machineNumber: number;\n// }\nexport class Builder {\n    constructor(map, depth) {\n        this.map = map;\n        this.depth = depth;\n        this.spawnedItems = [];\n        this.spawnedHordes = [];\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.site = new SITE.MapSite(map);\n        this.interior = GWU.grid.alloc(map.width, map.height);\n        this.occupied = GWU.grid.alloc(map.width, map.height);\n        this.viewMap = GWU.grid.alloc(map.width, map.height);\n        this.distanceMap = GWU.grid.alloc(map.width, map.height);\n    }\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.distanceMap);\n    }\n    buildRandom(requiredMachineFlags = BLUE.Flags.BP_ROOM, x = -1, y = -1) {\n        let tries = 10;\n        while (tries--) {\n            const blueprint = BLUE.random(requiredMachineFlags, this.depth);\n            if (!blueprint) {\n                continue;\n            }\n            if (this.build(blueprint, x, y)) {\n                return true;\n            }\n        }\n        console.log('Failed to find blueprint matching flags: ' +\n            GWU.flag.toString(BLUE.Flags, requiredMachineFlags));\n        return false;\n    }\n    build(blueprint, x = -1, y = -1) {\n        let tries = 10;\n        this.site.analyze();\n        if (x >= 0 && y >= 0) {\n            return this._build(blueprint, x, y);\n        }\n        while (tries--) {\n            const loc = blueprint.pickLocation(this.site);\n            if (!loc) {\n                continue;\n            }\n            if (this._build(blueprint, loc[0], loc[1])) {\n                return true;\n            }\n        }\n        console.log('Failed to build blueprint.');\n        return false;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    _build(blueprint, originX, originY) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        if (!blueprint.computeInterior(this)) {\n            return false;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const levelBackup = this.site.backup();\n        this.machineNumber = this.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        blueprint.prepareInteriorWithMachineFlags(this);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        blueprint.calcDistances(this);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = blueprint.pickComponents();\n        // Keep track of all monsters and items that we spawn -- if we abort, we have to go back and delete them all.\n        // let itemCount = 0, monsterCount = 0;\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            const count = component.build(this, blueprint);\n            if (count == 0 ||\n                (count < component.count.lo && !component.repeatUntilNoProgress)) {\n                // failure! abort!\n                console.log('Failed to place blueprint because of feature; needed more instances.');\n                // Restore the map to how it was before we touched it.\n                this.site.restore(levelBackup);\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return false;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (blueprint.noInteriorFlag) {\n            blueprint.clearInteriorFlag(this);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as LEVEL from './level';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GWU.utils.setOptions(this.config, options);\n        if (this.config.seed) {\n            GWU.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GWU.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GWU.utils.distanceBetween(startLoc[0], startLoc[1], x, y) > minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        GWU.random.seed(this.seeds[id]);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    makeLevel(id, opts, cb) {\n        const level = new LEVEL.Level(opts);\n        const result = level.create(this.config.width, this.config.height, cb);\n        if (!GWU.utils.equalsXY(level.endLoc, opts.endLoc) ||\n            !GWU.utils.equalsXY(level.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [level.startLoc, level.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["_a","_b","NOTHING","GWM","tile","get","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","GridSite","width","height","this","tiles","GWU","grid","alloc","free","fill","x","y","hasXY","isBoundaryXY","isFloor","isDoor","isBridge","isStairs","isShallow","v","isNothing","isWall","isDeep","blocksPathing","Tile","obj","Error","_x","_y","Flags","map","flags","Cell","MapSite","machineCount","flag","cellInfo","hasCellFlag","cell","setCellFlag","clearCellFlag","hasTile","opts","setTile","highestPriorityTile","cells","forEach","c","clear","hasItem","hasActor","blocksMove","blocksVision","hasObjectFlag","gameObject","GameObject","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","hasTileFlag","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","isEmpty","isPassable","T_BRIDGE","T_IS_DOOR","L_SECRETLY_PASSABLE","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","site","clone","backup","copy","chokeCount","count","analyze","effect","fireSync","machineId","id","isRoom","IS_IN_MACHINE","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","DIRS","utils","directionOfDoorSite","dir","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","w","isDiggable","isSet","push","doorSites","loc","random","item","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","getTileIndex","fillCostGrid","costGrid","update","_v","path","OBSTRUCTION","siteDisruptedBy","blockingGrid","options","_c","machine","walkableGrid","disrupts","lakeX","lakeY","getMachine","first","floodFill","siteDisruptedSize","blockingToMapX","blockingToMapY","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","Hall","length","doors","d","UP","DOWN","x2","y2","dx","dy","Room","Bounds","super","hall","cx","floor","cy","translate","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","make","RoomDigger","_setOptions","result","carve","every","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","bind","weighted","room","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickLength","lengths","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.Hall","lower","higher","actual","startX","startY","halls","clamp","Number","parseInt","_pickWidth","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","dirIndex","CLOCK_DIRS","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","SITE.DOOR","Level","seed","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","setOptions","SITE.GridSite","args","Map","SITE.MapSite","_create","cb","t","addFirstRoom","fails","addRoom","addLoops","addLakes","addBridges","addStairs","finish","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","roomSite","_makeSite","getDigger","_attachRoomAtLoc","HALL.dig","_attachRoom","SITE.directionOfDoorSite","oppDir","_roomFitsAt","SITE.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksDiagonal","boundaryTile","SITE.WALL","Fl","fl","Blueprint","tags","steps","split","trim","frequency","size","lo","from","cfg","STEP.BuildStep","level","want","includes","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_ADOPT_ITEM","treatAsBlocking","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","requiredFlags","depth","randSite","IS_GATE_SITE","contains","getChokeCount","console","log","pos","builder","tryAgain","failsafe","interior","addTileToInteriorAndIterate","computeInteriorForVestibuleMachine","error","SITE.computeDistanceMap","qualifyingTileCount","totalFreq","n","isOccupied","SITE.siteDisruptedBy","SITE.siteDisruptedSize","goodSoFar","startChokeCount","doorChokeCount","vestibuleLoc","vestibuleChokeCount","eachNeighbor","roomSize","wantSize","distMap","expandMachineInterior","machineNumber","setMachine","isSecretDoor","minimumInteriorNeighbors","madeChange","nbcount","distances","dist","distance25","distance75","alternativeFlags","STEP.StepFlags","BF_ALTERNATIVE","BF_ALTERNATIVE_2","keepFeature","randIndex","filter","_f","IS_WIRED","IS_CIRCUIT_BREAKER","blueprints","matches","values","b","qualifies","StepFlags","BuildStep","pad","horde","repeatUntilNoProgress","BF_REPEAT_UNTIL_NO_PROGRESS","blueprint","distanceBound","BF_NOT_IN_HALLWAY","arcCount","BF_NOT_ON_LEVEL_PERIMETER","BF_BUILD_AT_ORIGIN","occupied","BF_IN_VIEW_OF_ORIGIN","BF_IN_PASSABLE_VIEW_OF_ORIGIN","viewMap","distance","BF_BUILD_IN_WALLS","cellMachine","ok","BF_BUILD_ANYWHERE_ON_LEVEL","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","candidates","personalSpace","generateEverywhere","BF_EVERYWHERE","buildAtOrigin","BF_NEAR_ORIGIN","BF_FAR_FROM_ORIGIN","fov","FOV","isBlocked","calculate","cellIsCandidate","wantCount","builtCount","updateViewMap","markCandidates","warn","fireEffect","BF_PERMIT_BLOCKING","BF_TREAT_AS_BLOCKING","blockingMap","makePersonalSpace","BF_IMPREGNABLE","BF_OUTSOURCE_ITEM_TO_MACHINE","BF_BUILD_VESTIBULE","buildRandom","spawnedItems","spawnedHordes","requiredMachineFlags","BLUE.Flags","BLUE.random","build","toString","_build","pickLocation","computeInterior","levelBackup","nextMachineId","prepareInteriorWithMachineFlags","calcDistances","components","pickComponents","component","restore","clearInteriorFlag","levels","seeds","stairLocs","initSeeds","initStairLocs","number","stairDistance","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","LEVEL.Level","equalsXY"],"mappings":"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"}