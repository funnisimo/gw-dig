{"version":3,"file":"gw-dig.min.js","sources":["../js/dig/site.js","../js/dig/types.js","../js/dig/utils.js","../js/dig/room.js","../js/dig/hall.js","../js/dig/lake.js","../js/dig/bridge.js","../js/dig/stairs.js","../js/dig/loop.js","../js/dig/level.js","../js/dig/dungeon.js","../js/build/site.js","../js/build/blueprint.js","../js/build/buildStep.js","../js/build/builder.js"],"sourcesContent":["var _a, _b;\nimport * as GW from 'gw-utils';\nexport const NOTHING = GW.tile.get('NULL').index;\nexport const FLOOR = GW.tile.get('FLOOR').index;\nexport const DOOR = GW.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GW.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GW.tile.get('WALL').index;\nexport const DEEP = GW.tile.get('LAKE').index;\nexport const SHALLOW = GW.tile.get('SHALLOW').index;\nexport const BRIDGE = GW.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GW.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GW.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GW.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\nexport class GridSite {\n    constructor(width, height) {\n        this.tiles = GW.grid.alloc(width, height);\n    }\n    free() {\n        GW.grid.free(this.tiles);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === WALL || v === IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === UP_STAIRS || v === DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GW.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GW.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GW.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GW.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    tileBlocksMove(tile) {\n        return (tile === WALL ||\n            tile === DEEP ||\n            tile === IMPREGNABLE ||\n            tile === NOTHING);\n    }\n}\n","import * as GW from 'gw-utils';\nexport class Hall {\n    constructor(loc, dir, length, width = 1) {\n        this.width = 1;\n        this.doors = [];\n        this.x = loc[0];\n        this.y = loc[1];\n        const d = GW.utils.DIRS[dir];\n        this.length = length;\n        this.width = width;\n        // console.log('Hall', loc, d, length, width);\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            this.x2 = this.x + (width - 1);\n            this.y2 = this.y + (length - 1) * d[1];\n        }\n        else {\n            this.x2 = this.x + (length - 1) * d[0];\n            this.y2 = this.y + (width - 1);\n        }\n        // console.log(' - ', [this.x2, this.y2]);\n        this.dir = dir;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        this.x2 += dx;\n        this.y2 += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport class Room extends GW.utils.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GW.utils.Loc[] | null;\n//     door: number;\n// }\n","import * as GW from 'gw-utils';\n// import * as TYPES from './types';\nconst DIRS = GW.utils.DIRS;\n// export function attachRoom(\n//     map: GW.grid.NumGrid,\n//     roomGrid: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GW.utils.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GW.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GW.grid.NumGrid,\n//     roomGrid: GW.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GW.utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GW.utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GW.utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GW.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GW.utils.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GW.utils.DIRS[dir][0];\n                    newY = j + GW.utils.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GW.utils.DIRS[dir][0];\n                        newY += GW.utils.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = GW.random.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GW.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GW.grid.NumGrid,\n//     xy: GW.utils.Loc,\n//     roomGrid: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GW.utils.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GW.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GW.grid.NumGrid,\n//     mapDoors: GW.utils.Loc[],\n//     roomGrid: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GW.utils.Loc[] {\n//     const doorIndexes = GW.random.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GW.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GW.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GW.utils.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = GW.random.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GW.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n//             //     return [x0, y0] as GW.utils.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GW.utils.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GW.path.OBSTRUCTION);\n}\nexport function siteDisruptedBy(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GW.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GW.utils.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GW.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GW.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GW.utils.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GW.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GW.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GW.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GW.grid.free(costGrid);\n}\n","import * as GW from 'gw-utils';\nimport * as TYPES from './types';\nimport * as UTILS from './utils';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GW.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = UTILS.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = GW.random.item.bind(GW.random, choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = GW.random.weighted.bind(GW.random, choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom();\n        const room = rooms[id];\n        if (!room) {\n            GW.utils.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GW.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GW.blob.Blob({\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GW.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GW.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GW.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GW.utils.DOWN] = [\n            Math.floor(site.width / 2),\n            site.height - 2,\n        ];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * GW.random.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * GW.random.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX + GW.random.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            GW.random.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GW.utils.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GW.utils.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * GW.random.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * GW.random.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GW.utils.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GW.utils.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GW.utils.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GW.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value();\n        const ringMinWidth = this.options.ringMinWidth.value();\n        const holeMinSize = this.options.holeMinSize.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GW.utils.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            GW.random.chance(this.options.holeChance.value())) {\n            GW.utils.forCircle(x, y, GW.random.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value();\n        const width = this.options.width.value();\n        const height = this.options.height.value();\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GW.utils.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = GW.random.range(minX, maxX);\n            y = GW.random.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GW.utils.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as UTILS from './utils';\nimport * as TYPES from './types';\nconst DIRS = GW.utils.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(opts = {}) {\n    return GW.utils.clamp(_pickWidth(opts), 1, 3);\n}\nfunction _pickWidth(opts) {\n    if (!opts)\n        return 1;\n    if (typeof opts === 'number')\n        return opts;\n    if (opts.width === undefined)\n        return 1;\n    let width = opts.width;\n    if (typeof width === 'number')\n        return width;\n    else if (Array.isArray(width)) {\n        // @ts-ignore\n        width = GW.random.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GW.range.make(width).value();\n    }\n    else {\n        width = Number.parseInt(GW.random.weighted(width));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths) {\n    if (dir == GW.utils.UP || dir == GW.utils.DOWN) {\n        return lengths[1].value();\n    }\n    else {\n        return lengths[0].value();\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GW.utils.NO_DIRECTION;\n    if (dir == GW.utils.NO_DIRECTION) {\n        const dirs = GW.random.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GW.utils.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = GW.random.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: GW.range.make(1),\n            length: [GW.range.make('2-15'), GW.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = GW.range.make(options.width);\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GW.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || UTILS.chooseRandomDoorSites(site);\n        if (!GW.random.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GW.utils.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = this.config.width.value();\n        const length = pickLength(dir, this.config.length);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = new TYPES.Hall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GW.utils.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = new TYPES.Hall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = GW.random.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GW.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GW.blob.Blob({\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = GW.random.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = GW.random.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GW.utils.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GW.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GW.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GW.utils.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GW.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GW.grid.alloc(site.width, site.height);\n        const costGrid = GW.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GW.path.OBSTRUCTION);\n        const seq = GW.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GW.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GW.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GW.grid.free(pathGrid);\n        GW.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc;\n        let downLoc;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = GW.random.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = GW.random.matchingLocNear(GW.utils.x(start), GW.utils.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GW.random.matchingLocNear(GW.utils.x(up), GW.utils.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = GW.random.matchingLocNear(GW.utils.x(down), GW.utils.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = GW.random.matchingLocNear(GW.utils.x(up), GW.utils.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = GW.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GW.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = GW.random.matchingLocNear(GW.utils.x(down), GW.utils.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = GW.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GW.utils.distanceBetween(x, y, \n                    // @ts-ignore\n                    downLoc[0], \n                    // @ts-ignore\n                    downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = GW.random.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = GW.random.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GW.utils.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = GW.random.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc !== undefined) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GW.utils.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = GW.random.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GW.utils.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GW.utils.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GW.utils.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GW.utils.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GW.utils.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as UTILS from './utils';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GW.grid.alloc(site.width, site.height);\n        const costGrid = GW.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        UTILS.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = GW.random.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GW.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            site.setTile(x, y, SITE.DOOR); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GW.grid.free(pathGrid);\n        GW.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GW from 'gw-utils';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as UTILS from './utils';\nexport class Level {\n    constructor(width, height, options = {}) {\n        this.rooms = {};\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.height = height;\n        this.width = width;\n        if (options.seed) {\n            GW.random.seed(options.seed);\n        }\n        this.seq = GW.random.sequence(width * height);\n        GW.utils.setOptions(this.rooms, options.rooms);\n        GW.utils.setOptions(this.halls, options.halls);\n        GW.utils.setOptions(this.loops, options.loops);\n        GW.utils.setOptions(this.lakes, options.lakes);\n        GW.utils.setOptions(this.bridges, options.bridges);\n        GW.utils.setOptions(this.stairs, options.stairs);\n        GW.utils.setOptions(this.doors, options.doors);\n        this.startLoc = options.startLoc || [Math.floor(width / 2), height - 2];\n        this.endLoc = options.endLoc || [-1, -1];\n    }\n    makeSite(width, height) {\n        return new SITE.GridSite(width, height);\n    }\n    create(setFn) {\n        const site = this.makeSite(this.width, this.height);\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        let fails = 0;\n        while (fails < 20) {\n            if (this.addRoom(site)) {\n                fails = 0;\n            }\n            else {\n                ++fails;\n            }\n        }\n        this.addLoops(site, this.loops);\n        this.addLakes(site, this.lakes);\n        this.addBridges(site, this.bridges);\n        this.addStairs(site, this.stairs);\n        this.finish(site);\n        GW.utils.forRect(this.width, this.height, (x, y) => {\n            const t = site.getTileIndex(x, y);\n            if (t)\n                setFn(x, y, t);\n        });\n        site.free();\n        return true;\n    }\n    start(_site) { }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const roomSite = this.makeSite(this.width, this.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const roomSite = this.makeSite(this.width, this.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        if (room && !this._attachRoom(site, roomSite, room)) {\n            room = null;\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (let i = 0; i < this.seq.length; i++) {\n            const x = Math.floor(this.seq[i] / this.height);\n            const y = this.seq[i] % this.height;\n            if (!site.isNothing(x, y))\n                continue;\n            const dir = UTILS.directionOfDoorSite(site, x, y);\n            if (dir != GW.utils.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    UTILS.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = GW.random.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                UTILS.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GW.utils.Loc;\n                //     return [x0, y0] as GW.utils.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n            for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.hasXY(i, j) ||\n                                map.isBoundaryXY(i, j) ||\n                                !map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(map, room, x, y, dir) {\n        const opts = this.doors;\n        if (opts.chance === 0)\n            return; // no door at all\n        const isDoor = opts.chance && GW.random.chance(opts.chance); // did not pass chance\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        map.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n            return;\n        }\n        if (dir === GW.utils.UP || dir === GW.utils.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x - k, y)) {\n                    if (map.isSet(x - k, y - 1) && map.isSet(x - k, y + 1)) {\n                        map.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x + k, y)) {\n                    if (map.isSet(x + k, y - 1) && map.isSet(x + k, y + 1)) {\n                        map.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (map.isNothing(x, y - k)) {\n                    if (map.isSet(x - 1, y - k) && map.isSet(x + 1, y - k)) {\n                        map.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (map.isNothing(x, y + k)) {\n                    if (map.isSet(x - 1, y + k) && map.isSet(x + 1, y + k)) {\n                        map.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < this.width - 1; i++) {\n                for (j = 0; j < this.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (GW.random.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GW.utils.forRect(this.width, this.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GW.utils.forRect(this.width, this.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as LEVEL from './level';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GW.utils.setOptions(this.config, options);\n        if (this.config.seed) {\n            GW.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GW.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GW.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GW.utils.distanceBetween(startLoc[0], startLoc[1], x, y) > minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        GW.random.seed(this.seeds[id]);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    makeLevel(id, opts, cb) {\n        const level = new LEVEL.Level(this.config.width, this.config.height, opts);\n        const result = level.create(cb);\n        if (!GW.utils.equalsXY(level.endLoc, opts.endLoc) ||\n            !GW.utils.equalsXY(level.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [level.startLoc, level.endLoc];\n        }\n        return result;\n    }\n}\n","import * as GW from 'gw-utils';\nconst Flags = GW.map.flags.Cell;\nexport * from '../dig/site';\nexport class MapSite extends GW.map.Map {\n    constructor(width, height) {\n        super(width, height);\n        this.machineCount = 0;\n        this.machineId = new GW.grid.NumGrid(width, height);\n    }\n    hasItem(x, y) {\n        return this.cellInfo(x, y).hasItem();\n    }\n    isPassable(x, y) {\n        return !this.cellInfo(x, y).blocksMove();\n    }\n    blocksMove(x, y) {\n        return this.cellInfo(x, y).blocksMove();\n    }\n    isWall(x, y) {\n        return this.cellInfo(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.cellInfo(x, y).isStairs();\n    }\n    hasTile(x, y, tile) {\n        return this.cellInfo(x, y).hasTile(tile);\n    }\n    free() { }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.cell(x, y).isEmpty();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.isEmpty())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.cell(x, y).isEmpty();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.cellInfo(x, y).hasTileFlag(GW.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.cellInfo(x, y).hasTileFlag(GW.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.cellInfo(x, y).hasObjectFlag(GW.gameObject.flags.GameObject.L_SECRETLY_PASSABLE);\n    }\n    blocksDiagonal(x, y) {\n        return this.cellInfo(x, y).hasObjectFlag(GW.gameObject.flags.GameObject.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.cellInfo(x, y);\n        return (info.hasObjectFlag(GW.gameObject.flags.GameObject.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GW.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.cellInfo(x, y).hasObjectFlag(GW.gameObject.flags.GameObject.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.cellInfo(x, y).hasObjectFlag(GW.gameObject.flags.GameObject.L_BLOCKS_EFFECTS);\n    }\n    isDeep(x, y) {\n        return this.cellInfo(x, y).hasTileFlag(GW.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        return (cell.depthTile(GW.gameObject.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GW.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        return (cell.hasDepthTile(GW.gameObject.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GW.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    tileBlocksMove(tile) {\n        return GW.tile.get(tile).blocksMove();\n    }\n    backup() {\n        const backup = new MapSite(this.width, this.height);\n        backup.copy(this);\n        backup.machineId.copy(this.machineId);\n        backup.machineCount = this.machineCount;\n        return backup;\n    }\n    restore(backup) {\n        this.copy(backup);\n        this.machineId.copy(backup.machineId);\n        this.machineCount = backup.machineCount;\n    }\n    getChokeCount(x, y) {\n        return this.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.cell(x, y).chokeCount = count;\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    analyze() {\n        GW.map.analyze(this);\n    }\n    nextMachineId() {\n        return ++this.machineCount;\n    }\n    getMachine(x, y) {\n        return this.machineId[x][y];\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.machineId[x][y] = id;\n        if (id == 0) {\n            this.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as DIG_SITE from '../dig/site';\nimport * as STEP from './buildStep';\nimport * as DIG_UTILS from '../dig/utils';\nconst Fl = GW.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(10)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(7)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(0)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(2)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(3)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(4)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(5)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(6)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(8)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(9)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(14)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(11)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(12)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(13)] = \"BP_NO_INTERIOR_FLAG\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.size = [-1, -1];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GW.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            if (typeof opts.size === 'string') {\n                const parts = opts.size\n                    .split(/-/)\n                    .map((v) => v.trim())\n                    .map((v) => Number.parseInt(v));\n                if (parts.length !== 2)\n                    throw new Error('Blueprint size must be of format: #-#');\n                this.size = [parts[0], parts[1]];\n            }\n            else if (Array.isArray(opts.size)) {\n                if (opts.size.length !== 2)\n                    throw new Error('Blueprint size must be [min, max]');\n                this.size = [opts.size[0], opts.size[1]];\n            }\n            else {\n                throw new Error('size must be string or array.');\n            }\n            if (this.size[0] > this.size[1])\n                throw new Error('Blueprint size must be small to large.');\n        }\n        if (opts.flags) {\n            this.flags = GW.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n    }\n    getChance(level, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return 0;\n        }\n        return this.frequency(level);\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    qualifies(requiredFlags, depth) {\n        if (this.frequency(depth) <= 0 ||\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickLocation(site) {\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            site.analyze(); // Make sure the chokeMap is up to date.\n            const randSite = GW.random.matchingLoc(site.width, site.height, (x, y) => site\n                .cellInfo(x, y)\n                .hasCellFlag(GW.map.flags.Cell.IS_GATE_SITE));\n            if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n                // If no suitable sites, abort.\n                console.log('Failed to build a machine; there was no eligible door candidate for the chosen room machine from blueprint.');\n                return false;\n            }\n            return randSite;\n        }\n        else if (this.isVestiblue) {\n            //  Door machines must have locations passed in. We can't pick one ourselves.\n            console.log('ERROR: Attempted to build a vestiblue without a location being provided.');\n            return false;\n        }\n        // Pick a random origin location.\n        const pos = GW.random.matchingLoc(site.width, site.height, (x, y) => site.isPassable(x, y));\n        if (!pos || pos[0] < 0 || pos[1] < 0)\n            return false;\n        return pos;\n    }\n    // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n    computeInterior(builder) {\n        let failsafe = this.isRoom ? 10 : 20;\n        let tryAgain;\n        const interior = builder.interior;\n        const site = builder.site;\n        do {\n            tryAgain = false;\n            if (--failsafe <= 0) {\n                console.log('Failed to build a machine; failed repeatedly to find a suitable blueprint location.');\n                return false;\n            }\n            interior.fill(0);\n            // Find a location and map out the machine interior.\n            if (this.isRoom) {\n                // If it's a room machine, count up the gates of appropriate\n                // choke size and remember where they are. The origin of the room will be the gate location.\n                // Now map out the interior into interior[][].\n                // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n                // same or lower choke value, ignoring any tiles that are already part of a machine.\n                // If we get false from this, try again. If we've tried too many times already, abort.\n                tryAgain = !this.addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n            }\n            else if (this.isVestiblue) {\n                if (!this.computeInteriorForVestibuleMachine(builder)) {\n                    // TODO - tryagain = true?\n                    console.error('ERROR: Attempted to build a door machine from blueprint: not enough room.');\n                    return false;\n                }\n                // success\n            }\n            else {\n                // Find a location and map out the interior for a non-room machine.\n                // The strategy here is simply to pick a random location on the map,\n                // expand it along a pathing map by one space in all directions until the size reaches\n                // the chosen size, and then make sure the resulting space qualifies.\n                // If not, try again. If we've tried too many times already, abort.\n                let distanceMap = GW.grid.alloc(interior.width, interior.height);\n                DIG_UTILS.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, this.size[1]);\n                const seq = GW.random.sequence(site.width * site.height);\n                let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n                let totalFreq = GW.random.range(this.size[0], this.size[1]); // Keeps track of the goal size.\n                for (let k = 0; k < 1000 && qualifyingTileCount < totalFreq; k++) {\n                    for (let n = 0; n < seq.length && qualifyingTileCount < totalFreq; n++) {\n                        const i = Math.floor(seq[n] / site.height);\n                        const j = seq[n] % site.height;\n                        if (distanceMap[i][j] == k) {\n                            interior[i][j] = 1;\n                            qualifyingTileCount++;\n                            if (site.isOccupied(i, j) ||\n                                site\n                                    .cellInfo(i, j)\n                                    .hasCellFlag(GW.map.flags.Cell.IS_IN_MACHINE)) {\n                                // Abort if we've entered another machine or engulfed another machine's item or monster.\n                                tryAgain = true;\n                                qualifyingTileCount = totalFreq; // This is a hack to drop out of these three for-loops.\n                            }\n                        }\n                    }\n                }\n                // Now make sure the interior map satisfies the machine's qualifications.\n                if (qualifyingTileCount < totalFreq) {\n                    tryAgain = true;\n                    console.log('too small');\n                }\n                else if (this.treatAsBlocking &&\n                    DIG_UTILS.siteDisruptedBy(site, interior)) {\n                    console.log('disconnected');\n                    tryAgain = true;\n                }\n                else if (this.requireBlocking &&\n                    DIG_UTILS.siteDisruptedSize(site, interior) < 100) {\n                    console.log('not disconnected enough');\n                    tryAgain = true; // BP_REQUIRE_BLOCKING needs some work to make sure the disconnect is interesting.\n                }\n                // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n                // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n                GW.grid.free(distanceMap);\n            }\n            // Now loop if necessary.\n        } while (tryAgain);\n        // console.log(tryAgain, failsafe);\n        return true;\n    }\n    // Assumes (startX, startY) is in the machine.\n    // Returns true if everything went well, and false if we ran into a machine component\n    // that was already there, as we don't want to build a machine around it.\n    addTileToInteriorAndIterate(builder, startX, startY) {\n        let goodSoFar = true;\n        const interior = builder.interior;\n        const site = builder.site;\n        interior[startX][startY] = 1;\n        const startChokeCount = site.getChokeCount(startX, startY);\n        for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n            const newX = startX + GW.utils.DIRS[dir][0];\n            const newY = startY + GW.utils.DIRS[dir][1];\n            if (!site.hasXY(newX, newY))\n                continue;\n            if (interior[newX][newY])\n                continue; // already done\n            if (site.isOccupied(newX, newY) ||\n                (site\n                    .cellInfo(newX, newY)\n                    .hasCellFlag(GW.map.flags.Cell.IS_IN_MACHINE) &&\n                    !site\n                        .cellInfo(newX, newY)\n                        .hasCellFlag(GW.map.flags.Cell.IS_GATE_SITE))) {\n                // Abort if there's an item in the room.\n                // Items haven't been populated yet, so the only way this could happen is if another machine\n                // previously placed an item here.\n                // Also abort if we're touching another machine at any point other than a gate tile.\n                return false;\n            }\n            if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n                !site\n                    .cellInfo(newX, newY)\n                    .hasCellFlag(GW.map.flags.Cell.IS_IN_MACHINE)) {\n                goodSoFar = this.addTileToInteriorAndIterate(builder, newX, newY);\n            }\n        }\n        return goodSoFar;\n    }\n    computeInteriorForVestibuleMachine(builder) {\n        let success = true;\n        const interior = builder.interior;\n        const site = builder.site;\n        interior.fill(0);\n        let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n        const totalFreq = GW.random.range(this.size[0], this.size[1]); // Keeps track of the goal size.\n        const distMap = GW.grid.alloc(site.width, site.height);\n        DIG_UTILS.computeDistanceMap(site, distMap, builder.originX, builder.originY, this.size[1]);\n        // console.log('DISTANCE MAP', originX, originY);\n        // RUT.Grid.dump(distMap);\n        const cells = GW.random.sequence(site.width * site.height);\n        for (let k = 0; k < 1000 && qualifyingTileCount < totalFreq; k++) {\n            for (let i = 0; i < cells.length && qualifyingTileCount < totalFreq; ++i) {\n                const x = Math.floor(cells[i] / site.height);\n                const y = cells[i] % site.height;\n                const dist = distMap[x][y];\n                if (dist != k)\n                    continue;\n                if (site.isOccupied(x, y)) {\n                    success = false;\n                    qualifyingTileCount = totalFreq;\n                }\n                interior[x][y] = 1;\n                qualifyingTileCount += 1;\n            }\n        }\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (this.treatAsBlocking && DIG_UTILS.siteDisruptedBy(site, interior)) {\n            success = false;\n        }\n        else if (this.requireBlocking &&\n            DIG_UTILS.siteDisruptedSize(site, interior) < 100) {\n            success = false;\n        }\n        GW.grid.free(distMap);\n        return success;\n    }\n    prepareInteriorWithMachineFlags(builder) {\n        const interior = builder.interior;\n        const site = builder.site;\n        // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n        if (this.maximizeInterior) {\n            this.expandMachineInterior(builder, 1);\n        }\n        else if (this.openInterior) {\n            this.expandMachineInterior(builder, 4);\n        }\n        // If requested, cleanse the interior -- no interesting terrain allowed.\n        if (this.purgeInterior) {\n            interior.forEach((v, x, y) => {\n                if (v)\n                    site.setTile(x, y, DIG_SITE.FLOOR);\n            });\n        }\n        // If requested, purge pathing blockers -- no traps allowed.\n        if (this.purgeBlockers) {\n            interior.forEach((v, x, y) => {\n                if (!v)\n                    return;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, DIG_SITE.FLOOR);\n                }\n            });\n        }\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (this.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.setTile(x, y, DIG_SITE.FLOOR);\n                }\n            });\n        }\n        // Surround with walls if requested.\n        if (this.surroundWithWalls) {\n            interior.forEach((v, x, y) => {\n                if (!v ||\n                    site\n                        .cellInfo(x, y)\n                        .hasCellFlag(GW.map.flags.Cell.IS_GATE_SITE))\n                    return;\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // Not valid x,y\n                    if (interior[i][j])\n                        return; // is part of machine\n                    if (site.isWall(i, j))\n                        return; // is already a wall (of some sort)\n                    if (site\n                        .cellInfo(i, j)\n                        .hasCellFlag(GW.map.flags.Cell.IS_GATE_SITE))\n                        return; // is a door site\n                    if (site\n                        .cellInfo(i, j)\n                        .hasCellFlag(GW.map.flags.Cell.IS_IN_MACHINE))\n                        return; // is part of a machine\n                    if (!site.blocksPathing(i, j))\n                        return; // is not a blocker for the player (water?)\n                    site.setTile(i, j, DIG_SITE.WALL);\n                }, false);\n            });\n        }\n        // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n        // Then zero out any portion of the interior that is still wall.\n        // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n        //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n        // }\n        // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n        if (this.makeImpregnable) {\n            interior.forEach((v, x, y) => {\n                if (!v ||\n                    site\n                        .cellInfo(x, y)\n                        .hasCellFlag(GW.map.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(x, y, GW.map.flags.Cell.IMPREGNABLE);\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return;\n                    if (interior[i][j])\n                        return;\n                    if (site\n                        .cellInfo(i, j)\n                        .hasCellFlag(GW.map.flags.Cell.IS_GATE_SITE))\n                        return;\n                    site.setCellFlag(i, j, GW.map.flags.Cell.IMPREGNABLE);\n                }, false);\n            });\n        }\n        // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n        const machineNumber = builder.machineNumber;\n        interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            site.setMachine(x, y, machineNumber, this.isRoom);\n            // secret doors mess up machines\n            if (site.isSecretDoor(x, y)) {\n                site.setTile(x, y, DIG_SITE.DOOR);\n            }\n        });\n    }\n    expandMachineInterior(builder, minimumInteriorNeighbors = 1) {\n        let madeChange;\n        const interior = builder.interior;\n        const site = builder.site;\n        do {\n            madeChange = false;\n            interior.forEach((_v, x, y) => {\n                // if (v && site.isDoor(x, y)) {\n                //     site.setTile(x, y, DIG_SITE.FLOOR); // clean out the doors...\n                //     return;\n                // }\n                if (site\n                    .cellInfo(x, y)\n                    .hasCellFlag(GW.map.flags.Cell.IS_IN_MACHINE))\n                    return;\n                if (!site.blocksPathing(x, y))\n                    return;\n                let nbcount = 0;\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // Not in map\n                    if (interior[i][j] && !site.blocksPathing(i, j)) {\n                        ++nbcount; // in machine and open tile\n                    }\n                }, false);\n                if (nbcount < minimumInteriorNeighbors)\n                    return;\n                nbcount = 0;\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return; // not on map\n                    if (interior[i][j])\n                        return; // already part of machine\n                    if (!site.isWall(i, j) ||\n                        site\n                            .cellInfo(i, j)\n                            .hasCellFlag(GW.map.flags.Cell.IS_IN_MACHINE)) {\n                        ++nbcount; // tile is not a wall or is in a machine\n                    }\n                }, false);\n                if (nbcount)\n                    return;\n                // Eliminate this obstruction; welcome its location into the machine.\n                madeChange = true;\n                interior[x][y] = 1;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, DIG_SITE.FLOOR);\n                }\n                GW.utils.eachNeighbor(x, y, (i, j) => {\n                    if (!interior.hasXY(i, j))\n                        return;\n                    if (site.isSet(i, j))\n                        return;\n                    site.setTile(i, j, DIG_SITE.WALL);\n                });\n            });\n        } while (madeChange);\n    }\n    calcDistances(builder) {\n        builder.distanceMap.fill(0);\n        DIG_UTILS.computeDistanceMap(builder.site, builder.distanceMap, builder.originX, builder.originY, this.size[1]);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        builder.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = builder.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        builder.distance25 = distance25;\n        builder.distance75 = distance75;\n    }\n    pickComponents() {\n        const alternativeFlags = [\n            STEP.StepFlags.BF_ALTERNATIVE,\n            STEP.StepFlags.BF_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = GW.random.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n    clearInteriorFlag(builder) {\n        builder.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            if (!builder.site\n                .cellInfo(x, y)\n                .hasCellFlag(GW.map.flags.Cell.IS_WIRED |\n                GW.map.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                builder.site.setMachine(x, y, 0);\n            }\n        });\n        // for (i = 0; i < map.width; i++) {\n        //     for (j = 0; j < map.height; j++) {\n        //         const cell = RUT.Map.getCell(map, i, j);\n        //         if (\n        //             cell.machineNumber == map.machineNumber &&\n        //             !RUT.Cell.hasMechFlag(\n        //                 cell,\n        //                 MechFlags.TM_IS_WIRED |\n        //                     MechFlags.TM_IS_CIRCUIT_BREAKER\n        //             )\n        //         ) {\n        //             cell.flags &= ~CellFlags.IS_IN_MACHINE;\n        //             cell.machineNumber = 0;\n        //         }\n        //     }\n        // }\n    }\n}\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags, depth));\n    return GW.random.item(matches);\n}\n","import * as GW from 'gw-utils';\nimport * as DIG_UTILS from '../dig/utils';\nimport { Flags } from './blueprint';\nconst Fl = GW.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    // BF_GENERATE_ITEM\t\t\t\t= Fl(0),\t// feature entails generating an item (overridden if the machine is adopting an item)\n    // BF_GENERATE_HORDE\t\t\t= Fl(5),\t// generate a monster horde that has all of the horde flags\n    // BF_NO_THROWING_WEAPONS\t    = Fl(4),\t// the generated item cannot be a throwing weapon\n    // BF_REQUIRE_GOOD_RUNIC\t\t= Fl(18),\t// generated item must be uncursed runic\n    StepFlags[StepFlags[\"BF_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BF_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BF_BUILD_VESTIBULE\"] = Fl(2)] = \"BF_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BF_ADOPT_ITEM\"] = Fl(3)] = \"BF_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BF_BUILD_AT_ORIGIN\"] = Fl(6)] = \"BF_BUILD_AT_ORIGIN\";\n    // unused                   = Fl(7),\t//\n    StepFlags[StepFlags[\"BF_PERMIT_BLOCKING\"] = Fl(8)] = \"BF_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BF_TREAT_AS_BLOCKING\"] = Fl(9)] = \"BF_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BF_NEAR_ORIGIN\"] = Fl(10)] = \"BF_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BF_FAR_FROM_ORIGIN\"] = Fl(11)] = \"BF_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_VIEW_OF_ORIGIN\"] = Fl(25)] = \"BF_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(26)] = \"BF_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BF_MONSTER_TAKE_ITEM\"] = Fl(12)] = \"BF_MONSTER_TAKE_ITEM\";\n    StepFlags[StepFlags[\"BF_MONSTER_SLEEPING\"] = Fl(13)] = \"BF_MONSTER_SLEEPING\";\n    StepFlags[StepFlags[\"BF_MONSTER_FLEEING\"] = Fl(14)] = \"BF_MONSTER_FLEEING\";\n    StepFlags[StepFlags[\"BF_MONSTERS_DORMANT\"] = Fl(19)] = \"BF_MONSTERS_DORMANT\";\n    StepFlags[StepFlags[\"BF_ITEM_IS_KEY\"] = Fl(0)] = \"BF_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BF_ITEM_IDENTIFIED\"] = Fl(5)] = \"BF_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BF_ITEM_PLAYER_AVOIDS\"] = Fl(4)] = \"BF_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BF_EVERYWHERE\"] = Fl(15)] = \"BF_EVERYWHERE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE\"] = Fl(16)] = \"BF_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BF_ALTERNATIVE_2\"] = Fl(17)] = \"BF_ALTERNATIVE_2\";\n    // unused                       = Fl(20),\t//\n    StepFlags[StepFlags[\"BF_BUILD_IN_WALLS\"] = Fl(21)] = \"BF_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BF_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BF_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BF_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BF_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BF_IMPREGNABLE\"] = Fl(24)] = \"BF_IMPREGNABLE\";\n    StepFlags[StepFlags[\"BF_NOT_IN_HALLWAY\"] = Fl(27)] = \"BF_NOT_IN_HALLWAY\";\n    StepFlags[StepFlags[\"BF_NOT_ON_LEVEL_PERIMETER\"] = Fl(28)] = \"BF_NOT_ON_LEVEL_PERIMETER\";\n    StepFlags[StepFlags[\"BF_SKELETON_KEY\"] = Fl(29)] = \"BF_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BF_KEY_DISPOSABLE\"] = Fl(30)] = \"BF_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    constructor(cfg = {}) {\n        this.tile = 0;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        this.id = 'n/a';\n        if (cfg.tile) {\n            if (typeof cfg.tile === 'string') {\n                const t = GW.tile.tiles[cfg.tile];\n                if (!t) {\n                    throw new Error('Failed to find tile: ' + cfg.tile);\n                }\n                this.tile = t.index;\n            }\n            else {\n                this.tile = cfg.tile;\n            }\n        }\n        if (cfg.flags) {\n            this.flags = GW.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GW.range.make(cfg.count || 1);\n        this.item = cfg.item || null;\n        this.horde = cfg.horde || null;\n        if (cfg.effect) {\n            this.effect = GW.effect.make(cfg.effect);\n        }\n    }\n    cellIsCandidate(builder, blueprint, x, y, distanceBound) {\n        const site = builder.site;\n        // No building in the hallway if it's prohibited.\n        // This check comes before the origin check, so an area machine will fail altogether\n        // if its origin is in a hallway and the feature that must be built there does not permit as much.\n        if (this.flags & StepFlags.BF_NOT_IN_HALLWAY &&\n            GW.utils.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n            return false;\n        }\n        // No building along the perimeter of the level if it's prohibited.\n        if (this.flags & StepFlags.BF_NOT_ON_LEVEL_PERIMETER &&\n            (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1)) {\n            return false;\n        }\n        // The origin is a candidate if the feature is flagged to be built at the origin.\n        // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n        if (this.flags & StepFlags.BF_BUILD_AT_ORIGIN) {\n            return x == builder.originX && y == builder.originY ? true : false;\n        }\n        else if (blueprint.isRoom &&\n            x == builder.originX &&\n            y == builder.originY) {\n            return false;\n        }\n        // No building in another feature's personal space!\n        if (builder.occupied[x][y]) {\n            return false;\n        }\n        // Must be in the viewmap if the appropriate flag is set.\n        if (this.flags &\n            (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n                StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n            !builder.viewMap[x][y]) {\n            return false;\n        }\n        // Do a distance check if the feature requests it.\n        let distance = 10000;\n        if (site.isWall(x, y)) {\n            // Distance is calculated for walls too.\n            GW.utils.eachNeighbor(x, y, (i, j) => {\n                if (!builder.distanceMap.hasXY(i, j))\n                    return;\n                if (!site.blocksPathing(i, j) &&\n                    distance > builder.distanceMap[i][j] + 1) {\n                    distance = builder.distanceMap[i][j] + 1;\n                }\n            }, true);\n        }\n        else {\n            distance = builder.distanceMap[x][y];\n        }\n        if (distance > distanceBound[1] || // distance exceeds max\n            distance < distanceBound[0]) {\n            // distance falls short of min\n            return false;\n        }\n        if (this.flags & StepFlags.BF_BUILD_IN_WALLS) {\n            // If we're supposed to build in a wall...\n            const cellMachine = site.getMachine(x, y);\n            if (!builder.interior[x][y] &&\n                (!cellMachine || cellMachine == builder.machineNumber) &&\n                site.isWall(x, y)) {\n                let ok = false;\n                // ...and this location is a wall that's not already machined...\n                GW.utils.eachNeighbor(x, y, (newX, newY) => {\n                    if (site.hasXY(newX, newY) && // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                        ((builder.interior[newX][newY] &&\n                            !(newX == builder.originX &&\n                                newY == builder.originY)) ||\n                            (this.flags &\n                                StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL &&\n                                !site.blocksPathing(newX, newY) &&\n                                !site.getMachine(newX, newY)))) {\n                        ok = true;\n                    }\n                });\n                return ok;\n            }\n            return false;\n        }\n        else if (site.isWall(x, y)) {\n            // Can't build in a wall unless instructed to do so.\n            return false;\n        }\n        else if (this.flags & StepFlags.BF_BUILD_ANYWHERE_ON_LEVEL) {\n            if ((this.item && site.blocksItems(x, y)) ||\n                site\n                    .cellInfo(x, y)\n                    .hasCellFlag(GW.map.flags.Cell.IS_CHOKEPOINT |\n                    GW.map.flags.Cell.IS_IN_LOOP |\n                    GW.map.flags.Cell.IS_IN_MACHINE)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else if (builder.interior[x][y]) {\n            return true;\n        }\n        return false;\n    }\n    makePersonalSpace(builder, x, y, candidates) {\n        const personalSpace = this.pad;\n        let count = 0;\n        for (let i = x - personalSpace + 1; i <= x + personalSpace - 1; i++) {\n            for (let j = y - personalSpace + 1; j <= y + personalSpace - 1; j++) {\n                if (builder.site.hasXY(i, j)) {\n                    if (candidates[i][j]) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BF_EVERYWHERE &\n            ~StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BF_BUILD_AT_ORIGIN);\n    }\n    distanceBound(builder) {\n        const distanceBound = [0, 10000];\n        if (this.flags & StepFlags.BF_NEAR_ORIGIN) {\n            distanceBound[1] = builder.distance25;\n        }\n        if (this.flags & StepFlags.BF_FAR_FROM_ORIGIN) {\n            distanceBound[0] = builder.distance75;\n        }\n        return distanceBound;\n    }\n    updateViewMap(builder) {\n        if (this.flags &\n            (StepFlags.BF_IN_VIEW_OF_ORIGIN |\n                StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n            const site = builder.site;\n            if (this.flags & StepFlags.BF_IN_PASSABLE_VIEW_OF_ORIGIN) {\n                const fov = new GW.fov.FOV({\n                    isBlocked: (x, y) => {\n                        return site.blocksPathing(x, y);\n                    },\n                    hasXY: (x, y) => {\n                        return site.hasXY(x, y);\n                    },\n                });\n                fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                    builder.viewMap[x][y] = 1;\n                });\n            }\n            else {\n                const fov = new GW.fov.FOV({\n                    // TileFlags.T_OBSTRUCTS_PASSABILITY |\n                    //     TileFlags.T_OBSTRUCTS_VISION,\n                    isBlocked: (x, y) => {\n                        return (site.blocksPathing(x, y) || site.blocksVision(x, y));\n                    },\n                    hasXY: (x, y) => {\n                        return site.hasXY(x, y);\n                    },\n                });\n                fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                    builder.viewMap[x][y] = 1;\n                });\n            }\n            builder.viewMap[builder.originX][builder.originY] = 1;\n        }\n    }\n    markCandidates(candidates, builder, blueprint, distanceBound) {\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            if (this.cellIsCandidate(builder, blueprint, i, j, distanceBound)) {\n                count++;\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        return count;\n    }\n    build(builder, blueprint) {\n        let instanceCount = 0;\n        let instance = 0;\n        const site = builder.site;\n        const candidates = GW.grid.alloc(site.width, site.height);\n        // Figure out the distance bounds.\n        const distanceBound = this.distanceBound(builder);\n        this.updateViewMap(builder);\n        do {\n            // If the StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n            // Make a master map of candidate locations for this feature.\n            let qualifyingTileCount = this.markCandidates(candidates, builder, blueprint, distanceBound);\n            if (!this.generateEverywhere) {\n                instanceCount = this.count.value();\n            }\n            if (!qualifyingTileCount || qualifyingTileCount < this.count.lo) {\n                console.warn('Only %s qualifying tiles - want at least %s.', qualifyingTileCount, this.count.lo);\n                return 0; // ?? Failed ??\n            }\n            let x = 0, y = 0;\n            for (instance = 0; (this.generateEverywhere || instance < instanceCount) &&\n                qualifyingTileCount > 0;) {\n                // Find a location for the feature.\n                if (this.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = builder.originX;\n                    y = builder.originY;\n                }\n                else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = GW.random.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] > 0);\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n                let DFSucceeded = true;\n                let terrainSucceeded = true;\n                // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n                if (this.effect) {\n                    DFSucceeded = GW.effect.fireSync(this.effect, site, x, y);\n                }\n                // Now try to place the terrain tile, if any.\n                if (DFSucceeded && this.tile) {\n                    let tile = GW.tile.get(this.tile).index;\n                    if (!tile) {\n                        terrainSucceeded = false;\n                        console.error('placing invalid tile', this.tile, x, y);\n                    }\n                    else if (!(this.flags & StepFlags.BF_PERMIT_BLOCKING) &&\n                        (site.tileBlocksMove(tile) ||\n                            this.flags & StepFlags.BF_TREAT_AS_BLOCKING)) {\n                        // Yes, check for blocking.\n                        const blockingMap = GW.grid.alloc(site.width, site.height);\n                        blockingMap[x][y] = 1;\n                        terrainSucceeded = !DIG_UTILS.siteDisruptedBy(site, blockingMap);\n                        GW.grid.free(blockingMap);\n                    }\n                    if (terrainSucceeded) {\n                        site.setTile(x, y, tile);\n                    }\n                }\n                // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                // Personal space of 0 means nothing gets cleared, 1 means that only the tile itself gets cleared, and 2 means the 3x3 grid centered on it.\n                if (DFSucceeded && terrainSucceeded) {\n                    qualifyingTileCount -= this.makePersonalSpace(builder, x, y, candidates);\n                    instance++; // we've placed an instance\n                    //DEBUG printf(\"\\nPlaced instance #%i of feature %i at (%i, %i).\", instance, feat, featX, featY);\n                }\n                if (DFSucceeded && terrainSucceeded) {\n                    // Proceed only if the terrain stuff for this instance succeeded.\n                    // Mark the feature location as part of the machine, in case it is not already inside of it.\n                    if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n                        site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n                    }\n                    // Mark the feature location as impregnable if requested.\n                    if (this.flags & StepFlags.BF_IMPREGNABLE) {\n                        site.setCellFlag(x, y, GW.map.flags.Cell.IMPREGNABLE);\n                    }\n                    // let success = RUT.Component.generateAdoptItem(\n                    //     component,\n                    //     blueprint,\n                    //     map,\n                    //     xy.x,\n                    //     xy.y,\n                    //     context\n                    // );\n                    // if (!success) {\n                    //     GW.grid.free(candidates);\n                    //     return false;\n                    // }\n                    // // Generate a horde as necessary.\n                    // success = RUT.Component.generateMonsters(\n                    //     component,\n                    //     blueprint,\n                    //     map,\n                    //     xy.x,\n                    //     xy.y,\n                    //     context\n                    // );\n                    // if (!success) {\n                    //     GW.grid.free(candidates);\n                    //     return false;\n                    // }\n                }\n                // Finished with this instance!\n            }\n        } while (this.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS &&\n            instance <= this.count.lo);\n        //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n        //DEBUG logBuffer(candidates);\n        GW.grid.free(candidates);\n        return instance;\n    }\n}\n","import * as GW from 'gw-utils';\nimport * as BLUE from './blueprint';\nimport { StepFlags } from './buildStep';\nexport class Builder {\n    constructor(site, depth) {\n        this.site = site;\n        this.depth = depth;\n        this.spawnedItems = [];\n        this.spawnedHordes = [];\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.interior = GW.grid.alloc(site.width, site.height);\n        this.occupied = GW.grid.alloc(site.width, site.height);\n        this.viewMap = GW.grid.alloc(site.width, site.height);\n        this.distanceMap = GW.grid.alloc(site.width, site.height);\n    }\n    free() {\n        GW.grid.free(this.interior);\n        GW.grid.free(this.occupied);\n        GW.grid.free(this.viewMap);\n        GW.grid.free(this.distanceMap);\n    }\n    buildRandom(requiredMachineFlags = BLUE.Flags.BP_ROOM) {\n        let tries = 10;\n        while (tries--) {\n            const blueprint = BLUE.random(requiredMachineFlags, this.depth);\n            if (!blueprint) {\n                continue;\n            }\n            if (this.buildBlueprint(blueprint)) {\n                return true;\n            }\n        }\n        console.log('Failed to find blueprint matching flags: ' +\n            GW.flag.toString(BLUE.Flags, requiredMachineFlags));\n        return false;\n    }\n    buildBlueprint(blueprint) {\n        let tries = 10;\n        while (tries--) {\n            const loc = blueprint.pickLocation(this.site);\n            if (!loc) {\n                continue;\n            }\n            if (this.build(blueprint, loc[0], loc[1])) {\n                return true;\n            }\n        }\n        console.log('Failed to build blueprint.');\n        return false;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    build(blueprint, originX, originY) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        if (!blueprint.computeInterior(this)) {\n            return false;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const levelBackup = this.site.backup();\n        this.machineNumber = this.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        blueprint.prepareInteriorWithMachineFlags(this);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        blueprint.calcDistances(this);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = blueprint.pickComponents();\n        // Keep track of all monsters and items that we spawn -- if we abort, we have to go back and delete them all.\n        // let itemCount = 0, monsterCount = 0;\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            const count = component.build(this, blueprint);\n            if (count < component.count.lo &&\n                !(component.flags & StepFlags.BF_REPEAT_UNTIL_NO_PROGRESS)) {\n                // failure! abort!\n                console.log('Failed to place blueprint because of feature; needed more instances.');\n                // Restore the map to how it was before we touched it.\n                this.site.restore(levelBackup);\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return false;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (blueprint.noInteriorFlag) {\n            blueprint.clearInteriorFlag(this);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return true;\n    }\n}\n"],"names":["_a","_b","NOTHING","GW.tile","get","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","GridSite","width","height","this","tiles","GW.grid","alloc","free","x","y","hasXY","isBoundaryXY","isFloor","isDoor","isBridge","isStairs","isShallow","v","isNothing","isWall","isDeep","blocksPathing","tile","Tile","obj","Error","Hall","loc","dir","length","doors","d","GW.utils","DIRS","UP","DOWN","x2","y2","dx","dy","forEach","Room","Bounds","super","hall","cx","Math","floor","cy","translate","directionOfDoorSite","site","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","w","isDiggable","isSet","push","doorSites","GW.random","item","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","getTileIndex","setTile","fillCostGrid","costGrid","update","_v","isPassable","GW.path","OBSTRUCTION","siteDisruptedBy","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","lakeX","lakeY","first","floodFill","siteDisruptedSize","nextId","minSize","disrupted","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","GW.range","make","RoomDigger","options","_setOptions","result","carve","every","UTILS.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","bind","weighted","id","room","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","GW.blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","Cross","SymmetricalCross","minorWidth","minorHeight","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","count","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickLength","lengths","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.Hall","lower","higher","actual","startX","startY","halls","opts","clamp","Number","parseInt","_pickWidth","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","dirIndex","CLOCK_DIRS","findIndex","r","LoopDigger","endX","endY","isValidTunnelStart","isValidTunnelEnd","UTILS.fillCostGrid","map","SITE.DOOR","Level","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","seed","setOptions","SITE.GridSite","setFn","makeSite","addFirstRoom","fails","addRoom","addLoops","addLakes","addBridges","addStairs","finish","t","_site","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","roomSite","getDigger","_attachRoomAtLoc","HALL.dig","_attachRoom","UTILS.directionOfDoorSite","oppDir","_roomFitsAt","UTILS.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksMove","blocksDiagonal","boundaryTile","SITE.WALL","levels","seeds","stairLocs","initSeeds","initStairLocs","number","stairDistance","cb","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","level","LEVEL.Level","equalsXY","Flags","GW.map","flags","Cell","MapSite","Map","machineCount","machineId","NumGrid","cellInfo","hasItem","hasTile","cell","isEmpty","hasTileFlag","T_BRIDGE","T_IS_DOOR","hasObjectFlag","GW.gameObject","GameObject","L_SECRETLY_PASSABLE","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","highestPriorityTile","backup","copy","chokeCount","hasActor","analyze","isRoom","clearCellFlag","IS_IN_MACHINE","setCellFlag","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","Fl","GW.flag","fl","Blueprint","tags","size","steps","split","trim","frequency","GW.frequency","parts","from","cfg","STEP.BuildStep","want","includes","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_ADOPT_ITEM","treatAsBlocking","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","requiredFlags","depth","randSite","hasCellFlag","IS_GATE_SITE","console","log","pos","builder","tryAgain","failsafe","interior","fill","addTileToInteriorAndIterate","computeInteriorForVestibuleMachine","error","DIG_UTILS.computeDistanceMap","qualifyingTileCount","totalFreq","n","isOccupied","DIG_UTILS.siteDisruptedBy","DIG_UTILS.siteDisruptedSize","goodSoFar","startChokeCount","getChokeCount","distMap","cells","expandMachineInterior","DIG_SITE.FLOOR","eachNeighbor","DIG_SITE.WALL","machineNumber","setMachine","isSecretDoor","DIG_SITE.DOOR","minimumInteriorNeighbors","madeChange","nbcount","distances","dist","distance25","distance75","alternativeFlags","STEP.StepFlags","BF_ALTERNATIVE","BF_ALTERNATIVE_2","keepFeature","randIndex","filter","_f","IS_WIRED","IS_CIRCUIT_BREAKER","blueprints","random","matches","values","b","qualifies","blueprint","StepFlags","BuildStep","pad","horde","effect","GW.effect","distanceBound","BF_NOT_IN_HALLWAY","arcCount","BF_NOT_ON_LEVEL_PERIMETER","BF_BUILD_AT_ORIGIN","occupied","BF_IN_VIEW_OF_ORIGIN","BF_IN_PASSABLE_VIEW_OF_ORIGIN","viewMap","distance","BF_BUILD_IN_WALLS","cellMachine","getMachine","ok","BF_BUILD_ANYWHERE_ON_LEVEL","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","candidates","personalSpace","generateEverywhere","BF_EVERYWHERE","buildAtOrigin","BF_NEAR_ORIGIN","BF_FAR_FROM_ORIGIN","GW.fov","FOV","isBlocked","calculate","blocksVision","cellIsCandidate","instanceCount","instance","updateViewMap","markCandidates","lo","warn","DFSucceeded","terrainSucceeded","fireSync","BF_PERMIT_BLOCKING","tileBlocksMove","BF_TREAT_AS_BLOCKING","blockingMap","makePersonalSpace","BF_IMPREGNABLE","BF_REPEAT_UNTIL_NO_PROGRESS","spawnedItems","spawnedHordes","requiredMachineFlags","BLUE.Flags","BLUE.random","buildBlueprint","toString","pickLocation","build","computeInterior","levelBackup","nextMachineId","prepareInteriorWithMachineFlags","calcDistances","components","pickComponents","component","restore","clearInteriorFlag"],"mappings":"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"}